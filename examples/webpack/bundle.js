/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	__webpack_require__(1);
	__webpack_require__(3);
	var core_1 = __webpack_require__(4);
	var http_1 = __webpack_require__(22);
	var platform_browser_1 = __webpack_require__(23);
	var platform_browser_dynamic_1 = __webpack_require__(25);
	var simpleChartExample_1 = __webpack_require__(27);
	var chartEventsExample_1 = __webpack_require__(29);
	var stockChartExample_1 = __webpack_require__(30);
	var dynamicChartExample_1 = __webpack_require__(31);
	var comboMultiAxesExample_1 = __webpack_require__(32);
	var highchartsModuleExample_1 = __webpack_require__(34);
	var index_1 = __webpack_require__(35);
	var App = (function () {
	    function App() {
	    }
	    App = __decorate([
	        core_1.Component({
	            selector: 'app',
	            template: "\n        <h2>angular2-highcharts examples</h2>\n        <simple-chart-example></simple-chart-example>\n        <chart-events-example></chart-events-example>\n        <stock-chart-example></stock-chart-example>\n        <dynamic-chart-example></dynamic-chart-example>\n        <combo-multi-axes-example></combo-multi-axes-example>\n        <highcharts-module-example></highcharts-module-example>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], App);
	    return App;
	}());
	var ExamplesAppModule = (function () {
	    function ExamplesAppModule() {
	    }
	    ExamplesAppModule = __decorate([
	        core_1.NgModule({
	            imports: [
	                platform_browser_1.BrowserModule,
	                http_1.JsonpModule,
	                index_1.ChartModule.forRoot(__webpack_require__(28), __webpack_require__(47))
	            ],
	            declarations: [
	                App,
	                simpleChartExample_1.SimpleChartExample,
	                chartEventsExample_1.ChartEventsExample,
	                stockChartExample_1.StockChartExample,
	                dynamicChartExample_1.DynamicChartExample,
	                comboMultiAxesExample_1.ComboMultiAxesExample,
	                highchartsModuleExample_1.HighchartsModuleExample
	            ],
	            bootstrap: [App]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], ExamplesAppModule);
	    return ExamplesAppModule;
	}());
	platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(ExamplesAppModule);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	* @license
	* Copyright Google Inc. All Rights Reserved.
	*
	* Use of this source code is governed by an MIT-style license that can be
	* found in the LICENSE file at https://angular.io/license
	*/
	(function (global, factory) {
	     true ? factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (factory());
	}(this, (function () { 'use strict';

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */


	var Zone$1 = (function (global) {
	    if (global['Zone']) {
	        throw new Error('Zone already loaded.');
	    }
	    var Zone = (function () {
	        function Zone(parent, zoneSpec) {
	            this._properties = null;
	            this._parent = parent;
	            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
	            this._properties = zoneSpec && zoneSpec.properties || {};
	            this._zoneDelegate =
	                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
	        }
	        Zone.assertZonePatched = function () {
	            if (global.Promise !== ZoneAwarePromise) {
	                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +
	                    'has been overwritten.\n' +
	                    'Most likely cause is that a Promise polyfill has been loaded ' +
	                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +
	                    'If you must load one, do so before loading zone.js.)');
	            }
	        };
	        Object.defineProperty(Zone, "current", {
	            get: function () {
	                return _currentZoneFrame.zone;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone, "currentTask", {
	            get: function () {
	                return _currentTask;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "parent", {
	            get: function () {
	                return this._parent;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "name", {
	            get: function () {
	                return this._name;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Zone.prototype.get = function (key) {
	            var zone = this.getZoneWith(key);
	            if (zone)
	                return zone._properties[key];
	        };
	        Zone.prototype.getZoneWith = function (key) {
	            var current = this;
	            while (current) {
	                if (current._properties.hasOwnProperty(key)) {
	                    return current;
	                }
	                current = current._parent;
	            }
	            return null;
	        };
	        Zone.prototype.fork = function (zoneSpec) {
	            if (!zoneSpec)
	                throw new Error('ZoneSpec required!');
	            return this._zoneDelegate.fork(this, zoneSpec);
	        };
	        Zone.prototype.wrap = function (callback, source) {
	            if (typeof callback !== 'function') {
	                throw new Error('Expecting function got: ' + callback);
	            }
	            var _callback = this._zoneDelegate.intercept(this, callback, source);
	            var zone = this;
	            return function () {
	                return zone.runGuarded(_callback, this, arguments, source);
	            };
	        };
	        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	            }
	            finally {
	                _currentZoneFrame = _currentZoneFrame.parent;
	            }
	        };
	        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                try {
	                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZoneFrame = _currentZoneFrame.parent;
	            }
	        };
	        Zone.prototype.runTask = function (task, applyThis, applyArgs) {
	            task.runCount++;
	            if (task.zone != this)
	                throw new Error('A task can only be run in the zone which created it! (Creation: ' + task.zone.name +
	                    '; Execution: ' + this.name + ')');
	            var previousTask = _currentTask;
	            _currentTask = task;
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                if (task.type == 'macroTask' && task.data && !task.data.isPeriodic) {
	                    task.cancelFn = null;
	                }
	                try {
	                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZoneFrame = _currentZoneFrame.parent;
	                _currentTask = previousTask;
	            }
	        };
	        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('microTask', this, source, callback, data, customSchedule, null));
	        };
	        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('macroTask', this, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('eventTask', this, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.cancelTask = function (task) {
	            var value = this._zoneDelegate.cancelTask(this, task);
	            task.runCount = -1;
	            task.cancelFn = null;
	            return value;
	        };
	        return Zone;
	    }());
	    Zone.__symbol__ = __symbol__;
	    
	    var ZoneDelegate = (function () {
	        function ZoneDelegate(zone, parentDelegate, zoneSpec) {
	            this._taskCounts = { microTask: 0, macroTask: 0, eventTask: 0 };
	            this.zone = zone;
	            this._parentDelegate = parentDelegate;
	            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
	            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
	            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);
	            this._interceptZS =
	                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
	            this._interceptDlgt =
	                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
	            this._interceptCurrZone =
	                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);
	            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
	            this._invokeDlgt =
	                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
	            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);
	            this._handleErrorZS =
	                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
	            this._handleErrorDlgt =
	                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
	            this._handleErrorCurrZone =
	                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);
	            this._scheduleTaskZS =
	                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
	            this._scheduleTaskDlgt =
	                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
	            this._scheduleTaskCurrZone =
	                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);
	            this._invokeTaskZS =
	                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
	            this._invokeTaskDlgt =
	                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
	            this._invokeTaskCurrZone =
	                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);
	            this._cancelTaskZS =
	                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
	            this._cancelTaskDlgt =
	                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
	            this._cancelTaskCurrZone =
	                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);
	            this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);
	            this._hasTaskDlgt =
	                zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);
	            this._hasTaskCurrZone = zoneSpec && (zoneSpec.onHasTask ? this.zone : parentDelegate.zone);
	        }
	        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
	            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :
	                new Zone(targetZone, zoneSpec);
	        };
	        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
	            return this._interceptZS ?
	                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :
	                callback;
	        };
	        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
	            return this._invokeZS ?
	                this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :
	                callback.apply(applyThis, applyArgs);
	        };
	        ZoneDelegate.prototype.handleError = function (targetZone, error) {
	            return this._handleErrorZS ?
	                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :
	                true;
	        };
	        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
	            try {
	                if (this._scheduleTaskZS) {
	                    return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);
	                }
	                else if (task.scheduleFn) {
	                    task.scheduleFn(task);
	                }
	                else if (task.type == 'microTask') {
	                    scheduleMicroTask(task);
	                }
	                else {
	                    throw new Error('Task is missing scheduleFn.');
	                }
	                return task;
	            }
	            finally {
	                if (targetZone == this.zone) {
	                    this._updateTaskCount(task.type, 1);
	                }
	            }
	        };
	        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
	            try {
	                return this._invokeTaskZS ?
	                    this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :
	                    task.callback.apply(applyThis, applyArgs);
	            }
	            finally {
	                if (targetZone == this.zone && (task.type != 'eventTask') &&
	                    !(task.data && task.data.isPeriodic)) {
	                    this._updateTaskCount(task.type, -1);
	                }
	            }
	        };
	        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
	            var value;
	            if (this._cancelTaskZS) {
	                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
	            }
	            else if (!task.cancelFn) {
	                throw new Error('Task does not support cancellation, or is already canceled.');
	            }
	            else {
	                value = task.cancelFn(task);
	            }
	            if (targetZone == this.zone) {
	                // this should not be in the finally block, because exceptions assume not canceled.
	                this._updateTaskCount(task.type, -1);
	            }
	            return value;
	        };
	        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
	            return this._hasTaskZS &&
	                this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
	        };
	        ZoneDelegate.prototype._updateTaskCount = function (type, count) {
	            var counts = this._taskCounts;
	            var prev = counts[type];
	            var next = counts[type] = prev + count;
	            if (next < 0) {
	                throw new Error('More tasks executed then were scheduled.');
	            }
	            if (prev == 0 || next == 0) {
	                var isEmpty = {
	                    microTask: counts.microTask > 0,
	                    macroTask: counts.macroTask > 0,
	                    eventTask: counts.eventTask > 0,
	                    change: type
	                };
	                try {
	                    this.hasTask(this.zone, isEmpty);
	                }
	                finally {
	                    if (this._parentDelegate) {
	                        this._parentDelegate._updateTaskCount(type, count);
	                    }
	                }
	            }
	        };
	        return ZoneDelegate;
	    }());
	    var ZoneTask = (function () {
	        function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {
	            this.runCount = 0;
	            this.type = type;
	            this.zone = zone;
	            this.source = source;
	            this.data = options;
	            this.scheduleFn = scheduleFn;
	            this.cancelFn = cancelFn;
	            this.callback = callback;
	            var self = this;
	            this.invoke = function () {
	                _numberOfNestedTaskFrames++;
	                try {
	                    return zone.runTask(self, this, arguments);
	                }
	                finally {
	                    if (_numberOfNestedTaskFrames == 1) {
	                        drainMicroTaskQueue();
	                    }
	                    _numberOfNestedTaskFrames--;
	                }
	            };
	        }
	        ZoneTask.prototype.toString = function () {
	            if (this.data && typeof this.data.handleId !== 'undefined') {
	                return this.data.handleId;
	            }
	            else {
	                return Object.prototype.toString.call(this);
	            }
	        };
	        // add toJSON method to prevent cyclic error when
	        // call JSON.stringify(zoneTask)
	        ZoneTask.prototype.toJSON = function () {
	            return {
	                type: this.type,
	                source: this.source,
	                data: this.data,
	                zone: this.zone.name,
	                invoke: this.invoke,
	                scheduleFn: this.scheduleFn,
	                cancelFn: this.cancelFn,
	                runCount: this.runCount,
	                callback: this.callback
	            };
	        };
	        return ZoneTask;
	    }());
	    var ZoneFrame = (function () {
	        function ZoneFrame(parent, zone) {
	            this.parent = parent;
	            this.zone = zone;
	        }
	        return ZoneFrame;
	    }());
	    function __symbol__(name) {
	        return '__zone_symbol__' + name;
	    }
	    
	    var symbolSetTimeout = __symbol__('setTimeout');
	    var symbolPromise = __symbol__('Promise');
	    var symbolThen = __symbol__('then');
	    var _currentZoneFrame = new ZoneFrame(null, new Zone(null, null));
	    var _currentTask = null;
	    var _microTaskQueue = [];
	    var _isDrainingMicrotaskQueue = false;
	    var _uncaughtPromiseErrors = [];
	    var _numberOfNestedTaskFrames = 0;
	    function scheduleQueueDrain() {
	        // if we are not running in any task, and there has not been anything scheduled
	        // we must bootstrap the initial task creation by manually scheduling the drain
	        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
	            // We are not running in Task, so we need to kickstart the microtask queue.
	            if (global[symbolPromise]) {
	                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
	            }
	            else {
	                global[symbolSetTimeout](drainMicroTaskQueue, 0);
	            }
	        }
	    }
	    function scheduleMicroTask(task) {
	        scheduleQueueDrain();
	        _microTaskQueue.push(task);
	    }
	    function consoleError(e) {
	        var rejection = e && e.rejection;
	        if (rejection) {
	            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
	        }
	        console.error(e);
	    }
	    function drainMicroTaskQueue() {
	        if (!_isDrainingMicrotaskQueue) {
	            _isDrainingMicrotaskQueue = true;
	            while (_microTaskQueue.length) {
	                var queue = _microTaskQueue;
	                _microTaskQueue = [];
	                for (var i = 0; i < queue.length; i++) {
	                    var task = queue[i];
	                    try {
	                        task.zone.runTask(task, null, null);
	                    }
	                    catch (e) {
	                        consoleError(e);
	                    }
	                }
	            }
	            while (_uncaughtPromiseErrors.length) {
	                var _loop_1 = function () {
	                    var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
	                    try {
	                        uncaughtPromiseError.zone.runGuarded(function () {
	                            throw uncaughtPromiseError;
	                        });
	                    }
	                    catch (e) {
	                        consoleError(e);
	                    }
	                };
	                while (_uncaughtPromiseErrors.length) {
	                    _loop_1();
	                }
	            }
	            _isDrainingMicrotaskQueue = false;
	        }
	    }
	    function isThenable(value) {
	        return value && value.then;
	    }
	    function forwardResolution(value) {
	        return value;
	    }
	    function forwardRejection(rejection) {
	        return ZoneAwarePromise.reject(rejection);
	    }
	    var symbolState = __symbol__('state');
	    var symbolValue = __symbol__('value');
	    var source = 'Promise.then';
	    var UNRESOLVED = null;
	    var RESOLVED = true;
	    var REJECTED = false;
	    var REJECTED_NO_CATCH = 0;
	    function makeResolver(promise, state) {
	        return function (v) {
	            resolvePromise(promise, state, v);
	            // Do not return value or you will break the Promise spec.
	        };
	    }
	    function resolvePromise(promise, state, value) {
	        if (promise[symbolState] === UNRESOLVED) {
	            if (value instanceof ZoneAwarePromise && value.hasOwnProperty(symbolState) &&
	                value.hasOwnProperty(symbolValue) && value[symbolState] !== UNRESOLVED) {
	                clearRejectedNoCatch(value);
	                resolvePromise(promise, value[symbolState], value[symbolValue]);
	            }
	            else if (isThenable(value)) {
	                value.then(makeResolver(promise, state), makeResolver(promise, false));
	            }
	            else {
	                promise[symbolState] = state;
	                var queue = promise[symbolValue];
	                promise[symbolValue] = value;
	                for (var i = 0; i < queue.length;) {
	                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
	                }
	                if (queue.length == 0 && state == REJECTED) {
	                    promise[symbolState] = REJECTED_NO_CATCH;
	                    try {
	                        throw new Error('Uncaught (in promise): ' + value +
	                            (value && value.stack ? '\n' + value.stack : ''));
	                    }
	                    catch (e) {
	                        var error_1 = e;
	                        error_1.rejection = value;
	                        error_1.promise = promise;
	                        error_1.zone = Zone.current;
	                        error_1.task = Zone.currentTask;
	                        _uncaughtPromiseErrors.push(error_1);
	                        scheduleQueueDrain();
	                    }
	                }
	            }
	        }
	        // Resolving an already resolved promise is a noop.
	        return promise;
	    }
	    function clearRejectedNoCatch(promise) {
	        if (promise[symbolState] === REJECTED_NO_CATCH) {
	            promise[symbolState] = REJECTED;
	            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
	                if (promise === _uncaughtPromiseErrors[i].promise) {
	                    _uncaughtPromiseErrors.splice(i, 1);
	                    break;
	                }
	            }
	        }
	    }
	    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
	        clearRejectedNoCatch(promise);
	        var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;
	        zone.scheduleMicroTask(source, function () {
	            try {
	                resolvePromise(chainPromise, true, zone.run(delegate, null, [promise[symbolValue]]));
	            }
	            catch (error) {
	                resolvePromise(chainPromise, false, error);
	            }
	        });
	    }
	    var ZoneAwarePromise = (function () {
	        function ZoneAwarePromise(executor) {
	            var promise = this;
	            if (!(promise instanceof ZoneAwarePromise)) {
	                throw new Error('Must be an instanceof Promise.');
	            }
	            promise[symbolState] = UNRESOLVED;
	            promise[symbolValue] = []; // queue;
	            try {
	                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
	            }
	            catch (e) {
	                resolvePromise(promise, false, e);
	            }
	        }
	        ZoneAwarePromise.toString = function () {
	            return 'function ZoneAwarePromise() { [native code] }';
	        };
	        ZoneAwarePromise.resolve = function (value) {
	            return resolvePromise(new this(null), RESOLVED, value);
	        };
	        ZoneAwarePromise.reject = function (error) {
	            return resolvePromise(new this(null), REJECTED, error);
	        };
	        ZoneAwarePromise.race = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                _a = [res, rej], resolve = _a[0], reject = _a[1];
	                var _a;
	            });
	            function onResolve(value) {
	                promise && (promise = null || resolve(value));
	            }
	            function onReject(error) {
	                promise && (promise = null || reject(error));
	            }
	            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
	                var value = values_1[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then(onResolve, onReject);
	            }
	            return promise;
	        };
	        ZoneAwarePromise.all = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                resolve = res;
	                reject = rej;
	            });
	            var count = 0;
	            var resolvedValues = [];
	            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
	                var value = values_2[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then((function (index) { return function (value) {
	                    resolvedValues[index] = value;
	                    count--;
	                    if (!count) {
	                        resolve(resolvedValues);
	                    }
	                }; })(count), reject);
	                count++;
	            }
	            if (!count)
	                resolve(resolvedValues);
	            return promise;
	        };
	        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
	            var chainPromise = new this.constructor(null);
	            var zone = Zone.current;
	            if (this[symbolState] == UNRESOLVED) {
	                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
	            }
	            else {
	                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
	            }
	            return chainPromise;
	        };
	        ZoneAwarePromise.prototype.catch = function (onRejected) {
	            return this.then(null, onRejected);
	        };
	        return ZoneAwarePromise;
	    }());
	    // Protect against aggressive optimizers dropping seemingly unused properties.
	    // E.g. Closure Compiler in advanced mode.
	    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
	    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
	    ZoneAwarePromise['race'] = ZoneAwarePromise.race;
	    ZoneAwarePromise['all'] = ZoneAwarePromise.all;
	    var NativePromise = global[__symbol__('Promise')] = global['Promise'];
	    global['Promise'] = ZoneAwarePromise;
	    function patchThen(NativePromise) {
	        var NativePromiseProtototype = NativePromise.prototype;
	        var NativePromiseThen = NativePromiseProtototype[__symbol__('then')] =
	            NativePromiseProtototype.then;
	        NativePromiseProtototype.then = function (onResolve, onReject) {
	            var nativePromise = this;
	            return new ZoneAwarePromise(function (resolve, reject) {
	                NativePromiseThen.call(nativePromise, resolve, reject);
	            })
	                .then(onResolve, onReject);
	        };
	    }
	    if (NativePromise) {
	        patchThen(NativePromise);
	        if (typeof global['fetch'] !== 'undefined') {
	            var fetchPromise = void 0;
	            try {
	                // In MS Edge this throws
	                fetchPromise = global['fetch']();
	            }
	            catch (e) {
	                // In Chrome this throws instead.
	                fetchPromise = global['fetch']('about:blank');
	            }
	            // ignore output to prevent error;
	            fetchPromise.then(function () { return null; }, function () { return null; });
	            if (fetchPromise.constructor != NativePromise &&
	                fetchPromise.constructor != ZoneAwarePromise) {
	                patchThen(fetchPromise.constructor);
	            }
	        }
	    }
	    // This is not part of public API, but it is usefull for tests, so we expose it.
	    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
	    /*
	     * This code patches Error so that:
	     *   - It ignores un-needed stack frames.
	     *   - It Shows the associated Zone for reach frame.
	     */
	    var FrameType;
	    (function (FrameType) {
	        /// Skip this frame when printing out stack
	        FrameType[FrameType["blackList"] = 0] = "blackList";
	        /// This frame marks zone transition
	        FrameType[FrameType["transition"] = 1] = "transition";
	    })(FrameType || (FrameType = {}));
	    var NativeError = global[__symbol__('Error')] = global.Error;
	    // Store the frames which should be removed from the stack frames
	    var blackListedStackFrames = {};
	    // We must find the frame where Error was created, otherwise we assume we don't understand stack
	    var zoneAwareFrame;
	    global.Error = ZoneAwareError;
	    // How should the stack frames be parsed.
	    var frameParserStrategy = null;
	    var stackRewrite = 'stackRewrite';
	    // fix #595, create property descriptor
	    // for error properties
	    var createProperty = function (props, key) {
	        // if property is already defined, skip it.
	        if (props[key]) {
	            return;
	        }
	        // define a local property
	        // in case error property is not settable
	        var name = __symbol__(key);
	        props[key] = {
	            configurable: true,
	            enumerable: true,
	            get: function () {
	                // if local property has no value
	                // use internal error's property value
	                if (!this[name]) {
	                    var error_2 = this[__symbol__('error')];
	                    if (error_2) {
	                        this[name] = error_2[key];
	                    }
	                }
	                return this[name];
	            },
	            set: function (value) {
	                // setter will set value to local property value
	                this[name] = value;
	            }
	        };
	    };
	    // fix #595, create property descriptor
	    // for error method properties
	    var createMethodProperty = function (props, key) {
	        if (props[key]) {
	            return;
	        }
	        props[key] = {
	            configurable: true,
	            enumerable: true,
	            writable: true,
	            value: function () {
	                var error = this[__symbol__('error')];
	                var errorMethod = (error && error[key]) || this[key];
	                if (errorMethod) {
	                    return errorMethod.apply(error, arguments);
	                }
	            }
	        };
	    };
	    var createErrorProperties = function () {
	        var props = Object.create(null);
	        var error = new NativeError();
	        var keys = Object.getOwnPropertyNames(error);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            // Avoid bugs when hasOwnProperty is shadowed
	            if (Object.prototype.hasOwnProperty.call(error, key)) {
	                createProperty(props, key);
	            }
	        }
	        var proto = NativeError.prototype;
	        if (proto) {
	            var pKeys = Object.getOwnPropertyNames(proto);
	            for (var i = 0; i < pKeys.length; i++) {
	                var key = pKeys[i];
	                // skip constructor
	                if (key !== 'constructor' && key !== 'toString' && key !== 'toSource') {
	                    createProperty(props, key);
	                }
	            }
	        }
	        // some other properties are not
	        // in NativeError
	        createProperty(props, 'originalStack');
	        createProperty(props, 'zoneAwareStack');
	        // define toString, toSource as method property
	        createMethodProperty(props, 'toString');
	        createMethodProperty(props, 'toSource');
	        return props;
	    };
	    var errorProperties = createErrorProperties();
	    // for derived Error class which extends ZoneAwareError
	    // we should not override the derived class's property
	    // so we create a new props object only copy the properties
	    // from errorProperties which not exist in derived Error's prototype
	    var getErrorPropertiesForPrototype = function (prototype) {
	        // if the prototype is ZoneAwareError.prototype
	        // we just return the prebuilt errorProperties.
	        if (prototype === ZoneAwareError.prototype) {
	            return errorProperties;
	        }
	        var newProps = Object.create(null);
	        var cKeys = Object.getOwnPropertyNames(errorProperties);
	        var keys = Object.getOwnPropertyNames(prototype);
	        cKeys.forEach(function (cKey) {
	            if (keys.filter(function (key) {
	                return key === cKey;
	            })
	                .length === 0) {
	                newProps[cKey] = errorProperties[cKey];
	            }
	        });
	        return newProps;
	    };
	    /**
	     * This is ZoneAwareError which processes the stack frame and cleans up extra frames as well as
	     * adds zone information to it.
	     */
	    function ZoneAwareError() {
	        // make sure we have a valid this
	        // if this is undefined(call Error without new) or this is global
	        // or this is some other objects, we should force to create a
	        // valid ZoneAwareError by call Object.create()
	        if (!(this instanceof ZoneAwareError)) {
	            return ZoneAwareError.apply(Object.create(ZoneAwareError.prototype), arguments);
	        }
	        // Create an Error.
	        var error = NativeError.apply(this, arguments);
	        this[__symbol__('error')] = error;
	        // Save original stack trace
	        error.originalStack = error.stack;
	        // Process the stack trace and rewrite the frames.
	        if (ZoneAwareError[stackRewrite] && error.originalStack) {
	            var frames_1 = error.originalStack.split('\n');
	            var zoneFrame = _currentZoneFrame;
	            var i = 0;
	            // Find the first frame
	            while (frames_1[i] !== zoneAwareFrame && i < frames_1.length) {
	                i++;
	            }
	            for (; i < frames_1.length && zoneFrame; i++) {
	                var frame = frames_1[i];
	                if (frame.trim()) {
	                    var frameType = blackListedStackFrames.hasOwnProperty(frame) && blackListedStackFrames[frame];
	                    if (frameType === FrameType.blackList) {
	                        frames_1.splice(i, 1);
	                        i--;
	                    }
	                    else if (frameType === FrameType.transition) {
	                        if (zoneFrame.parent) {
	                            // This is the special frame where zone changed. Print and process it accordingly
	                            frames_1[i] += " [" + zoneFrame.parent.zone.name + " => " + zoneFrame.zone.name + "]";
	                            zoneFrame = zoneFrame.parent;
	                        }
	                        else {
	                            zoneFrame = null;
	                        }
	                    }
	                    else {
	                        frames_1[i] += " [" + zoneFrame.zone.name + "]";
	                    }
	                }
	            }
	            error.stack = error.zoneAwareStack = frames_1.join('\n');
	        }
	        // use defineProperties here instead of copy property value
	        // because of issue #595 which will break angular2.
	        Object.defineProperties(this, getErrorPropertiesForPrototype(Object.getPrototypeOf(this)));
	        return this;
	    }
	    // Copy the prototype so that instanceof operator works as expected
	    ZoneAwareError.prototype = NativeError.prototype;
	    ZoneAwareError[Zone.__symbol__('blacklistedStackFrames')] = blackListedStackFrames;
	    ZoneAwareError[stackRewrite] = false;
	    if (NativeError.hasOwnProperty('stackTraceLimit')) {
	        // Extend default stack limit as we will be removing few frames.
	        NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);
	        // make sure that ZoneAwareError has the same property which forwards to NativeError.
	        Object.defineProperty(ZoneAwareError, 'stackTraceLimit', {
	            get: function () {
	                return NativeError.stackTraceLimit;
	            },
	            set: function (value) {
	                return NativeError.stackTraceLimit = value;
	            }
	        });
	    }
	    if (NativeError.hasOwnProperty('captureStackTrace')) {
	        Object.defineProperty(ZoneAwareError, 'captureStackTrace', {
	            // add named function here because we need to remove this
	            // stack frame when prepareStackTrace below
	            value: function zoneCaptureStackTrace(targetObject, constructorOpt) {
	                NativeError.captureStackTrace(targetObject, constructorOpt);
	            }
	        });
	    }
	    Object.defineProperty(ZoneAwareError, 'prepareStackTrace', {
	        get: function () {
	            return NativeError.prepareStackTrace;
	        },
	        set: function (value) {
	            if (!value || typeof value !== 'function') {
	                return NativeError.prepareStackTrace = value;
	            }
	            return NativeError.prepareStackTrace = function (error, structuredStackTrace) {
	                // remove additional stack information from ZoneAwareError.captureStackTrace
	                if (structuredStackTrace) {
	                    for (var i = 0; i < structuredStackTrace.length; i++) {
	                        var st = structuredStackTrace[i];
	                        // remove the first function which name is zoneCaptureStackTrace
	                        if (st.getFunctionName() === 'zoneCaptureStackTrace') {
	                            structuredStackTrace.splice(i, 1);
	                            break;
	                        }
	                    }
	                }
	                return value.apply(this, [error, structuredStackTrace]);
	            };
	        }
	    });
	    // Now we need to populet the `blacklistedStackFrames` as well as find the
	    // run/runGuraded/runTask frames. This is done by creating a detect zone and then threading
	    // the execution through all of the above methods so that we can look at the stack trace and
	    // find the frames of interest.
	    var detectZone = Zone.current.fork({
	        name: 'detect',
	        onInvoke: function (parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {
	            // Here only so that it will show up in the stack frame so that it can be black listed.
	            return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);
	        },
	        onHandleError: function (parentZD, current, target, error) {
	            if (error.originalStack && Error === ZoneAwareError) {
	                var frames_2 = error.originalStack.split(/\n/);
	                var runFrame = false, runGuardedFrame = false, runTaskFrame = false;
	                while (frames_2.length) {
	                    var frame = frames_2.shift();
	                    // On safari it is possible to have stack frame with no line number.
	                    // This check makes sure that we don't filter frames on name only (must have
	                    // linenumber)
	                    if (/:\d+:\d+/.test(frame)) {
	                        // Get rid of the path so that we don't accidintely find function name in path.
	                        // In chrome the seperator is `(` and `@` in FF and safari
	                        // Chrome: at Zone.run (zone.js:100)
	                        // Chrome: at Zone.run (http://localhost:9876/base/build/lib/zone.js:100:24)
	                        // FireFox: Zone.prototype.run@http://localhost:9876/base/build/lib/zone.js:101:24
	                        // Safari: run@http://localhost:9876/base/build/lib/zone.js:101:24
	                        var fnName = frame.split('(')[0].split('@')[0];
	                        var frameType = FrameType.transition;
	                        if (fnName.indexOf('ZoneAwareError') !== -1) {
	                            zoneAwareFrame = frame;
	                        }
	                        if (fnName.indexOf('runGuarded') !== -1) {
	                            runGuardedFrame = true;
	                        }
	                        else if (fnName.indexOf('runTask') !== -1) {
	                            runTaskFrame = true;
	                        }
	                        else if (fnName.indexOf('run') !== -1) {
	                            runFrame = true;
	                        }
	                        else {
	                            frameType = FrameType.blackList;
	                        }
	                        blackListedStackFrames[frame] = frameType;
	                        // Once we find all of the frames we can stop looking.
	                        if (runFrame && runGuardedFrame && runTaskFrame) {
	                            ZoneAwareError[stackRewrite] = true;
	                            break;
	                        }
	                    }
	                }
	            }
	            return false;
	        }
	    });
	    // carefully constructor a stack frame which contains all of the frames of interest which
	    // need to be detected and blacklisted.
	    var detectRunFn = function () {
	        detectZone.run(function () {
	            detectZone.runGuarded(function () {
	                throw new Error('blacklistStackFrames');
	            });
	        });
	    };
	    // Cause the error to extract the stack frames.
	    detectZone.runTask(detectZone.scheduleMacroTask('detect', detectRunFn, null, function () { return null; }, null));
	    return global['Zone'] = Zone;
	})(typeof window === 'object' && window || typeof self === 'object' && self || global);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Suppress closure compiler errors about unknown 'Zone' variable
	 * @fileoverview
	 * @suppress {undefinedVars}
	 */
	var zoneSymbol = function (n) { return "__zone_symbol__" + n; };
	var _global$1 = typeof window === 'object' && window || typeof self === 'object' && self || global;
	function bindArguments(args, source) {
	    for (var i = args.length - 1; i >= 0; i--) {
	        if (typeof args[i] === 'function') {
	            args[i] = Zone.current.wrap(args[i], source + '_' + i);
	        }
	    }
	    return args;
	}
	function patchPrototype(prototype, fnNames) {
	    var source = prototype.constructor['name'];
	    var _loop_1 = function (i) {
	        var name_1 = fnNames[i];
	        var delegate = prototype[name_1];
	        if (delegate) {
	            prototype[name_1] = (function (delegate) {
	                return function () {
	                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));
	                };
	            })(delegate);
	        }
	    };
	    for (var i = 0; i < fnNames.length; i++) {
	        _loop_1(i);
	    }
	}
	var isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);
	var isNode = (!('nw' in _global$1) && typeof process !== 'undefined' &&
	    {}.toString.call(process) === '[object process]');
	var isBrowser = !isNode && !isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);
	function patchProperty(obj, prop) {
	    var desc = Object.getOwnPropertyDescriptor(obj, prop) || { enumerable: true, configurable: true };
	    var originalDesc = Object.getOwnPropertyDescriptor(obj, 'original' + prop);
	    if (!originalDesc && desc.get) {
	        Object.defineProperty(obj, 'original' + prop, { enumerable: false, configurable: true, get: desc.get });
	    }
	    // A property descriptor cannot have getter/setter and be writable
	    // deleting the writable and value properties avoids this error:
	    //
	    // TypeError: property descriptors must not specify a value or be writable when a
	    // getter or setter has been specified
	    delete desc.writable;
	    delete desc.value;
	    // substr(2) cuz 'onclick' -> 'click', etc
	    var eventName = prop.substr(2);
	    var _prop = '_' + prop;
	    desc.set = function (fn) {
	        if (this[_prop]) {
	            this.removeEventListener(eventName, this[_prop]);
	        }
	        if (typeof fn === 'function') {
	            var wrapFn = function (event) {
	                var result;
	                result = fn.apply(this, arguments);
	                if (result != undefined && !result)
	                    event.preventDefault();
	            };
	            this[_prop] = wrapFn;
	            this.addEventListener(eventName, wrapFn, false);
	        }
	        else {
	            this[_prop] = null;
	        }
	    };
	    // The getter would return undefined for unassigned properties but the default value of an
	    // unassigned property is null
	    desc.get = function () {
	        var r = this[_prop] || null;
	        // result will be null when use inline event attribute,
	        // such as <button onclick="func();">OK</button>
	        // because the onclick function is internal raw uncompiled handler
	        // the onclick will be evaluated when first time event was triggered or
	        // the property is accessed, https://github.com/angular/zone.js/issues/525
	        // so we should use original native get to retrieve the handler
	        if (r === null) {
	            if (originalDesc && originalDesc.get) {
	                r = originalDesc.get.apply(this, arguments);
	                if (r) {
	                    desc.set.apply(this, [r]);
	                    if (typeof this['removeAttribute'] === 'function') {
	                        this.removeAttribute(prop);
	                    }
	                }
	            }
	        }
	        return this[_prop] || null;
	    };
	    Object.defineProperty(obj, prop, desc);
	}

	function patchOnProperties(obj, properties) {
	    var onProperties = [];
	    for (var prop in obj) {
	        if (prop.substr(0, 2) == 'on') {
	            onProperties.push(prop);
	        }
	    }
	    for (var j = 0; j < onProperties.length; j++) {
	        patchProperty(obj, onProperties[j]);
	    }
	    if (properties) {
	        for (var i = 0; i < properties.length; i++) {
	            patchProperty(obj, 'on' + properties[i]);
	        }
	    }
	}

	var EVENT_TASKS = zoneSymbol('eventTasks');
	// For EventTarget
	var ADD_EVENT_LISTENER = 'addEventListener';
	var REMOVE_EVENT_LISTENER = 'removeEventListener';
	function findExistingRegisteredTask(target, handler, name, capture, remove) {
	    var eventTasks = target[EVENT_TASKS];
	    if (eventTasks) {
	        for (var i = 0; i < eventTasks.length; i++) {
	            var eventTask = eventTasks[i];
	            var data = eventTask.data;
	            var listener = data.handler;
	            if ((data.handler === handler || listener.listener === handler) &&
	                data.useCapturing === capture && data.eventName === name) {
	                if (remove) {
	                    eventTasks.splice(i, 1);
	                }
	                return eventTask;
	            }
	        }
	    }
	    return null;
	}
	function findAllExistingRegisteredTasks(target, name, capture, remove) {
	    var eventTasks = target[EVENT_TASKS];
	    if (eventTasks) {
	        var result = [];
	        for (var i = eventTasks.length - 1; i >= 0; i--) {
	            var eventTask = eventTasks[i];
	            var data = eventTask.data;
	            if (data.eventName === name && data.useCapturing === capture) {
	                result.push(eventTask);
	                if (remove) {
	                    eventTasks.splice(i, 1);
	                }
	            }
	        }
	        return result;
	    }
	    return null;
	}
	function attachRegisteredEvent(target, eventTask, isPrepend) {
	    var eventTasks = target[EVENT_TASKS];
	    if (!eventTasks) {
	        eventTasks = target[EVENT_TASKS] = [];
	    }
	    if (isPrepend) {
	        eventTasks.unshift(eventTask);
	    }
	    else {
	        eventTasks.push(eventTask);
	    }
	}
	var defaultListenerMetaCreator = function (self, args) {
	    return {
	        useCapturing: args[2],
	        eventName: args[0],
	        handler: args[1],
	        target: self || _global$1,
	        name: args[0],
	        invokeAddFunc: function (addFnSymbol, delegate) {
	            if (delegate && delegate.invoke) {
	                return this.target[addFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
	            }
	            else {
	                return this.target[addFnSymbol](this.eventName, delegate, this.useCapturing);
	            }
	        },
	        invokeRemoveFunc: function (removeFnSymbol, delegate) {
	            if (delegate && delegate.invoke) {
	                return this.target[removeFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
	            }
	            else {
	                return this.target[removeFnSymbol](this.eventName, delegate, this.useCapturing);
	            }
	        }
	    };
	};
	function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates, isPrepend, metaCreator) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    if (allowDuplicates === void 0) { allowDuplicates = false; }
	    if (isPrepend === void 0) { isPrepend = false; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    var addFnSymbol = zoneSymbol(addFnName);
	    var removeFnSymbol = zoneSymbol(removeFnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    function scheduleEventListener(eventTask) {
	        var meta = eventTask.data;
	        attachRegisteredEvent(meta.target, eventTask, isPrepend);
	        return meta.invokeAddFunc(addFnSymbol, eventTask);
	    }
	    function cancelEventListener(eventTask) {
	        var meta = eventTask.data;
	        findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
	        return meta.invokeRemoveFunc(removeFnSymbol, eventTask);
	    }
	    return function zoneAwareAddListener(self, args) {
	        var data = metaCreator(self, args);
	        data.useCapturing = data.useCapturing || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var delegate = null;
	        if (typeof data.handler == 'function') {
	            delegate = data.handler;
	        }
	        else if (data.handler && data.handler.handleEvent) {
	            delegate = function (event) { return data.handler.handleEvent(event); };
	        }
	        var validZoneHandler = false;
	        try {
	            // In cross site contexts (such as WebDriver frameworks like Selenium),
	            // accessing the handler object here will cause an exception to be thrown which
	            // will fail tests prematurely.
	            validZoneHandler = data.handler && data.handler.toString() === '[object FunctionWrapper]';
	        }
	        catch (e) {
	            // Returning nothing here is fine, because objects in a cross-site context are unusable
	            return;
	        }
	        // Ignore special listeners of IE11 & Edge dev tools, see
	        // https://github.com/angular/zone.js/issues/150
	        if (!delegate || validZoneHandler) {
	            return data.invokeAddFunc(addFnSymbol, data.handler);
	        }
	        if (!allowDuplicates) {
	            var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, false);
	            if (eventTask) {
	                // we already registered, so this will have noop.
	                return data.invokeAddFunc(addFnSymbol, eventTask);
	            }
	        }
	        var zone = Zone.current;
	        var source = data.target.constructor['name'] + '.' + addFnName + ':' + data.eventName;
	        zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
	    };
	}
	function makeZoneAwareRemoveListener(fnName, useCapturingParam, metaCreator) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    var symbol = zoneSymbol(fnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    return function zoneAwareRemoveListener(self, args) {
	        var data = metaCreator(self, args);
	        data.useCapturing = data.useCapturing || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, true);
	        if (eventTask) {
	            eventTask.zone.cancelTask(eventTask);
	        }
	        else {
	            data.invokeRemoveFunc(symbol, data.handler);
	        }
	    };
	}


	var zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);
	var zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);
	function patchEventTargetMethods(obj, addFnName, removeFnName, metaCreator) {
	    if (addFnName === void 0) { addFnName = ADD_EVENT_LISTENER; }
	    if (removeFnName === void 0) { removeFnName = REMOVE_EVENT_LISTENER; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    if (obj && obj[addFnName]) {
	        patchMethod(obj, addFnName, function () { return makeZoneAwareAddListener(addFnName, removeFnName, true, false, false, metaCreator); });
	        patchMethod(obj, removeFnName, function () { return makeZoneAwareRemoveListener(removeFnName, true, metaCreator); });
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	var originalInstanceKey = zoneSymbol('originalInstance');
	// wrap some native API on `window`
	function patchClass(className) {
	    var OriginalClass = _global$1[className];
	    if (!OriginalClass)
	        return;
	    _global$1[className] = function () {
	        var a = bindArguments(arguments, className);
	        switch (a.length) {
	            case 0:
	                this[originalInstanceKey] = new OriginalClass();
	                break;
	            case 1:
	                this[originalInstanceKey] = new OriginalClass(a[0]);
	                break;
	            case 2:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
	                break;
	            case 3:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
	                break;
	            case 4:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
	                break;
	            default:
	                throw new Error('Arg list too long.');
	        }
	    };
	    var instance = new OriginalClass(function () { });
	    var prop;
	    for (prop in instance) {
	        // https://bugs.webkit.org/show_bug.cgi?id=44721
	        if (className === 'XMLHttpRequest' && prop === 'responseBlob')
	            continue;
	        (function (prop) {
	            if (typeof instance[prop] === 'function') {
	                _global$1[className].prototype[prop] = function () {
	                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
	                };
	            }
	            else {
	                Object.defineProperty(_global$1[className].prototype, prop, {
	                    set: function (fn) {
	                        if (typeof fn === 'function') {
	                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);
	                        }
	                        else {
	                            this[originalInstanceKey][prop] = fn;
	                        }
	                    },
	                    get: function () {
	                        return this[originalInstanceKey][prop];
	                    }
	                });
	            }
	        }(prop));
	    }
	    for (prop in OriginalClass) {
	        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
	            _global$1[className][prop] = OriginalClass[prop];
	        }
	    }
	}

	function createNamedFn(name, delegate) {
	    try {
	        return (Function('f', "return function " + name + "(){return f(this, arguments)}"))(delegate);
	    }
	    catch (e) {
	        // if we fail, we must be CSP, just return delegate.
	        return function () {
	            return delegate(this, arguments);
	        };
	    }
	}
	function patchMethod(target, name, patchFn) {
	    var proto = target;
	    while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
	        proto = Object.getPrototypeOf(proto);
	    }
	    if (!proto && target[name]) {
	        // somehow we did not find it, but we can see it. This happens on IE for Window properties.
	        proto = target;
	    }
	    var delegateName = zoneSymbol(name);
	    var delegate;
	    if (proto && !(delegate = proto[delegateName])) {
	        delegate = proto[delegateName] = proto[name];
	        proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
	    }
	    return delegate;
	}
	// TODO: support cancel task later if necessary

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function patchTimer(window, setName, cancelName, nameSuffix) {
	    var setNative = null;
	    var clearNative = null;
	    setName += nameSuffix;
	    cancelName += nameSuffix;
	    var tasksByHandleId = {};
	    function scheduleTask(task) {
	        var data = task.data;
	        data.args[0] = function () {
	            task.invoke.apply(this, arguments);
	            delete tasksByHandleId[data.handleId];
	        };
	        data.handleId = setNative.apply(window, data.args);
	        tasksByHandleId[data.handleId] = task;
	        return task;
	    }
	    function clearTask(task) {
	        delete tasksByHandleId[task.data.handleId];
	        return clearNative(task.data.handleId);
	    }
	    setNative =
	        patchMethod(window, setName, function (delegate) { return function (self, args) {
	            if (typeof args[0] === 'function') {
	                var zone = Zone.current;
	                var options = {
	                    handleId: null,
	                    isPeriodic: nameSuffix === 'Interval',
	                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,
	                    args: args
	                };
	                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
	                if (!task) {
	                    return task;
	                }
	                // Node.js must additionally support the ref and unref functions.
	                var handle = task.data.handleId;
	                if (handle.ref && handle.unref) {
	                    task.ref = handle.ref.bind(handle);
	                    task.unref = handle.unref.bind(handle);
	                }
	                return task;
	            }
	            else {
	                // cause an error by calling it directly.
	                return delegate.apply(window, args);
	            }
	        }; });
	    clearNative =
	        patchMethod(window, cancelName, function (delegate) { return function (self, args) {
	            var task = typeof args[0] === 'number' ? tasksByHandleId[args[0]] : args[0];
	            if (task && typeof task.type === 'string') {
	                if (task.cancelFn && task.data.isPeriodic || task.runCount === 0) {
	                    // Do not cancel already canceled functions
	                    task.zone.cancelTask(task);
	                }
	            }
	            else {
	                // cause an error by calling it directly.
	                delegate.apply(window, args);
	            }
	        }; });
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/*
	 * This is necessary for Chrome and Chrome mobile, to enable
	 * things like redefining `createdCallback` on an element.
	 */
	var _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;
	var _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] =
	    Object.getOwnPropertyDescriptor;
	var _create = Object.create;
	var unconfigurablesKey = zoneSymbol('unconfigurables');
	function propertyPatch() {
	    Object.defineProperty = function (obj, prop, desc) {
	        if (isUnconfigurable(obj, prop)) {
	            throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
	        }
	        var originalConfigurableFlag = desc.configurable;
	        if (prop !== 'prototype') {
	            desc = rewriteDescriptor(obj, prop, desc);
	        }
	        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	    };
	    Object.defineProperties = function (obj, props) {
	        Object.keys(props).forEach(function (prop) {
	            Object.defineProperty(obj, prop, props[prop]);
	        });
	        return obj;
	    };
	    Object.create = function (obj, proto) {
	        if (typeof proto === 'object' && !Object.isFrozen(proto)) {
	            Object.keys(proto).forEach(function (prop) {
	                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
	            });
	        }
	        return _create(obj, proto);
	    };
	    Object.getOwnPropertyDescriptor = function (obj, prop) {
	        var desc = _getOwnPropertyDescriptor(obj, prop);
	        if (isUnconfigurable(obj, prop)) {
	            desc.configurable = false;
	        }
	        return desc;
	    };
	}

	function _redefineProperty(obj, prop, desc) {
	    var originalConfigurableFlag = desc.configurable;
	    desc = rewriteDescriptor(obj, prop, desc);
	    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	}

	function isUnconfigurable(obj, prop) {
	    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
	}
	function rewriteDescriptor(obj, prop, desc) {
	    desc.configurable = true;
	    if (!desc.configurable) {
	        if (!obj[unconfigurablesKey]) {
	            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
	        }
	        obj[unconfigurablesKey][prop] = true;
	    }
	    return desc;
	}
	function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
	    try {
	        return _defineProperty(obj, prop, desc);
	    }
	    catch (e) {
	        if (desc.configurable) {
	            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's
	            // retry with the original flag value
	            if (typeof originalConfigurableFlag == 'undefined') {
	                delete desc.configurable;
	            }
	            else {
	                desc.configurable = originalConfigurableFlag;
	            }
	            try {
	                return _defineProperty(obj, prop, desc);
	            }
	            catch (e) {
	                var descJson = null;
	                try {
	                    descJson = JSON.stringify(desc);
	                }
	                catch (e) {
	                    descJson = descJson.toString();
	                }
	                console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + e);
	            }
	        }
	        else {
	            throw e;
	        }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
	var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'
	    .split(',');
	var EVENT_TARGET = 'EventTarget';
	function eventTargetPatch(_global) {
	    var apis = [];
	    var isWtf = _global['wtf'];
	    if (isWtf) {
	        // Workaround for: https://github.com/google/tracing-framework/issues/555
	        apis = WTF_ISSUE_555.split(',').map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);
	    }
	    else if (_global[EVENT_TARGET]) {
	        apis.push(EVENT_TARGET);
	    }
	    else {
	        // Note: EventTarget is not available in all browsers,
	        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
	        apis = NO_EVENT_TARGET;
	    }
	    for (var i = 0; i < apis.length; i++) {
	        var type = _global[apis[i]];
	        patchEventTargetMethods(type && type.prototype);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// we have to patch the instance since the proto is non-configurable
	function apply(_global) {
	    var WS = _global.WebSocket;
	    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
	    // On older Chrome, no need since EventTarget was already patched
	    if (!_global.EventTarget) {
	        patchEventTargetMethods(WS.prototype);
	    }
	    _global.WebSocket = function (a, b) {
	        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
	        var proxySocket;
	        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
	        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
	        if (onmessageDesc && onmessageDesc.configurable === false) {
	            proxySocket = Object.create(socket);
	            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {
	                proxySocket[propName] = function () {
	                    return socket[propName].apply(socket, arguments);
	                };
	            });
	        }
	        else {
	            // we can patch the real socket
	            proxySocket = socket;
	        }
	        patchOnProperties(proxySocket, ['close', 'error', 'message', 'open']);
	        return proxySocket;
	    };
	    for (var prop in WS) {
	        _global.WebSocket[prop] = WS[prop];
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'
	    .split(' ');
	function propertyDescriptorPatch(_global) {
	    if (isNode) {
	        return;
	    }
	    var supportsWebSocket = typeof WebSocket !== 'undefined';
	    if (canPatchViaPropertyDescriptor()) {
	        // for browsers that we can patch the descriptor:  Chrome & Firefox
	        if (isBrowser) {
	            patchOnProperties(HTMLElement.prototype, eventNames);
	        }
	        patchOnProperties(XMLHttpRequest.prototype, null);
	        if (typeof IDBIndex !== 'undefined') {
	            patchOnProperties(IDBIndex.prototype, null);
	            patchOnProperties(IDBRequest.prototype, null);
	            patchOnProperties(IDBOpenDBRequest.prototype, null);
	            patchOnProperties(IDBDatabase.prototype, null);
	            patchOnProperties(IDBTransaction.prototype, null);
	            patchOnProperties(IDBCursor.prototype, null);
	        }
	        if (supportsWebSocket) {
	            patchOnProperties(WebSocket.prototype, null);
	        }
	    }
	    else {
	        // Safari, Android browsers (Jelly Bean)
	        patchViaCapturingAllTheEvents();
	        patchClass('XMLHttpRequest');
	        if (supportsWebSocket) {
	            apply(_global);
	        }
	    }
	}
	function canPatchViaPropertyDescriptor() {
	    if (isBrowser && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') &&
	        typeof Element !== 'undefined') {
	        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
	        // IDL interface attributes are not configurable
	        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
	        if (desc && !desc.configurable)
	            return false;
	    }
	    var xhrDesc = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, 'onreadystatechange');
	    // add enumerable and configurable here because in opera
	    // by default XMLHttpRequest.prototype.onreadystatechange is undefined
	    // without adding enumerable and configurable will cause onreadystatechange
	    // non-configurable
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {
	        enumerable: true,
	        configurable: true,
	        get: function () {
	            return true;
	        }
	    });
	    var req = new XMLHttpRequest();
	    var result = !!req.onreadystatechange;
	    // restore original desc
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', xhrDesc || {});
	    return result;
	}

	var unboundKey = zoneSymbol('unbound');
	// Whenever any eventListener fires, we check the eventListener target and all parents
	// for `onwhatever` properties and replace them with zone-bound functions
	// - Chrome (for now)
	function patchViaCapturingAllTheEvents() {
	    var _loop_1 = function (i) {
	        var property = eventNames[i];
	        var onproperty = 'on' + property;
	        self.addEventListener(property, function (event) {
	            var elt = event.target, bound, source;
	            if (elt) {
	                source = elt.constructor['name'] + '.' + onproperty;
	            }
	            else {
	                source = 'unknown.' + onproperty;
	            }
	            while (elt) {
	                if (elt[onproperty] && !elt[onproperty][unboundKey]) {
	                    bound = Zone.current.wrap(elt[onproperty], source);
	                    bound[unboundKey] = elt[onproperty];
	                    elt[onproperty] = bound;
	                }
	                elt = elt.parentElement;
	            }
	        }, true);
	    };
	    for (var i = 0; i < eventNames.length; i++) {
	        _loop_1(i);
	    }
	    
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function registerElementPatch(_global) {
	    if (!isBrowser || !('registerElement' in _global.document)) {
	        return;
	    }
	    var _registerElement = document.registerElement;
	    var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];
	    document.registerElement = function (name, opts) {
	        if (opts && opts.prototype) {
	            callbacks.forEach(function (callback) {
	                var source = 'Document.registerElement::' + callback;
	                if (opts.prototype.hasOwnProperty(callback)) {
	                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
	                    if (descriptor && descriptor.value) {
	                        descriptor.value = Zone.current.wrap(descriptor.value, source);
	                        _redefineProperty(opts.prototype, callback, descriptor);
	                    }
	                    else {
	                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                    }
	                }
	                else if (opts.prototype[callback]) {
	                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                }
	            });
	        }
	        return _registerElement.apply(document, [name, opts]);
	    };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var set = 'set';
	var clear = 'clear';
	var blockingMethods = ['alert', 'prompt', 'confirm'];
	var _global = typeof window === 'object' && window || typeof self === 'object' && self || global;
	patchTimer(_global, set, clear, 'Timeout');
	patchTimer(_global, set, clear, 'Interval');
	patchTimer(_global, set, clear, 'Immediate');
	patchTimer(_global, 'request', 'cancel', 'AnimationFrame');
	patchTimer(_global, 'mozRequest', 'mozCancel', 'AnimationFrame');
	patchTimer(_global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
	for (var i = 0; i < blockingMethods.length; i++) {
	    var name_1 = blockingMethods[i];
	    patchMethod(_global, name_1, function (delegate, symbol, name) {
	        return function (s, args) {
	            return Zone.current.run(delegate, _global, args, name);
	        };
	    });
	}
	eventTargetPatch(_global);
	propertyDescriptorPatch(_global);
	patchClass('MutationObserver');
	patchClass('WebKitMutationObserver');
	patchClass('FileReader');
	propertyPatch();
	registerElementPatch(_global);
	// Treat XMLHTTPRequest as a macrotask.
	patchXHR(_global);
	var XHR_TASK = zoneSymbol('xhrTask');
	var XHR_SYNC = zoneSymbol('xhrSync');
	var XHR_LISTENER = zoneSymbol('xhrListener');
	var XHR_SCHEDULED = zoneSymbol('xhrScheduled');
	function patchXHR(window) {
	    function findPendingTask(target) {
	        var pendingTask = target[XHR_TASK];
	        return pendingTask;
	    }
	    function scheduleTask(task) {
	        self[XHR_SCHEDULED] = false;
	        var data = task.data;
	        // remove existing event listener
	        var listener = data.target[XHR_LISTENER];
	        if (listener) {
	            data.target.removeEventListener('readystatechange', listener);
	        }
	        var newListener = data.target[XHR_LISTENER] = function () {
	            if (data.target.readyState === data.target.DONE) {
	                if (!data.aborted && self[XHR_SCHEDULED]) {
	                    task.invoke();
	                }
	            }
	        };
	        data.target.addEventListener('readystatechange', newListener);
	        var storedTask = data.target[XHR_TASK];
	        if (!storedTask) {
	            data.target[XHR_TASK] = task;
	        }
	        sendNative.apply(data.target, data.args);
	        self[XHR_SCHEDULED] = true;
	        return task;
	    }
	    function placeholderCallback() { }
	    function clearTask(task) {
	        var data = task.data;
	        // Note - ideally, we would call data.target.removeEventListener here, but it's too late
	        // to prevent it from firing. So instead, we store info for the event listener.
	        data.aborted = true;
	        return abortNative.apply(data.target, data.args);
	    }
	    var openNative = patchMethod(window.XMLHttpRequest.prototype, 'open', function () { return function (self, args) {
	        self[XHR_SYNC] = args[2] == false;
	        return openNative.apply(self, args);
	    }; });
	    var sendNative = patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {
	        var zone = Zone.current;
	        if (self[XHR_SYNC]) {
	            // if the XHR is sync there is no task to schedule, just execute the code.
	            return sendNative.apply(self, args);
	        }
	        else {
	            var options = { target: self, isPeriodic: false, delay: null, args: args, aborted: false };
	            return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);
	        }
	    }; });
	    var abortNative = patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {
	        var task = findPendingTask(self);
	        if (task && typeof task.type == 'string') {
	            // If the XHR has already completed, do nothing.
	            // If the XHR has already been aborted, do nothing.
	            // Fix #569, call abort multiple times before done will cause
	            // macroTask task count be negative number
	            if (task.cancelFn == null || (task.data && task.data.aborted)) {
	                return;
	            }
	            task.zone.cancelTask(task);
	        }
	        // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no task
	        // to cancel. Do nothing.
	    }; });
	}
	/// GEO_LOCATION
	if (_global['navigator'] && _global['navigator'].geolocation) {
	    patchPrototype(_global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2)))

/***/ },
/* 2 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 3 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	var Reflect;
	(function (Reflect) {
	    "use strict";
	    var hasOwn = Object.prototype.hasOwnProperty;
	    // feature test for Object.create support
	    var supportsCreate = typeof Object.create === "function";
	    // feature test for __proto__ support
	    var supportsProto = { __proto__: [] } instanceof Array;
	    // feature test for Symbol support
	    var supportsSymbol = typeof Symbol === "function";
	    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
	    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
	    // create an object in dictionary mode (a.k.a. "slow" mode in v8)
	    var createDictionary = supportsCreate ? function () { return MakeDictionary(Object.create(null)); } :
	        supportsProto ? function () { return MakeDictionary({ __proto__: null }); } :
	            function () { return MakeDictionary({}); };
	    var HashMap;
	    (function (HashMap) {
	        var downLevel = !supportsCreate && !supportsProto;
	        HashMap.has = downLevel
	            ? function (map, key) { return hasOwn.call(map, key); }
	            : function (map, key) { return key in map; };
	        HashMap.get = downLevel
	            ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
	            : function (map, key) { return map[key]; };
	    })(HashMap || (HashMap = {}));
	    // Load global or shim versions of Map, Set, and WeakMap
	    var functionPrototype = Object.getPrototypeOf(Function);
	    var _Map = typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
	    var _Set = typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
	    var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
	    // [[Metadata]] internal slot
	    var Metadata = new _WeakMap();
	    /**
	      * Applies a set of decorators to a property of a target object.
	      * @param decorators An array of decorators.
	      * @param target The target object.
	      * @param targetKey (Optional) The property key to decorate.
	      * @param targetDescriptor (Optional) The property descriptor for the target key
	      * @remarks Decorators are applied in reverse order.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Example = Reflect.decorate(decoratorsArray, Example);
	      *
	      *     // property (on constructor)
	      *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Object.defineProperty(Example, "staticMethod",
	      *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
	      *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
	      *
	      *     // method (on prototype)
	      *     Object.defineProperty(Example.prototype, "method",
	      *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
	      *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
	      *
	      */
	    function decorate(decorators, target, targetKey, targetDescriptor) {
	        if (!IsUndefined(targetKey)) {
	            if (!IsArray(decorators))
	                throw new TypeError();
	            if (!IsObject(target))
	                throw new TypeError();
	            if (!IsObject(targetDescriptor) && !IsUndefined(targetDescriptor) && !IsNull(targetDescriptor))
	                throw new TypeError();
	            if (IsNull(targetDescriptor))
	                targetDescriptor = undefined;
	            targetKey = ToPropertyKey(targetKey);
	            return DecorateProperty(decorators, target, targetKey, targetDescriptor);
	        }
	        else {
	            if (!IsArray(decorators))
	                throw new TypeError();
	            if (!IsConstructor(target))
	                throw new TypeError();
	            return DecorateConstructor(decorators, target);
	        }
	    }
	    Reflect.decorate = decorate;
	    /**
	      * A default metadata decorator factory that can be used on a class, class member, or parameter.
	      * @param metadataKey The key for the metadata entry.
	      * @param metadataValue The value for the metadata entry.
	      * @returns A decorator function.
	      * @remarks
	      * If `metadataKey` is already defined for the target and target key, the
	      * metadataValue for that key will be overwritten.
	      * @example
	      *
	      *     // constructor
	      *     @Reflect.metadata(key, value)
	      *     class Example {
	      *     }
	      *
	      *     // property (on constructor, TypeScript only)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         static staticProperty;
	      *     }
	      *
	      *     // property (on prototype, TypeScript only)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         property;
	      *     }
	      *
	      *     // method (on constructor)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         static staticMethod() { }
	      *     }
	      *
	      *     // method (on prototype)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         method() { }
	      *     }
	      *
	      */
	    function metadata(metadataKey, metadataValue) {
	        function decorator(target, targetKey) {
	            if (!IsUndefined(targetKey)) {
	                if (!IsObject(target))
	                    throw new TypeError();
	                targetKey = ToPropertyKey(targetKey);
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	            }
	            else {
	                if (!IsConstructor(target))
	                    throw new TypeError();
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/ undefined);
	            }
	        }
	        return decorator;
	    }
	    Reflect.metadata = metadata;
	    /**
	      * Define a unique metadata entry on the target.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param metadataValue A value that contains attached metadata.
	      * @param target The target object on which to define metadata.
	      * @param targetKey (Optional) The property key for the target.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Reflect.defineMetadata("custom:annotation", options, Example);
	      *
	      *     // property (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
	      *
	      *     // decorator factory as metadata-producing annotation.
	      *     function MyAnnotation(options): Decorator {
	      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	      *     }
	      *
	      */
	    function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	    }
	    Reflect.defineMetadata = defineMetadata;
	    /**
	      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function hasMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryHasMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasMetadata = hasMetadata;
	    /**
	      * Gets a value indicating whether the target object has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function hasOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasOwnMetadata = hasOwnMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function getMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryGetMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getMetadata = getMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function getOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getOwnMetadata = getOwnMetadata;
	    /**
	      * Gets the metadata keys defined on the target object or its prototype chain.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadataKeys(Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadataKeys(Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadataKeys(Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadataKeys(Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadataKeys(Example.prototype, "method");
	      *
	      */
	    function getMetadataKeys(target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryMetadataKeys(target, targetKey);
	    }
	    Reflect.getMetadataKeys = getMetadataKeys;
	    /**
	      * Gets the unique metadata keys defined on the target object.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadataKeys(Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
	      *
	      */
	    function getOwnMetadataKeys(target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryOwnMetadataKeys(target, targetKey);
	    }
	    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
	    /**
	      * Deletes the metadata entry from the target object with the provided key.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.deleteMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function deleteMetadata(metadataKey, target, targetKey) {
	        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#deletemetadata-metadatakey-p-
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);
	        if (IsUndefined(metadataMap))
	            return false;
	        if (!metadataMap.delete(metadataKey))
	            return false;
	        if (metadataMap.size > 0)
	            return true;
	        var targetMetadata = Metadata.get(target);
	        targetMetadata.delete(targetKey);
	        if (targetMetadata.size > 0)
	            return true;
	        Metadata.delete(target);
	        return true;
	    }
	    Reflect.deleteMetadata = deleteMetadata;
	    function DecorateConstructor(decorators, target) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target);
	            if (!IsUndefined(decorated) && !IsNull(decorated)) {
	                if (!IsConstructor(decorated))
	                    throw new TypeError();
	                target = decorated;
	            }
	        }
	        return target;
	    }
	    function DecorateProperty(decorators, target, propertyKey, descriptor) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target, propertyKey, descriptor);
	            if (!IsUndefined(decorated) && !IsNull(decorated)) {
	                if (!IsObject(decorated))
	                    throw new TypeError();
	                descriptor = decorated;
	            }
	        }
	        return descriptor;
	    }
	    function GetOrCreateMetadataMap(O, P, Create) {
	        var targetMetadata = Metadata.get(O);
	        if (IsUndefined(targetMetadata)) {
	            if (!Create)
	                return undefined;
	            targetMetadata = new _Map();
	            Metadata.set(O, targetMetadata);
	        }
	        var metadataMap = targetMetadata.get(P);
	        if (IsUndefined(metadataMap)) {
	            if (!Create)
	                return undefined;
	            metadataMap = new _Map();
	            targetMetadata.set(P, metadataMap);
	        }
	        return metadataMap;
	    }
	    // Ordinary Object Internal Methods and Internal Slots
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinary-object-internal-methods-and-internal-slots
	    // OrdinaryHasMetadata(MetadataKey, O, P)
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
	    function OrdinaryHasMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn)
	            return true;
	        var parent = OrdinaryGetPrototypeOf(O);
	        if (!IsNull(parent))
	            return OrdinaryHasMetadata(MetadataKey, parent, P);
	        return false;
	    }
	    // OrdinaryHasOwnMetadata(MetadataKey, O, P)
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
	    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);
	        if (IsUndefined(metadataMap))
	            return false;
	        return ToBoolean(metadataMap.has(MetadataKey));
	    }
	    // OrdinaryGetMetadata(MetadataKey, O, P)
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetmetadata--metadatakey-o-p-
	    function OrdinaryGetMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn)
	            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	        var parent = OrdinaryGetPrototypeOf(O);
	        if (!IsNull(parent))
	            return OrdinaryGetMetadata(MetadataKey, parent, P);
	        return undefined;
	    }
	    // OrdinaryGetOwnMetadata(MetadataKey, O, P)
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
	    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);
	        if (IsUndefined(metadataMap))
	            return undefined;
	        return metadataMap.get(MetadataKey);
	    }
	    // OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
	    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ true);
	        metadataMap.set(MetadataKey, MetadataValue);
	    }
	    // OrdinaryMetadataKeys(O, P)
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarymetadatakeys--o-p-
	    function OrdinaryMetadataKeys(O, P) {
	        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
	        var parent = OrdinaryGetPrototypeOf(O);
	        if (parent === null)
	            return ownKeys;
	        var parentKeys = OrdinaryMetadataKeys(parent, P);
	        if (parentKeys.length <= 0)
	            return ownKeys;
	        if (ownKeys.length <= 0)
	            return parentKeys;
	        var set = new _Set();
	        var keys = [];
	        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
	            var key = ownKeys_1[_i];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
	            var key = parentKeys_1[_a];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        return keys;
	    }
	    // OrdinaryOwnMetadataKeys(O, P)
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryownmetadatakeys--o-p-
	    function OrdinaryOwnMetadataKeys(O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);
	        var keys = [];
	        if (IsUndefined(metadataMap))
	            return keys;
	        var keysObj = metadataMap.keys();
	        var iterator = GetIterator(keysObj);
	        while (true) {
	            var next = IteratorStep(iterator);
	            try {
	                if (!next)
	                    return keys;
	                var nextValue = IteratorValue(next);
	                keys.push(nextValue);
	            }
	            catch (e) {
	                try {
	                    if (next) {
	                        next = false;
	                        IteratorClose(iterator);
	                    }
	                }
	                finally {
	                    throw e;
	                }
	            }
	            finally {
	                if (next)
	                    IteratorClose(iterator);
	            }
	        }
	    }
	    // ECMAScript Specification
	    // https://tc39.github.io/ecma262/
	    // 6 ECMAScript Data Typ0es and Values
	    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
	    function Type(x) {
	        if (x === null)
	            return 1 /* Null */;
	        switch (typeof x) {
	            case "undefined": return 0 /* Undefined */;
	            case "boolean": return 2 /* Boolean */;
	            case "string": return 3 /* String */;
	            case "symbol": return 4 /* Symbol */;
	            case "number": return 5 /* Number */;
	            case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
	            default: return 6 /* Object */;
	        }
	    }
	    // 6.1.1 The Undefined Type
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
	    function IsUndefined(x) {
	        return x === undefined;
	    }
	    // 6.1.2 The Null Type
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
	    function IsNull(x) {
	        return x === null;
	    }
	    // 6.1.5 The Symbol Type
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
	    function IsSymbol(x) {
	        return typeof x === "symbol";
	    }
	    // 6.1.7 The Object Type
	    // https://tc39.github.io/ecma262/#sec-object-type
	    function IsObject(x) {
	        return typeof x === "object" ? x !== null : typeof x === "function";
	    }
	    // 7.1 Type Conversion
	    // https://tc39.github.io/ecma262/#sec-type-conversion
	    // 7.1.1 ToPrimitive(input [, PreferredType])
	    // https://tc39.github.io/ecma262/#sec-toprimitive
	    function ToPrimitive(input, PreferredType) {
	        switch (Type(input)) {
	            case 0 /* Undefined */: return input;
	            case 1 /* Null */: return input;
	            case 2 /* Boolean */: return input;
	            case 3 /* String */: return input;
	            case 4 /* Symbol */: return input;
	            case 5 /* Number */: return input;
	        }
	        var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
	        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
	        if (exoticToPrim !== undefined) {
	            var result = exoticToPrim.call(input, hint);
	            if (IsObject(result))
	                throw new TypeError();
	            return result;
	        }
	        return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
	    }
	    // 7.1.1.1 OrdinaryToPrimitive(O, hint)
	    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
	    function OrdinaryToPrimitive(O, hint) {
	        if (hint === "string") {
	            var toString_1 = O.toString;
	            if (IsCallable(toString_1)) {
	                var result = toString_1.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	            var valueOf = O.valueOf;
	            if (IsCallable(valueOf)) {
	                var result = valueOf.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	        }
	        else {
	            var valueOf = O.valueOf;
	            if (IsCallable(valueOf)) {
	                var result = valueOf.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	            var toString_2 = O.toString;
	            if (IsCallable(toString_2)) {
	                var result = toString_2.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	        }
	        throw new TypeError();
	    }
	    // 7.1.2 ToBoolean(argument)
	    // https://tc39.github.io/ecma262/2016/#sec-toboolean
	    function ToBoolean(argument) {
	        return !!argument;
	    }
	    // 7.1.12 ToString(argument)
	    // https://tc39.github.io/ecma262/#sec-tostring
	    function ToString(argument) {
	        return "" + argument;
	    }
	    // 7.1.14 ToPropertyKey(argument)
	    // https://tc39.github.io/ecma262/#sec-topropertykey
	    function ToPropertyKey(argument) {
	        var key = ToPrimitive(argument, 3 /* String */);
	        if (IsSymbol(key))
	            return key;
	        return ToString(key);
	    }
	    // 7.2 Testing and Comparison Operations
	    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
	    // 7.2.2 IsArray(argument)
	    // https://tc39.github.io/ecma262/#sec-isarray
	    function IsArray(argument) {
	        return Array.isArray
	            ? Array.isArray(argument)
	            : argument instanceof Object
	                ? argument instanceof Array
	                : Object.prototype.toString.call(argument) === "[object Array]";
	    }
	    // 7.2.3 IsCallable(argument)
	    // https://tc39.github.io/ecma262/#sec-iscallable
	    function IsCallable(argument) {
	        // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
	        return typeof argument === "function";
	    }
	    // 7.2.4 IsConstructor(argument)
	    // https://tc39.github.io/ecma262/#sec-isconstructor
	    function IsConstructor(argument) {
	        // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
	        return typeof argument === "function";
	    }
	    // 7.3 Operations on Objects
	    // https://tc39.github.io/ecma262/#sec-operations-on-objects
	    // 7.3.9 GetMethod(V, P)
	    // https://tc39.github.io/ecma262/#sec-getmethod
	    function GetMethod(V, P) {
	        var func = V[P];
	        if (func === undefined || func === null)
	            return undefined;
	        if (!IsCallable(func))
	            throw new TypeError();
	        return func;
	    }
	    // 7.4 Operations on Iterator Objects
	    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
	    function GetIterator(obj) {
	        var method = GetMethod(obj, iteratorSymbol);
	        if (!IsCallable(method))
	            throw new TypeError(); // from Call
	        var iterator = method.call(obj);
	        if (!IsObject(iterator))
	            throw new TypeError();
	        return iterator;
	    }
	    // 7.4.4 IteratorValue(iterResult)
	    // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
	    function IteratorValue(iterResult) {
	        return iterResult.value;
	    }
	    // 7.4.5 IteratorStep(iterator)
	    // https://tc39.github.io/ecma262/#sec-iteratorstep
	    function IteratorStep(iterator) {
	        var result = iterator.next();
	        return result.done ? false : result;
	    }
	    // 7.4.6 IteratorClose(iterator, completion)
	    // https://tc39.github.io/ecma262/#sec-iteratorclose
	    function IteratorClose(iterator) {
	        var f = iterator["return"];
	        if (f)
	            f.call(iterator);
	    }
	    // 9.1 Ordinary Object Internal Methods and Internal Slots
	    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
	    // 9.1.1.1 OrdinaryGetPrototypeOf(O)
	    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
	    function OrdinaryGetPrototypeOf(O) {
	        var proto = Object.getPrototypeOf(O);
	        if (typeof O !== "function" || O === functionPrototype)
	            return proto;
	        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
	        // Try to determine the superclass constructor. Compatible implementations
	        // must either set __proto__ on a subclass constructor to the superclass constructor,
	        // or ensure each class has a valid `constructor` property on its prototype that
	        // points back to the constructor.
	        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	        // This is the case when in ES6 or when using __proto__ in a compatible browser.
	        if (proto !== functionPrototype)
	            return proto;
	        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	        var prototype = O.prototype;
	        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
	        if (prototypeProto == null || prototypeProto === Object.prototype)
	            return proto;
	        // If the constructor was not a function, then we cannot determine the heritage.
	        var constructor = prototypeProto.constructor;
	        if (typeof constructor !== "function")
	            return proto;
	        // If we have some kind of self-reference, then we cannot determine the heritage.
	        if (constructor === O)
	            return proto;
	        // we have a pretty good guess at the heritage.
	        return constructor;
	    }
	    // naive Map shim
	    function CreateMapPolyfill() {
	        var cacheSentinel = {};
	        var arraySentinel = [];
	        var MapIterator = (function () {
	            function MapIterator(keys, values, selector) {
	                this._index = 0;
	                this._keys = keys;
	                this._values = values;
	                this._selector = selector;
	            }
	            MapIterator.prototype["@@iterator"] = function () { return this; };
	            MapIterator.prototype[iteratorSymbol] = function () { return this; };
	            MapIterator.prototype.next = function () {
	                var index = this._index;
	                if (index >= 0 && index < this._keys.length) {
	                    var result = this._selector(this._keys[index], this._values[index]);
	                    if (index + 1 >= this._keys.length) {
	                        this._index = -1;
	                        this._keys = arraySentinel;
	                        this._values = arraySentinel;
	                    }
	                    else {
	                        this._index++;
	                    }
	                    return { value: result, done: false };
	                }
	                return { value: undefined, done: true };
	            };
	            MapIterator.prototype.throw = function (error) {
	                if (this._index >= 0) {
	                    this._index = -1;
	                    this._keys = arraySentinel;
	                    this._values = arraySentinel;
	                }
	                throw error;
	            };
	            MapIterator.prototype.return = function (value) {
	                if (this._index >= 0) {
	                    this._index = -1;
	                    this._keys = arraySentinel;
	                    this._values = arraySentinel;
	                }
	                return { value: value, done: true };
	            };
	            return MapIterator;
	        }());
	        return (function () {
	            function Map() {
	                this._keys = [];
	                this._values = [];
	                this._cacheKey = cacheSentinel;
	                this._cacheIndex = -2;
	            }
	            Object.defineProperty(Map.prototype, "size", {
	                get: function () { return this._keys.length; },
	                enumerable: true,
	                configurable: true
	            });
	            Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
	            Map.prototype.get = function (key) {
	                var index = this._find(key, /*insert*/ false);
	                return index >= 0 ? this._values[index] : undefined;
	            };
	            Map.prototype.set = function (key, value) {
	                var index = this._find(key, /*insert*/ true);
	                this._values[index] = value;
	                return this;
	            };
	            Map.prototype.delete = function (key) {
	                var index = this._find(key, /*insert*/ false);
	                if (index >= 0) {
	                    var size = this._keys.length;
	                    for (var i = index + 1; i < size; i++) {
	                        this._keys[i - 1] = this._keys[i];
	                        this._values[i - 1] = this._values[i];
	                    }
	                    this._keys.length--;
	                    this._values.length--;
	                    if (key === this._cacheKey) {
	                        this._cacheKey = cacheSentinel;
	                        this._cacheIndex = -2;
	                    }
	                    return true;
	                }
	                return false;
	            };
	            Map.prototype.clear = function () {
	                this._keys.length = 0;
	                this._values.length = 0;
	                this._cacheKey = cacheSentinel;
	                this._cacheIndex = -2;
	            };
	            Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
	            Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
	            Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
	            Map.prototype["@@iterator"] = function () { return this.entries(); };
	            Map.prototype[iteratorSymbol] = function () { return this.entries(); };
	            Map.prototype._find = function (key, insert) {
	                if (this._cacheKey === key)
	                    return this._cacheIndex;
	                var index = this._keys.indexOf(key);
	                if (index < 0 && insert) {
	                    index = this._keys.length;
	                    this._keys.push(key);
	                    this._values.push(undefined);
	                }
	                return this._cacheKey = key, this._cacheIndex = index;
	            };
	            return Map;
	        }());
	        function getKey(key, _) {
	            return key;
	        }
	        function getValue(_, value) {
	            return value;
	        }
	        function getEntry(key, value) {
	            return [key, value];
	        }
	    }
	    // naive Set shim
	    function CreateSetPolyfill() {
	        return (function () {
	            function Set() {
	                this._map = new _Map();
	            }
	            Object.defineProperty(Set.prototype, "size", {
	                get: function () { return this._map.size; },
	                enumerable: true,
	                configurable: true
	            });
	            Set.prototype.has = function (value) { return this._map.has(value); };
	            Set.prototype.add = function (value) { return this._map.set(value, value), this; };
	            Set.prototype.delete = function (value) { return this._map.delete(value); };
	            Set.prototype.clear = function () { this._map.clear(); };
	            Set.prototype.keys = function () { return this._map.keys(); };
	            Set.prototype.values = function () { return this._map.values(); };
	            Set.prototype.entries = function () { return this._map.entries(); };
	            Set.prototype["@@iterator"] = function () { return this.keys(); };
	            Set.prototype[iteratorSymbol] = function () { return this.keys(); };
	            return Set;
	        }());
	    }
	    // naive WeakMap shim
	    function CreateWeakMapPolyfill() {
	        var UUID_SIZE = 16;
	        var keys = createDictionary();
	        var rootKey = CreateUniqueKey();
	        return (function () {
	            function WeakMap() {
	                this._key = CreateUniqueKey();
	            }
	            WeakMap.prototype.has = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? HashMap.has(table, this._key) : false;
	            };
	            WeakMap.prototype.get = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? HashMap.get(table, this._key) : undefined;
	            };
	            WeakMap.prototype.set = function (target, value) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ true);
	                table[this._key] = value;
	                return this;
	            };
	            WeakMap.prototype.delete = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? delete table[this._key] : false;
	            };
	            WeakMap.prototype.clear = function () {
	                // NOTE: not a real clear, just makes the previous data unreachable
	                this._key = CreateUniqueKey();
	            };
	            return WeakMap;
	        }());
	        function CreateUniqueKey() {
	            var key;
	            do
	                key = "@@WeakMap@@" + CreateUUID();
	            while (HashMap.has(keys, key));
	            keys[key] = true;
	            return key;
	        }
	        function GetOrCreateWeakMapTable(target, create) {
	            if (!hasOwn.call(target, rootKey)) {
	                if (!create)
	                    return undefined;
	                Object.defineProperty(target, rootKey, { value: createDictionary() });
	            }
	            return target[rootKey];
	        }
	        function FillRandomBytes(buffer, size) {
	            for (var i = 0; i < size; ++i)
	                buffer[i] = Math.random() * 0xff | 0;
	            return buffer;
	        }
	        function GenRandomBytes(size) {
	            if (typeof Uint8Array === "function") {
	                if (typeof crypto !== "undefined")
	                    return crypto.getRandomValues(new Uint8Array(size));
	                if (typeof msCrypto !== "undefined")
	                    return msCrypto.getRandomValues(new Uint8Array(size));
	                return FillRandomBytes(new Uint8Array(size), size);
	            }
	            return FillRandomBytes(new Array(size), size);
	        }
	        function CreateUUID() {
	            var data = GenRandomBytes(UUID_SIZE);
	            // mark as random - RFC 4122 § 4.4
	            data[6] = data[6] & 0x4f | 0x40;
	            data[8] = data[8] & 0xbf | 0x80;
	            var result = "";
	            for (var offset = 0; offset < UUID_SIZE; ++offset) {
	                var byte = data[offset];
	                if (offset === 4 || offset === 6 || offset === 8)
	                    result += "-";
	                if (byte < 16)
	                    result += "0";
	                result += byte.toString(16).toLowerCase();
	            }
	            return result;
	        }
	    }
	    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
	    function MakeDictionary(obj) {
	        obj.__ = undefined;
	        delete obj.__;
	        return obj;
	    }
	    // patch global Reflect
	    (function (__global) {
	        if (typeof __global.Reflect !== "undefined") {
	            if (__global.Reflect !== Reflect) {
	                for (var p in Reflect) {
	                    if (hasOwn.call(Reflect, p)) {
	                        __global.Reflect[p] = Reflect[p];
	                    }
	                }
	            }
	        }
	        else {
	            __global.Reflect = Reflect;
	        }
	    })(typeof global !== "undefined" ? global :
	        typeof self !== "undefined" ? self :
	            Function("return this;")());
	})(Reflect || (Reflect = {}));
	//# sourceMappingURL=Reflect.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.4.7
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(5), __webpack_require__(7), __webpack_require__(8)) :
	    typeof define === 'function' && define.amd ? define(['exports', 'rxjs/symbol/observable', 'rxjs/Subject', 'rxjs/Observable'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.rxjs_symbol_observable,global.Rx,global.Rx));
	}(this, function (exports,rxjs_symbol_observable,rxjs_Subject,rxjs_Observable) { 'use strict';

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = (self);
	        }
	        else {
	            globalScope = (global);
	        }
	    }
	    else {
	        globalScope = (window);
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function scheduleMicroTask(fn) {
	        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var /** @type {?} */ global$1 = globalScope;
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function getTypeNameForDebugging(type) {
	        return type['name'] || typeof type;
	    }
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    global$1.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return "" + token.overriddenName;
	        }
	        if (token.name) {
	            return "" + token.name;
	        }
	        var /** @type {?} */ res = token.toString();
	        var /** @type {?} */ newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function looseIdentical(a, b) {
	        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	    }
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function print(obj) {
	        // tslint:disable-next-line:no-console
	        console.log(obj);
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function warn(obj) {
	        console.warn(obj);
	    }
	    var /** @type {?} */ _symbolIterator = null;
	    /**
	     * @return {?}
	     */
	    function getSymbolIterator() {
	        if (!_symbolIterator) {
	            if (((globalScope)).Symbol && Symbol.iterator) {
	                _symbolIterator = Symbol.iterator;
	            }
	            else {
	                // es6-shim specific logic
	                var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
	                for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	                    var /** @type {?} */ key = keys[i];
	                    if (key !== 'entries' && key !== 'size' &&
	                        ((Map)).prototype[key] === Map.prototype['entries']) {
	                        _symbolIterator = key;
	                    }
	                }
	            }
	        }
	        return _symbolIterator;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPrimitive(obj) {
	        return !isJsObject(obj);
	    }

	    var /** @type {?} */ _nextClassId = 0;
	    var /** @type {?} */ Reflect = global$1.Reflect;
	    /**
	     * @param {?} annotation
	     * @return {?}
	     */
	    function extractAnnotation(annotation) {
	        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
	            // it is a decorator, extract annotation
	            annotation = annotation.annotation;
	        }
	        return annotation;
	    }
	    /**
	     * @param {?} fnOrArray
	     * @param {?} key
	     * @return {?}
	     */
	    function applyParams(fnOrArray, key) {
	        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
	            fnOrArray === Number || fnOrArray === Array) {
	            throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
	        }
	        if (typeof fnOrArray === 'function') {
	            return fnOrArray;
	        }
	        if (Array.isArray(fnOrArray)) {
	            var /** @type {?} */ annotations = fnOrArray;
	            var /** @type {?} */ annoLength = annotations.length - 1;
	            var /** @type {?} */ fn = fnOrArray[annoLength];
	            if (typeof fn !== 'function') {
	                throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
	            }
	            if (annoLength != fn.length) {
	                throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
	            }
	            var /** @type {?} */ paramsAnnotations = [];
	            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {
	                var /** @type {?} */ paramAnnotations = [];
	                paramsAnnotations.push(paramAnnotations);
	                var /** @type {?} */ annotation = annotations[i];
	                if (Array.isArray(annotation)) {
	                    for (var /** @type {?} */ j = 0; j < annotation.length; j++) {
	                        paramAnnotations.push(extractAnnotation(annotation[j]));
	                    }
	                }
	                else if (typeof annotation === 'function') {
	                    paramAnnotations.push(extractAnnotation(annotation));
	                }
	                else {
	                    paramAnnotations.push(annotation);
	                }
	            }
	            Reflect.defineMetadata('parameters', paramsAnnotations, fn);
	            return fn;
	        }
	        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
	    }
	    /**
	     * Provides a way for expressing ES6 classes with parameter annotations in ES5.
	     *
	     * ## Basic Example
	     *
	     * ```
	     * var Greeter = ng.Class({
	     *   constructor: function(name) {
	     *     this.name = name;
	     *   },
	     *
	     *   greet: function() {
	     *     alert('Hello ' + this.name + '!');
	     *   }
	     * });
	     * ```
	     *
	     * is equivalent to ES6:
	     *
	     * ```
	     * class Greeter {
	     *   constructor(name) {
	     *     this.name = name;
	     *   }
	     *
	     *   greet() {
	     *     alert('Hello ' + this.name + '!');
	     *   }
	     * }
	     * ```
	     *
	     * or equivalent to ES5:
	     *
	     * ```
	     * var Greeter = function (name) {
	     *   this.name = name;
	     * }
	     *
	     * Greeter.prototype.greet = function () {
	     *   alert('Hello ' + this.name + '!');
	     * }
	     * ```
	     *
	     * ### Example with parameter annotations
	     *
	     * ```
	     * var MyService = ng.Class({
	     *   constructor: [String, [new Optional(), Service], function(name, myService) {
	     *     ...
	     *   }]
	     * });
	     * ```
	     *
	     * is equivalent to ES6:
	     *
	     * ```
	     * class MyService {
	     *   constructor(name: string, \@Optional() myService: Service) {
	     *     ...
	     *   }
	     * }
	     * ```
	     *
	     * ### Example with inheritance
	     *
	     * ```
	     * var Shape = ng.Class({
	     *   constructor: (color) {
	     *     this.color = color;
	     *   }
	     * });
	     *
	     * var Square = ng.Class({
	     *   extends: Shape,
	     *   constructor: function(color, size) {
	     *     Shape.call(this, color);
	     *     this.size = size;
	     *   }
	     * });
	     * ```
	     * \@stable
	     * @param {?} clsDef
	     * @return {?}
	     */
	    function Class(clsDef) {
	        var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
	        var /** @type {?} */ proto = constructor.prototype;
	        if (clsDef.hasOwnProperty('extends')) {
	            if (typeof clsDef.extends === 'function') {
	                ((constructor)).prototype = proto =
	                    Object.create(((clsDef.extends)).prototype);
	            }
	            else {
	                throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
	            }
	        }
	        for (var key in clsDef) {
	            if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
	                proto[key] = applyParams(clsDef[key], key);
	            }
	        }
	        if (this && this.annotations instanceof Array) {
	            Reflect.defineMetadata('annotations', this.annotations, constructor);
	        }
	        var /** @type {?} */ constructorName = constructor['name'];
	        if (!constructorName || constructorName === 'constructor') {
	            ((constructor))['overriddenName'] = "class" + _nextClassId++;
	        }
	        return (constructor);
	    }
	    /**
	     * @param {?} name
	     * @param {?} props
	     * @param {?=} parentClass
	     * @param {?=} chainFn
	     * @return {?}
	     */
	    function makeDecorator(name, props, parentClass, chainFn) {
	        if (chainFn === void 0) { chainFn = null; }
	        var /** @type {?} */ metaCtor = makeMetadataCtor([props]);
	        /**
	         * @param {?} objOrType
	         * @return {?}
	         */
	        function DecoratorFactory(objOrType) {
	            if (!(Reflect && Reflect.getOwnMetadata)) {
	                throw 'reflect-metadata shim is required when using class decorators';
	            }
	            if (this instanceof DecoratorFactory) {
	                metaCtor.call(this, objOrType);
	                return this;
	            }
	            var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);
	            var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
	            chainAnnotation.push(annotationInstance);
	            var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {
	                var /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];
	                annotations.push(annotationInstance);
	                Reflect.defineMetadata('annotations', annotations, cls);
	                return cls;
	            });
	            TypeDecorator.annotations = chainAnnotation;
	            TypeDecorator.Class = Class;
	            if (chainFn)
	                chainFn(TypeDecorator);
	            return TypeDecorator;
	        }
	        if (parentClass) {
	            DecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        DecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        ((DecoratorFactory)).annotationCls = DecoratorFactory;
	        return DecoratorFactory;
	    }
	    /**
	     * @param {?} props
	     * @return {?}
	     */
	    function makeMetadataCtor(props) {
	        return function ctor() {
	            var _this = this;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            props.forEach(function (prop, i) {
	                var /** @type {?} */ argVal = args[i];
	                if (Array.isArray(prop)) {
	                    // plain parameter
	                    _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
	                }
	                else {
	                    for (var propName in prop) {
	                        _this[propName] =
	                            argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
	                    }
	                }
	            });
	        };
	    }
	    /**
	     * @param {?} name
	     * @param {?} props
	     * @param {?=} parentClass
	     * @return {?}
	     */
	    function makeParamDecorator(name, props, parentClass) {
	        var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	        /**
	         * @param {...?} args
	         * @return {?}
	         */
	        function ParamDecoratorFactory() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            if (this instanceof ParamDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            var /** @type {?} */ annotationInstance = new ((_a = ((ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
	            ((ParamDecorator)).annotation = annotationInstance;
	            return ParamDecorator;
	            /**
	             * @param {?} cls
	             * @param {?} unusedKey
	             * @param {?} index
	             * @return {?}
	             */
	            function ParamDecorator(cls, unusedKey, index) {
	                var /** @type {?} */ parameters = Reflect.getOwnMetadata('parameters', cls) || [];
	                // there might be gaps if some in between parameters do not have annotations.
	                // we pad with nulls.
	                while (parameters.length <= index) {
	                    parameters.push(null);
	                }
	                parameters[index] = parameters[index] || [];
	                parameters[index].push(annotationInstance);
	                Reflect.defineMetadata('parameters', parameters, cls);
	                return cls;
	            }
	            var _a;
	        }
	        if (parentClass) {
	            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        ParamDecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
	        return ParamDecoratorFactory;
	    }
	    /**
	     * @param {?} name
	     * @param {?} props
	     * @param {?=} parentClass
	     * @return {?}
	     */
	    function makePropDecorator(name, props, parentClass) {
	        var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	        /**
	         * @param {...?} args
	         * @return {?}
	         */
	        function PropDecoratorFactory() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            if (this instanceof PropDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            var /** @type {?} */ decoratorInstance = new ((_a = ((PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
	            return function PropDecorator(target, name) {
	                var /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
	                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
	                meta[name].unshift(decoratorInstance);
	                Reflect.defineMetadata('propMetadata', meta, target.constructor);
	            };
	            var _a;
	        }
	        if (parentClass) {
	            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        PropDecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
	        return PropDecoratorFactory;
	    }

	    /**
	     * Inject decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Inject = makeParamDecorator('Inject', [['token', undefined]]);
	    /**
	     * Optional decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Optional = makeParamDecorator('Optional', []);
	    /**
	     * Injectable decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Injectable = (makeDecorator('Injectable', []));
	    /**
	     * Self decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Self = makeParamDecorator('Self', []);
	    /**
	     * SkipSelf decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ SkipSelf = makeParamDecorator('SkipSelf', []);
	    /**
	     * Host decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Host = makeParamDecorator('Host', []);

	    var OpaqueToken = (function () {
	        /**
	         * @param {?} _desc
	         */
	        function OpaqueToken(_desc) {
	            this._desc = _desc;
	        }
	        /**
	         * @return {?}
	         */
	        OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
	        OpaqueToken.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        OpaqueToken.ctorParameters = function () { return [
	            null,
	        ]; };
	        return OpaqueToken;
	    }());

	    /**
	     * This token can be used to create a virtual provider that will populate the
	     * `entryComponents` fields of components and ng modules based on its `useValue`.
	     * All components that are referenced in the `useValue` value (either directly
	     * or in a nested array or map) will be added to the `entryComponents` property.
	     *
	     * ### Example
	     * The following example shows how the router can populate the `entryComponents`
	     * field of an NgModule based on the router configuration which refers
	     * to components.
	     *
	     * ```typescript
	     * // helper function inside the router
	     * function provideRoutes(routes) {
	     *   return [
	     *     {provide: ROUTES, useValue: routes},
	     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
	     *   ];
	     * }
	     *
	     * // user code
	     * let routes = [
	     *   {path: '/root', component: RootComp},
	     *   {path: '/teams', component: TeamsComp}
	     * ];
	     *
	     * @NgModule({
	     *   providers: [provideRoutes(routes)]
	     * })
	     * class ModuleWithRoutes {}
	     * ```
	     *
	     * @experimental
	     */
	    var /** @type {?} */ ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');
	    /**
	     * Attribute decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
	    /**
	     * Base class for query metadata.
	     *
	     * See {\@link ContentChildren}, {\@link ContentChild}, {\@link ViewChildren}, {\@link ViewChild} for
	     * more information.
	     *
	     * \@stable
	     * @abstract
	     */
	    var Query = (function () {
	        function Query() {
	        }
	        return Query;
	    }());
	    /**
	     * ContentChildren decorator and metadata.
	     *
	     *  @stable
	     *  @Annotation
	     */
	    var /** @type {?} */ ContentChildren = (makePropDecorator('ContentChildren', [
	        ['selector', undefined], {
	            first: false,
	            isViewQuery: false,
	            descendants: false,
	            read: undefined,
	        }
	    ], Query));
	    /**
	     * ContentChild decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ ContentChild = makePropDecorator('ContentChild', [
	        ['selector', undefined], {
	            first: true,
	            isViewQuery: false,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);
	    /**
	     * ViewChildren decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ ViewChildren = makePropDecorator('ViewChildren', [
	        ['selector', undefined], {
	            first: false,
	            isViewQuery: true,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);
	    /**
	     * ViewChild decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ ViewChild = makePropDecorator('ViewChild', [
	        ['selector', undefined], {
	            first: true,
	            isViewQuery: true,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);

	    var ChangeDetectionStrategy = {};
	    ChangeDetectionStrategy.OnPush = 0;
	    ChangeDetectionStrategy.Default = 1;
	    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
	    ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
	    var ChangeDetectorStatus = {};
	    ChangeDetectorStatus.CheckOnce = 0;
	    ChangeDetectorStatus.Checked = 1;
	    ChangeDetectorStatus.CheckAlways = 2;
	    ChangeDetectorStatus.Detached = 3;
	    ChangeDetectorStatus.Errored = 4;
	    ChangeDetectorStatus.Destroyed = 5;
	    ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
	    ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
	    ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
	    ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
	    ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
	    ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
	    /**
	     * @param {?} changeDetectionStrategy
	     * @return {?}
	     */
	    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
	        return isBlank(changeDetectionStrategy) ||
	            changeDetectionStrategy === ChangeDetectionStrategy.Default;
	    }

	    /**
	     * Directive decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Directive = (makeDecorator('Directive', {
	        selector: undefined,
	        inputs: undefined,
	        outputs: undefined,
	        host: undefined,
	        providers: undefined,
	        exportAs: undefined,
	        queries: undefined
	    }));
	    /**
	     * Component decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Component = (makeDecorator('Component', {
	        selector: undefined,
	        inputs: undefined,
	        outputs: undefined,
	        host: undefined,
	        exportAs: undefined,
	        moduleId: undefined,
	        providers: undefined,
	        viewProviders: undefined,
	        changeDetection: ChangeDetectionStrategy.Default,
	        queries: undefined,
	        templateUrl: undefined,
	        template: undefined,
	        styleUrls: undefined,
	        styles: undefined,
	        animations: undefined,
	        encapsulation: undefined,
	        interpolation: undefined,
	        entryComponents: undefined
	    }, Directive));
	    /**
	     * Pipe decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Pipe = (makeDecorator('Pipe', {
	        name: undefined,
	        pure: true,
	    }));
	    /**
	     * Input decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
	    /**
	     * Output decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
	    /**
	     * HostBinding decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
	    /**
	     * HostListener decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var LifecycleHooks = {};
	    LifecycleHooks.OnInit = 0;
	    LifecycleHooks.OnDestroy = 1;
	    LifecycleHooks.DoCheck = 2;
	    LifecycleHooks.OnChanges = 3;
	    LifecycleHooks.AfterContentInit = 4;
	    LifecycleHooks.AfterContentChecked = 5;
	    LifecycleHooks.AfterViewInit = 6;
	    LifecycleHooks.AfterViewChecked = 7;
	    LifecycleHooks[LifecycleHooks.OnInit] = "OnInit";
	    LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy";
	    LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck";
	    LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges";
	    LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit";
	    LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked";
	    LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit";
	    LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";
	    var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = [
	        LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
	        LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
	        LifecycleHooks.AfterViewChecked
	    ];
	    /**
	     * \@whatItDoes Lifecycle hook that is called when any data-bound property of a directive changes.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}
	     *
	     * \@description
	     * `ngOnChanges` is called right after the data-bound properties have been checked and before view
	     * and content children are checked if at least one of them has changed.
	     * The `changes` parameter contains the changed properties.
	     *
	     * See {\@linkDocs guide/lifecycle-hooks#onchanges "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var OnChanges = (function () {
	        function OnChanges() {
	        }
	        /**
	         * @abstract
	         * @param {?} changes
	         * @return {?}
	         */
	        OnChanges.prototype.ngOnChanges = function (changes) { };
	        return OnChanges;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called after data-bound properties of a directive are
	     * initialized.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}
	     *
	     * \@description
	     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the
	     * first time, and before any of its children have been checked. It is invoked only once when the
	     * directive is instantiated.
	     *
	     * See {\@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var OnInit = (function () {
	        function OnInit() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        OnInit.prototype.ngOnInit = function () { };
	        return OnInit;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called when Angular dirty checks a directive.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}
	     *
	     * \@description
	     * `ngDoCheck` gets called to check the changes in the directives in addition to the default
	     * algorithm. The default change detection algorithm looks for differences by comparing
	     * bound-property values by reference across change detection runs.
	     *
	     * Note that a directive typically should not use both `DoCheck` and {\@link OnChanges} to respond to
	     * changes on the same input, as `ngOnChanges` will continue to be called when the default change
	     * detector detects changes.
	     *
	     * See {\@link KeyValueDiffers} and {\@link IterableDiffers} for implementing custom dirty checking
	     * for collections.
	     *
	     * See {\@linkDocs guide/lifecycle-hooks#docheck "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var DoCheck = (function () {
	        function DoCheck() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DoCheck.prototype.ngDoCheck = function () { };
	        return DoCheck;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called when a directive, pipe or service is destroyed.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}
	     *
	     * \@description
	     * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the
	     * instance is destroyed.
	     *
	     * See {\@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var OnDestroy = (function () {
	        function OnDestroy() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        OnDestroy.prototype.ngOnDestroy = function () { };
	        return OnDestroy;
	    }());
	    /**
	     *
	     * \@whatItDoes Lifecycle hook that is called after a directive's content has been fully
	     * initialized.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}
	     *
	     * \@description
	     * See {\@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AfterContentInit = (function () {
	        function AfterContentInit() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterContentInit.prototype.ngAfterContentInit = function () { };
	        return AfterContentInit;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called after every check of a directive's content.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}
	     *
	     * \@description
	     * See {\@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AfterContentChecked = (function () {
	        function AfterContentChecked() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterContentChecked.prototype.ngAfterContentChecked = function () { };
	        return AfterContentChecked;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called after a component's view has been fully
	     * initialized.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}
	     *
	     * \@description
	     * See {\@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AfterViewInit = (function () {
	        function AfterViewInit() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterViewInit.prototype.ngAfterViewInit = function () { };
	        return AfterViewInit;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called after every check of a component's view.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}
	     *
	     * \@description
	     * See {\@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AfterViewChecked = (function () {
	        function AfterViewChecked() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterViewChecked.prototype.ngAfterViewChecked = function () { };
	        return AfterViewChecked;
	    }());

	    /**
	     * Defines a schema that will allow:
	     * - any non-Angular elements with a `-` in their name,
	     * - any properties on elements with a `-` in their name which is the common rule for custom
	     * elements.
	     *
	     * @stable
	     */
	    var /** @type {?} */ CUSTOM_ELEMENTS_SCHEMA = {
	        name: 'custom-elements'
	    };
	    /**
	     * Defines a schema that will allow any property on any element.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ NO_ERRORS_SCHEMA = {
	        name: 'no-errors-schema'
	    };
	    /**
	     * NgModule decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ NgModule = (makeDecorator('NgModule', {
	        providers: undefined,
	        declarations: undefined,
	        imports: undefined,
	        exports: undefined,
	        entryComponents: undefined,
	        bootstrap: undefined,
	        schemas: undefined,
	        id: undefined,
	    }));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var ViewEncapsulation = {};
	    ViewEncapsulation.Emulated = 0;
	    ViewEncapsulation.Native = 1;
	    ViewEncapsulation.None = 2;
	    ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
	    ViewEncapsulation[ViewEncapsulation.Native] = "Native";
	    ViewEncapsulation[ViewEncapsulation.None] = "None";
	    /**
	     * Metadata properties available for configuring Views.
	     *
	     * For details on the `\@Component` annotation, see {\@link Component}.
	     *
	     * ### Example
	     *
	     * ```
	     * \@Component({
	     *   selector: 'greet',
	     *   template: 'Hello {{name}}!',
	     * })
	     * class Greet {
	     *   name: string;
	     *
	     *   constructor() {
	     *     this.name = 'World';
	     *   }
	     * }
	     * ```
	     *
	     * @deprecated Use Component instead.
	     *
	     * {\@link Component}
	     */
	    var ViewMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function ViewMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
	            this.templateUrl = templateUrl;
	            this.template = template;
	            this.styleUrls = styleUrls;
	            this.styles = styles;
	            this.encapsulation = encapsulation;
	            this.animations = animations;
	            this.interpolation = interpolation;
	        }
	        return ViewMetadata;
	    }());

	    /**
	     * \@whatItDoes Represents the version of Angular
	     *
	     * \@stable
	     */
	    var Version = (function () {
	        /**
	         * @param {?} full
	         */
	        function Version(full) {
	            this.full = full;
	        }
	        Object.defineProperty(Version.prototype, "major", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.full.split('.')[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(Version.prototype, "minor", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.full.split('.')[1]; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(Version.prototype, "patch", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.full.split('.').slice(2).join('.'); },
	            enumerable: true,
	            configurable: true
	        });
	        return Version;
	    }());
	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new Version('2.4.7');

	    /**
	     * Allows to refer to references which are not yet defined.
	     *
	     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	     * DI is declared,
	     * but not yet defined. It is also used when the `token` which we use when creating a query is not
	     * yet defined.
	     *
	     * ### Example
	     * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
	     * \@experimental
	     * @param {?} forwardRefFn
	     * @return {?}
	     */
	    function forwardRef(forwardRefFn) {
	        ((forwardRefFn)).__forward_ref__ = forwardRef;
	        ((forwardRefFn)).toString = function () { return stringify(this()); };
	        return (((forwardRefFn)));
	    }
	    /**
	     * Lazily retrieves the reference value from a forwardRef.
	     *
	     * Acts as the identity function when given a non-forward-ref value.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
	     *
	     * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
	     *
	     * See: {\@link forwardRef}
	     * \@experimental
	     * @param {?} type
	     * @return {?}
	     */
	    function resolveForwardRef(type) {
	        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
	            type.__forward_ref__ === forwardRef) {
	            return ((type))();
	        }
	        else {
	            return type;
	        }
	    }

	    var /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();
	    var /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	    var _NullInjector = (function () {
	        function _NullInjector() {
	        }
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        _NullInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
	            if (notFoundValue === _THROW_IF_NOT_FOUND) {
	                throw new Error("No provider for " + stringify(token) + "!");
	            }
	            return notFoundValue;
	        };
	        return _NullInjector;
	    }());
	    /**
	     * \@whatItDoes Injector interface
	     * \@howToUse
	     * ```
	     * const injector: Injector = ...;
	     * injector.get(...);
	     * ```
	     *
	     * \@description
	     * For more details, see the {\@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
	     *
	     * ### Example
	     *
	     * {\@example core/di/ts/injector_spec.ts region='Injector'}
	     *
	     * `Injector` returns itself when given `Injector` as a token:
	     * {\@example core/di/ts/injector_spec.ts region='injectInjector'}
	     *
	     * \@stable
	     * @abstract
	     */
	    var Injector = (function () {
	        function Injector() {
	        }
	        /**
	         * Retrieves an instance from the injector based on the provided token.
	         * If not found:
	         * - Throws {\@link NoProviderError} if no `notFoundValue` that is not equal to
	         * Injector.THROW_IF_NOT_FOUND is given
	         * - Returns the `notFoundValue` otherwise
	         * @abstract
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        Injector.prototype.get = function (token, notFoundValue) { };
	        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	        Injector.NULL = new _NullInjector();
	        return Injector;
	    }());

	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@stable
	     */
	    var BaseError = (function (_super) {
	        __extends$1(BaseError, _super);
	        /**
	         * @param {?} message
	         */
	        function BaseError(message) {
	            _super.call(this, message);
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            // TODO(bradfordcsmith): Remove this hack when
	            //     google/closure-compiler/issues/2102 is fixed.
	            var nativeError = new Error(message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.message; },
	            /**
	             * @param {?} message
	             * @return {?}
	             */
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () { return ((this._nativeError)).stack; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) { ((this._nativeError)).stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * \@stable
	     */
	    var WrappedError = (function (_super) {
	        __extends$1(WrappedError, _super);
	        /**
	         * @param {?} message
	         * @param {?} error
	         */
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @param {?} keys
	     * @return {?}
	     */
	    function findFirstClosedCycle(keys) {
	        var /** @type {?} */ res = [];
	        for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	            if (res.indexOf(keys[i]) > -1) {
	                res.push(keys[i]);
	                return res;
	            }
	            res.push(keys[i]);
	        }
	        return res;
	    }
	    /**
	     * @param {?} keys
	     * @return {?}
	     */
	    function constructResolvingPath(keys) {
	        if (keys.length > 1) {
	            var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());
	            var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });
	            return ' (' + tokenStrs.join(' -> ') + ')';
	        }
	        return '';
	    }
	    /**
	     * Base class for all errors arising from misconfigured providers.
	     * \@stable
	     */
	    var AbstractProviderError = (function (_super) {
	        __extends(AbstractProviderError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} key
	         * @param {?} constructResolvingMessage
	         */
	        function AbstractProviderError(injector, key, constructResolvingMessage) {
	            _super.call(this, 'DI Error');
	            this.keys = [key];
	            this.injectors = [injector];
	            this.constructResolvingMessage = constructResolvingMessage;
	            this.message = this.constructResolvingMessage(this.keys);
	        }
	        /**
	         * @param {?} injector
	         * @param {?} key
	         * @return {?}
	         */
	        AbstractProviderError.prototype.addKey = function (injector, key) {
	            this.injectors.push(injector);
	            this.keys.push(key);
	            this.message = this.constructResolvingMessage(this.keys);
	        };
	        return AbstractProviderError;
	    }(BaseError));
	    /**
	     * Thrown when trying to retrieve a dependency by key from {\@link Injector}, but the
	     * {\@link Injector} does not have a {\@link Provider} for the given key.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor(b:B) {}
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	     * ```
	     * \@stable
	     */
	    var NoProviderError = (function (_super) {
	        __extends(NoProviderError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} key
	         */
	        function NoProviderError(injector, key) {
	            _super.call(this, injector, key, function (keys) {
	                var first = stringify(keys[0].token);
	                return "No provider for " + first + "!" + constructResolvingPath(keys);
	            });
	        }
	        return NoProviderError;
	    }(AbstractProviderError));
	    /**
	     * Thrown when dependencies form a cycle.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
	     *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
	     * ]);
	     *
	     * expect(() => injector.get("one")).toThrowError();
	     * ```
	     *
	     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	     * \@stable
	     */
	    var CyclicDependencyError = (function (_super) {
	        __extends(CyclicDependencyError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} key
	         */
	        function CyclicDependencyError(injector, key) {
	            _super.call(this, injector, key, function (keys) {
	                return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	            });
	        }
	        return CyclicDependencyError;
	    }(AbstractProviderError));
	    /**
	     * Thrown when a constructing type returns with an Error.
	     *
	     * The `InstantiationError` class contains the original error plus the dependency graph which caused
	     * this object to be instantiated.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor() {
	     *     throw new Error('message');
	     *   }
	     * }
	     *
	     * var injector = Injector.resolveAndCreate([A]);
	     * try {
	     *   injector.get(A);
	     * } catch (e) {
	     *   expect(e instanceof InstantiationError).toBe(true);
	     *   expect(e.originalException.message).toEqual("message");
	     *   expect(e.originalStack).toBeDefined();
	     * }
	     * ```
	     * \@stable
	     */
	    var InstantiationError = (function (_super) {
	        __extends(InstantiationError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} originalException
	         * @param {?} originalStack
	         * @param {?} key
	         */
	        function InstantiationError(injector, originalException, originalStack, key) {
	            _super.call(this, 'DI Error', originalException);
	            this.keys = [key];
	            this.injectors = [injector];
	        }
	        /**
	         * @param {?} injector
	         * @param {?} key
	         * @return {?}
	         */
	        InstantiationError.prototype.addKey = function (injector, key) {
	            this.injectors.push(injector);
	            this.keys.push(key);
	        };
	        Object.defineProperty(InstantiationError.prototype, "message", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ first = stringify(this.keys[0].token);
	                return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(InstantiationError.prototype, "causeKey", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.keys[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        return InstantiationError;
	    }(WrappedError));
	    /**
	     * Thrown when an object other then {\@link Provider} (or `Type`) is passed to {\@link Injector}
	     * creation.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
	     *
	     * ```typescript
	     * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	     * ```
	     * \@stable
	     */
	    var InvalidProviderError = (function (_super) {
	        __extends(InvalidProviderError, _super);
	        /**
	         * @param {?} provider
	         */
	        function InvalidProviderError(provider) {
	            _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
	        }
	        return InvalidProviderError;
	    }(BaseError));
	    /**
	     * Thrown when the class has no annotation information.
	     *
	     * Lack of annotation information prevents the {\@link Injector} from determining which dependencies
	     * need to be injected into the constructor.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor(b) {}
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	     * ```
	     *
	     * This error is also thrown when the class not marked with {\@link Injectable} has parameter types.
	     *
	     * ```typescript
	     * class B {}
	     *
	     * class A {
	     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	     * ```
	     * \@stable
	     */
	    var NoAnnotationError = (function (_super) {
	        __extends(NoAnnotationError, _super);
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} params
	         */
	        function NoAnnotationError(typeOrFunc, params) {
	            _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
	        }
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} params
	         * @return {?}
	         */
	        NoAnnotationError._genMessage = function (typeOrFunc, params) {
	            var /** @type {?} */ signature = [];
	            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {
	                var /** @type {?} */ parameter = params[i];
	                if (!parameter || parameter.length == 0) {
	                    signature.push('?');
	                }
	                else {
	                    signature.push(parameter.map(stringify).join(' '));
	                }
	            }
	            return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
	                signature.join(', ') + '). ' +
	                'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
	                stringify(typeOrFunc) + '\' is decorated with Injectable.';
	        };
	        return NoAnnotationError;
	    }(BaseError));
	    /**
	     * Thrown when getting an object by index.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
	     *
	     * ```typescript
	     * class A {}
	     *
	     * var injector = Injector.resolveAndCreate([A]);
	     *
	     * expect(() => injector.getAt(100)).toThrowError();
	     * ```
	     * \@stable
	     */
	    var OutOfBoundsError = (function (_super) {
	        __extends(OutOfBoundsError, _super);
	        /**
	         * @param {?} index
	         */
	        function OutOfBoundsError(index) {
	            _super.call(this, "Index " + index + " is out-of-bounds.");
	        }
	        return OutOfBoundsError;
	    }(BaseError));
	    /**
	     * Thrown when a multi provider and a regular provider are bound to the same token.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * expect(() => Injector.resolveAndCreate([
	     *   { provide: "Strings", useValue: "string1", multi: true},
	     *   { provide: "Strings", useValue: "string2", multi: false}
	     * ])).toThrowError();
	     * ```
	     */
	    var MixingMultiProvidersWithRegularProvidersError = (function (_super) {
	        __extends(MixingMultiProvidersWithRegularProvidersError, _super);
	        /**
	         * @param {?} provider1
	         * @param {?} provider2
	         */
	        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	            _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +
	                provider2.toString());
	        }
	        return MixingMultiProvidersWithRegularProvidersError;
	    }(BaseError));

	    /**
	     * A unique object used for retrieving items from the {\@link ReflectiveInjector}.
	     *
	     * Keys have:
	     * - a system-wide unique `id`.
	     * - a `token`.
	     *
	     * `Key` is used internally by {\@link ReflectiveInjector} because its system-wide unique `id` allows
	     * the
	     * injector to store created objects in a more efficient way.
	     *
	     * `Key` should not be created directly. {\@link ReflectiveInjector} creates keys automatically when
	     * resolving
	     * providers.
	     * \@experimental
	     */
	    var ReflectiveKey = (function () {
	        /**
	         * Private
	         * @param {?} token
	         * @param {?} id
	         */
	        function ReflectiveKey(token, id) {
	            this.token = token;
	            this.id = id;
	            if (!token) {
	                throw new Error('Token must be defined!');
	            }
	        }
	        Object.defineProperty(ReflectiveKey.prototype, "displayName", {
	            /**
	             * Returns a stringified token.
	             * @return {?}
	             */
	            get: function () { return stringify(this.token); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Retrieves a `Key` for a token.
	         * @param {?} token
	         * @return {?}
	         */
	        ReflectiveKey.get = function (token) {
	            return _globalKeyRegistry.get(resolveForwardRef(token));
	        };
	        Object.defineProperty(ReflectiveKey, "numberOfKeys", {
	            /**
	             * @return {?} the number of keys registered in the system.
	             */
	            get: function () { return _globalKeyRegistry.numberOfKeys; },
	            enumerable: true,
	            configurable: true
	        });
	        return ReflectiveKey;
	    }());
	    /**
	     * \@internal
	     */
	    var KeyRegistry = (function () {
	        function KeyRegistry() {
	            this._allKeys = new Map();
	        }
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        KeyRegistry.prototype.get = function (token) {
	            if (token instanceof ReflectiveKey)
	                return token;
	            if (this._allKeys.has(token)) {
	                return this._allKeys.get(token);
	            }
	            var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
	            this._allKeys.set(token, newKey);
	            return newKey;
	        };
	        Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._allKeys.size; },
	            enumerable: true,
	            configurable: true
	        });
	        return KeyRegistry;
	    }());
	    var /** @type {?} */ _globalKeyRegistry = new KeyRegistry();

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @whatItDoes Represents a type that a Component or other object is instances of.
	     *
	     * @description
	     *
	     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
	     * the `MyCustomComponent` constructor function.
	     *
	     * @stable
	     */
	    var /** @type {?} */ Type = Function;
	    /**
	     * @param {?} v
	     * @return {?}
	     */
	    function isType(v) {
	        return typeof v === 'function';
	    }

	    /**
	     * Attention: This regex has to hold even if the code is minified!
	     */
	    var /** @type {?} */ DELEGATE_CTOR = /^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?\S+\.apply\(this,\s*arguments\)/;
	    var ReflectionCapabilities = (function () {
	        /**
	         * @param {?=} reflect
	         */
	        function ReflectionCapabilities(reflect) {
	            this._reflect = reflect || global$1.Reflect;
	        }
	        /**
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	        /**
	         * @param {?} t
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.factory = function (t) { return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            return new (t.bind.apply(t, [void 0].concat(args)))();
	        }; };
	        /**
	         * \@internal
	         * @param {?} paramTypes
	         * @param {?} paramAnnotations
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
	            var /** @type {?} */ result;
	            if (typeof paramTypes === 'undefined') {
	                result = new Array(paramAnnotations.length);
	            }
	            else {
	                result = new Array(paramTypes.length);
	            }
	            for (var /** @type {?} */ i = 0; i < result.length; i++) {
	                // TS outputs Object for parameters without types, while Traceur omits
	                // the annotations. For now we preserve the Traceur behavior to aid
	                // migration, but this can be revisited.
	                if (typeof paramTypes === 'undefined') {
	                    result[i] = [];
	                }
	                else if (paramTypes[i] != Object) {
	                    result[i] = [paramTypes[i]];
	                }
	                else {
	                    result[i] = [];
	                }
	                if (paramAnnotations && isPresent(paramAnnotations[i])) {
	                    result[i] = result[i].concat(paramAnnotations[i]);
	                }
	            }
	            return result;
	        };
	        /**
	         * @param {?} type
	         * @param {?} parentCtor
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
	            // If we have no decorators, we only have function.length as metadata.
	            // In that case, to detect whether a child class declared an own constructor or not,
	            // we need to look inside of that constructor to check whether it is
	            // just calling the parent.
	            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
	            // that sets 'design:paramtypes' to []
	            // if a class inherits from another class but has no ctor declared itself.
	            if (DELEGATE_CTOR.exec(type.toString())) {
	                return null;
	            }
	            // Prefer the direct API.
	            if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
	                return ((type)).parameters;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;
	            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
	                // Newer tsickle uses a function closure
	                // Retain the non-function case for compatibility with older tsickle
	                var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
	                var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
	                var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) {
	                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
	                });
	                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	            }
	            // API for metadata created by invoking the decorators.
	            if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {
	                var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
	                var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
	                if (paramTypes || paramAnnotations) {
	                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	                }
	            }
	            // If a class has no decorators, at least create metadata
	            // based on function.length.
	            // Note: We know that this is a real constructor as we checked
	            // the content of the constructor above.
	            return new Array(((type.length))).fill(undefined);
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.parameters = function (type) {
	            // Note: only report metadata if we have at least one class decorator
	            // to stay in sync with the static reflector.
	            if (!isType(type)) {
	                return [];
	            }
	            var /** @type {?} */ parentCtor = getParentCtor(type);
	            var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);
	            if (!parameters && parentCtor !== Object) {
	                parameters = this.parameters(parentCtor);
	            }
	            return parameters || [];
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} parentCtor
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
	            // Prefer the direct API.
	            if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
	                var /** @type {?} */ annotations = ((typeOrFunc)).annotations;
	                if (typeof annotations === 'function' && annotations.annotations) {
	                    annotations = annotations.annotations;
	                }
	                return annotations;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
	                return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
	            }
	            // API for metadata created by invoking the decorators.
	            if (this._reflect && this._reflect.getOwnMetadata) {
	                return this._reflect.getOwnMetadata('annotations', typeOrFunc);
	            }
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	            if (!isType(typeOrFunc)) {
	                return [];
	            }
	            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
	            var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
	            var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
	            return parentAnnotations.concat(ownAnnotations);
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} parentCtor
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
	            // Prefer the direct API.
	            if (((typeOrFunc)).propMetadata &&
	                ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
	                var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;
	                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
	                    propMetadata = propMetadata.propMetadata;
	                }
	                return propMetadata;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            if (((typeOrFunc)).propDecorators &&
	                ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
	                var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;
	                var /** @type {?} */ propMetadata_1 = ({});
	                Object.keys(propDecorators_1).forEach(function (prop) {
	                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
	                });
	                return propMetadata_1;
	            }
	            // API for metadata created by invoking the decorators.
	            if (this._reflect && this._reflect.getOwnMetadata) {
	                return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
	            }
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	            if (!isType(typeOrFunc)) {
	                return {};
	            }
	            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
	            var /** @type {?} */ propMetadata = {};
	            if (parentCtor !== Object) {
	                var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);
	                Object.keys(parentPropMetadata_1).forEach(function (propName) {
	                    propMetadata[propName] = parentPropMetadata_1[propName];
	                });
	            }
	            var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
	            if (ownPropMetadata) {
	                Object.keys(ownPropMetadata).forEach(function (propName) {
	                    var /** @type {?} */ decorators = [];
	                    if (propMetadata.hasOwnProperty(propName)) {
	                        decorators.push.apply(decorators, propMetadata[propName]);
	                    }
	                    decorators.push.apply(decorators, ownPropMetadata[propName]);
	                    propMetadata[propName] = decorators;
	                });
	            }
	            return propMetadata;
	        };
	        /**
	         * @param {?} type
	         * @param {?} lcProperty
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	            return type instanceof Type && lcProperty in type.prototype;
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.getter = function (name) { return ((new Function('o', 'return o.' + name + ';'))); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.setter = function (name) {
	            return ((new Function('o', 'v', 'return o.' + name + ' = v;')));
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.method = function (name) {
	            var /** @type {?} */ functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	            return ((new Function('o', 'args', functionBody)));
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.importUri = function (type) {
	            // StaticSymbol
	            if (typeof type === 'object' && type['filePath']) {
	                return type['filePath'];
	            }
	            // Runtime type
	            return "./" + stringify(type);
	        };
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} runtime
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };
	        /**
	         * @param {?} enumIdentifier
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
	        return ReflectionCapabilities;
	    }());
	    /**
	     * @param {?} decoratorInvocations
	     * @return {?}
	     */
	    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
	        if (!decoratorInvocations) {
	            return [];
	        }
	        return decoratorInvocations.map(function (decoratorInvocation) {
	            var /** @type {?} */ decoratorType = decoratorInvocation.type;
	            var /** @type {?} */ annotationCls = decoratorType.annotationCls;
	            var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
	            return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
	        });
	    }
	    /**
	     * @param {?} ctor
	     * @return {?}
	     */
	    function getParentCtor(ctor) {
	        var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);
	        var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;
	        // Note: We always use `Object` as the null value
	        // to simplify checking later on.
	        return parentCtor || Object;
	    }

	    /**
	     * Provides read-only access to reflection data about symbols. Used internally by Angular
	     * to power dependency injection and compilation.
	     * @abstract
	     */
	    var ReflectorReader = (function () {
	        function ReflectorReader() {
	        }
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.parameters = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.annotations = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.importUri = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} runtime
	         * @return {?}
	         */
	        ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { };
	        /**
	         * @abstract
	         * @param {?} identifier
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectorReader.prototype.resolveEnum = function (identifier, name) { };
	        return ReflectorReader;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Provides access to reflection data about symbols. Used internally by Angular
	     * to power dependency injection and compilation.
	     */
	    var Reflector = (function (_super) {
	        __extends$2(Reflector, _super);
	        /**
	         * @param {?} reflectionCapabilities
	         */
	        function Reflector(reflectionCapabilities) {
	            _super.call(this);
	            this.reflectionCapabilities = reflectionCapabilities;
	        }
	        /**
	         * @param {?} caps
	         * @return {?}
	         */
	        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        Reflector.prototype.parameters = function (typeOrFunc) {
	            return this.reflectionCapabilities.parameters(typeOrFunc);
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        Reflector.prototype.annotations = function (typeOrFunc) {
	            return this.reflectionCapabilities.annotations(typeOrFunc);
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        Reflector.prototype.propMetadata = function (typeOrFunc) {
	            return this.reflectionCapabilities.propMetadata(typeOrFunc);
	        };
	        /**
	         * @param {?} type
	         * @param {?} lcProperty
	         * @return {?}
	         */
	        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} runtime
	         * @return {?}
	         */
	        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
	            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
	        };
	        /**
	         * @param {?} identifier
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.resolveEnum = function (identifier, name) {
	            return this.reflectionCapabilities.resolveEnum(identifier, name);
	        };
	        return Reflector;
	    }(ReflectorReader));

	    /**
	     * The {@link Reflector} used internally in Angular to access metadata
	     * about symbols.
	     */
	    var /** @type {?} */ reflector = new Reflector(new ReflectionCapabilities());

	    /**
	     * `Dependency` is used by the framework to extend DI.
	     * This is internal to Angular and should not be used directly.
	     */
	    var ReflectiveDependency = (function () {
	        /**
	         * @param {?} key
	         * @param {?} optional
	         * @param {?} visibility
	         */
	        function ReflectiveDependency(key, optional, visibility) {
	            this.key = key;
	            this.optional = optional;
	            this.visibility = visibility;
	        }
	        /**
	         * @param {?} key
	         * @return {?}
	         */
	        ReflectiveDependency.fromKey = function (key) {
	            return new ReflectiveDependency(key, false, null);
	        };
	        return ReflectiveDependency;
	    }());
	    var /** @type {?} */ _EMPTY_LIST = [];
	    var ResolvedReflectiveProvider_ = (function () {
	        /**
	         * @param {?} key
	         * @param {?} resolvedFactories
	         * @param {?} multiProvider
	         */
	        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
	            this.key = key;
	            this.resolvedFactories = resolvedFactories;
	            this.multiProvider = multiProvider;
	        }
	        Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.resolvedFactories[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        return ResolvedReflectiveProvider_;
	    }());
	    /**
	     * An internal resolved representation of a factory function created by resolving {\@link
	     * Provider}.
	     * \@experimental
	     */
	    var ResolvedReflectiveFactory = (function () {
	        /**
	         * @param {?} factory
	         * @param {?} dependencies
	         */
	        function ResolvedReflectiveFactory(factory, dependencies) {
	            this.factory = factory;
	            this.dependencies = dependencies;
	        }
	        return ResolvedReflectiveFactory;
	    }());
	    /**
	     * Resolve a single provider.
	     * @param {?} provider
	     * @return {?}
	     */
	    function resolveReflectiveFactory(provider) {
	        var /** @type {?} */ factoryFn;
	        var /** @type {?} */ resolvedDeps;
	        if (provider.useClass) {
	            var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);
	            factoryFn = reflector.factory(useClass);
	            resolvedDeps = _dependenciesFor(useClass);
	        }
	        else if (provider.useExisting) {
	            factoryFn = function (aliasInstance) { return aliasInstance; };
	            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
	        }
	        else if (provider.useFactory) {
	            factoryFn = provider.useFactory;
	            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
	        }
	        else {
	            factoryFn = function () { return provider.useValue; };
	            resolvedDeps = _EMPTY_LIST;
	        }
	        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
	    }
	    /**
	     * Converts the {\@link Provider} into {\@link ResolvedProvider}.
	     *
	     * {\@link Injector} internally only uses {\@link ResolvedProvider}, {\@link Provider} contains
	     * convenience provider syntax.
	     * @param {?} provider
	     * @return {?}
	     */
	    function resolveReflectiveProvider(provider) {
	        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
	    }
	    /**
	     * Resolve a list of Providers.
	     * @param {?} providers
	     * @return {?}
	     */
	    function resolveReflectiveProviders(providers) {
	        var /** @type {?} */ normalized = _normalizeProviders(providers, []);
	        var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);
	        var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
	        return Array.from(resolvedProviderMap.values());
	    }
	    /**
	     * Merges a list of ResolvedProviders into a list where
	     * each key is contained exactly once and multi providers
	     * have been merged.
	     * @param {?} providers
	     * @param {?} normalizedProvidersMap
	     * @return {?}
	     */
	    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
	        for (var /** @type {?} */ i = 0; i < providers.length; i++) {
	            var /** @type {?} */ provider = providers[i];
	            var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);
	            if (existing) {
	                if (provider.multiProvider !== existing.multiProvider) {
	                    throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
	                }
	                if (provider.multiProvider) {
	                    for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {
	                        existing.resolvedFactories.push(provider.resolvedFactories[j]);
	                    }
	                }
	                else {
	                    normalizedProvidersMap.set(provider.key.id, provider);
	                }
	            }
	            else {
	                var /** @type {?} */ resolvedProvider = void 0;
	                if (provider.multiProvider) {
	                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
	                }
	                else {
	                    resolvedProvider = provider;
	                }
	                normalizedProvidersMap.set(provider.key.id, resolvedProvider);
	            }
	        }
	        return normalizedProvidersMap;
	    }
	    /**
	     * @param {?} providers
	     * @param {?} res
	     * @return {?}
	     */
	    function _normalizeProviders(providers, res) {
	        providers.forEach(function (b) {
	            if (b instanceof Type) {
	                res.push({ provide: b, useClass: b });
	            }
	            else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
	                res.push(/** @type {?} */ (b));
	            }
	            else if (b instanceof Array) {
	                _normalizeProviders(b, res);
	            }
	            else {
	                throw new InvalidProviderError(b);
	            }
	        });
	        return res;
	    }
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} dependencies
	     * @return {?}
	     */
	    function constructDependencies(typeOrFunc, dependencies) {
	        if (!dependencies) {
	            return _dependenciesFor(typeOrFunc);
	        }
	        else {
	            var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });
	            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
	        }
	    }
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    function _dependenciesFor(typeOrFunc) {
	        var /** @type {?} */ params = reflector.parameters(typeOrFunc);
	        if (!params)
	            return [];
	        if (params.some(function (p) { return p == null; })) {
	            throw new NoAnnotationError(typeOrFunc, params);
	        }
	        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	    }
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} metadata
	     * @param {?} params
	     * @return {?}
	     */
	    function _extractToken(typeOrFunc, metadata, params) {
	        var /** @type {?} */ token = null;
	        var /** @type {?} */ optional = false;
	        if (!Array.isArray(metadata)) {
	            if (metadata instanceof Inject) {
	                return _createDependency(metadata.token, optional, null);
	            }
	            else {
	                return _createDependency(metadata, optional, null);
	            }
	        }
	        var /** @type {?} */ visibility = null;
	        for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {
	            var /** @type {?} */ paramMetadata = metadata[i];
	            if (paramMetadata instanceof Type) {
	                token = paramMetadata;
	            }
	            else if (paramMetadata instanceof Inject) {
	                token = paramMetadata.token;
	            }
	            else if (paramMetadata instanceof Optional) {
	                optional = true;
	            }
	            else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
	                visibility = paramMetadata;
	            }
	        }
	        token = resolveForwardRef(token);
	        if (token != null) {
	            return _createDependency(token, optional, visibility);
	        }
	        else {
	            throw new NoAnnotationError(typeOrFunc, params);
	        }
	    }
	    /**
	     * @param {?} token
	     * @param {?} optional
	     * @param {?} visibility
	     * @return {?}
	     */
	    function _createDependency(token, optional, visibility) {
	        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
	    }

	    // Threshold for the dynamic version
	    var /** @type {?} */ UNDEFINED = new Object();
	    /**
	     * A ReflectiveDependency injection container used for instantiating objects and resolving
	     * dependencies.
	     *
	     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	     * constructor dependencies.
	     *
	     * In typical use, application code asks for the dependencies in the constructor and they are
	     * resolved by the `Injector`.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
	     *
	     * The following example creates an `Injector` configured to create `Engine` and `Car`.
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	     * var car = injector.get(Car);
	     * expect(car instanceof Car).toBe(true);
	     * expect(car.engine instanceof Engine).toBe(true);
	     * ```
	     *
	     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	     * resolve all of the object's dependencies automatically.
	     *
	     * \@stable
	     * @abstract
	     */
	    var ReflectiveInjector = (function () {
	        function ReflectiveInjector() {
	        }
	        /**
	         * Turns an array of provider definitions into an array of resolved providers.
	         *
	         * A resolution is a process of flattening multiple nested arrays and converting individual
	         * providers into an array of {\@link ResolvedReflectiveProvider}s.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
	         *
	         * ```typescript
	         * \@Injectable()
	         * class Engine {
	         * }
	         *
	         * \@Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
	         *
	         * expect(providers.length).toEqual(2);
	         *
	         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
	         * expect(providers[0].key.displayName).toBe("Car");
	         * expect(providers[0].dependencies.length).toEqual(1);
	         * expect(providers[0].factory).toBeDefined();
	         *
	         * expect(providers[1].key.displayName).toBe("Engine");
	         * });
	         * ```
	         *
	         * See {\@link ReflectiveInjector#fromResolvedProviders} for more info.
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector.resolve = function (providers) {
	            return resolveReflectiveProviders(providers);
	        };
	        /**
	         * Resolves an array of providers and creates an injector from those providers.
	         *
	         * The passed-in providers can be an array of `Type`, {\@link Provider},
	         * or a recursive array of more providers.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
	         *
	         * ```typescript
	         * \@Injectable()
	         * class Engine {
	         * }
	         *
	         * \@Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	         * expect(injector.get(Car) instanceof Car).toBe(true);
	         * ```
	         *
	         * This function is slower than the corresponding `fromResolvedProviders`
	         * because it needs to resolve the passed-in providers first.
	         * See {\@link Injector#resolve} and {\@link Injector#fromResolvedProviders}.
	         * @param {?} providers
	         * @param {?=} parent
	         * @return {?}
	         */
	        ReflectiveInjector.resolveAndCreate = function (providers, parent) {
	            if (parent === void 0) { parent = null; }
	            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
	        };
	        /**
	         * Creates an injector from previously resolved providers.
	         *
	         * This API is the recommended way to construct injectors in performance-sensitive parts.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
	         *
	         * ```typescript
	         * \@Injectable()
	         * class Engine {
	         * }
	         *
	         * \@Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var providers = ReflectiveInjector.resolve([Car, Engine]);
	         * var injector = ReflectiveInjector.fromResolvedProviders(providers);
	         * expect(injector.get(Car) instanceof Car).toBe(true);
	         * ```
	         * \@experimental
	         * @param {?} providers
	         * @param {?=} parent
	         * @return {?}
	         */
	        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
	            if (parent === void 0) { parent = null; }
	            return new ReflectiveInjector_(providers, parent);
	        };
	        /**
	         * Parent of this injector.
	         *
	         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	         * -->
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
	         *
	         * ```typescript
	         * var parent = ReflectiveInjector.resolveAndCreate([]);
	         * var child = parent.resolveAndCreateChild([]);
	         * expect(child.parent).toBe(parent);
	         * ```
	         * @abstract
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.parent = function () { };
	        /**
	         * Resolves an array of providers and creates a child injector from those providers.
	         *
	         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	         * -->
	         *
	         * The passed-in providers can be an array of `Type`, {\@link Provider},
	         * or a recursive array of more providers.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
	         *
	         * ```typescript
	         * class ParentProvider {}
	         * class ChildProvider {}
	         *
	         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
	         * var child = parent.resolveAndCreateChild([ChildProvider]);
	         *
	         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	         * ```
	         *
	         * This function is slower than the corresponding `createChildFromResolved`
	         * because it needs to resolve the passed-in providers first.
	         * See {\@link Injector#resolve} and {\@link Injector#createChildFromResolved}.
	         * @abstract
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };
	        /**
	         * Creates a child injector from previously resolved providers.
	         *
	         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	         * -->
	         *
	         * This API is the recommended way to construct injectors in performance-sensitive parts.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
	         *
	         * ```typescript
	         * class ParentProvider {}
	         * class ChildProvider {}
	         *
	         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
	         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
	         *
	         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
	         * var child = parent.createChildFromResolved(childProviders);
	         *
	         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	         * ```
	         * @abstract
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };
	        /**
	         * Resolves a provider and instantiates an object in the context of the injector.
	         *
	         * The created object does not get cached by the injector.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
	         *
	         * ```typescript
	         * \@Injectable()
	         * class Engine {
	         * }
	         *
	         * \@Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	         *
	         * var car = injector.resolveAndInstantiate(Car);
	         * expect(car.engine).toBe(injector.get(Engine));
	         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
	         * ```
	         * @abstract
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };
	        /**
	         * Instantiates an object using a resolved provider in the context of the injector.
	         *
	         * The created object does not get cached by the injector.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
	         *
	         * ```typescript
	         * \@Injectable()
	         * class Engine {
	         * }
	         *
	         * \@Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	         * var carProvider = ReflectiveInjector.resolve([Car])[0];
	         * var car = injector.instantiateResolved(carProvider);
	         * expect(car.engine).toBe(injector.get(Engine));
	         * expect(car).not.toBe(injector.instantiateResolved(carProvider));
	         * ```
	         * @abstract
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.instantiateResolved = function (provider) { };
	        /**
	         * @abstract
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.get = function (token, notFoundValue) { };
	        return ReflectiveInjector;
	    }());
	    var ReflectiveInjector_ = (function () {
	        /**
	         * Private
	         * @param {?} _providers
	         * @param {?=} _parent
	         */
	        function ReflectiveInjector_(_providers, _parent) {
	            if (_parent === void 0) { _parent = null; }
	            /** @internal */
	            this._constructionCounter = 0;
	            this._providers = _providers;
	            this._parent = _parent;
	            var len = _providers.length;
	            this.keyIds = new Array(len);
	            this.objs = new Array(len);
	            for (var i = 0; i < len; i++) {
	                this.keyIds[i] = _providers[i].key.id;
	                this.objs[i] = UNDEFINED;
	            }
	        }
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
	        };
	        Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parent; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
	            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	            return this.createChildFromResolved(ResolvedReflectiveProviders);
	        };
	        /**
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
	            var /** @type {?} */ inj = new ReflectiveInjector_(providers);
	            inj._parent = this;
	            return inj;
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
	            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
	            return this._instantiateProvider(provider);
	        };
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {
	            if (index < 0 || index >= this._providers.length) {
	                throw new OutOfBoundsError(index);
	            }
	            return this._providers[index];
	        };
	        /**
	         * \@internal
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._new = function (provider) {
	            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
	                throw new CyclicDependencyError(this, provider.key);
	            }
	            return this._instantiateProvider(provider);
	        };
	        /**
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
	            if (provider.multiProvider) {
	                var /** @type {?} */ res = new Array(provider.resolvedFactories.length);
	                for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {
	                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
	                }
	                return res;
	            }
	            else {
	                return this._instantiate(provider, provider.resolvedFactories[0]);
	            }
	        };
	        /**
	         * @param {?} provider
	         * @param {?} ResolvedReflectiveFactory
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {
	            var _this = this;
	            var /** @type {?} */ factory = ResolvedReflectiveFactory.factory;
	            var /** @type {?} */ deps;
	            try {
	                deps =
	                    ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });
	            }
	            catch (e) {
	                if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
	                    e.addKey(this, provider.key);
	                }
	                throw e;
	            }
	            var /** @type {?} */ obj;
	            try {
	                obj = factory.apply(void 0, deps);
	            }
	            catch (e) {
	                throw new InstantiationError(this, e, e.stack, provider.key);
	            }
	            return obj;
	        };
	        /**
	         * @param {?} dep
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {
	            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
	        };
	        /**
	         * @param {?} key
	         * @param {?} visibility
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {
	            if (key === INJECTOR_KEY) {
	                return this;
	            }
	            if (visibility instanceof Self) {
	                return this._getByKeySelf(key, notFoundValue);
	            }
	            else {
	                return this._getByKeyDefault(key, notFoundValue, visibility);
	            }
	        };
	        /**
	         * @param {?} keyId
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {
	            for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {
	                if (this.keyIds[i] === keyId) {
	                    if (this.objs[i] === UNDEFINED) {
	                        this.objs[i] = this._new(this._providers[i]);
	                    }
	                    return this.objs[i];
	                }
	            }
	            return UNDEFINED;
	        };
	        /**
	         * \@internal
	         * @param {?} key
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
	            if (notFoundValue !== THROW_IF_NOT_FOUND) {
	                return notFoundValue;
	            }
	            else {
	                throw new NoProviderError(this, key);
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} key
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
	            var /** @type {?} */ obj = this._getObjByKeyId(key.id);
	            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
	        };
	        /**
	         * \@internal
	         * @param {?} key
	         * @param {?} notFoundValue
	         * @param {?} visibility
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {
	            var /** @type {?} */ inj;
	            if (visibility instanceof SkipSelf) {
	                inj = this._parent;
	            }
	            else {
	                inj = this;
	            }
	            while (inj instanceof ReflectiveInjector_) {
	                var /** @type {?} */ inj_ = (inj);
	                var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);
	                if (obj !== UNDEFINED)
	                    return obj;
	                inj = inj_._parent;
	            }
	            if (inj !== null) {
	                return inj.get(key.token, notFoundValue);
	            }
	            else {
	                return this._throwOrNull(key, notFoundValue);
	            }
	        };
	        Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
	                    .join(', ');
	                return "ReflectiveInjector(providers: [" + providers + "])";
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
	        return ReflectiveInjector_;
	    }());
	    var /** @type {?} */ INJECTOR_KEY = ReflectiveKey.get(Injector);
	    /**
	     * @param {?} injector
	     * @param {?} fn
	     * @return {?}
	     */
	    function _mapProviders(injector, fn) {
	        var /** @type {?} */ res = new Array(injector._providers.length);
	        for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {
	            res[i] = fn(injector.getProviderAtIndex(i));
	        }
	        return res;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * \@whatItDoes Provides a hook for centralized exception handling.
	     *
	     * \@description
	     *
	     * The default implementation of `ErrorHandler` prints error messages to the `console`. To
	     * intercept error handling, write a custom exception handler that replaces this default as
	     * appropriate for your app.
	     *
	     * ### Example
	     *
	     * ```
	     * class MyErrorHandler implements ErrorHandler {
	     *   handleError(error) {
	     *     // do something with the exception
	     *   }
	     * }
	     *
	     * \@NgModule({
	     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
	     * })
	     * class MyModule {}
	     * ```
	     *
	     * \@stable
	     */
	    var ErrorHandler = (function () {
	        /**
	         * @param {?=} rethrowError
	         */
	        function ErrorHandler(rethrowError) {
	            if (rethrowError === void 0) { rethrowError = true; }
	            /**
	             * @internal
	             */
	            this._console = console;
	            this.rethrowError = rethrowError;
	        }
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype.handleError = function (error) {
	            var /** @type {?} */ originalError = this._findOriginalError(error);
	            var /** @type {?} */ originalStack = this._findOriginalStack(error);
	            var /** @type {?} */ context = this._findContext(error);
	            this._console.error("EXCEPTION: " + this._extractMessage(error));
	            if (originalError) {
	                this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
	            }
	            if (originalStack) {
	                this._console.error('ORIGINAL STACKTRACE:');
	                this._console.error(originalStack);
	            }
	            if (context) {
	                this._console.error('ERROR CONTEXT:');
	                this._console.error(context);
	            }
	            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
	            // when an error happens. If we do not rethrow, bootstrap will always succeed.
	            if (this.rethrowError)
	                throw error;
	        };
	        /**
	         * \@internal
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._extractMessage = function (error) {
	            return error instanceof Error ? error.message : error.toString();
	        };
	        /**
	         * \@internal
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._findContext = function (error) {
	            if (error) {
	                return error.context ? error.context :
	                    this._findContext(((error)).originalError);
	            }
	            return null;
	        };
	        /**
	         * \@internal
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._findOriginalError = function (error) {
	            var /** @type {?} */ e = ((error)).originalError;
	            while (e && ((e)).originalError) {
	                e = ((e)).originalError;
	            }
	            return e;
	        };
	        /**
	         * \@internal
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._findOriginalStack = function (error) {
	            if (!(error instanceof Error))
	                return null;
	            var /** @type {?} */ e = error;
	            var /** @type {?} */ stack = e.stack;
	            while (e instanceof Error && ((e)).originalError) {
	                e = ((e)).originalError;
	                if (e instanceof Error && e.stack) {
	                    stack = e.stack;
	                }
	            }
	            return stack;
	        };
	        return ErrorHandler;
	    }());

	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.merge = function (m1, m2) {
	            var /** @type {?} */ m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.equals = function (m1, m2) {
	            var /** @type {?} */ k1 = Object.keys(m1);
	            var /** @type {?} */ k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var /** @type {?} */ i = 0; i < k1.length; i++) {
	                var /** @type {?} */ key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        /**
	         * @param {?} arr
	         * @param {?} condition
	         * @return {?}
	         */
	        ListWrapper.findLast = function (arr, condition) {
	            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
	                if (condition(arr[i])) {
	                    return arr[i];
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} list
	         * @param {?} items
	         * @return {?}
	         */
	        ListWrapper.removeAll = function (list, items) {
	            for (var /** @type {?} */ i = 0; i < items.length; ++i) {
	                var /** @type {?} */ index = list.indexOf(items[i]);
	                if (index > -1) {
	                    list.splice(index, 1);
	                }
	            }
	        };
	        /**
	         * @param {?} list
	         * @param {?} el
	         * @return {?}
	         */
	        ListWrapper.remove = function (list, el) {
	            var /** @type {?} */ index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} a
	         * @param {?} b
	         * @return {?}
	         */
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var /** @type {?} */ i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        /**
	         * @param {?} list
	         * @return {?}
	         */
	        ListWrapper.flatten = function (list) {
	            return list.reduce(function (flat, item) {
	                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
	                return ((flat)).concat(flatItem);
	            }, []);
	        };
	        return ListWrapper;
	    }());
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isListLikeIterable(obj) {
	        if (!isJsObject(obj))
	            return false;
	        return Array.isArray(obj) ||
	            (!(obj instanceof Map) &&
	                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @param {?} comparator
	     * @return {?}
	     */
	    function areIterablesEqual(a, b, comparator) {
	        var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
	        var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
	        while (true) {
	            var /** @type {?} */ item1 = iterator1.next();
	            var /** @type {?} */ item2 = iterator2.next();
	            if (item1.done && item2.done)
	                return true;
	            if (item1.done || item2.done)
	                return false;
	            if (!comparator(item1.value, item2.value))
	                return false;
	        }
	    }
	    /**
	     * @param {?} obj
	     * @param {?} fn
	     * @return {?}
	     */
	    function iterateListLike(obj, fn) {
	        if (Array.isArray(obj)) {
	            for (var /** @type {?} */ i = 0; i < obj.length; i++) {
	                fn(obj[i]);
	            }
	        }
	        else {
	            var /** @type {?} */ iterator = obj[getSymbolIterator()]();
	            var /** @type {?} */ item = void 0;
	            while (!((item = iterator.next()).done)) {
	                fn(item.value);
	            }
	        }
	    }

	    /**
	     * Determine if the argument is shaped like a Promise
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPromise(obj) {
	        // allow any Promise/A+ compliant thenable.
	        // It's up to the caller to ensure that obj.then conforms to the spec
	        return !!obj && typeof obj.then === 'function';
	    }
	    /**
	     * Determine if the argument is an Observable
	     * @param {?} obj
	     * @return {?}
	     */
	    function isObservable(obj) {
	        return !!(obj && obj[rxjs_symbol_observable.$$observable]);
	    }

	    /**
	     * A function that will be executed when an application is initialized.
	     * @experimental
	     */
	    var /** @type {?} */ APP_INITIALIZER = new OpaqueToken('Application Initializer');
	    /**
	     * A class that reflects the state of running {\@link APP_INITIALIZER}s.
	     *
	     * \@experimental
	     */
	    var ApplicationInitStatus = (function () {
	        /**
	         * @param {?} appInits
	         */
	        function ApplicationInitStatus(appInits) {
	            var _this = this;
	            this._done = false;
	            var asyncInitPromises = [];
	            if (appInits) {
	                for (var i = 0; i < appInits.length; i++) {
	                    var initResult = appInits[i]();
	                    if (isPromise(initResult)) {
	                        asyncInitPromises.push(initResult);
	                    }
	                }
	            }
	            this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
	            if (asyncInitPromises.length === 0) {
	                this._done = true;
	            }
	        }
	        Object.defineProperty(ApplicationInitStatus.prototype, "done", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._done; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._donePromise; },
	            enumerable: true,
	            configurable: true
	        });
	        ApplicationInitStatus.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ApplicationInitStatus.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
	        ]; };
	        return ApplicationInitStatus;
	    }());

	    /**
	     * A DI Token representing a unique string id assigned to the application by Angular and used
	     * primarily for prefixing application attributes and CSS styles when
	     * {@link ViewEncapsulation#Emulated} is being used.
	     *
	     * If you need to avoid randomly generated value to be used as an application id, you can provide
	     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
	     * using this token.
	     * @experimental
	     */
	    var /** @type {?} */ APP_ID = new OpaqueToken('AppId');
	    /**
	     * @return {?}
	     */
	    function _appIdRandomProviderFactory() {
	        return "" + _randomChar() + _randomChar() + _randomChar();
	    }
	    /**
	     * Providers that will generate a random APP_ID_TOKEN.
	     * @experimental
	     */
	    var /** @type {?} */ APP_ID_RANDOM_PROVIDER = {
	        provide: APP_ID,
	        useFactory: _appIdRandomProviderFactory,
	        deps: /** @type {?} */ ([]),
	    };
	    /**
	     * @return {?}
	     */
	    function _randomChar() {
	        return String.fromCharCode(97 + Math.floor(Math.random() * 25));
	    }
	    /**
	     * A function that will be executed when a platform is initialized.
	     * @experimental
	     */
	    var /** @type {?} */ PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
	    /**
	     * All callbacks provided via this token will be called for every component that is bootstrapped.
	     * Signature of the callback:
	     *
	     * `(componentRef: ComponentRef) => void`.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
	    /**
	     * A token which indicates the root directory of the application
	     * @experimental
	     */
	    var /** @type {?} */ PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');

	    var Console = (function () {
	        function Console() {
	        }
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Console.prototype.log = function (message) { print(message); };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Console.prototype.warn = function (message) { warn(message); };
	        Console.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Console.ctorParameters = function () { return []; };
	        return Console;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Indicates that a component is still being loaded in a synchronous compile.
	     *
	     * \@stable
	     */
	    var ComponentStillLoadingError = (function (_super) {
	        __extends$4(ComponentStillLoadingError, _super);
	        /**
	         * @param {?} compType
	         */
	        function ComponentStillLoadingError(compType) {
	            _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
	            this.compType = compType;
	        }
	        return ComponentStillLoadingError;
	    }(BaseError));
	    /**
	     * Combination of NgModuleFactory and ComponentFactorys.
	     *
	     * \@experimental
	     */
	    var ModuleWithComponentFactories = (function () {
	        /**
	         * @param {?} ngModuleFactory
	         * @param {?} componentFactories
	         */
	        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
	            this.ngModuleFactory = ngModuleFactory;
	            this.componentFactories = componentFactories;
	        }
	        return ModuleWithComponentFactories;
	    }());
	    /**
	     * @return {?}
	     */
	    function _throwError() {
	        throw new Error("Runtime compiler is not loaded");
	    }
	    /**
	     * Low-level service for running the angular compiler during runtime
	     * to create {\@link ComponentFactory}s, which
	     * can later be used to create and render a Component instance.
	     *
	     * Each `\@NgModule` provides an own `Compiler` to its injector,
	     * that will use the directives/pipes of the ng module for compilation
	     * of components.
	     * \@stable
	     */
	    var Compiler = (function () {
	        function Compiler() {
	        }
	        /**
	         * Compiles the given NgModule and all of its components. All templates of the components listed
	         * in `entryComponents`
	         * have to be inlined. Otherwise throws a {\@link ComponentStillLoadingError}.
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
	        /**
	         * Compiles the given NgModule and all of its components
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
	        /**
	         * Same as {\@link compileModuleSync} but also creates ComponentFactories for all components.
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	            throw _throwError();
	        };
	        /**
	         * Same as {\@link compileModuleAsync} but also creates ComponentFactories for all components.
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	            throw _throwError();
	        };
	        /**
	         * Exposes the CSS-style selectors that have been used in `ngContent` directives within
	         * the template of the given component.
	         * This is used by the `upgrade` library to compile the appropriate transclude content
	         * in the Angular 1 wrapper component.
	         * @param {?} component
	         * @return {?}
	         */
	        Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };
	        /**
	         * Clears all caches.
	         * @return {?}
	         */
	        Compiler.prototype.clearCache = function () { };
	        /**
	         * Clears the cache for the given component/ngModule.
	         * @param {?} type
	         * @return {?}
	         */
	        Compiler.prototype.clearCacheFor = function (type) { };
	        Compiler.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Compiler.ctorParameters = function () { return []; };
	        return Compiler;
	    }());
	    /**
	     * Token to provide CompilerOptions in the platform injector.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
	    /**
	     * A factory for creating a Compiler
	     *
	     * \@experimental
	     * @abstract
	     */
	    var CompilerFactory = (function () {
	        function CompilerFactory() {
	        }
	        /**
	         * @abstract
	         * @param {?=} options
	         * @return {?}
	         */
	        CompilerFactory.prototype.createCompiler = function (options) { };
	        return CompilerFactory;
	    }());

	    var ElementRef = (function () {
	        /**
	         * @param {?} nativeElement
	         */
	        function ElementRef(nativeElement) {
	            this.nativeElement = nativeElement;
	        }
	        return ElementRef;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Use by directives and components to emit custom Events.
	     *
	     * ### Examples
	     *
	     * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	     * title gets clicked:
	     *
	     * ```
	     * \@Component({
	     *   selector: 'zippy',
	     *   template: `
	     *   <div class="zippy">
	     *     <div (click)="toggle()">Toggle</div>
	     *     <div [hidden]="!visible">
	     *       <ng-content></ng-content>
	     *     </div>
	     *  </div>`})
	     * export class Zippy {
	     *   visible: boolean = true;
	     *   \@Output() open: EventEmitter<any> = new EventEmitter();
	     *   \@Output() close: EventEmitter<any> = new EventEmitter();
	     *
	     *   toggle() {
	     *     this.visible = !this.visible;
	     *     if (this.visible) {
	     *       this.open.emit(null);
	     *     } else {
	     *       this.close.emit(null);
	     *     }
	     *   }
	     * }
	     * ```
	     *
	     * The events payload can be accessed by the parameter `$event` on the components output event
	     * handler:
	     *
	     * ```
	     * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	     * ```
	     *
	     * Uses Rx.Observable but provides an adapter to make it work as specified here:
	     * https://github.com/jhusain/observable-spec
	     *
	     * Once a reference implementation of the spec is available, switch to it.
	     * \@stable
	     */
	    var EventEmitter = (function (_super) {
	        __extends$6(EventEmitter, _super);
	        /**
	         * Creates an instance of [EventEmitter], which depending on [isAsync],
	         * delivers events synchronously or asynchronously.
	         * @param {?=} isAsync
	         */
	        function EventEmitter(isAsync) {
	            if (isAsync === void 0) { isAsync = false; }
	            _super.call(this);
	            this.__isAsync = isAsync;
	        }
	        /**
	         * @param {?=} value
	         * @return {?}
	         */
	        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	        /**
	         * @param {?=} generatorOrNext
	         * @param {?=} error
	         * @param {?=} complete
	         * @return {?}
	         */
	        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	            var /** @type {?} */ schedulerFn;
	            var /** @type {?} */ errorFn = function (err) { return null; };
	            var /** @type {?} */ completeFn = function () { return null; };
	            if (generatorOrNext && typeof generatorOrNext === 'object') {
	                schedulerFn = this.__isAsync ? function (value) {
	                    setTimeout(function () { return generatorOrNext.next(value); });
	                } : function (value) { generatorOrNext.next(value); };
	                if (generatorOrNext.error) {
	                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                        function (err) { generatorOrNext.error(err); };
	                }
	                if (generatorOrNext.complete) {
	                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                        function () { generatorOrNext.complete(); };
	                }
	            }
	            else {
	                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                    function (value) { generatorOrNext(value); };
	                if (error) {
	                    errorFn =
	                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	                }
	                if (complete) {
	                    completeFn =
	                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	                }
	            }
	            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	        };
	        return EventEmitter;
	    }(rxjs_Subject.Subject));

	    /**
	     * An injectable service for executing work inside or outside of the Angular zone.
	     *
	     * The most common use of this service is to optimize performance when starting a work consisting of
	     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	     * Angular. Such tasks can be kicked off via {\@link runOutsideAngular} and if needed, these tasks
	     * can reenter the Angular zone via {\@link run}.
	     *
	     * <!-- TODO: add/fix links to:
	     *   - docs explaining zones and the use of zones in Angular and change-detection
	     *   - link to runOutsideAngular/run (throughout this file!)
	     *   -->
	     *
	     * ### Example
	     *
	     * ```
	     * import {Component, NgZone} from '\@angular/core';
	     * import {NgIf} from '\@angular/common';
	     *
	     * \@Component({
	     *   selector: 'ng-zone-demo'.
	     *   template: `
	     *     <h2>Demo: NgZone</h2>
	     *
	     *     <p>Progress: {{progress}}%</p>
	     *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	     *
	     *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	     *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	     *   `,
	     * })
	     * export class NgZoneDemo {
	     *   progress: number = 0;
	     *   label: string;
	     *
	     *   constructor(private _ngZone: NgZone) {}
	     *
	     *   // Loop inside the Angular zone
	     *   // so the UI DOES refresh after each setTimeout cycle
	     *   processWithinAngularZone() {
	     *     this.label = 'inside';
	     *     this.progress = 0;
	     *     this._increaseProgress(() => console.log('Inside Done!'));
	     *   }
	     *
	     *   // Loop outside of the Angular zone
	     *   // so the UI DOES NOT refresh after each setTimeout cycle
	     *   processOutsideOfAngularZone() {
	     *     this.label = 'outside';
	     *     this.progress = 0;
	     *     this._ngZone.runOutsideAngular(() => {
	     *       this._increaseProgress(() => {
	     *       // reenter the Angular zone and display done
	     *       this._ngZone.run(() => {console.log('Outside Done!') });
	     *     }}));
	     *   }
	     *
	     *   _increaseProgress(doneCallback: () => void) {
	     *     this.progress += 1;
	     *     console.log(`Current progress: ${this.progress}%`);
	     *
	     *     if (this.progress < 100) {
	     *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
	     *     } else {
	     *       doneCallback();
	     *     }
	     *   }
	     * }
	     * ```
	     *
	     * \@experimental
	     */
	    var NgZone = (function () {
	        /**
	         * @param {?} __0
	         */
	        function NgZone(_a) {
	            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
	            this._hasPendingMicrotasks = false;
	            this._hasPendingMacrotasks = false;
	            this._isStable = true;
	            this._nesting = 0;
	            this._onUnstable = new EventEmitter(false);
	            this._onMicrotaskEmpty = new EventEmitter(false);
	            this._onStable = new EventEmitter(false);
	            this._onErrorEvents = new EventEmitter(false);
	            if (typeof Zone == 'undefined') {
	                throw new Error('Angular requires Zone.js prolyfill.');
	            }
	            Zone.assertZonePatched();
	            this.outer = this.inner = Zone.current;
	            if (Zone['wtfZoneSpec']) {
	                this.inner = this.inner.fork(Zone['wtfZoneSpec']);
	            }
	            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
	                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
	            }
	            this.forkInnerZoneWithAngularBehavior();
	        }
	        /**
	         * @return {?}
	         */
	        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
	        /**
	         * @return {?}
	         */
	        NgZone.assertInAngularZone = function () {
	            if (!NgZone.isInAngularZone()) {
	                throw new Error('Expected to be in Angular Zone, but it is not!');
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.assertNotInAngularZone = function () {
	            if (NgZone.isInAngularZone()) {
	                throw new Error('Expected to not be in Angular Zone, but it is!');
	            }
	        };
	        /**
	         * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	         * the function.
	         *
	         * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	         * outside of the Angular zone (typically started via {\@link runOutsideAngular}).
	         *
	         * Any future tasks or microtasks scheduled from within this function will continue executing from
	         * within the Angular zone.
	         *
	         * If a synchronous error happens it will be rethrown and not reported via `onError`.
	         * @param {?} fn
	         * @return {?}
	         */
	        NgZone.prototype.run = function (fn) { return this.inner.run(fn); };
	        /**
	         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
	         * rethrown.
	         * @param {?} fn
	         * @return {?}
	         */
	        NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };
	        /**
	         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	         * the function.
	         *
	         * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
	         * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	         *
	         * Any future tasks or microtasks scheduled from within this function will continue executing from
	         * outside of the Angular zone.
	         *
	         * Use {\@link run} to reenter the Angular zone and do work that updates the application model.
	         * @param {?} fn
	         * @return {?}
	         */
	        NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };
	        Object.defineProperty(NgZone.prototype, "onUnstable", {
	            /**
	             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
	             * @return {?}
	             */
	            get: function () { return this._onUnstable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
	            /**
	             * Notifies when there is no more microtasks enqueue in the current VM Turn.
	             * This is a hint for Angular to do change detection, which may enqueue more microtasks.
	             * For this reason this event can fire multiple times per VM Turn.
	             * @return {?}
	             */
	            get: function () { return this._onMicrotaskEmpty; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onStable", {
	            /**
	             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
	             * implies we are about to relinquish VM turn.
	             * This event gets called just once.
	             * @return {?}
	             */
	            get: function () { return this._onStable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onError", {
	            /**
	             * Notify that an error has been delivered.
	             * @return {?}
	             */
	            get: function () { return this._onErrorEvents; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "isStable", {
	            /**
	             * Whether there are no outstanding microtasks or macrotasks.
	             * @return {?}
	             */
	            get: function () { return this._isStable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._hasPendingMicrotasks; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._hasPendingMacrotasks; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.checkStable = function () {
	            var _this = this;
	            if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
	                try {
	                    this._nesting++;
	                    this._onMicrotaskEmpty.emit(null);
	                }
	                finally {
	                    this._nesting--;
	                    if (!this._hasPendingMicrotasks) {
	                        try {
	                            this.runOutsideAngular(function () { return _this._onStable.emit(null); });
	                        }
	                        finally {
	                            this._isStable = true;
	                        }
	                    }
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
	            var _this = this;
	            this.inner = this.inner.fork({
	                name: 'angular',
	                properties: /** @type {?} */ ({ 'isAngularZone': true }),
	                onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
	                    try {
	                        _this.onEnter();
	                        return delegate.invokeTask(target, task, applyThis, applyArgs);
	                    }
	                    finally {
	                        _this.onLeave();
	                    }
	                },
	                onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
	                    try {
	                        _this.onEnter();
	                        return delegate.invoke(target, callback, applyThis, applyArgs, source);
	                    }
	                    finally {
	                        _this.onLeave();
	                    }
	                },
	                onHasTask: function (delegate, current, target, hasTaskState) {
	                    delegate.hasTask(target, hasTaskState);
	                    if (current === target) {
	                        // We are only interested in hasTask events which originate from our zone
	                        // (A child hasTask event is not interesting to us)
	                        if (hasTaskState.change == 'microTask') {
	                            _this.setHasMicrotask(hasTaskState.microTask);
	                        }
	                        else if (hasTaskState.change == 'macroTask') {
	                            _this.setHasMacrotask(hasTaskState.macroTask);
	                        }
	                    }
	                },
	                onHandleError: function (delegate, current, target, error) {
	                    delegate.handleError(target, error);
	                    _this.triggerError(error);
	                    return false;
	                }
	            });
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.onEnter = function () {
	            this._nesting++;
	            if (this._isStable) {
	                this._isStable = false;
	                this._onUnstable.emit(null);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.onLeave = function () {
	            this._nesting--;
	            this.checkStable();
	        };
	        /**
	         * @param {?} hasMicrotasks
	         * @return {?}
	         */
	        NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
	            this._hasPendingMicrotasks = hasMicrotasks;
	            this.checkStable();
	        };
	        /**
	         * @param {?} hasMacrotasks
	         * @return {?}
	         */
	        NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };
	        return NgZone;
	    }());

	    var AnimationQueue = (function () {
	        /**
	         * @param {?} _zone
	         */
	        function AnimationQueue(_zone) {
	            this._zone = _zone;
	            this.entries = [];
	        }
	        /**
	         * @param {?} player
	         * @return {?}
	         */
	        AnimationQueue.prototype.enqueue = function (player) { this.entries.push(player); };
	        /**
	         * @return {?}
	         */
	        AnimationQueue.prototype.flush = function () {
	            var _this = this;
	            // given that each animation player may set aside
	            // microtasks and rely on DOM-based events, this
	            // will cause Angular to run change detection after
	            // each request. This sidesteps the issue. If a user
	            // hooks into an animation via (@anim.start) or (@anim.done)
	            // then those methods will automatically trigger change
	            // detection by wrapping themselves inside of a zone
	            if (this.entries.length) {
	                this._zone.runOutsideAngular(function () {
	                    // this code is wrapped into a single promise such that the
	                    // onStart and onDone player callbacks are triggered outside
	                    // of the digest cycle of animations
	                    Promise.resolve(null).then(function () { return _this._triggerAnimations(); });
	                });
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationQueue.prototype._triggerAnimations = function () {
	            NgZone.assertNotInAngularZone();
	            while (this.entries.length) {
	                var /** @type {?} */ player = this.entries.shift();
	                // in the event that an animation throws an error then we do
	                // not want to re-run animations on any previous animations
	                // if they have already been kicked off beforehand
	                if (!player.hasStarted()) {
	                    player.play();
	                }
	            }
	        };
	        AnimationQueue.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        AnimationQueue.ctorParameters = function () { return [
	            { type: NgZone, },
	        ]; };
	        return AnimationQueue;
	    }());

	    var DefaultIterableDifferFactory = (function () {
	        function DefaultIterableDifferFactory() {
	        }
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
	        /**
	         * @param {?} cdRef
	         * @param {?=} trackByFn
	         * @return {?}
	         */
	        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
	            return new DefaultIterableDiffer(trackByFn);
	        };
	        return DefaultIterableDifferFactory;
	    }());
	    var /** @type {?} */ trackByIdentity = function (index, item) { return item; };
	    /**
	     * \@stable
	     */
	    var DefaultIterableDiffer = (function () {
	        /**
	         * @param {?=} _trackByFn
	         */
	        function DefaultIterableDiffer(_trackByFn) {
	            this._trackByFn = _trackByFn;
	            this._length = null;
	            this._collection = null;
	            this._linkedRecords = null;
	            this._unlinkedRecords = null;
	            this._previousItHead = null;
	            this._itHead = null;
	            this._itTail = null;
	            this._additionsHead = null;
	            this._additionsTail = null;
	            this._movesHead = null;
	            this._movesTail = null;
	            this._removalsHead = null;
	            this._removalsTail = null;
	            this._identityChangesHead = null;
	            this._identityChangesTail = null;
	            this._trackByFn = this._trackByFn || trackByIdentity;
	        }
	        Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._collection; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._length; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._itHead; record !== null; record = record._next) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
	            var /** @type {?} */ nextIt = this._itHead;
	            var /** @type {?} */ nextRemove = this._removalsHead;
	            var /** @type {?} */ addRemoveOffset = 0;
	            var /** @type {?} */ moveOffsets = null;
	            while (nextIt || nextRemove) {
	                // Figure out which is the next record to process
	                // Order: remove, add, move
	                var /** @type {?} */ record = !nextRemove ||
	                    nextIt &&
	                        nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
	                    nextIt :
	                    nextRemove;
	                var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
	                var /** @type {?} */ currentIndex = record.currentIndex;
	                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
	                if (record === nextRemove) {
	                    addRemoveOffset--;
	                    nextRemove = nextRemove._nextRemoved;
	                }
	                else {
	                    nextIt = nextIt._next;
	                    if (record.previousIndex == null) {
	                        addRemoveOffset++;
	                    }
	                    else {
	                        // INVARIANT:  currentIndex < previousIndex
	                        if (!moveOffsets)
	                            moveOffsets = [];
	                        var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
	                        var /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;
	                        if (localMovePreviousIndex != localCurrentIndex) {
	                            for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {
	                                var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
	                                var /** @type {?} */ index = offset + i;
	                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
	                                    moveOffsets[i] = offset + 1;
	                                }
	                            }
	                            var /** @type {?} */ previousIndex = record.previousIndex;
	                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
	                        }
	                    }
	                }
	                if (adjPreviousIndex !== currentIndex) {
	                    fn(record, adjPreviousIndex, currentIndex);
	                }
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._movesHead; record !== null; record = record._nextMoved) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} collection
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.diff = function (collection) {
	            if (isBlank(collection))
	                collection = [];
	            if (!isListLikeIterable(collection)) {
	                throw new Error("Error trying to diff '" + collection + "'");
	            }
	            if (this.check(collection)) {
	                return this;
	            }
	            else {
	                return null;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.onDestroy = function () { };
	        /**
	         * @param {?} collection
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.check = function (collection) {
	            var _this = this;
	            this._reset();
	            var /** @type {?} */ record = this._itHead;
	            var /** @type {?} */ mayBeDirty = false;
	            var /** @type {?} */ index;
	            var /** @type {?} */ item;
	            var /** @type {?} */ itemTrackBy;
	            if (Array.isArray(collection)) {
	                var /** @type {?} */ list = collection;
	                this._length = collection.length;
	                for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {
	                    item = list[index_1];
	                    itemTrackBy = this._trackByFn(index_1, item);
	                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                        record = this._mismatch(record, item, itemTrackBy, index_1);
	                        mayBeDirty = true;
	                    }
	                    else {
	                        if (mayBeDirty) {
	                            // TODO(misko): can we limit this to duplicates only?
	                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
	                        }
	                        if (!looseIdentical(record.item, item))
	                            this._addIdentityChange(record, item);
	                    }
	                    record = record._next;
	                }
	            }
	            else {
	                index = 0;
	                iterateListLike(collection, function (item /** TODO #9100 */) {
	                    itemTrackBy = _this._trackByFn(index, item);
	                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                        record = _this._mismatch(record, item, itemTrackBy, index);
	                        mayBeDirty = true;
	                    }
	                    else {
	                        if (mayBeDirty) {
	                            // TODO(misko): can we limit this to duplicates only?
	                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);
	                        }
	                        if (!looseIdentical(record.item, item))
	                            _this._addIdentityChange(record, item);
	                    }
	                    record = record._next;
	                    index++;
	                });
	                this._length = index;
	            }
	            this._truncate(record);
	            this._collection = collection;
	            return this.isDirty;
	        };
	        Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._additionsHead !== null || this._movesHead !== null ||
	                    this._removalsHead !== null || this._identityChangesHead !== null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Reset the state of the change objects to show no changes. This means set previousKey to
	         * currentKey, and clear all of the queues (additions, moves, removals).
	         * Set the previousIndexes of moved and added items to their currentIndexes
	         * Reset the list of additions, moves and removals
	         *
	         * \@internal
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._reset = function () {
	            if (this.isDirty) {
	                var /** @type {?} */ record = void 0;
	                var /** @type {?} */ nextRecord = void 0;
	                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                    record._nextPrevious = record._next;
	                }
	                for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                    record.previousIndex = record.currentIndex;
	                }
	                this._additionsHead = this._additionsTail = null;
	                for (record = this._movesHead; record !== null; record = nextRecord) {
	                    record.previousIndex = record.currentIndex;
	                    nextRecord = record._nextMoved;
	                }
	                this._movesHead = this._movesTail = null;
	                this._removalsHead = this._removalsTail = null;
	                this._identityChangesHead = this._identityChangesTail = null;
	            }
	        };
	        /**
	         * This is the core function which handles differences between collections.
	         *
	         * - `record` is the record which we saw at this position last time. If null then it is a new
	         *   item.
	         * - `item` is the current item in the collection
	         * - `index` is the position of the item in the collection
	         *
	         * \@internal
	         * @param {?} record
	         * @param {?} item
	         * @param {?} itemTrackBy
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
	            // The previous record after which we will append the current one.
	            var /** @type {?} */ previousRecord;
	            if (record === null) {
	                previousRecord = this._itTail;
	            }
	            else {
	                previousRecord = record._prev;
	                // Remove the record from the collection since we know it does not match the item.
	                this._remove(record);
	            }
	            // Attempt to see if we have seen the item before.
	            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
	            if (record !== null) {
	                // We have seen this before, we need to move it forward in the collection.
	                // But first we need to check if identity changed, so we can update in view if necessary
	                if (!looseIdentical(record.item, item))
	                    this._addIdentityChange(record, item);
	                this._moveAfter(record, previousRecord, index);
	            }
	            else {
	                // Never seen it, check evicted list.
	                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	                if (record !== null) {
	                    // It is an item which we have evicted earlier: reinsert it back into the list.
	                    // But first we need to check if identity changed, so we can update in view if necessary
	                    if (!looseIdentical(record.item, item))
	                        this._addIdentityChange(record, item);
	                    this._reinsertAfter(record, previousRecord, index);
	                }
	                else {
	                    // It is a new item: add it.
	                    record =
	                        this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
	                }
	            }
	            return record;
	        };
	        /**
	         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	         *
	         * Use case: `[a, a]` => `[b, a, a]`
	         *
	         * If we did not have this check then the insertion of `b` would:
	         *   1) evict first `a`
	         *   2) insert `b` at `0` index.
	         *   3) leave `a` at index `1` as is. <-- this is wrong!
	         *   3) reinsert `a` at index 2. <-- this is wrong!
	         *
	         * The correct behavior is:
	         *   1) evict first `a`
	         *   2) insert `b` at `0` index.
	         *   3) reinsert `a` at index 1.
	         *   3) move `a` at from `1` to `2`.
	         *
	         *
	         * Double check that we have not evicted a duplicate item. We need to check if the item type may
	         * have already been removed:
	         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	         * at the end.
	         *
	         * \@internal
	         * @param {?} record
	         * @param {?} item
	         * @param {?} itemTrackBy
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
	            var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	            if (reinsertRecord !== null) {
	                record = this._reinsertAfter(reinsertRecord, record._prev, index);
	            }
	            else if (record.currentIndex != index) {
	                record.currentIndex = index;
	                this._addToMoves(record, index);
	            }
	            return record;
	        };
	        /**
	         * Get rid of any excess {\@link CollectionChangeRecord}s from the previous collection
	         *
	         * - `record` The first excess {\@link CollectionChangeRecord}.
	         *
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._truncate = function (record) {
	            // Anything after that needs to be removed;
	            while (record !== null) {
	                var /** @type {?} */ nextRecord = record._next;
	                this._addToRemovals(this._unlink(record));
	                record = nextRecord;
	            }
	            if (this._unlinkedRecords !== null) {
	                this._unlinkedRecords.clear();
	            }
	            if (this._additionsTail !== null) {
	                this._additionsTail._nextAdded = null;
	            }
	            if (this._movesTail !== null) {
	                this._movesTail._nextMoved = null;
	            }
	            if (this._itTail !== null) {
	                this._itTail._next = null;
	            }
	            if (this._removalsTail !== null) {
	                this._removalsTail._nextRemoved = null;
	            }
	            if (this._identityChangesTail !== null) {
	                this._identityChangesTail._nextIdentityChange = null;
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	            if (this._unlinkedRecords !== null) {
	                this._unlinkedRecords.remove(record);
	            }
	            var /** @type {?} */ prev = record._prevRemoved;
	            var /** @type {?} */ next = record._nextRemoved;
	            if (prev === null) {
	                this._removalsHead = next;
	            }
	            else {
	                prev._nextRemoved = next;
	            }
	            if (next === null) {
	                this._removalsTail = prev;
	            }
	            else {
	                next._prevRemoved = prev;
	            }
	            this._insertAfter(record, prevRecord, index);
	            this._addToMoves(record, index);
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	            this._unlink(record);
	            this._insertAfter(record, prevRecord, index);
	            this._addToMoves(record, index);
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	            this._insertAfter(record, prevRecord, index);
	            if (this._additionsTail === null) {
	                // todo(vicb)
	                // assert(this._additionsHead === null);
	                this._additionsTail = this._additionsHead = record;
	            }
	            else {
	                // todo(vicb)
	                // assert(_additionsTail._nextAdded === null);
	                // assert(record._nextAdded === null);
	                this._additionsTail = this._additionsTail._nextAdded = record;
	            }
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	            // todo(vicb)
	            // assert(record != prevRecord);
	            // assert(record._next === null);
	            // assert(record._prev === null);
	            var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;
	            // todo(vicb)
	            // assert(next != record);
	            // assert(prevRecord != record);
	            record._next = next;
	            record._prev = prevRecord;
	            if (next === null) {
	                this._itTail = record;
	            }
	            else {
	                next._prev = record;
	            }
	            if (prevRecord === null) {
	                this._itHead = record;
	            }
	            else {
	                prevRecord._next = record;
	            }
	            if (this._linkedRecords === null) {
	                this._linkedRecords = new _DuplicateMap();
	            }
	            this._linkedRecords.put(record);
	            record.currentIndex = index;
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._remove = function (record) {
	            return this._addToRemovals(this._unlink(record));
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._unlink = function (record) {
	            if (this._linkedRecords !== null) {
	                this._linkedRecords.remove(record);
	            }
	            var /** @type {?} */ prev = record._prev;
	            var /** @type {?} */ next = record._next;
	            // todo(vicb)
	            // assert((record._prev = null) === null);
	            // assert((record._next = null) === null);
	            if (prev === null) {
	                this._itHead = next;
	            }
	            else {
	                prev._next = next;
	            }
	            if (next === null) {
	                this._itTail = prev;
	            }
	            else {
	                next._prev = prev;
	            }
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} toIndex
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	            // todo(vicb)
	            // assert(record._nextMoved === null);
	            if (record.previousIndex === toIndex) {
	                return record;
	            }
	            if (this._movesTail === null) {
	                // todo(vicb)
	                // assert(_movesHead === null);
	                this._movesTail = this._movesHead = record;
	            }
	            else {
	                // todo(vicb)
	                // assert(_movesTail._nextMoved === null);
	                this._movesTail = this._movesTail._nextMoved = record;
	            }
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	            if (this._unlinkedRecords === null) {
	                this._unlinkedRecords = new _DuplicateMap();
	            }
	            this._unlinkedRecords.put(record);
	            record.currentIndex = null;
	            record._nextRemoved = null;
	            if (this._removalsTail === null) {
	                // todo(vicb)
	                // assert(_removalsHead === null);
	                this._removalsTail = this._removalsHead = record;
	                record._prevRemoved = null;
	            }
	            else {
	                // todo(vicb)
	                // assert(_removalsTail._nextRemoved === null);
	                // assert(record._nextRemoved === null);
	                record._prevRemoved = this._removalsTail;
	                this._removalsTail = this._removalsTail._nextRemoved = record;
	            }
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} item
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
	            record.item = item;
	            if (this._identityChangesTail === null) {
	                this._identityChangesTail = this._identityChangesHead = record;
	            }
	            else {
	                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
	            }
	            return record;
	        };
	        /**
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.toString = function () {
	            var /** @type {?} */ list = [];
	            this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });
	            var /** @type {?} */ previous = [];
	            this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });
	            var /** @type {?} */ additions = [];
	            this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });
	            var /** @type {?} */ moves = [];
	            this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });
	            var /** @type {?} */ removals = [];
	            this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });
	            var /** @type {?} */ identityChanges = [];
	            this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });
	            return 'collection: ' + list.join(', ') + '\n' +
	                'previous: ' + previous.join(', ') + '\n' +
	                'additions: ' + additions.join(', ') + '\n' +
	                'moves: ' + moves.join(', ') + '\n' +
	                'removals: ' + removals.join(', ') + '\n' +
	                'identityChanges: ' + identityChanges.join(', ') + '\n';
	        };
	        return DefaultIterableDiffer;
	    }());
	    /**
	     * \@stable
	     */
	    var CollectionChangeRecord = (function () {
	        /**
	         * @param {?} item
	         * @param {?} trackById
	         */
	        function CollectionChangeRecord(item, trackById) {
	            this.item = item;
	            this.trackById = trackById;
	            this.currentIndex = null;
	            this.previousIndex = null;
	            /** @internal */
	            this._nextPrevious = null;
	            /** @internal */
	            this._prev = null;
	            /** @internal */
	            this._next = null;
	            /** @internal */
	            this._prevDup = null;
	            /** @internal */
	            this._nextDup = null;
	            /** @internal */
	            this._prevRemoved = null;
	            /** @internal */
	            this._nextRemoved = null;
	            /** @internal */
	            this._nextAdded = null;
	            /** @internal */
	            this._nextMoved = null;
	            /** @internal */
	            this._nextIdentityChange = null;
	        }
	        /**
	         * @return {?}
	         */
	        CollectionChangeRecord.prototype.toString = function () {
	            return this.previousIndex === this.currentIndex ? stringify(this.item) :
	                stringify(this.item) + '[' +
	                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
	        };
	        return CollectionChangeRecord;
	    }());
	    var _DuplicateItemRecordList = (function () {
	        function _DuplicateItemRecordList() {
	            /** @internal */
	            this._head = null;
	            /** @internal */
	            this._tail = null;
	        }
	        /**
	         * Append the record to the list of duplicates.
	         *
	         * Note: by design all records in the list of duplicates hold the same value in record.item.
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateItemRecordList.prototype.add = function (record) {
	            if (this._head === null) {
	                this._head = this._tail = record;
	                record._nextDup = null;
	                record._prevDup = null;
	            }
	            else {
	                // todo(vicb)
	                // assert(record.item ==  _head.item ||
	                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	                this._tail._nextDup = record;
	                record._prevDup = this._tail;
	                record._nextDup = null;
	                this._tail = record;
	            }
	        };
	        /**
	         * @param {?} trackById
	         * @param {?} afterIndex
	         * @return {?}
	         */
	        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
	            var /** @type {?} */ record;
	            for (record = this._head; record !== null; record = record._nextDup) {
	                if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                    looseIdentical(record.trackById, trackById)) {
	                    return record;
	                }
	            }
	            return null;
	        };
	        /**
	         * Remove one {\@link CollectionChangeRecord} from the list of duplicates.
	         *
	         * Returns whether the list of duplicates is empty.
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateItemRecordList.prototype.remove = function (record) {
	            // todo(vicb)
	            // assert(() {
	            //  // verify that the record being removed is in the list.
	            //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
	            //    if (identical(cursor, record)) return true;
	            //  }
	            //  return false;
	            //});
	            var /** @type {?} */ prev = record._prevDup;
	            var /** @type {?} */ next = record._nextDup;
	            if (prev === null) {
	                this._head = next;
	            }
	            else {
	                prev._nextDup = next;
	            }
	            if (next === null) {
	                this._tail = prev;
	            }
	            else {
	                next._prevDup = prev;
	            }
	            return this._head === null;
	        };
	        return _DuplicateItemRecordList;
	    }());
	    var _DuplicateMap = (function () {
	        function _DuplicateMap() {
	            this.map = new Map();
	        }
	        /**
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateMap.prototype.put = function (record) {
	            var /** @type {?} */ key = record.trackById;
	            var /** @type {?} */ duplicates = this.map.get(key);
	            if (!duplicates) {
	                duplicates = new _DuplicateItemRecordList();
	                this.map.set(key, duplicates);
	            }
	            duplicates.add(record);
	        };
	        /**
	         * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we
	         * have already iterated over, we use the afterIndex to pretend it is not there.
	         *
	         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	         * have any more `a`s needs to return the last `a` not the first or second.
	         * @param {?} trackById
	         * @param {?=} afterIndex
	         * @return {?}
	         */
	        _DuplicateMap.prototype.get = function (trackById, afterIndex) {
	            if (afterIndex === void 0) { afterIndex = null; }
	            var /** @type {?} */ key = trackById;
	            var /** @type {?} */ recordList = this.map.get(key);
	            return recordList ? recordList.get(trackById, afterIndex) : null;
	        };
	        /**
	         * Removes a {\@link CollectionChangeRecord} from the list of duplicates.
	         *
	         * The list of duplicates also is removed from the map if it gets empty.
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateMap.prototype.remove = function (record) {
	            var /** @type {?} */ key = record.trackById;
	            var /** @type {?} */ recordList = this.map.get(key);
	            // Remove the list of duplicates when it gets empty
	            if (recordList.remove(record)) {
	                this.map.delete(key);
	            }
	            return record;
	        };
	        Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.map.size === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	        /**
	         * @return {?}
	         */
	        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
	        return _DuplicateMap;
	    }());
	    /**
	     * @param {?} item
	     * @param {?} addRemoveOffset
	     * @param {?} moveOffsets
	     * @return {?}
	     */
	    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
	        var /** @type {?} */ previousIndex = item.previousIndex;
	        if (previousIndex === null)
	            return previousIndex;
	        var /** @type {?} */ moveOffset = 0;
	        if (moveOffsets && previousIndex < moveOffsets.length) {
	            moveOffset = moveOffsets[previousIndex];
	        }
	        return previousIndex + addRemoveOffset + moveOffset;
	    }

	    var DefaultKeyValueDifferFactory = (function () {
	        function DefaultKeyValueDifferFactory() {
	        }
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
	        /**
	         * @param {?} cdRef
	         * @return {?}
	         */
	        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };
	        return DefaultKeyValueDifferFactory;
	    }());
	    var DefaultKeyValueDiffer = (function () {
	        function DefaultKeyValueDiffer() {
	            this._records = new Map();
	            this._mapHead = null;
	            this._previousMapHead = null;
	            this._changesHead = null;
	            this._changesTail = null;
	            this._additionsHead = null;
	            this._additionsTail = null;
	            this._removalsHead = null;
	            this._removalsTail = null;
	        }
	        Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._additionsHead !== null || this._changesHead !== null ||
	                    this._removalsHead !== null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._mapHead; record !== null; record = record._next) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} map
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.diff = function (map) {
	            if (!map) {
	                map = new Map();
	            }
	            else if (!(map instanceof Map || isJsObject(map))) {
	                throw new Error("Error trying to diff '" + map + "'");
	            }
	            return this.check(map) ? this : null;
	        };
	        /**
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	        /**
	         * @param {?} map
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.check = function (map) {
	            var _this = this;
	            this._reset();
	            var /** @type {?} */ records = this._records;
	            var /** @type {?} */ oldSeqRecord = this._mapHead;
	            var /** @type {?} */ lastOldSeqRecord = null;
	            var /** @type {?} */ lastNewSeqRecord = null;
	            var /** @type {?} */ seqChanged = false;
	            this._forEach(map, function (value, key) {
	                var /** @type {?} */ newSeqRecord;
	                if (oldSeqRecord && key === oldSeqRecord.key) {
	                    newSeqRecord = oldSeqRecord;
	                    _this._maybeAddToChanges(newSeqRecord, value);
	                }
	                else {
	                    seqChanged = true;
	                    if (oldSeqRecord !== null) {
	                        _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                        _this._addToRemovals(oldSeqRecord);
	                    }
	                    if (records.has(key)) {
	                        newSeqRecord = records.get(key);
	                        _this._maybeAddToChanges(newSeqRecord, value);
	                    }
	                    else {
	                        newSeqRecord = new KeyValueChangeRecord(key);
	                        records.set(key, newSeqRecord);
	                        newSeqRecord.currentValue = value;
	                        _this._addToAdditions(newSeqRecord);
	                    }
	                }
	                if (seqChanged) {
	                    if (_this._isInRemovals(newSeqRecord)) {
	                        _this._removeFromRemovals(newSeqRecord);
	                    }
	                    if (lastNewSeqRecord == null) {
	                        _this._mapHead = newSeqRecord;
	                    }
	                    else {
	                        lastNewSeqRecord._next = newSeqRecord;
	                    }
	                }
	                lastOldSeqRecord = oldSeqRecord;
	                lastNewSeqRecord = newSeqRecord;
	                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
	            });
	            this._truncate(lastOldSeqRecord, oldSeqRecord);
	            return this.isDirty;
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._reset = function () {
	            if (this.isDirty) {
	                var /** @type {?} */ record = void 0;
	                // Record the state of the mapping
	                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                    record._nextPrevious = record._next;
	                }
	                for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                    record.previousValue = record.currentValue;
	                }
	                for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                    record.previousValue = record.currentValue;
	                }
	                this._changesHead = this._changesTail = null;
	                this._additionsHead = this._additionsTail = null;
	                this._removalsHead = this._removalsTail = null;
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} lastRecord
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
	            while (record !== null) {
	                if (lastRecord === null) {
	                    this._mapHead = null;
	                }
	                else {
	                    lastRecord._next = null;
	                }
	                var /** @type {?} */ nextRecord = record._next;
	                this._addToRemovals(record);
	                lastRecord = record;
	                record = nextRecord;
	            }
	            for (var /** @type {?} */ rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	                rec.previousValue = rec.currentValue;
	                rec.currentValue = null;
	                this._records.delete(rec.key);
	            }
	        };
	        /**
	         * @param {?} record
	         * @param {?} newValue
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
	            if (!looseIdentical(newValue, record.currentValue)) {
	                record.previousValue = record.currentValue;
	                record.currentValue = newValue;
	                this._addToChanges(record);
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
	            return record === this._removalsHead || record._nextRemoved !== null ||
	                record._prevRemoved !== null;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
	            if (this._removalsHead === null) {
	                this._removalsHead = this._removalsTail = record;
	            }
	            else {
	                this._removalsTail._nextRemoved = record;
	                record._prevRemoved = this._removalsTail;
	                this._removalsTail = record;
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} prev
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
	            var /** @type {?} */ next = record._next;
	            if (prev === null) {
	                this._mapHead = next;
	            }
	            else {
	                prev._next = next;
	            }
	            record._next = null;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
	            var /** @type {?} */ prev = record._prevRemoved;
	            var /** @type {?} */ next = record._nextRemoved;
	            if (prev === null) {
	                this._removalsHead = next;
	            }
	            else {
	                prev._nextRemoved = next;
	            }
	            if (next === null) {
	                this._removalsTail = prev;
	            }
	            else {
	                next._prevRemoved = prev;
	            }
	            record._prevRemoved = record._nextRemoved = null;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	            if (this._additionsHead === null) {
	                this._additionsHead = this._additionsTail = record;
	            }
	            else {
	                this._additionsTail._nextAdded = record;
	                this._additionsTail = record;
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	            if (this._changesHead === null) {
	                this._changesHead = this._changesTail = record;
	            }
	            else {
	                this._changesTail._nextChanged = record;
	                this._changesTail = record;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.toString = function () {
	            var /** @type {?} */ items = [];
	            var /** @type {?} */ previous = [];
	            var /** @type {?} */ changes = [];
	            var /** @type {?} */ additions = [];
	            var /** @type {?} */ removals = [];
	            var /** @type {?} */ record;
	            for (record = this._mapHead; record !== null; record = record._next) {
	                items.push(stringify(record));
	            }
	            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	                previous.push(stringify(record));
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                changes.push(stringify(record));
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                additions.push(stringify(record));
	            }
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                removals.push(stringify(record));
	            }
	            return 'map: ' + items.join(', ') + '\n' +
	                'previous: ' + previous.join(', ') + '\n' +
	                'additions: ' + additions.join(', ') + '\n' +
	                'changes: ' + changes.join(', ') + '\n' +
	                'removals: ' + removals.join(', ') + '\n';
	        };
	        /**
	         * \@internal
	         * @param {?} obj
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	            if (obj instanceof Map) {
	                obj.forEach(fn);
	            }
	            else {
	                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
	            }
	        };
	        return DefaultKeyValueDiffer;
	    }());
	    /**
	     * \@stable
	     */
	    var KeyValueChangeRecord = (function () {
	        /**
	         * @param {?} key
	         */
	        function KeyValueChangeRecord(key) {
	            this.key = key;
	            this.previousValue = null;
	            this.currentValue = null;
	            /** @internal */
	            this._nextPrevious = null;
	            /** @internal */
	            this._next = null;
	            /** @internal */
	            this._nextAdded = null;
	            /** @internal */
	            this._nextRemoved = null;
	            /** @internal */
	            this._prevRemoved = null;
	            /** @internal */
	            this._nextChanged = null;
	        }
	        /**
	         * @return {?}
	         */
	        KeyValueChangeRecord.prototype.toString = function () {
	            return looseIdentical(this.previousValue, this.currentValue) ?
	                stringify(this.key) :
	                (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
	                    stringify(this.currentValue) + ']');
	        };
	        return KeyValueChangeRecord;
	    }());

	    /**
	     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	     * \@stable
	     */
	    var IterableDiffers = (function () {
	        /**
	         * @param {?} factories
	         */
	        function IterableDiffers(factories) {
	            this.factories = factories;
	        }
	        /**
	         * @param {?} factories
	         * @param {?=} parent
	         * @return {?}
	         */
	        IterableDiffers.create = function (factories, parent) {
	            if (isPresent(parent)) {
	                var /** @type {?} */ copied = parent.factories.slice();
	                factories = factories.concat(copied);
	                return new IterableDiffers(factories);
	            }
	            else {
	                return new IterableDiffers(factories);
	            }
	        };
	        /**
	         * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
	         * inherited {\@link IterableDiffers} instance with the provided factories and return a new
	         * {\@link IterableDiffers} instance.
	         *
	         * The following example shows how to extend an existing list of factories,
	         * which will only be applied to the injector for this component and its children.
	         * This step is all that's required to make a new {\@link IterableDiffer} available.
	         *
	         * ### Example
	         *
	         * ```
	         * \@Component({
	         *   viewProviders: [
	         *     IterableDiffers.extend([new ImmutableListDiffer()])
	         *   ]
	         * })
	         * ```
	         * @param {?} factories
	         * @return {?}
	         */
	        IterableDiffers.extend = function (factories) {
	            return {
	                provide: IterableDiffers,
	                useFactory: function (parent) {
	                    if (!parent) {
	                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                        // to
	                        // bootstrap(), which would override default pipes instead of extending them.
	                        throw new Error('Cannot extend IterableDiffers without a parent injector');
	                    }
	                    return IterableDiffers.create(factories, parent);
	                },
	                // Dependency technically isn't optional, but we can provide a better error message this way.
	                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
	            };
	        };
	        /**
	         * @param {?} iterable
	         * @return {?}
	         */
	        IterableDiffers.prototype.find = function (iterable) {
	            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });
	            if (isPresent(factory)) {
	                return factory;
	            }
	            else {
	                throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
	            }
	        };
	        return IterableDiffers;
	    }());

	    /**
	     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	     * \@stable
	     */
	    var KeyValueDiffers = (function () {
	        /**
	         * @param {?} factories
	         */
	        function KeyValueDiffers(factories) {
	            this.factories = factories;
	        }
	        /**
	         * @param {?} factories
	         * @param {?=} parent
	         * @return {?}
	         */
	        KeyValueDiffers.create = function (factories, parent) {
	            if (isPresent(parent)) {
	                var /** @type {?} */ copied = parent.factories.slice();
	                factories = factories.concat(copied);
	                return new KeyValueDiffers(factories);
	            }
	            else {
	                return new KeyValueDiffers(factories);
	            }
	        };
	        /**
	         * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
	         * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
	         * {\@link KeyValueDiffers} instance.
	         *
	         * The following example shows how to extend an existing list of factories,
	         * which will only be applied to the injector for this component and its children.
	         * This step is all that's required to make a new {\@link KeyValueDiffer} available.
	         *
	         * ### Example
	         *
	         * ```
	         * \@Component({
	         *   viewProviders: [
	         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	         *   ]
	         * })
	         * ```
	         * @param {?} factories
	         * @return {?}
	         */
	        KeyValueDiffers.extend = function (factories) {
	            return {
	                provide: KeyValueDiffers,
	                useFactory: function (parent) {
	                    if (!parent) {
	                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                        // to
	                        // bootstrap(), which would override default pipes instead of extending them.
	                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');
	                    }
	                    return KeyValueDiffers.create(factories, parent);
	                },
	                // Dependency technically isn't optional, but we can provide a better error message this way.
	                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
	            };
	        };
	        /**
	         * @param {?} kv
	         * @return {?}
	         */
	        KeyValueDiffers.prototype.find = function (kv) {
	            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });
	            if (isPresent(factory)) {
	                return factory;
	            }
	            else {
	                throw new Error("Cannot find a differ supporting object '" + kv + "'");
	            }
	        };
	        return KeyValueDiffers;
	    }());

	    var /** @type {?} */ UNINITIALIZED = {
	        toString: function () { return 'CD_INIT_VALUE'; }
	    };
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function devModeEqual(a, b) {
	        if (isListLikeIterable(a) && isListLikeIterable(b)) {
	            return areIterablesEqual(a, b, devModeEqual);
	        }
	        else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
	            return true;
	        }
	        else {
	            return looseIdentical(a, b);
	        }
	    }
	    /**
	     * Indicates that the result of a {\@link Pipe} transformation has changed even though the
	     * reference
	     * has not changed.
	     *
	     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	     *
	     * Example:
	     *
	     * ```
	     * if (this._latestValue === this._latestReturnedValue) {
	     *    return this._latestReturnedValue;
	     *  } else {
	     *    this._latestReturnedValue = this._latestValue;
	     *    return WrappedValue.wrap(this._latestValue); // this will force update
	     *  }
	     * ```
	     * \@stable
	     */
	    var WrappedValue = (function () {
	        /**
	         * @param {?} wrapped
	         */
	        function WrappedValue(wrapped) {
	            this.wrapped = wrapped;
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        WrappedValue.wrap = function (value) { return new WrappedValue(value); };
	        return WrappedValue;
	    }());
	    /**
	     * Helper class for unwrapping WrappedValue s
	     */
	    var ValueUnwrapper = (function () {
	        function ValueUnwrapper() {
	            this.hasWrappedValue = false;
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ValueUnwrapper.prototype.unwrap = function (value) {
	            if (value instanceof WrappedValue) {
	                this.hasWrappedValue = true;
	                return value.wrapped;
	            }
	            return value;
	        };
	        /**
	         * @return {?}
	         */
	        ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };
	        return ValueUnwrapper;
	    }());
	    /**
	     * Represents a basic change from a previous to a new value.
	     * \@stable
	     */
	    var SimpleChange = (function () {
	        /**
	         * @param {?} previousValue
	         * @param {?} currentValue
	         */
	        function SimpleChange(previousValue, currentValue) {
	            this.previousValue = previousValue;
	            this.currentValue = currentValue;
	        }
	        /**
	         * Check whether the new value is the first value assigned.
	         * @return {?}
	         */
	        SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };
	        return SimpleChange;
	    }());

	    /**
	     * \@stable
	     * @abstract
	     */
	    var ChangeDetectorRef = (function () {
	        function ChangeDetectorRef() {
	        }
	        /**
	         * Marks all {\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.
	         *
	         * <!-- TODO: Add a link to a chapter on OnPush components -->
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))
	         *
	         * ```typescript
	         * \@Component({
	         *   selector: 'cmp',
	         *   changeDetection: ChangeDetectionStrategy.OnPush,
	         *   template: `Number of ticks: {{numberOfTicks}}`
	         * })
	         * class Cmp {
	         *   numberOfTicks = 0;
	         *
	         *   constructor(ref: ChangeDetectorRef) {
	         *     setInterval(() => {
	         *       this.numberOfTicks ++
	         *       // the following is required, otherwise the view will not be updated
	         *       this.ref.markForCheck();
	         *     }, 1000);
	         *   }
	         * }
	         *
	         * \@Component({
	         *   selector: 'app',
	         *   changeDetection: ChangeDetectionStrategy.OnPush,
	         *   template: `
	         *     <cmp><cmp>
	         *   `,
	         * })
	         * class App {
	         * }
	         * ```
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.markForCheck = function () { };
	        /**
	         * Detaches the change detector from the change detector tree.
	         *
	         * The detached change detector will not be checked until it is reattached.
	         *
	         * This can also be used in combination with {\@link ChangeDetectorRef#detectChanges} to implement
	         * local change
	         * detection checks.
	         *
	         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	         *
	         * ### Example
	         *
	         * The following example defines a component with a large list of readonly data.
	         * Imagine the data changes constantly, many times per second. For performance reasons,
	         * we want to check and update the list every five seconds. We can do that by detaching
	         * the component's change detector and doing a local check every five seconds.
	         *
	         * ```typescript
	         * class DataProvider {
	         *   // in a real application the returned data will be different every time
	         *   get data() {
	         *     return [1,2,3,4,5];
	         *   }
	         * }
	         *
	         * \@Component({
	         *   selector: 'giant-list',
	         *   template: `
	         *     <li *ngFor="let d of dataProvider.data">Data {{d}}</lig>
	         *   `,
	         * })
	         * class GiantList {
	         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {
	         *     ref.detach();
	         *     setInterval(() => {
	         *       this.ref.detectChanges();
	         *     }, 5000);
	         *   }
	         * }
	         *
	         * \@Component({
	         *   selector: 'app',
	         *   providers: [DataProvider],
	         *   template: `
	         *     <giant-list><giant-list>
	         *   `,
	         * })
	         * class App {
	         * }
	         * ```
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.detach = function () { };
	        /**
	         * Checks the change detector and its children.
	         *
	         * This can also be used in combination with {\@link ChangeDetectorRef#detach} to implement local
	         * change detection
	         * checks.
	         *
	         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	         *
	         * ### Example
	         *
	         * The following example defines a component with a large list of readonly data.
	         * Imagine, the data changes constantly, many times per second. For performance reasons,
	         * we want to check and update the list every five seconds.
	         *
	         * We can do that by detaching the component's change detector and doing a local change detection
	         * check
	         * every five seconds.
	         *
	         * See {\@link ChangeDetectorRef#detach} for more information.
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.detectChanges = function () { };
	        /**
	         * Checks the change detector and its children, and throws if any changes are detected.
	         *
	         * This is used in development mode to verify that running change detection doesn't introduce
	         * other changes.
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.checkNoChanges = function () { };
	        /**
	         * Reattach the change detector to the change detector tree.
	         *
	         * This also marks OnPush ancestors as to be checked. This reattached change detector will be
	         * checked during the next change detection run.
	         *
	         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))
	         *
	         * The following example creates a component displaying `live` data. The component will detach
	         * its change detector from the main change detector tree when the component's live property
	         * is set to false.
	         *
	         * ```typescript
	         * class DataProvider {
	         *   data = 1;
	         *
	         *   constructor() {
	         *     setInterval(() => {
	         *       this.data = this.data * 2;
	         *     }, 500);
	         *   }
	         * }
	         *
	         * \@Component({
	         *   selector: 'live-data',
	         *   inputs: ['live'],
	         *   template: 'Data: {{dataProvider.data}}'
	         * })
	         * class LiveData {
	         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}
	         *
	         *   set live(value) {
	         *     if (value)
	         *       this.ref.reattach();
	         *     else
	         *       this.ref.detach();
	         *   }
	         * }
	         *
	         * \@Component({
	         *   selector: 'app',
	         *   providers: [DataProvider],
	         *   template: `
	         *     Live Update: <input type="checkbox" [(ngModel)]="live">
	         *     <live-data [live]="live"><live-data>
	         *   `,
	         * })
	         * class App {
	         *   live = true;
	         * }
	         * ```
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.reattach = function () { };
	        return ChangeDetectorRef;
	    }());

	    /**
	     * Structural diffing for `Object`s and `Map`s.
	     */
	    var /** @type {?} */ keyValDiff = [new DefaultKeyValueDifferFactory()];
	    /**
	     * Structural diffing for `Iterable` types such as `Array`s.
	     */
	    var /** @type {?} */ iterableDiff = [new DefaultIterableDifferFactory()];
	    var /** @type {?} */ defaultIterableDiffers = new IterableDiffers(iterableDiff);
	    var /** @type {?} */ defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var RenderComponentType = (function () {
	        /**
	         * @param {?} id
	         * @param {?} templateUrl
	         * @param {?} slotCount
	         * @param {?} encapsulation
	         * @param {?} styles
	         * @param {?} animations
	         */
	        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
	            this.id = id;
	            this.templateUrl = templateUrl;
	            this.slotCount = slotCount;
	            this.encapsulation = encapsulation;
	            this.styles = styles;
	            this.animations = animations;
	        }
	        return RenderComponentType;
	    }());
	    /**
	     * @abstract
	     */
	    var RenderDebugInfo = (function () {
	        function RenderDebugInfo() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderDebugInfo.prototype.injector = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderDebugInfo.prototype.component = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderDebugInfo.prototype.providerTokens = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderDebugInfo.prototype.references = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderDebugInfo.prototype.context = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderDebugInfo.prototype.source = function () { };
	        return RenderDebugInfo;
	    }());
	    /**
	     * \@experimental
	     * @abstract
	     */
	    var Renderer = (function () {
	        function Renderer() {
	        }
	        /**
	         * @abstract
	         * @param {?} selectorOrNode
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?} name
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} hostElement
	         * @return {?}
	         */
	        Renderer.prototype.createViewRoot = function (hostElement) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?} value
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.createText = function (parentElement, value, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?} nodes
	         * @return {?}
	         */
	        Renderer.prototype.projectNodes = function (parentElement, nodes) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };
	        /**
	         * @abstract
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        Renderer.prototype.detachView = function (viewRootNodes) { };
	        /**
	         * @abstract
	         * @param {?} hostElement
	         * @param {?} viewAllNodes
	         * @return {?}
	         */
	        Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        Renderer.prototype.listen = function (renderElement, name, callback) { };
	        /**
	         * @abstract
	         * @param {?} target
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        Renderer.prototype.listenGlobal = function (target, name, callback) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} attributeName
	         * @param {?} attributeValue
	         * @return {?}
	         */
	        Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };
	        /**
	         * Used only in debug mode to serialize property changes to dom nodes as attributes.
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} className
	         * @param {?} isAdd
	         * @return {?}
	         */
	        Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} methodName
	         * @param {?=} args
	         * @return {?}
	         */
	        Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };
	        /**
	         * @abstract
	         * @param {?} renderNode
	         * @param {?} text
	         * @return {?}
	         */
	        Renderer.prototype.setText = function (renderNode, text) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
	        return Renderer;
	    }());
	    /**
	     * Injectable service that provides a low-level interface for modifying the UI.
	     *
	     * Use this service to bypass Angular's templating and make custom UI changes that can't be
	     * expressed declaratively. For example if you need to set a property or an attribute whose name is
	     * not statically known, use {\@link #setElementProperty} or {\@link #setElementAttribute}
	     * respectively.
	     *
	     * If you are implementing a custom renderer, you must implement this interface.
	     *
	     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
	     * \@experimental
	     * @abstract
	     */
	    var RootRenderer = (function () {
	        function RootRenderer() {
	        }
	        /**
	         * @abstract
	         * @param {?} componentType
	         * @return {?}
	         */
	        RootRenderer.prototype.renderComponent = function (componentType) { };
	        return RootRenderer;
	    }());

	    var SecurityContext = {};
	    SecurityContext.NONE = 0;
	    SecurityContext.HTML = 1;
	    SecurityContext.STYLE = 2;
	    SecurityContext.SCRIPT = 3;
	    SecurityContext.URL = 4;
	    SecurityContext.RESOURCE_URL = 5;
	    SecurityContext[SecurityContext.NONE] = "NONE";
	    SecurityContext[SecurityContext.HTML] = "HTML";
	    SecurityContext[SecurityContext.STYLE] = "STYLE";
	    SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
	    SecurityContext[SecurityContext.URL] = "URL";
	    SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
	    /**
	     * Sanitizer is used by the views to sanitize potentially dangerous values.
	     *
	     * \@stable
	     * @abstract
	     */
	    var Sanitizer = (function () {
	        function Sanitizer() {
	        }
	        /**
	         * @abstract
	         * @param {?} context
	         * @param {?} value
	         * @return {?}
	         */
	        Sanitizer.prototype.sanitize = function (context, value) { };
	        return Sanitizer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * An error thrown if application changes model breaking the top-down data flow.
	     *
	     * This exception is only thrown in dev mode.
	     *
	     * <!-- TODO: Add a link once the dev mode option is configurable -->
	     *
	     * ### Example
	     *
	     * ```typescript
	     * \@Component({
	     *   selector: 'parent',
	     *   template: '<child [prop]="parentProp"></child>',
	     * })
	     * class Parent {
	     *   parentProp = 'init';
	     * }
	     *
	     * \@Directive({selector: 'child', inputs: ['prop']})
	     * class Child {
	     *   constructor(public parent: Parent) {}
	     *
	     *   set prop(v) {
	     *     // this updates the parent property, which is disallowed during change detection
	     *     // this will result in ExpressionChangedAfterItHasBeenCheckedError
	     *     this.parent.parentProp = 'updated';
	     *   }
	     * }
	     * ```
	     * \@stable
	     */
	    var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {
	        __extends$7(ExpressionChangedAfterItHasBeenCheckedError, _super);
	        /**
	         * @param {?} oldValue
	         * @param {?} currValue
	         */
	        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
	            var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
	            if (oldValue === UNINITIALIZED) {
	                msg +=
	                    " It seems like the view has been created after its parent and its children have been dirty checked." +
	                        " Has it been created in a change detection hook ?";
	            }
	            _super.call(this, msg);
	        }
	        return ExpressionChangedAfterItHasBeenCheckedError;
	    }(BaseError));
	    /**
	     * Thrown when an exception was raised during view creation, change detection or destruction.
	     *
	     * This error wraps the original exception to attach additional contextual information that can
	     * be useful for debugging.
	     * \@stable
	     */
	    var ViewWrappedError = (function (_super) {
	        __extends$7(ViewWrappedError, _super);
	        /**
	         * @param {?} originalError
	         * @param {?} context
	         */
	        function ViewWrappedError(originalError, context) {
	            _super.call(this, "Error in " + context.source, originalError);
	            this.context = context;
	        }
	        return ViewWrappedError;
	    }(WrappedError));
	    /**
	     * Thrown when a destroyed view is used.
	     *
	     * This error indicates a bug in the framework.
	     *
	     * This is an internal Angular error.
	     * \@stable
	     */
	    var ViewDestroyedError = (function (_super) {
	        __extends$7(ViewDestroyedError, _super);
	        /**
	         * @param {?} details
	         */
	        function ViewDestroyedError(details) {
	            _super.call(this, "Attempt to use a destroyed view: " + details);
	        }
	        return ViewDestroyedError;
	    }(BaseError));

	    var ViewUtils = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} sanitizer
	         * @param {?} animationQueue
	         */
	        function ViewUtils(_renderer, sanitizer, animationQueue) {
	            this._renderer = _renderer;
	            this.animationQueue = animationQueue;
	            this.sanitizer = sanitizer;
	        }
	        /**
	         * \@internal
	         * @param {?} renderComponentType
	         * @return {?}
	         */
	        ViewUtils.prototype.renderComponent = function (renderComponentType) {
	            return this._renderer.renderComponent(renderComponentType);
	        };
	        ViewUtils.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ViewUtils.ctorParameters = function () { return [
	            { type: RootRenderer, },
	            { type: Sanitizer, },
	            { type: AnimationQueue, },
	        ]; };
	        return ViewUtils;
	    }());
	    var /** @type {?} */ nextRenderComponentTypeId = 0;
	    /**
	     * @param {?} templateUrl
	     * @param {?} slotCount
	     * @param {?} encapsulation
	     * @param {?} styles
	     * @param {?} animations
	     * @return {?}
	     */
	    function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
	        return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
	    }
	    /**
	     * @param {?} e
	     * @param {?} array
	     * @return {?}
	     */
	    function addToArray(e, array) {
	        array.push(e);
	    }
	    /**
	     * @param {?} valueCount
	     * @param {?} constAndInterp
	     * @return {?}
	     */
	    function interpolate(valueCount, constAndInterp) {
	        var /** @type {?} */ result = '';
	        for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {
	            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
	        }
	        return result + constAndInterp[valueCount * 2];
	    }
	    /**
	     * @param {?} valueCount
	     * @param {?} c0
	     * @param {?} a1
	     * @param {?} c1
	     * @param {?=} a2
	     * @param {?=} c2
	     * @param {?=} a3
	     * @param {?=} c3
	     * @param {?=} a4
	     * @param {?=} c4
	     * @param {?=} a5
	     * @param {?=} c5
	     * @param {?=} a6
	     * @param {?=} c6
	     * @param {?=} a7
	     * @param {?=} c7
	     * @param {?=} a8
	     * @param {?=} c8
	     * @param {?=} a9
	     * @param {?=} c9
	     * @return {?}
	     */
	    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
	        switch (valueCount) {
	            case 1:
	                return c0 + _toStringWithNull(a1) + c1;
	            case 2:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
	            case 3:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3;
	            case 4:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4;
	            case 5:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
	            case 6:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
	            case 7:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7;
	            case 8:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
	            case 9:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
	            default:
	                throw new Error("Does not support more than 9 expressions");
	        }
	    }
	    /**
	     * @param {?} v
	     * @return {?}
	     */
	    function _toStringWithNull(v) {
	        return v != null ? v.toString() : '';
	    }
	    /**
	     * @param {?} throwOnChange
	     * @param {?} oldValue
	     * @param {?} newValue
	     * @return {?}
	     */
	    function checkBinding(throwOnChange, oldValue, newValue) {
	        if (throwOnChange) {
	            if (!devModeEqual(oldValue, newValue)) {
	                throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
	            }
	            return false;
	        }
	        else {
	            return !looseIdentical(oldValue, newValue);
	        }
	    }
	    /**
	     * @param {?} input
	     * @param {?} value
	     * @return {?}
	     */
	    function castByValue(input, value) {
	        return (input);
	    }
	    var /** @type {?} */ EMPTY_ARRAY = [];
	    var /** @type {?} */ EMPTY_MAP = {};
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy1(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0 = UNINITIALIZED;
	        return function (p0) {
	            if (!looseIdentical(v0, p0)) {
	                v0 = p0;
	                result = fn(p0);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy2(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0 = UNINITIALIZED;
	        var /** @type {?} */ v1 = UNINITIALIZED;
	        return function (p0, p1) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
	                v0 = p0;
	                v1 = p1;
	                result = fn(p0, p1);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy3(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0 = UNINITIALIZED;
	        var /** @type {?} */ v1 = UNINITIALIZED;
	        var /** @type {?} */ v2 = UNINITIALIZED;
	        return function (p0, p1, p2) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                result = fn(p0, p1, p2);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy4(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3;
	        v0 = v1 = v2 = v3 = UNINITIALIZED;
	        return function (p0, p1, p2, p3) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                result = fn(p0, p1, p2, p3);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy5(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4;
	        v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                result = fn(p0, p1, p2, p3, p4);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy6(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5;
	        v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                result = fn(p0, p1, p2, p3, p4, p5);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy7(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                result = fn(p0, p1, p2, p3, p4, p5, p6);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy8(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy9(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                v8 = p8;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy10(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8, /** @type {?} */ v9;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||
	                !looseIdentical(v9, p9)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                v8 = p8;
	                v9 = p9;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} el
	     * @param {?} changes
	     * @return {?}
	     */
	    function setBindingDebugInfoForChanges(renderer, el, changes) {
	        Object.keys(changes).forEach(function (propName) {
	            setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
	        });
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} el
	     * @param {?} propName
	     * @param {?} value
	     * @return {?}
	     */
	    function setBindingDebugInfo(renderer, el, propName, value) {
	        try {
	            renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
	        }
	        catch (e) {
	            renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');
	        }
	    }
	    var /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function camelCaseToDashCase(input) {
	        return input.replace(CAMEL_CASE_REGEXP, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i - 0] = arguments[_i];
	            }
	            return '-' + m[1].toLowerCase();
	        });
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} parentElement
	     * @param {?} name
	     * @param {?} attrs
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
	        var /** @type {?} */ el = renderer.createElement(parentElement, name, debugInfo);
	        for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	            renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
	        }
	        return el;
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} elementName
	     * @param {?} attrs
	     * @param {?} rootSelectorOrNode
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
	        var /** @type {?} */ hostElement;
	        if (isPresent(rootSelectorOrNode)) {
	            hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
	            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
	            }
	            renderer.setElementAttribute(hostElement, 'ng-version', VERSION.full);
	        }
	        else {
	            hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
	        }
	        return hostElement;
	    }
	    /**
	     * @param {?} view
	     * @param {?} element
	     * @param {?} eventNamesAndTargets
	     * @param {?} listener
	     * @return {?}
	     */
	    function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
	        var /** @type {?} */ disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
	        for (var /** @type {?} */ i = 0; i < eventNamesAndTargets.length; i += 2) {
	            var /** @type {?} */ eventName = eventNamesAndTargets.get(i);
	            var /** @type {?} */ eventTarget = eventNamesAndTargets.get(i + 1);
	            var /** @type {?} */ disposable = void 0;
	            if (eventTarget) {
	                disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName));
	            }
	            else {
	                disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
	            }
	            disposables.set(i / 2, disposable);
	        }
	        return disposeInlineArray.bind(null, disposables);
	    }
	    /**
	     * @param {?} disposables
	     * @return {?}
	     */
	    function disposeInlineArray(disposables) {
	        for (var /** @type {?} */ i = 0; i < disposables.length; i++) {
	            disposables.get(i)();
	        }
	    }
	    /**
	     * @return {?}
	     */
	    function noop() { }
	    /**
	     * @param {?} length
	     * @return {?}
	     */
	    function createEmptyInlineArray(length) {
	        var /** @type {?} */ ctor;
	        if (length <= 2) {
	            ctor = InlineArray2;
	        }
	        else if (length <= 4) {
	            ctor = InlineArray4;
	        }
	        else if (length <= 8) {
	            ctor = InlineArray8;
	        }
	        else if (length <= 16) {
	            ctor = InlineArray16;
	        }
	        else {
	            ctor = InlineArrayDynamic;
	        }
	        return new ctor(length);
	    }
	    var InlineArray0 = (function () {
	        function InlineArray0() {
	            this.length = 0;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray0.prototype.get = function (index) { return undefined; };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray0.prototype.set = function (index, value) { };
	        return InlineArray0;
	    }());
	    var InlineArray2 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         */
	        function InlineArray2(length, _v0, _v1) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray2.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray2.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	            }
	        };
	        return InlineArray2;
	    }());
	    var InlineArray4 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         * @param {?=} _v2
	         * @param {?=} _v3
	         */
	        function InlineArray4(length, _v0, _v1, _v2, _v3) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray4.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray4.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	            }
	        };
	        return InlineArray4;
	    }());
	    var InlineArray8 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         * @param {?=} _v2
	         * @param {?=} _v3
	         * @param {?=} _v4
	         * @param {?=} _v5
	         * @param {?=} _v6
	         * @param {?=} _v7
	         */
	        function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	            this._v4 = _v4;
	            this._v5 = _v5;
	            this._v6 = _v6;
	            this._v7 = _v7;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray8.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                case 4:
	                    return this._v4;
	                case 5:
	                    return this._v5;
	                case 6:
	                    return this._v6;
	                case 7:
	                    return this._v7;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray8.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	                case 4:
	                    this._v4 = value;
	                    break;
	                case 5:
	                    this._v5 = value;
	                    break;
	                case 6:
	                    this._v6 = value;
	                    break;
	                case 7:
	                    this._v7 = value;
	                    break;
	            }
	        };
	        return InlineArray8;
	    }());
	    var InlineArray16 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         * @param {?=} _v2
	         * @param {?=} _v3
	         * @param {?=} _v4
	         * @param {?=} _v5
	         * @param {?=} _v6
	         * @param {?=} _v7
	         * @param {?=} _v8
	         * @param {?=} _v9
	         * @param {?=} _v10
	         * @param {?=} _v11
	         * @param {?=} _v12
	         * @param {?=} _v13
	         * @param {?=} _v14
	         * @param {?=} _v15
	         */
	        function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	            this._v4 = _v4;
	            this._v5 = _v5;
	            this._v6 = _v6;
	            this._v7 = _v7;
	            this._v8 = _v8;
	            this._v9 = _v9;
	            this._v10 = _v10;
	            this._v11 = _v11;
	            this._v12 = _v12;
	            this._v13 = _v13;
	            this._v14 = _v14;
	            this._v15 = _v15;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray16.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                case 4:
	                    return this._v4;
	                case 5:
	                    return this._v5;
	                case 6:
	                    return this._v6;
	                case 7:
	                    return this._v7;
	                case 8:
	                    return this._v8;
	                case 9:
	                    return this._v9;
	                case 10:
	                    return this._v10;
	                case 11:
	                    return this._v11;
	                case 12:
	                    return this._v12;
	                case 13:
	                    return this._v13;
	                case 14:
	                    return this._v14;
	                case 15:
	                    return this._v15;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray16.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	                case 4:
	                    this._v4 = value;
	                    break;
	                case 5:
	                    this._v5 = value;
	                    break;
	                case 6:
	                    this._v6 = value;
	                    break;
	                case 7:
	                    this._v7 = value;
	                    break;
	                case 8:
	                    this._v8 = value;
	                    break;
	                case 9:
	                    this._v9 = value;
	                    break;
	                case 10:
	                    this._v10 = value;
	                    break;
	                case 11:
	                    this._v11 = value;
	                    break;
	                case 12:
	                    this._v12 = value;
	                    break;
	                case 13:
	                    this._v13 = value;
	                    break;
	                case 14:
	                    this._v14 = value;
	                    break;
	                case 15:
	                    this._v15 = value;
	                    break;
	            }
	        };
	        return InlineArray16;
	    }());
	    var InlineArrayDynamic = (function () {
	        /**
	         * @param {?} length
	         * @param {...?} values
	         */
	        function InlineArrayDynamic(length) {
	            var values = [];
	            for (var _i = 1; _i < arguments.length; _i++) {
	                values[_i - 1] = arguments[_i];
	            }
	            this.length = length;
	            this._values = values;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArrayDynamic.prototype.get = function (index) { return this._values[index]; };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value; };
	        return InlineArrayDynamic;
	    }());
	    var /** @type {?} */ EMPTY_INLINE_ARRAY = new InlineArray0();


	    var view_utils = Object.freeze({
	        ViewUtils: ViewUtils,
	        createRenderComponentType: createRenderComponentType,
	        addToArray: addToArray,
	        interpolate: interpolate,
	        inlineInterpolate: inlineInterpolate,
	        checkBinding: checkBinding,
	        castByValue: castByValue,
	        EMPTY_ARRAY: EMPTY_ARRAY,
	        EMPTY_MAP: EMPTY_MAP,
	        pureProxy1: pureProxy1,
	        pureProxy2: pureProxy2,
	        pureProxy3: pureProxy3,
	        pureProxy4: pureProxy4,
	        pureProxy5: pureProxy5,
	        pureProxy6: pureProxy6,
	        pureProxy7: pureProxy7,
	        pureProxy8: pureProxy8,
	        pureProxy9: pureProxy9,
	        pureProxy10: pureProxy10,
	        setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,
	        setBindingDebugInfo: setBindingDebugInfo,
	        createRenderElement: createRenderElement,
	        selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,
	        subscribeToRenderElement: subscribeToRenderElement,
	        noop: noop,
	        InlineArray2: InlineArray2,
	        InlineArray4: InlineArray4,
	        InlineArray8: InlineArray8,
	        InlineArray16: InlineArray16,
	        InlineArrayDynamic: InlineArrayDynamic,
	        EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY
	    });

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an instance of a Component created via a {\@link ComponentFactory}.
	     *
	     * `ComponentRef` provides access to the Component Instance as well other objects related to this
	     * Component Instance and allows you to destroy the Component Instance via the {\@link #destroy}
	     * method.
	     * \@stable
	     * @abstract
	     */
	    var ComponentRef = (function () {
	        function ComponentRef() {
	        }
	        /**
	         * Location of the Host Element of this Component Instance.
	         * @abstract
	         * @return {?}
	         */
	        ComponentRef.prototype.location = function () { };
	        /**
	         * The injector on which the component instance exists.
	         * @abstract
	         * @return {?}
	         */
	        ComponentRef.prototype.injector = function () { };
	        /**
	         * The instance of the Component.
	         * @abstract
	         * @return {?}
	         */
	        ComponentRef.prototype.instance = function () { };
	        /**
	         * The {\@link ViewRef} of the Host View of this Component instance.
	         * @abstract
	         * @return {?}
	         */
	        ComponentRef.prototype.hostView = function () { };
	        /**
	         * The {\@link ChangeDetectorRef} of the Component instance.
	         * @abstract
	         * @return {?}
	         */
	        ComponentRef.prototype.changeDetectorRef = function () { };
	        /**
	         * The component type.
	         * @abstract
	         * @return {?}
	         */
	        ComponentRef.prototype.componentType = function () { };
	        /**
	         * Destroys the component instance and all of the data structures associated with it.
	         * @abstract
	         * @return {?}
	         */
	        ComponentRef.prototype.destroy = function () { };
	        /**
	         * Allows to register a callback that will be called when the component is destroyed.
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        ComponentRef.prototype.onDestroy = function (callback) { };
	        return ComponentRef;
	    }());
	    var ComponentRef_ = (function (_super) {
	        __extends$5(ComponentRef_, _super);
	        /**
	         * @param {?} _index
	         * @param {?} _parentView
	         * @param {?} _nativeElement
	         * @param {?} _component
	         */
	        function ComponentRef_(_index, _parentView, _nativeElement, _component) {
	            _super.call(this);
	            this._index = _index;
	            this._parentView = _parentView;
	            this._nativeElement = _nativeElement;
	            this._component = _component;
	        }
	        Object.defineProperty(ComponentRef_.prototype, "location", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ElementRef(this._nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef_.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parentView.injector(this._index); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef_.prototype, "instance", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._component; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "hostView", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parentView.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parentView.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "componentType", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (this._component.constructor); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy(); };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };
	        return ComponentRef_;
	    }(ComponentRef));
	    /**
	     * \@stable
	     */
	    var ComponentFactory = (function () {
	        /**
	         * @param {?} selector
	         * @param {?} _viewClass
	         * @param {?} _componentType
	         */
	        function ComponentFactory(selector, _viewClass, _componentType) {
	            this.selector = selector;
	            this._viewClass = _viewClass;
	            this._componentType = _componentType;
	        }
	        Object.defineProperty(ComponentFactory.prototype, "componentType", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._componentType; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Creates a new component.
	         * @param {?} injector
	         * @param {?=} projectableNodes
	         * @param {?=} rootSelectorOrNode
	         * @return {?}
	         */
	        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }
	            var /** @type {?} */ vu = injector.get(ViewUtils);
	            if (!projectableNodes) {
	                projectableNodes = [];
	            }
	            var /** @type {?} */ hostView = new this._viewClass(vu, null, null, null);
	            return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
	        };
	        return ComponentFactory;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@stable
	     */
	    var NoComponentFactoryError = (function (_super) {
	        __extends$8(NoComponentFactoryError, _super);
	        /**
	         * @param {?} component
	         */
	        function NoComponentFactoryError(component) {
	            _super.call(this, "No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
	            this.component = component;
	        }
	        return NoComponentFactoryError;
	    }(BaseError));
	    var _NullComponentFactoryResolver = (function () {
	        function _NullComponentFactoryResolver() {
	        }
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	            throw new NoComponentFactoryError(component);
	        };
	        return _NullComponentFactoryResolver;
	    }());
	    /**
	     * \@stable
	     * @abstract
	     */
	    var ComponentFactoryResolver = (function () {
	        function ComponentFactoryResolver() {
	        }
	        /**
	         * @abstract
	         * @param {?} component
	         * @return {?}
	         */
	        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };
	        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
	        return ComponentFactoryResolver;
	    }());
	    var CodegenComponentFactoryResolver = (function () {
	        /**
	         * @param {?} factories
	         * @param {?} _parent
	         */
	        function CodegenComponentFactoryResolver(factories, _parent) {
	            this._parent = _parent;
	            this._factories = new Map();
	            for (var i = 0; i < factories.length; i++) {
	                var factory = factories[i];
	                this._factories.set(factory.componentType, factory);
	            }
	        }
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	            var /** @type {?} */ result = this._factories.get(component);
	            if (!result) {
	                result = this._parent.resolveComponentFactory(component);
	            }
	            return result;
	        };
	        return CodegenComponentFactoryResolver;
	    }());

	    var /** @type {?} */ trace;
	    var /** @type {?} */ events;
	    /**
	     * @return {?}
	     */
	    function detectWTF() {
	        var /** @type {?} */ wtf = ((global$1) /** TODO #9100 */)['wtf'];
	        if (wtf) {
	            trace = wtf['trace'];
	            if (trace) {
	                events = trace['events'];
	                return true;
	            }
	        }
	        return false;
	    }
	    /**
	     * @param {?} signature
	     * @param {?=} flags
	     * @return {?}
	     */
	    function createScope(signature, flags) {
	        if (flags === void 0) { flags = null; }
	        return events.createScope(signature, flags);
	    }
	    /**
	     * @param {?} scope
	     * @param {?=} returnValue
	     * @return {?}
	     */
	    function leave(scope, returnValue) {
	        trace.leaveScope(scope, returnValue);
	        return returnValue;
	    }
	    /**
	     * @param {?} rangeType
	     * @param {?} action
	     * @return {?}
	     */
	    function startTimeRange(rangeType, action) {
	        return trace.beginTimeRange(rangeType, action);
	    }
	    /**
	     * @param {?} range
	     * @return {?}
	     */
	    function endTimeRange(range) {
	        trace.endTimeRange(range);
	    }

	    /**
	     * True if WTF is enabled.
	     */
	    var /** @type {?} */ wtfEnabled = detectWTF();
	    /**
	     * @param {?=} arg0
	     * @param {?=} arg1
	     * @return {?}
	     */
	    function noopScope(arg0, arg1) {
	        return null;
	    }
	    /**
	     * Create trace scope.
	     *
	     * Scopes must be strictly nested and are analogous to stack frames, but
	     * do not have to follow the stack frames. Instead it is recommended that they follow logical
	     * nesting. You may want to use
	     * [Event
	     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
	     * as they are defined in WTF.
	     *
	     * Used to mark scope entry. The return value is used to leave the scope.
	     *
	     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
	     *
	     *     someMethod() {
	     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
	     *        // DO SOME WORK HERE
	     *        return wtfLeave(s, 123); // Return value 123
	     *     }
	     *
	     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
	     * negatively impact the performance of your application. For this reason we recommend that
	     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
	     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
	     * exception, will produce incorrect trace, but presence of exception signifies logic error which
	     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
	     * an exception is expected during normal execution while profiling.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };
	    /**
	     * Used to mark end of Scope.
	     *
	     * - `scope` to end.
	     * - `returnValue` (optional) to be passed to the WTF.
	     *
	     * Returns the `returnValue for easy chaining.
	     * @experimental
	     */
	    var /** @type {?} */ wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
	    /**
	     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
	     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
	     * enabled.
	     *
	     *     someMethod() {
	     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
	     *        var future = new Future.delay(5).then((_) {
	     *          wtfEndTimeRange(s);
	     *        });
	     *     }
	     * @experimental
	     */
	    var /** @type {?} */ wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
	    /**
	     * Ends a async time range operation.
	     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
	     * enabled.
	     * @experimental
	     */
	    var /** @type {?} */ wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };

	    /**
	     * The Testability service provides testing hooks that can be accessed from
	     * the browser and by services such as Protractor. Each bootstrapped Angular
	     * application on the page will have an instance of Testability.
	     * \@experimental
	     */
	    var Testability = (function () {
	        /**
	         * @param {?} _ngZone
	         */
	        function Testability(_ngZone) {
	            this._ngZone = _ngZone;
	            /** @internal */
	            this._pendingCount = 0;
	            /** @internal */
	            this._isZoneStable = true;
	            /**
	             * Whether any work was done since the last 'whenStable' callback. This is
	             * useful to detect if this could have potentially destabilized another
	             * component while it is stabilizing.
	             * @internal
	             */
	            this._didWork = false;
	            /** @internal */
	            this._callbacks = [];
	            this._watchAngularEvents();
	        }
	        /**
	         * \@internal
	         * @return {?}
	         */
	        Testability.prototype._watchAngularEvents = function () {
	            var _this = this;
	            this._ngZone.onUnstable.subscribe({
	                next: function () {
	                    _this._didWork = true;
	                    _this._isZoneStable = false;
	                }
	            });
	            this._ngZone.runOutsideAngular(function () {
	                _this._ngZone.onStable.subscribe({
	                    next: function () {
	                        NgZone.assertNotInAngularZone();
	                        scheduleMicroTask(function () {
	                            _this._isZoneStable = true;
	                            _this._runCallbacksIfReady();
	                        });
	                    }
	                });
	            });
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.increasePendingRequestCount = function () {
	            this._pendingCount += 1;
	            this._didWork = true;
	            return this._pendingCount;
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.decreasePendingRequestCount = function () {
	            this._pendingCount -= 1;
	            if (this._pendingCount < 0) {
	                throw new Error('pending async requests below zero');
	            }
	            this._runCallbacksIfReady();
	            return this._pendingCount;
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.isStable = function () {
	            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        Testability.prototype._runCallbacksIfReady = function () {
	            var _this = this;
	            if (this.isStable()) {
	                // Schedules the call backs in a new frame so that it is always async.
	                scheduleMicroTask(function () {
	                    while (_this._callbacks.length !== 0) {
	                        (_this._callbacks.pop())(_this._didWork);
	                    }
	                    _this._didWork = false;
	                });
	            }
	            else {
	                // Not Ready
	                this._didWork = true;
	            }
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        Testability.prototype.whenStable = function (callback) {
	            this._callbacks.push(callback);
	            this._runCallbacksIfReady();
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	        /**
	         * @deprecated use findProviders
	         * @param {?} using
	         * @param {?} provider
	         * @param {?} exactMatch
	         * @return {?}
	         */
	        Testability.prototype.findBindings = function (using, provider, exactMatch) {
	            // TODO(juliemr): implement.
	            return [];
	        };
	        /**
	         * @param {?} using
	         * @param {?} provider
	         * @param {?} exactMatch
	         * @return {?}
	         */
	        Testability.prototype.findProviders = function (using, provider, exactMatch) {
	            // TODO(juliemr): implement.
	            return [];
	        };
	        Testability.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Testability.ctorParameters = function () { return [
	            { type: NgZone, },
	        ]; };
	        return Testability;
	    }());
	    /**
	     * A global registry of {\@link Testability} instances for specific elements.
	     * \@experimental
	     */
	    var TestabilityRegistry = (function () {
	        function TestabilityRegistry() {
	            /** @internal */
	            this._applications = new Map();
	            _testabilityGetter.addToWindow(this);
	        }
	        /**
	         * @param {?} token
	         * @param {?} testability
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	            this._applications.set(token, testability);
	        };
	        /**
	         * @param {?} elem
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
	        /**
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
	        /**
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
	        /**
	         * @param {?} elem
	         * @param {?=} findInAncestors
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	            if (findInAncestors === void 0) { findInAncestors = true; }
	            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	        };
	        TestabilityRegistry.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        TestabilityRegistry.ctorParameters = function () { return []; };
	        return TestabilityRegistry;
	    }());
	    var _NoopGetTestability = (function () {
	        function _NoopGetTestability() {
	        }
	        /**
	         * @param {?} registry
	         * @return {?}
	         */
	        _NoopGetTestability.prototype.addToWindow = function (registry) { };
	        /**
	         * @param {?} registry
	         * @param {?} elem
	         * @param {?} findInAncestors
	         * @return {?}
	         */
	        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	            return null;
	        };
	        return _NoopGetTestability;
	    }());
	    /**
	     * Set the {\@link GetTestability} implementation used by the Angular testing framework.
	     * \@experimental
	     * @param {?} getter
	     * @return {?}
	     */
	    function setTestabilityGetter(getter) {
	        _testabilityGetter = getter;
	    }
	    var /** @type {?} */ _testabilityGetter = new _NoopGetTestability();

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _devMode = true;
	    var /** @type {?} */ _runModeLocked = false;
	    var /** @type {?} */ _platform;
	    /**
	     * Disable Angular's development mode, which turns off assertions and other
	     * checks within the framework.
	     *
	     * One important assertion this disables verifies that a change detection pass
	     * does not result in additional changes to any bindings (also known as
	     * unidirectional data flow).
	     *
	     * \@stable
	     * @return {?}
	     */
	    function enableProdMode() {
	        if (_runModeLocked) {
	            throw new Error('Cannot enable prod mode after platform setup.');
	        }
	        _devMode = false;
	    }
	    /**
	     * Returns whether Angular is in development mode. After called once,
	     * the value is locked and won't change any more.
	     *
	     * By default, this is true, unless a user calls `enableProdMode` before calling this.
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @return {?}
	     */
	    function isDevMode() {
	        _runModeLocked = true;
	        return _devMode;
	    }
	    /**
	     * A token for third-party components that can register themselves with NgProbe.
	     *
	     * \@experimental
	     */
	    var NgProbeToken = (function () {
	        /**
	         * @param {?} name
	         * @param {?} token
	         */
	        function NgProbeToken(name, token) {
	            this.name = name;
	            this.token = token;
	        }
	        return NgProbeToken;
	    }());
	    /**
	     * Creates a platform.
	     * Platforms have to be eagerly created via this function.
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @param {?} injector
	     * @return {?}
	     */
	    function createPlatform(injector) {
	        if (_platform && !_platform.destroyed) {
	            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
	        }
	        _platform = injector.get(PlatformRef);
	        var /** @type {?} */ inits = (injector.get(PLATFORM_INITIALIZER, null));
	        if (inits)
	            inits.forEach(function (init) { return init(); });
	        return _platform;
	    }
	    /**
	     * Creates a factory for a platform
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @param {?} parentPlatformFactory
	     * @param {?} name
	     * @param {?=} providers
	     * @return {?}
	     */
	    function createPlatformFactory(parentPlatformFactory, name, providers) {
	        if (providers === void 0) { providers = []; }
	        var /** @type {?} */ marker = new OpaqueToken("Platform: " + name);
	        return function (extraProviders) {
	            if (extraProviders === void 0) { extraProviders = []; }
	            if (!getPlatform()) {
	                if (parentPlatformFactory) {
	                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
	                }
	                else {
	                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
	                }
	            }
	            return assertPlatform(marker);
	        };
	    }
	    /**
	     * Checks that there currently is a platform
	     * which contains the given token as a provider.
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @param {?} requiredToken
	     * @return {?}
	     */
	    function assertPlatform(requiredToken) {
	        var /** @type {?} */ platform = getPlatform();
	        if (!platform) {
	            throw new Error('No platform exists!');
	        }
	        if (!platform.injector.get(requiredToken, null)) {
	            throw new Error('A platform with a different configuration has been created. Please destroy it first.');
	        }
	        return platform;
	    }
	    /**
	     * Destroy the existing platform.
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @return {?}
	     */
	    function destroyPlatform() {
	        if (_platform && !_platform.destroyed) {
	            _platform.destroy();
	        }
	    }
	    /**
	     * Returns the current platform.
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @return {?}
	     */
	    function getPlatform() {
	        return _platform && !_platform.destroyed ? _platform : null;
	    }
	    /**
	     * The Angular platform is the entry point for Angular on a web page. Each page
	     * has exactly one platform, and services (such as reflection) which are common
	     * to every Angular application running on the page are bound in its scope.
	     *
	     * A page's platform is initialized implicitly when {\@link bootstrap}() is called, or
	     * explicitly by calling {\@link createPlatform}().
	     *
	     * \@stable
	     * @abstract
	     */
	    var PlatformRef = (function () {
	        function PlatformRef() {
	        }
	        /**
	         * Creates an instance of an `\@NgModule` for the given platform
	         * for offline compilation.
	         *
	         * ## Simple Example
	         *
	         * ```typescript
	         * my_module.ts:
	         *
	         * \@NgModule({
	         *   imports: [BrowserModule]
	         * })
	         * class MyModule {}
	         *
	         * main.ts:
	         * import {MyModuleNgFactory} from './my_module.ngfactory';
	         * import {platformBrowser} from '\@angular/platform-browser';
	         *
	         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
	         * ```
	         *
	         * \@experimental APIs related to application bootstrap are currently under review.
	         * @abstract
	         * @param {?} moduleFactory
	         * @return {?}
	         */
	        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };
	        /**
	         * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
	         *
	         * ## Simple Example
	         *
	         * ```typescript
	         * \@NgModule({
	         *   imports: [BrowserModule]
	         * })
	         * class MyModule {}
	         *
	         * let moduleRef = platformBrowser().bootstrapModule(MyModule);
	         * ```
	         * \@stable
	         * @abstract
	         * @param {?} moduleType
	         * @param {?=} compilerOptions
	         * @return {?}
	         */
	        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };
	        /**
	         * Register a listener to be called when the platform is disposed.
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        PlatformRef.prototype.onDestroy = function (callback) { };
	        /**
	         * Retrieve the platform {\@link Injector}, which is the parent injector for
	         * every Angular application on the page and provides singleton providers.
	         * @abstract
	         * @return {?}
	         */
	        PlatformRef.prototype.injector = function () { };
	        /**
	         * Destroy the Angular platform and all Angular applications on the page.
	         * @abstract
	         * @return {?}
	         */
	        PlatformRef.prototype.destroy = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        PlatformRef.prototype.destroyed = function () { };
	        return PlatformRef;
	    }());
	    /**
	     * @param {?} errorHandler
	     * @param {?} callback
	     * @return {?}
	     */
	    function _callAndReportToErrorHandler(errorHandler, callback) {
	        try {
	            var /** @type {?} */ result = callback();
	            if (isPromise(result)) {
	                return result.catch(function (e) {
	                    errorHandler.handleError(e);
	                    // rethrow as the exception handler might not do it
	                    throw e;
	                });
	            }
	            return result;
	        }
	        catch (e) {
	            errorHandler.handleError(e);
	            // rethrow as the exception handler might not do it
	            throw e;
	        }
	    }
	    var PlatformRef_ = (function (_super) {
	        __extends$3(PlatformRef_, _super);
	        /**
	         * @param {?} _injector
	         */
	        function PlatformRef_(_injector) {
	            _super.call(this);
	            this._injector = _injector;
	            this._modules = [];
	            this._destroyListeners = [];
	            this._destroyed = false;
	        }
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	        Object.defineProperty(PlatformRef_.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformRef_.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        PlatformRef_.prototype.destroy = function () {
	            if (this._destroyed) {
	                throw new Error('The platform has already been destroyed!');
	            }
	            this._modules.slice().forEach(function (module) { return module.destroy(); });
	            this._destroyListeners.forEach(function (listener) { return listener(); });
	            this._destroyed = true;
	        };
	        /**
	         * @param {?} moduleFactory
	         * @return {?}
	         */
	        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
	            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
	        };
	        /**
	         * @param {?} moduleFactory
	         * @param {?} ngZone
	         * @return {?}
	         */
	        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
	            var _this = this;
	            // Note: We need to create the NgZone _before_ we instantiate the module,
	            // as instantiating the module creates some providers eagerly.
	            // So we create a mini parent injector that just contains the new NgZone and
	            // pass that as parent to the NgModuleFactory.
	            if (!ngZone)
	                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
	            // Attention: Don't use ApplicationRef.run here,
	            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
	            return ngZone.run(function () {
	                var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
	                var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));
	                var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
	                if (!exceptionHandler) {
	                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
	                }
	                moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });
	                ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
	                return _callAndReportToErrorHandler(exceptionHandler, function () {
	                    var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);
	                    return initStatus.donePromise.then(function () {
	                        _this._moduleDoBootstrap(moduleRef);
	                        return moduleRef;
	                    });
	                });
	            });
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?=} compilerOptions
	         * @return {?}
	         */
	        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?=} compilerOptions
	         * @param {?} ngZone
	         * @param {?=} componentFactoryCallback
	         * @return {?}
	         */
	        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {
	            var _this = this;
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);
	            var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
	            // ugly internal api hack: generate host component factories for all declared components and
	            // pass the factories into the callback - this is used by UpdateAdapter to get hold of all
	            // factories.
	            if (componentFactoryCallback) {
	                return compiler.compileModuleAndAllComponentsAsync(moduleType)
	                    .then(function (_a) {
	                    var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;
	                    componentFactoryCallback(componentFactories);
	                    return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
	                });
	            }
	            return compiler.compileModuleAsync(moduleType)
	                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
	        };
	        /**
	         * @param {?} moduleRef
	         * @return {?}
	         */
	        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
	            var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);
	            if (moduleRef.bootstrapFactories.length > 0) {
	                moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });
	            }
	            else if (moduleRef.instance.ngDoBootstrap) {
	                moduleRef.instance.ngDoBootstrap(appRef);
	            }
	            else {
	                throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") +
	                    "Please define one of these.");
	            }
	            this._modules.push(moduleRef);
	        };
	        PlatformRef_.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        PlatformRef_.ctorParameters = function () { return [
	            { type: Injector, },
	        ]; };
	        return PlatformRef_;
	    }(PlatformRef));
	    /**
	     * A reference to an Angular application running on a page.
	     *
	     * For more about Angular applications, see the documentation for {\@link bootstrap}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var ApplicationRef = (function () {
	        function ApplicationRef() {
	        }
	        /**
	         * Bootstrap a new component at the root level of the application.
	         *
	         * ### Bootstrap process
	         *
	         * When bootstrapping a new root component into an application, Angular mounts the
	         * specified application component onto DOM elements identified by the [componentType]'s
	         * selector and kicks off automatic change detection to finish initializing the component.
	         *
	         * ### Example
	         * {\@example core/ts/platform/platform.ts region='longform'}
	         * @abstract
	         * @param {?} componentFactory
	         * @return {?}
	         */
	        ApplicationRef.prototype.bootstrap = function (componentFactory) { };
	        /**
	         * Invoke this method to explicitly process change detection and its side-effects.
	         *
	         * In development mode, `tick()` also performs a second change detection cycle to ensure that no
	         * further changes are detected. If additional changes are picked up during this second cycle,
	         * bindings in the app have side-effects that cannot be resolved in a single change detection
	         * pass.
	         * In this case, Angular throws an error, since an Angular application can only have one change
	         * detection pass during which all change detection must complete.
	         * @abstract
	         * @return {?}
	         */
	        ApplicationRef.prototype.tick = function () { };
	        /**
	         * Get a list of component types registered to this application.
	         * This list is populated even before the component is created.
	         * @abstract
	         * @return {?}
	         */
	        ApplicationRef.prototype.componentTypes = function () { };
	        /**
	         * Get a list of components registered to this application.
	         * @abstract
	         * @return {?}
	         */
	        ApplicationRef.prototype.components = function () { };
	        /**
	         * Attaches a view so that it will be dirty checked.
	         * The view will be automatically detached when it is destroyed.
	         * This will throw if the view is already attached to a ViewContainer.
	         * @abstract
	         * @param {?} view
	         * @return {?}
	         */
	        ApplicationRef.prototype.attachView = function (view) { };
	        /**
	         * Detaches a view from dirty checking again.
	         * @abstract
	         * @param {?} view
	         * @return {?}
	         */
	        ApplicationRef.prototype.detachView = function (view) { };
	        /**
	         * Returns the number of attached views.
	         * @abstract
	         * @return {?}
	         */
	        ApplicationRef.prototype.viewCount = function () { };
	        return ApplicationRef;
	    }());
	    var ApplicationRef_ = (function (_super) {
	        __extends$3(ApplicationRef_, _super);
	        /**
	         * @param {?} _zone
	         * @param {?} _console
	         * @param {?} _injector
	         * @param {?} _exceptionHandler
	         * @param {?} _componentFactoryResolver
	         * @param {?} _initStatus
	         * @param {?} _testabilityRegistry
	         * @param {?} _testability
	         */
	        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
	            var _this = this;
	            _super.call(this);
	            this._zone = _zone;
	            this._console = _console;
	            this._injector = _injector;
	            this._exceptionHandler = _exceptionHandler;
	            this._componentFactoryResolver = _componentFactoryResolver;
	            this._initStatus = _initStatus;
	            this._testabilityRegistry = _testabilityRegistry;
	            this._testability = _testability;
	            this._bootstrapListeners = [];
	            this._rootComponents = [];
	            this._rootComponentTypes = [];
	            this._views = [];
	            this._runningTick = false;
	            this._enforceNoNewChanges = false;
	            this._enforceNoNewChanges = isDevMode();
	            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
	        }
	        /**
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype.attachView = function (viewRef) {
	            var /** @type {?} */ view = ((viewRef)).internalView;
	            this._views.push(view);
	            view.attachToAppRef(this);
	        };
	        /**
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype.detachView = function (viewRef) {
	            var /** @type {?} */ view = ((viewRef)).internalView;
	            ListWrapper.remove(this._views, view);
	            view.detach();
	        };
	        /**
	         * @param {?} componentOrFactory
	         * @return {?}
	         */
	        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
	            var _this = this;
	            if (!this._initStatus.done) {
	                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
	            }
	            var /** @type {?} */ componentFactory;
	            if (componentOrFactory instanceof ComponentFactory) {
	                componentFactory = componentOrFactory;
	            }
	            else {
	                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
	            }
	            this._rootComponentTypes.push(componentFactory.componentType);
	            var /** @type {?} */ compRef = componentFactory.create(this._injector, [], componentFactory.selector);
	            compRef.onDestroy(function () { _this._unloadComponent(compRef); });
	            var /** @type {?} */ testability = compRef.injector.get(Testability, null);
	            if (testability) {
	                compRef.injector.get(TestabilityRegistry)
	                    .registerApplication(compRef.location.nativeElement, testability);
	            }
	            this._loadComponent(compRef);
	            if (isDevMode()) {
	                this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
	            }
	            return compRef;
	        };
	        /**
	         * @param {?} componentRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype._loadComponent = function (componentRef) {
	            this.attachView(componentRef.hostView);
	            this.tick();
	            this._rootComponents.push(componentRef);
	            // Get the listeners lazily to prevent DI cycles.
	            var /** @type {?} */ listeners = (this._injector.get(APP_BOOTSTRAP_LISTENER, [])
	                .concat(this._bootstrapListeners));
	            listeners.forEach(function (listener) { return listener(componentRef); });
	        };
	        /**
	         * @param {?} componentRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype._unloadComponent = function (componentRef) {
	            this.detachView(componentRef.hostView);
	            ListWrapper.remove(this._rootComponents, componentRef);
	        };
	        /**
	         * @return {?}
	         */
	        ApplicationRef_.prototype.tick = function () {
	            if (this._runningTick) {
	                throw new Error('ApplicationRef.tick is called recursively');
	            }
	            var /** @type {?} */ scope = ApplicationRef_._tickScope();
	            try {
	                this._runningTick = true;
	                this._views.forEach(function (view) { return view.ref.detectChanges(); });
	                if (this._enforceNoNewChanges) {
	                    this._views.forEach(function (view) { return view.ref.checkNoChanges(); });
	                }
	            }
	            finally {
	                this._runningTick = false;
	                wtfLeave(scope);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        ApplicationRef_.prototype.ngOnDestroy = function () {
	            // TODO(alxhub): Dispose of the NgZone.
	            this._views.slice().forEach(function (view) { return view.destroy(); });
	        };
	        Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._views.length; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._rootComponentTypes; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationRef_.prototype, "components", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._rootComponents; },
	            enumerable: true,
	            configurable: true
	        });
	        /** @internal */
	        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
	        ApplicationRef_.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ApplicationRef_.ctorParameters = function () { return [
	            { type: NgZone, },
	            { type: Console, },
	            { type: Injector, },
	            { type: ErrorHandler, },
	            { type: ComponentFactoryResolver, },
	            { type: ApplicationInitStatus, },
	            { type: TestabilityRegistry, decorators: [{ type: Optional },] },
	            { type: Testability, decorators: [{ type: Optional },] },
	        ]; };
	        return ApplicationRef_;
	    }(ApplicationRef));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$9 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an instance of an NgModule created via a {\@link NgModuleFactory}.
	     *
	     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
	     * NgModule Instance.
	     *
	     * \@stable
	     * @abstract
	     */
	    var NgModuleRef = (function () {
	        function NgModuleRef() {
	        }
	        /**
	         * The injector that contains all of the providers of the NgModule.
	         * @abstract
	         * @return {?}
	         */
	        NgModuleRef.prototype.injector = function () { };
	        /**
	         * The ComponentFactoryResolver to get hold of the ComponentFactories
	         * declared in the `entryComponents` property of the module.
	         * @abstract
	         * @return {?}
	         */
	        NgModuleRef.prototype.componentFactoryResolver = function () { };
	        /**
	         * The NgModule instance.
	         * @abstract
	         * @return {?}
	         */
	        NgModuleRef.prototype.instance = function () { };
	        /**
	         * Destroys the module instance and all of the data structures associated with it.
	         * @abstract
	         * @return {?}
	         */
	        NgModuleRef.prototype.destroy = function () { };
	        /**
	         * Allows to register a callback that will be called when the module is destroyed.
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        NgModuleRef.prototype.onDestroy = function (callback) { };
	        return NgModuleRef;
	    }());
	    /**
	     * \@experimental
	     */
	    var NgModuleFactory = (function () {
	        /**
	         * @param {?} _injectorClass
	         * @param {?} _moduleType
	         */
	        function NgModuleFactory(_injectorClass, _moduleType) {
	            this._injectorClass = _injectorClass;
	            this._moduleType = _moduleType;
	        }
	        Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._moduleType; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} parentInjector
	         * @return {?}
	         */
	        NgModuleFactory.prototype.create = function (parentInjector) {
	            if (!parentInjector) {
	                parentInjector = Injector.NULL;
	            }
	            var /** @type {?} */ instance = new this._injectorClass(parentInjector);
	            instance.create();
	            return instance;
	        };
	        return NgModuleFactory;
	    }());
	    var /** @type {?} */ _UNDEFINED = new Object();
	    /**
	     * @abstract
	     */
	    var NgModuleInjector = (function (_super) {
	        __extends$9(NgModuleInjector, _super);
	        /**
	         * @param {?} parent
	         * @param {?} factories
	         * @param {?} bootstrapFactories
	         */
	        function NgModuleInjector(parent, factories, bootstrapFactories) {
	            _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
	            this.parent = parent;
	            this.bootstrapFactories = bootstrapFactories;
	            this._destroyListeners = [];
	            this._destroyed = false;
	        }
	        /**
	         * @return {?}
	         */
	        NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        NgModuleInjector.prototype.createInternal = function () { };
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        NgModuleInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            if (token === Injector || token === ComponentFactoryResolver) {
	                return this;
	            }
	            var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);
	            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
	        };
	        /**
	         * @abstract
	         * @param {?} token
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };
	        Object.defineProperty(NgModuleInjector.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgModuleInjector.prototype.destroy = function () {
	            if (this._destroyed) {
	                throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
	            }
	            this._destroyed = true;
	            this.destroyInternal();
	            this._destroyListeners.forEach(function (listener) { return listener(); });
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        NgModuleInjector.prototype.destroyInternal = function () { };
	        return NgModuleInjector;
	    }(CodegenComponentFactoryResolver));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Used to load ng module factories.
	     * \@stable
	     * @abstract
	     */
	    var NgModuleFactoryLoader = (function () {
	        function NgModuleFactoryLoader() {
	        }
	        /**
	         * @abstract
	         * @param {?} path
	         * @return {?}
	         */
	        NgModuleFactoryLoader.prototype.load = function (path) { };
	        return NgModuleFactoryLoader;
	    }());
	    var /** @type {?} */ moduleFactories = new Map();
	    /**
	     * Registers a loaded module. Should only be called from generated NgModuleFactory code.
	     * \@experimental
	     * @param {?} id
	     * @param {?} factory
	     * @return {?}
	     */
	    function registerModuleFactory(id, factory) {
	        var /** @type {?} */ existing = moduleFactories.get(id);
	        if (existing) {
	            throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
	        }
	        moduleFactories.set(id, factory);
	    }
	    /**
	     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
	     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
	     * cannot be found.
	     * \@experimental
	     * @param {?} id
	     * @return {?}
	     */
	    function getModuleFactory(id) {
	        var /** @type {?} */ factory = moduleFactories.get(id);
	        if (!factory)
	            throw new Error("No module with ID " + id + " loaded");
	        return factory;
	    }

	    /**
	     * An unmodifiable list of items that Angular keeps up to date when the state
	     * of the application changes.
	     *
	     * The type of object that {\@link Query} and {\@link ViewQueryMetadata} provide.
	     *
	     * Implements an iterable interface, therefore it can be used in both ES6
	     * javascript `for (var i of items)` loops as well as in Angular templates with
	     * `*ngFor="let i of myList"`.
	     *
	     * Changes can be observed by subscribing to the changes `Observable`.
	     *
	     * NOTE: In the future this class will implement an `Observable` interface.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
	     * ```typescript
	     * \@Component({...})
	     * class Container {
	     *   \@ViewChildren(Item) items:QueryList<Item>;
	     * }
	     * ```
	     * \@stable
	     */
	    var QueryList = (function () {
	        function QueryList() {
	            this._dirty = true;
	            this._results = [];
	            this._emitter = new EventEmitter();
	        }
	        Object.defineProperty(QueryList.prototype, "changes", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._emitter; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "length", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._results.length; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "first", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._results[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "last", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._results[this.length - 1]; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * See
	         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	        /**
	         * See
	         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.filter = function (fn) {
	            return this._results.filter(fn);
	        };
	        /**
	         * See
	         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.find = function (fn) { return this._results.find(fn); };
	        /**
	         * See
	         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
	         * @param {?} fn
	         * @param {?} init
	         * @return {?}
	         */
	        QueryList.prototype.reduce = function (fn, init) {
	            return this._results.reduce(fn, init);
	        };
	        /**
	         * See
	         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
	        /**
	         * See
	         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.some = function (fn) {
	            return this._results.some(fn);
	        };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype.toArray = function () { return this._results.slice(); };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype.toString = function () { return this._results.toString(); };
	        /**
	         * @param {?} res
	         * @return {?}
	         */
	        QueryList.prototype.reset = function (res) {
	            this._results = ListWrapper.flatten(res);
	            this._dirty = false;
	        };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
	        /**
	         * internal
	         * @return {?}
	         */
	        QueryList.prototype.setDirty = function () { this._dirty = true; };
	        Object.defineProperty(QueryList.prototype, "dirty", {
	            /**
	             * internal
	             * @return {?}
	             */
	            get: function () { return this._dirty; },
	            enumerable: true,
	            configurable: true
	        });
	        return QueryList;
	    }());

	    var /** @type {?} */ _SEPARATOR = '#';
	    var /** @type {?} */ FACTORY_CLASS_SUFFIX = 'NgFactory';
	    /**
	     * Configuration for SystemJsNgModuleLoader.
	     * token.
	     *
	     * \@experimental
	     * @abstract
	     */
	    var SystemJsNgModuleLoaderConfig = (function () {
	        function SystemJsNgModuleLoaderConfig() {
	        }
	        return SystemJsNgModuleLoaderConfig;
	    }());
	    var /** @type {?} */ DEFAULT_CONFIG = {
	        factoryPathPrefix: '',
	        factoryPathSuffix: '.ngfactory',
	    };
	    /**
	     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
	     * \@experimental
	     */
	    var SystemJsNgModuleLoader = (function () {
	        /**
	         * @param {?} _compiler
	         * @param {?=} config
	         */
	        function SystemJsNgModuleLoader(_compiler, config) {
	            this._compiler = _compiler;
	            this._config = config || DEFAULT_CONFIG;
	        }
	        /**
	         * @param {?} path
	         * @return {?}
	         */
	        SystemJsNgModuleLoader.prototype.load = function (path) {
	            var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;
	            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
	        };
	        /**
	         * @param {?} path
	         * @return {?}
	         */
	        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
	            var _this = this;
	            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	            if (exportName === undefined) {
	                exportName = 'default';
	            }
	            return System.import(module)
	                .then(function (module) { return module[exportName]; })
	                .then(function (type) { return checkNotEmpty(type, module, exportName); })
	                .then(function (type) { return _this._compiler.compileModuleAsync(type); });
	        };
	        /**
	         * @param {?} path
	         * @return {?}
	         */
	        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
	            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	            var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;
	            if (exportName === undefined) {
	                exportName = 'default';
	                factoryClassSuffix = '';
	            }
	            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
	                .then(function (module) { return module[exportName + factoryClassSuffix]; })
	                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
	        };
	        SystemJsNgModuleLoader.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        SystemJsNgModuleLoader.ctorParameters = function () { return [
	            { type: Compiler, },
	            { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
	        ]; };
	        return SystemJsNgModuleLoader;
	    }());
	    /**
	     * @param {?} value
	     * @param {?} modulePath
	     * @param {?} exportName
	     * @return {?}
	     */
	    function checkNotEmpty(value, modulePath, exportName) {
	        if (!value) {
	            throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
	        }
	        return value;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$10 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an Embedded Template that can be used to instantiate Embedded Views.
	     *
	     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or
	     * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the
	     * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the
	     * `TemplateRef` from a Component or a Directive via {\@link Query}.
	     *
	     * To instantiate Embedded Views based on a Template, use
	     * {\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
	     * View Container.
	     * \@stable
	     * @abstract
	     */
	    var TemplateRef = (function () {
	        function TemplateRef() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        TemplateRef.prototype.elementRef = function () { };
	        /**
	         * @abstract
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateRef.prototype.createEmbeddedView = function (context) { };
	        return TemplateRef;
	    }());
	    var TemplateRef_ = (function (_super) {
	        __extends$10(TemplateRef_, _super);
	        /**
	         * @param {?} _parentView
	         * @param {?} _nodeIndex
	         * @param {?} _nativeElement
	         */
	        function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {
	            _super.call(this);
	            this._parentView = _parentView;
	            this._nodeIndex = _nodeIndex;
	            this._nativeElement = _nativeElement;
	        }
	        /**
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateRef_.prototype.createEmbeddedView = function (context) {
	            var /** @type {?} */ view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);
	            view.create(context || ({}));
	            return view.ref;
	        };
	        Object.defineProperty(TemplateRef_.prototype, "elementRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ElementRef(this._nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        return TemplateRef_;
	    }(TemplateRef));

	    /**
	     * Represents a container where one or more Views can be attached.
	     *
	     * The container can contain two kinds of Views. Host Views, created by instantiating a
	     * {\@link Component} via {\@link #createComponent}, and Embedded Views, created by instantiating an
	     * {\@link TemplateRef Embedded Template} via {\@link #createEmbeddedView}.
	     *
	     * The location of the View Container within the containing View is specified by the Anchor
	     * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
	     * have a single View Container.
	     *
	     * Root elements of Views attached to this container become siblings of the Anchor Element in
	     * the Rendered View.
	     *
	     * To access a `ViewContainerRef` of an Element, you can either place a {\@link Directive} injected
	     * with `ViewContainerRef` on the Element, or you obtain it via a {\@link ViewChild} query.
	     * \@stable
	     * @abstract
	     */
	    var ViewContainerRef = (function () {
	        function ViewContainerRef() {
	        }
	        /**
	         * Anchor element that specifies the location of this container in the containing View.
	         * <!-- TODO: rename to anchorElement -->
	         * @abstract
	         * @return {?}
	         */
	        ViewContainerRef.prototype.element = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        ViewContainerRef.prototype.injector = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        ViewContainerRef.prototype.parentInjector = function () { };
	        /**
	         * Destroys all Views in this container.
	         * @abstract
	         * @return {?}
	         */
	        ViewContainerRef.prototype.clear = function () { };
	        /**
	         * Returns the {\@link ViewRef} for the View located in this container at the specified index.
	         * @abstract
	         * @param {?} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.get = function (index) { };
	        /**
	         * Returns the number of Views currently attached to this container.
	         * @abstract
	         * @return {?}
	         */
	        ViewContainerRef.prototype.length = function () { };
	        /**
	         * Instantiates an Embedded View based on the {\@link TemplateRef `templateRef`} and inserts it
	         * into this container at the specified `index`.
	         *
	         * If `index` is not specified, the new View will be inserted as the last View in the container.
	         *
	         * Returns the {\@link ViewRef} for the newly created View.
	         * @abstract
	         * @param {?} templateRef
	         * @param {?=} context
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };
	        /**
	         * Instantiates a single {\@link Component} and inserts its Host View into this container at the
	         * specified `index`.
	         *
	         * The component is instantiated using its {\@link ComponentFactory} which can be
	         * obtained via {\@link ComponentFactoryResolver#resolveComponentFactory}.
	         *
	         * If `index` is not specified, the new View will be inserted as the last View in the container.
	         *
	         * You can optionally specify the {\@link Injector} that will be used as parent for the Component.
	         *
	         * Returns the {\@link ComponentRef} of the Host View created for the newly instantiated Component.
	         * @abstract
	         * @param {?} componentFactory
	         * @param {?=} index
	         * @param {?=} injector
	         * @param {?=} projectableNodes
	         * @return {?}
	         */
	        ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) { };
	        /**
	         * Inserts a View identified by a {\@link ViewRef} into the container at the specified `index`.
	         *
	         * If `index` is not specified, the new View will be inserted as the last View in the container.
	         *
	         * Returns the inserted {\@link ViewRef}.
	         * @abstract
	         * @param {?} viewRef
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.insert = function (viewRef, index) { };
	        /**
	         * Moves a View identified by a {\@link ViewRef} into the container at the specified `index`.
	         *
	         * Returns the inserted {\@link ViewRef}.
	         * @abstract
	         * @param {?} viewRef
	         * @param {?} currentIndex
	         * @return {?}
	         */
	        ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };
	        /**
	         * Returns the index of the View, specified via {\@link ViewRef}, within the current container or
	         * `-1` if this container doesn't contain the View.
	         * @abstract
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ViewContainerRef.prototype.indexOf = function (viewRef) { };
	        /**
	         * Destroys a View attached to this container at the specified `index`.
	         *
	         * If `index` is not specified, the last View in the container will be removed.
	         * @abstract
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.remove = function (index) { };
	        /**
	         * Use along with {\@link #insert} to move a View within the current container.
	         *
	         * If the `index` param is omitted, the last {\@link ViewRef} is detached.
	         * @abstract
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.detach = function (index) { };
	        return ViewContainerRef;
	    }());
	    var ViewContainerRef_ = (function () {
	        /**
	         * @param {?} _element
	         */
	        function ViewContainerRef_(_element) {
	            this._element = _element;
	            /** @internal */
	            this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
	            /** @internal */
	            this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
	            /** @internal */
	            this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
	            /** @internal */
	            this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };
	        Object.defineProperty(ViewContainerRef_.prototype, "length", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ views = this._element.nestedViews;
	                return isPresent(views) ? views.length : 0;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "element", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._element.elementRef; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._element.injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._element.parentInjector; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} templateRef
	         * @param {?=} context
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
	            if (context === void 0) { context = null; }
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context);
	            this.insert(viewRef, index);
	            return viewRef;
	        };
	        /**
	         * @param {?} componentFactory
	         * @param {?=} index
	         * @param {?=} injector
	         * @param {?=} projectableNodes
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {
	            if (index === void 0) { index = -1; }
	            if (injector === void 0) { injector = null; }
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            var /** @type {?} */ s = this._createComponentInContainerScope();
	            var /** @type {?} */ contextInjector = injector || this._element.parentInjector;
	            var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);
	            this.insert(componentRef.hostView, index);
	            return wtfLeave(s, componentRef);
	        };
	        /**
	         * @param {?} viewRef
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.insert = function (viewRef, index) {
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ s = this._insertScope();
	            if (index == -1)
	                index = this.length;
	            var /** @type {?} */ viewRef_ = (viewRef);
	            this._element.attachView(viewRef_.internalView, index);
	            return wtfLeave(s, viewRef_);
	        };
	        /**
	         * @param {?} viewRef
	         * @param {?} currentIndex
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
	            var /** @type {?} */ s = this._insertScope();
	            if (currentIndex == -1)
	                return;
	            var /** @type {?} */ viewRef_ = (viewRef);
	            this._element.moveView(viewRef_.internalView, currentIndex);
	            return wtfLeave(s, viewRef_);
	        };
	        /**
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.indexOf = function (viewRef) {
	            return this.length ? this._element.nestedViews.indexOf(((viewRef)).internalView) :
	                -1;
	        };
	        /**
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.remove = function (index) {
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ s = this._removeScope();
	            if (index == -1)
	                index = this.length - 1;
	            var /** @type {?} */ view = this._element.detachView(index);
	            view.destroy();
	            // view is intentionally not returned to the client.
	            wtfLeave(s);
	        };
	        /**
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.detach = function (index) {
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ s = this._detachScope();
	            if (index == -1)
	                index = this.length - 1;
	            var /** @type {?} */ view = this._element.detachView(index);
	            return wtfLeave(s, view.ref);
	        };
	        /**
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.clear = function () {
	            for (var /** @type {?} */ i = this.length - 1; i >= 0; i--) {
	                this.remove(i);
	            }
	        };
	        return ViewContainerRef_;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$11 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@stable
	     * @abstract
	     */
	    var ViewRef = (function (_super) {
	        __extends$11(ViewRef, _super);
	        function ViewRef() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * Destroys the view and all of the data structures associated with it.
	         * @abstract
	         * @return {?}
	         */
	        ViewRef.prototype.destroy = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        ViewRef.prototype.destroyed = function () { };
	        /**
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        ViewRef.prototype.onDestroy = function (callback) { };
	        return ViewRef;
	    }(ChangeDetectorRef));
	    /**
	     * Represents an Angular View.
	     *
	     * <!-- TODO: move the next two paragraphs to the dev guide -->
	     * A View is a fundamental building block of the application UI. It is the smallest grouping of
	     * Elements which are created and destroyed together.
	     *
	     * Properties of elements in a View can change, but the structure (number and order) of elements in
	     * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
	     * removing nested Views via a {\@link ViewContainerRef}. Each View can contain many View Containers.
	     * <!-- /TODO -->
	     *
	     * ### Example
	     *
	     * Given this template...
	     *
	     * ```
	     * Count: {{items.length}}
	     * <ul>
	     *   <li *ngFor="let  item of items">{{item}}</li>
	     * </ul>
	     * ```
	     *
	     * We have two {\@link TemplateRef}s:
	     *
	     * Outer {\@link TemplateRef}:
	     * ```
	     * Count: {{items.length}}
	     * <ul>
	     *   <template ngFor let-item [ngForOf]="items"></template>
	     * </ul>
	     * ```
	     *
	     * Inner {\@link TemplateRef}:
	     * ```
	     *   <li>{{item}}</li>
	     * ```
	     *
	     * Notice that the original template is broken down into two separate {\@link TemplateRef}s.
	     *
	     * The outer/inner {\@link TemplateRef}s are then assembled into views like so:
	     *
	     * ```
	     * <!-- ViewRef: outer-0 -->
	     * Count: 2
	     * <ul>
	     *   <template view-container-ref></template>
	     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	     * </ul>
	     * <!-- /ViewRef: outer-0 -->
	     * ```
	     * \@experimental
	     * @abstract
	     */
	    var EmbeddedViewRef = (function (_super) {
	        __extends$11(EmbeddedViewRef, _super);
	        function EmbeddedViewRef() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        EmbeddedViewRef.prototype.context = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        EmbeddedViewRef.prototype.rootNodes = function () { };
	        return EmbeddedViewRef;
	    }(ViewRef));
	    var ViewRef_ = (function () {
	        /**
	         * @param {?} _view
	         * @param {?} animationQueue
	         */
	        function ViewRef_(_view, animationQueue) {
	            this._view = _view;
	            this.animationQueue = animationQueue;
	            this._view = _view;
	            this._originalMode = this._view.cdMode;
	        }
	        Object.defineProperty(ViewRef_.prototype, "internalView", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "rootNodes", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.flatRootNodes; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.detectChanges = function () {
	            this._view.detectChanges(false);
	            this.animationQueue.flush();
	        };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.reattach = function () {
	            this._view.cdMode = this._originalMode;
	            this.markForCheck();
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        ViewRef_.prototype.onDestroy = function (callback) {
	            if (!this._view.disposables) {
	                this._view.disposables = [];
	            }
	            this._view.disposables.push(callback);
	        };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.destroy = function () { this._view.detachAndDestroy(); };
	        return ViewRef_;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$12 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var EventListener = (function () {
	        /**
	         * @param {?} name
	         * @param {?} callback
	         */
	        function EventListener(name, callback) {
	            this.name = name;
	            this.callback = callback;
	        }
	        ;
	        return EventListener;
	    }());
	    /**
	     * \@experimental All debugging apis are currently experimental.
	     */
	    var DebugNode = (function () {
	        /**
	         * @param {?} nativeNode
	         * @param {?} parent
	         * @param {?} _debugInfo
	         */
	        function DebugNode(nativeNode, parent, _debugInfo) {
	            this._debugInfo = _debugInfo;
	            this.nativeNode = nativeNode;
	            if (parent && parent instanceof DebugElement) {
	                parent.addChild(this);
	            }
	            else {
	                this.parent = null;
	            }
	            this.listeners = [];
	        }
	        Object.defineProperty(DebugNode.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.injector : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "componentInstance", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.component : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.context : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "references", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._debugInfo ? this._debugInfo.references : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "providerTokens", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.providerTokens : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "source", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.source : null; },
	            enumerable: true,
	            configurable: true
	        });
	        return DebugNode;
	    }());
	    /**
	     * \@experimental All debugging apis are currently experimental.
	     */
	    var DebugElement = (function (_super) {
	        __extends$12(DebugElement, _super);
	        /**
	         * @param {?} nativeNode
	         * @param {?} parent
	         * @param {?} _debugInfo
	         */
	        function DebugElement(nativeNode, parent, _debugInfo) {
	            _super.call(this, nativeNode, parent, _debugInfo);
	            this.properties = {};
	            this.attributes = {};
	            this.classes = {};
	            this.styles = {};
	            this.childNodes = [];
	            this.nativeElement = nativeNode;
	        }
	        /**
	         * @param {?} child
	         * @return {?}
	         */
	        DebugElement.prototype.addChild = function (child) {
	            if (child) {
	                this.childNodes.push(child);
	                child.parent = this;
	            }
	        };
	        /**
	         * @param {?} child
	         * @return {?}
	         */
	        DebugElement.prototype.removeChild = function (child) {
	            var /** @type {?} */ childIndex = this.childNodes.indexOf(child);
	            if (childIndex !== -1) {
	                child.parent = null;
	                this.childNodes.splice(childIndex, 1);
	            }
	        };
	        /**
	         * @param {?} child
	         * @param {?} newChildren
	         * @return {?}
	         */
	        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
	            var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);
	            if (siblingIndex !== -1) {
	                var /** @type {?} */ previousChildren = this.childNodes.slice(0, siblingIndex + 1);
	                var /** @type {?} */ nextChildren = this.childNodes.slice(siblingIndex + 1);
	                this.childNodes = previousChildren.concat(newChildren, nextChildren);
	                for (var /** @type {?} */ i = 0; i < newChildren.length; ++i) {
	                    var /** @type {?} */ newChild = newChildren[i];
	                    if (newChild.parent) {
	                        newChild.parent.removeChild(newChild);
	                    }
	                    newChild.parent = this;
	                }
	            }
	        };
	        /**
	         * @param {?} predicate
	         * @return {?}
	         */
	        DebugElement.prototype.query = function (predicate) {
	            var /** @type {?} */ results = this.queryAll(predicate);
	            return results[0] || null;
	        };
	        /**
	         * @param {?} predicate
	         * @return {?}
	         */
	        DebugElement.prototype.queryAll = function (predicate) {
	            var /** @type {?} */ matches = [];
	            _queryElementChildren(this, predicate, matches);
	            return matches;
	        };
	        /**
	         * @param {?} predicate
	         * @return {?}
	         */
	        DebugElement.prototype.queryAllNodes = function (predicate) {
	            var /** @type {?} */ matches = [];
	            _queryNodeChildren(this, predicate, matches);
	            return matches;
	        };
	        Object.defineProperty(DebugElement.prototype, "children", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} eventName
	         * @param {?} eventObj
	         * @return {?}
	         */
	        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
	            this.listeners.forEach(function (listener) {
	                if (listener.name == eventName) {
	                    listener.callback(eventObj);
	                }
	            });
	        };
	        return DebugElement;
	    }(DebugNode));
	    /**
	     * \@experimental
	     * @param {?} debugEls
	     * @return {?}
	     */
	    function asNativeElements(debugEls) {
	        return debugEls.map(function (el) { return el.nativeElement; });
	    }
	    /**
	     * @param {?} element
	     * @param {?} predicate
	     * @param {?} matches
	     * @return {?}
	     */
	    function _queryElementChildren(element, predicate, matches) {
	        element.childNodes.forEach(function (node) {
	            if (node instanceof DebugElement) {
	                if (predicate(node)) {
	                    matches.push(node);
	                }
	                _queryElementChildren(node, predicate, matches);
	            }
	        });
	    }
	    /**
	     * @param {?} parentNode
	     * @param {?} predicate
	     * @param {?} matches
	     * @return {?}
	     */
	    function _queryNodeChildren(parentNode, predicate, matches) {
	        if (parentNode instanceof DebugElement) {
	            parentNode.childNodes.forEach(function (node) {
	                if (predicate(node)) {
	                    matches.push(node);
	                }
	                if (node instanceof DebugElement) {
	                    _queryNodeChildren(node, predicate, matches);
	                }
	            });
	        }
	    }
	    // Need to keep the nodes in a global Map so that multiple angular apps are supported.
	    var /** @type {?} */ _nativeNodeToDebugNode = new Map();
	    /**
	     * \@experimental
	     * @param {?} nativeNode
	     * @return {?}
	     */
	    function getDebugNode(nativeNode) {
	        return _nativeNodeToDebugNode.get(nativeNode);
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    function indexDebugNode(node) {
	        _nativeNodeToDebugNode.set(node.nativeNode, node);
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    function removeDebugNodeFromIndex(node) {
	        _nativeNodeToDebugNode.delete(node.nativeNode);
	    }

	    /**
	     * @return {?}
	     */
	    function _reflector() {
	        return reflector;
	    }
	    var /** @type {?} */ _CORE_PLATFORM_PROVIDERS = [
	        PlatformRef_,
	        { provide: PlatformRef, useExisting: PlatformRef_ },
	        { provide: Reflector, useFactory: _reflector, deps: [] },
	        { provide: ReflectorReader, useExisting: Reflector },
	        TestabilityRegistry,
	        Console,
	    ];
	    /**
	     * This platform has to be included in any other platform
	     *
	     * @experimental
	     */
	    var /** @type {?} */ platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);

	    /**
	     * @experimental i18n support is experimental.
	     */
	    var /** @type {?} */ LOCALE_ID = new OpaqueToken('LocaleId');
	    /**
	     * @experimental i18n support is experimental.
	     */
	    var /** @type {?} */ TRANSLATIONS = new OpaqueToken('Translations');
	    /**
	     * @experimental i18n support is experimental.
	     */
	    var /** @type {?} */ TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');

	    /**
	     * @return {?}
	     */
	    function _iterableDiffersFactory() {
	        return defaultIterableDiffers;
	    }
	    /**
	     * @return {?}
	     */
	    function _keyValueDiffersFactory() {
	        return defaultKeyValueDiffers;
	    }
	    /**
	     * @param {?=} locale
	     * @return {?}
	     */
	    function _localeFactory(locale) {
	        return locale || 'en-US';
	    }
	    /**
	     * This module includes the providers of \@angular/core that are needed
	     * to bootstrap components via `ApplicationRef`.
	     *
	     * \@experimental
	     */
	    var ApplicationModule = (function () {
	        function ApplicationModule() {
	        }
	        ApplicationModule.decorators = [
	            { type: NgModule, args: [{
	                        providers: [
	                            ApplicationRef_,
	                            { provide: ApplicationRef, useExisting: ApplicationRef_ },
	                            ApplicationInitStatus,
	                            Compiler,
	                            APP_ID_RANDOM_PROVIDER,
	                            ViewUtils,
	                            AnimationQueue,
	                            { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
	                            { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
	                            {
	                                provide: LOCALE_ID,
	                                useFactory: _localeFactory,
	                                deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
	                            },
	                        ]
	                    },] },
	        ];
	        /** @nocollapse */
	        ApplicationModule.ctorParameters = function () { return []; };
	        return ApplicationModule;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean
	    var /** @type {?} */ ANY_STATE = '*';
	    var /** @type {?} */ DEFAULT_STATE = '*';
	    var /** @type {?} */ EMPTY_STATE = 'void';

	    var AnimationGroupPlayer = (function () {
	        /**
	         * @param {?} _players
	         */
	        function AnimationGroupPlayer(_players) {
	            var _this = this;
	            this._players = _players;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._finished = false;
	            this._started = false;
	            this._destroyed = false;
	            this.parentPlayer = null;
	            var count = 0;
	            var total = this._players.length;
	            if (total == 0) {
	                scheduleMicroTask(function () { return _this._onFinish(); });
	            }
	            else {
	                this._players.forEach(function (player) {
	                    player.parentPlayer = _this;
	                    player.onDone(function () {
	                        if (++count >= total) {
	                            _this._onFinish();
	                        }
	                    });
	                });
	            }
	        }
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.play = function () {
	            if (!isPresent(this.parentPlayer)) {
	                this.init();
	            }
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._players.forEach(function (player) { return player.play(); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.finish = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.finish(); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.destroy = function () {
	            if (!this._destroyed) {
	                this._onFinish();
	                this._players.forEach(function (player) { return player.destroy(); });
	                this._destroyed = true;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.reset = function () {
	            this._players.forEach(function (player) { return player.reset(); });
	            this._destroyed = false;
	            this._finished = false;
	            this._started = false;
	        };
	        /**
	         * @param {?} p
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.setPosition = function (p) {
	            this._players.forEach(function (player) { player.setPosition(p); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.getPosition = function () {
	            var /** @type {?} */ min = 0;
	            this._players.forEach(function (player) {
	                var /** @type {?} */ p = player.getPosition();
	                min = Math.min(p, min);
	            });
	            return min;
	        };
	        Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._players; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationGroupPlayer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * `AnimationKeyframe` consists of a series of styles (contained within {\@link AnimationStyles
	     * `AnimationStyles`})
	     * and an offset value indicating when those styles are applied within the `duration/delay/easing`
	     * timings.
	     * `AnimationKeyframe` is mostly an internal class which is designed to be used alongside {\@link
	     * Renderer#animate-anchor `Renderer.animate`}.
	     *
	     * \@experimental Animation support is experimental
	     */
	    var AnimationKeyframe = (function () {
	        /**
	         * @param {?} offset
	         * @param {?} styles
	         */
	        function AnimationKeyframe(offset, styles) {
	            this.offset = offset;
	            this.styles = styles;
	        }
	        return AnimationKeyframe;
	    }());

	    /**
	     * \@experimental Animation support is experimental.
	     * @abstract
	     */
	    var AnimationPlayer = (function () {
	        function AnimationPlayer() {
	        }
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationPlayer.prototype.onDone = function (fn) { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationPlayer.prototype.onStart = function (fn) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.init = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.hasStarted = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.play = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.pause = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.restart = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.finish = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.destroy = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.reset = function () { };
	        /**
	         * @abstract
	         * @param {?} p
	         * @return {?}
	         */
	        AnimationPlayer.prototype.setPosition = function (p) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.getPosition = function () { };
	        Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
	            /**
	             * @return {?}
	             */
	            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            /**
	             * @param {?} player
	             * @return {?}
	             */
	            set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationPlayer;
	    }());
	    var NoOpAnimationPlayer = (function () {
	        function NoOpAnimationPlayer() {
	            var _this = this;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._started = false;
	            this.parentPlayer = null;
	            scheduleMicroTask(function () { return _this._onFinish(); });
	        }
	        /**
	         * \@internal
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype._onFinish = function () {
	            this._onDoneFns.forEach(function (fn) { return fn(); });
	            this._onDoneFns = [];
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.init = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.play = function () {
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	            }
	            this._started = true;
	        };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.pause = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.restart = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.destroy = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.reset = function () { };
	        /**
	         * @param {?} p
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.setPosition = function (p) { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };
	        return NoOpAnimationPlayer;
	    }());

	    var AnimationSequencePlayer = (function () {
	        /**
	         * @param {?} _players
	         */
	        function AnimationSequencePlayer(_players) {
	            var _this = this;
	            this._players = _players;
	            this._currentIndex = 0;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._finished = false;
	            this._started = false;
	            this._destroyed = false;
	            this.parentPlayer = null;
	            this._players.forEach(function (player) { player.parentPlayer = _this; });
	            this._onNext(false);
	        }
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype._onNext = function (start) {
	            var _this = this;
	            if (this._finished)
	                return;
	            if (this._players.length == 0) {
	                this._activePlayer = new NoOpAnimationPlayer();
	                scheduleMicroTask(function () { return _this._onFinish(); });
	            }
	            else if (this._currentIndex >= this._players.length) {
	                this._activePlayer = new NoOpAnimationPlayer();
	                this._onFinish();
	            }
	            else {
	                var /** @type {?} */ player = this._players[this._currentIndex++];
	                player.onDone(function () { return _this._onNext(true); });
	                this._activePlayer = player;
	                if (start) {
	                    player.play();
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.play = function () {
	            if (!isPresent(this.parentPlayer)) {
	                this.init();
	            }
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._activePlayer.play();
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.restart = function () {
	            this.reset();
	            if (this._players.length > 0) {
	                this._players[0].restart();
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.reset = function () {
	            this._players.forEach(function (player) { return player.reset(); });
	            this._destroyed = false;
	            this._finished = false;
	            this._started = false;
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.finish = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.finish(); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.destroy = function () {
	            if (!this._destroyed) {
	                this._onFinish();
	                this._players.forEach(function (player) { return player.destroy(); });
	                this._destroyed = true;
	                this._activePlayer = new NoOpAnimationPlayer();
	            }
	        };
	        /**
	         * @param {?} p
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.setPosition = function (p) { this._players[0].setPosition(p); };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };
	        Object.defineProperty(AnimationSequencePlayer.prototype, "players", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._players; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationSequencePlayer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$13 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @experimental Animation support is experimental.
	     */
	    var /** @type {?} */ AUTO_STYLE = '*';
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link trigger trigger
	     * animation function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationEntryMetadata = (function () {
	        /**
	         * @param {?} name
	         * @param {?} definitions
	         */
	        function AnimationEntryMetadata(name, definitions) {
	            this.name = name;
	            this.definitions = definitions;
	        }
	        return AnimationEntryMetadata;
	    }());
	    /**
	     * \@experimental Animation support is experimental.
	     * @abstract
	     */
	    var AnimationStateMetadata = (function () {
	        function AnimationStateMetadata() {
	        }
	        return AnimationStateMetadata;
	    }());
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link state state animation
	     * function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationStateDeclarationMetadata = (function (_super) {
	        __extends$13(AnimationStateDeclarationMetadata, _super);
	        /**
	         * @param {?} stateNameExpr
	         * @param {?} styles
	         */
	        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
	            _super.call(this);
	            this.stateNameExpr = stateNameExpr;
	            this.styles = styles;
	        }
	        return AnimationStateDeclarationMetadata;
	    }(AnimationStateMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the
	     * {\@link transition transition animation function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationStateTransitionMetadata = (function (_super) {
	        __extends$13(AnimationStateTransitionMetadata, _super);
	        /**
	         * @param {?} stateChangeExpr
	         * @param {?} steps
	         */
	        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
	            _super.call(this);
	            this.stateChangeExpr = stateChangeExpr;
	            this.steps = steps;
	        }
	        return AnimationStateTransitionMetadata;
	    }(AnimationStateMetadata));
	    /**
	     * \@experimental Animation support is experimental.
	     * @abstract
	     */
	    var AnimationMetadata = (function () {
	        function AnimationMetadata() {
	        }
	        return AnimationMetadata;
	    }());
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link keyframes keyframes
	     * animation function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationKeyframesSequenceMetadata = (function (_super) {
	        __extends$13(AnimationKeyframesSequenceMetadata, _super);
	        /**
	         * @param {?} steps
	         */
	        function AnimationKeyframesSequenceMetadata(steps) {
	            _super.call(this);
	            this.steps = steps;
	        }
	        return AnimationKeyframesSequenceMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link style style animation
	     * function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationStyleMetadata = (function (_super) {
	        __extends$13(AnimationStyleMetadata, _super);
	        /**
	         * @param {?} styles
	         * @param {?=} offset
	         */
	        function AnimationStyleMetadata(styles, offset) {
	            if (offset === void 0) { offset = null; }
	            _super.call(this);
	            this.styles = styles;
	            this.offset = offset;
	        }
	        return AnimationStyleMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link animate animate
	     * animation function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationAnimateMetadata = (function (_super) {
	        __extends$13(AnimationAnimateMetadata, _super);
	        /**
	         * @param {?} timings
	         * @param {?} styles
	         */
	        function AnimationAnimateMetadata(timings, styles) {
	            _super.call(this);
	            this.timings = timings;
	            this.styles = styles;
	        }
	        return AnimationAnimateMetadata;
	    }(AnimationMetadata));
	    /**
	     * \@experimental Animation support is experimental.
	     * @abstract
	     */
	    var AnimationWithStepsMetadata = (function (_super) {
	        __extends$13(AnimationWithStepsMetadata, _super);
	        function AnimationWithStepsMetadata() {
	            _super.call(this);
	        }
	        Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
	            /**
	             * @return {?}
	             */
	            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationWithStepsMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link sequence sequence
	     * animation function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationSequenceMetadata = (function (_super) {
	        __extends$13(AnimationSequenceMetadata, _super);
	        /**
	         * @param {?} _steps
	         */
	        function AnimationSequenceMetadata(_steps) {
	            _super.call(this);
	            this._steps = _steps;
	        }
	        Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._steps; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationSequenceMetadata;
	    }(AnimationWithStepsMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link group group animation
	     * function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationGroupMetadata = (function (_super) {
	        __extends$13(AnimationGroupMetadata, _super);
	        /**
	         * @param {?} _steps
	         */
	        function AnimationGroupMetadata(_steps) {
	            _super.call(this);
	            this._steps = _steps;
	        }
	        Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._steps; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationGroupMetadata;
	    }(AnimationWithStepsMetadata));
	    /**
	     * `animate` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `animate` specifies an animation step that will apply the provided `styles` data for a given
	     * amount of
	     * time based on the provided `timing` expression value. Calls to `animate` are expected to be
	     * used within {\@link sequence an animation sequence}, {\@link group group}, or {\@link transition
	     * transition}.
	     *
	     * ### Usage
	     *
	     * The `animate` function accepts two input parameters: `timing` and `styles`:
	     *
	     * - `timing` is a string based value that can be a combination of a duration with optional
	     * delay and easing values. The format for the expression breaks down to `duration delay easing`
	     * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
	     * delay=100, easing=ease-out`.
	     * If a numeric value is provided then that will be used as the `duration` value in millisecond
	     * form.
	     * - `styles` is the style input data which can either be a call to {\@link style style} or {\@link
	     * keyframes keyframes}.
	     * If left empty then the styles from the destination state will be collected and used (this is
	     * useful when
	     * describing an animation step that will complete an animation by {\@link
	     * transition#the-final-animate-call animating to the final state}).
	     *
	     * ```typescript
	     * // various functions for specifying timing data
	     * animate(500, style(...))
	     * animate("1s", style(...))
	     * animate("100ms 0.5s", style(...))
	     * animate("5s ease", style(...))
	     * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
	     *
	     * // either style() of keyframes() can be used
	     * animate(500, style({ background: "red" }))
	     * animate(500, keyframes([
	     *   style({ background: "blue" })),
	     *   style({ background: "red" }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} timing
	     * @param {?=} styles
	     * @return {?}
	     */
	    function animate(timing, styles) {
	        if (styles === void 0) { styles = null; }
	        var /** @type {?} */ stylesEntry = styles;
	        if (!isPresent(stylesEntry)) {
	            var /** @type {?} */ EMPTY_STYLE = {};
	            stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
	        }
	        return new AnimationAnimateMetadata(timing, stylesEntry);
	    }
	    /**
	     * `group` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `group` specifies a list of animation steps that are all run in parallel. Grouped animations
	     * are useful when a series of styles must be animated/closed off
	     * at different statrting/ending times.
	     *
	     * The `group` function can either be used within a {\@link sequence sequence} or a {\@link transition
	     * transition}
	     * and it will only continue to the next instruction once all of the inner animation steps
	     * have completed.
	     *
	     * ### Usage
	     *
	     * The `steps` data that is passed into the `group` animation function can either consist
	     * of {\@link style style} or {\@link animate animate} function calls. Each call to `style()` or
	     * `animate()`
	     * within a group will be executed instantly (use {\@link keyframes keyframes} or a
	     * {\@link animate#usage animate() with a delay value} to offset styles to be applied at a later
	     * time).
	     *
	     * ```typescript
	     * group([
	     *   animate("1s", { background: "black" }))
	     *   animate("2s", { color: "white" }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} steps
	     * @return {?}
	     */
	    function group(steps) {
	        return new AnimationGroupMetadata(steps);
	    }
	    /**
	     * `sequence` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used
	     * by default when an array is passed as animation data into {\@link transition transition}.)
	     *
	     * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
	     * transition}
	     * and it will only continue to the next instruction once each of the inner animation steps
	     * have completed.
	     *
	     * To perform animation styling in parallel with other animation steps then
	     * have a look at the {\@link group group} animation function.
	     *
	     * ### Usage
	     *
	     * The `steps` data that is passed into the `sequence` animation function can either consist
	     * of {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply
	     * the
	     * provided styling data immediately while a call to `animate()` will apply its styling
	     * data over a given time depending on its timing data.
	     *
	     * ```typescript
	     * sequence([
	     *   style({ opacity: 0 })),
	     *   animate("1s", { opacity: 1 }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} steps
	     * @return {?}
	     */
	    function sequence(steps) {
	        return new AnimationSequenceMetadata(steps);
	    }
	    /**
	     * `style` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `style` declares a key/value object containing CSS properties/styles that can then
	     * be used for {\@link state animation states}, within an {\@link sequence animation sequence}, or as
	     * styling data for both {\@link animate animate} and {\@link keyframes keyframes}.
	     *
	     * ### Usage
	     *
	     * `style` takes in a key/value string map as data and expects one or more CSS property/value
	     * pairs to be defined.
	     *
	     * ```typescript
	     * // string values are used for css properties
	     * style({ background: "red", color: "blue" })
	     *
	     * // numerical (pixel) values are also supported
	     * style({ width: 100, height: 0 })
	     * ```
	     *
	     * #### Auto-styles (using `*`)
	     *
	     * When an asterix (`*`) character is used as a value then it will be detected from the element
	     * being animated
	     * and applied as animation data when the animation starts.
	     *
	     * This feature proves useful for a state depending on layout and/or environment factors; in such
	     * cases
	     * the styles are calculated just before the animation starts.
	     *
	     * ```typescript
	     * // the steps below will animate from 0 to the
	     * // actual height of the element
	     * style({ height: 0 }),
	     * animate("1s", style({ height: "*" }))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} tokens
	     * @return {?}
	     */
	    function style(tokens) {
	        var /** @type {?} */ input;
	        var /** @type {?} */ offset = null;
	        if (typeof tokens === 'string') {
	            input = [(tokens)];
	        }
	        else {
	            if (Array.isArray(tokens)) {
	                input = (tokens);
	            }
	            else {
	                input = [(tokens)];
	            }
	            input.forEach(function (entry) {
	                var /** @type {?} */ entryOffset = ((entry) /** TODO #9100 */)['offset'];
	                if (isPresent(entryOffset)) {
	                    offset = offset == null ? parseFloat(entryOffset) : offset;
	                }
	            });
	        }
	        return new AnimationStyleMetadata(input, offset);
	    }
	    /**
	     * `state` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `state` declares an animation state within the given trigger. When a state is
	     * active within a component then its associated styles will persist on
	     * the element that the trigger is attached to (even when the animation ends).
	     *
	     * To animate between states, have a look at the animation {\@link transition transition}
	     * DSL function. To register states to an animation trigger please have a look
	     * at the {\@link trigger trigger} function.
	     *
	     * #### The `void` state
	     *
	     * The `void` state value is a reserved word that angular uses to determine when the element is not
	     * apart
	     * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
	     * associated element
	     * is void).
	     *
	     * #### The `*` (default) state
	     *
	     * The `*` state (when styled) is a fallback state that will be used if
	     * the state that is being animated is not declared within the trigger.
	     *
	     * ### Usage
	     *
	     * `state` will declare an animation state with its associated styles
	     * within the given trigger.
	     *
	     * - `stateNameExpr` can be one or more state names separated by commas.
	     * - `styles` refers to the {\@link style styling data} that will be persisted on the element once
	     * the state
	     * has been reached.
	     *
	     * ```typescript
	     * // "void" is a reserved name for a state and is used to represent
	     * // the state in which an element is detached from from the application.
	     * state("void", style({ height: 0 }))
	     *
	     * // user-defined states
	     * state("closed", style({ height: 0 }))
	     * state("open, visible", style({ height: "*" }))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} stateNameExpr
	     * @param {?} styles
	     * @return {?}
	     */
	    function state(stateNameExpr, styles) {
	        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
	    }
	    /**
	     * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `keyframes` specifies a collection of {\@link style style} entries each optionally characterized
	     * by an `offset` value.
	     *
	     * ### Usage
	     *
	     * The `keyframes` animation function is designed to be used alongside the {\@link animate animate}
	     * animation function. Instead of applying animations from where they are
	     * currently to their destination, keyframes can describe how each style entry is applied
	     * and at what point within the animation arc (much like CSS Keyframe Animations do).
	     *
	     * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at
	     * what percentage of the animate time the styles will be applied.
	     *
	     * ```typescript
	     * // the provided offset values describe when each backgroundColor value is applied.
	     * animate("5s", keyframes([
	     *   style({ backgroundColor: "red", offset: 0 }),
	     *   style({ backgroundColor: "blue", offset: 0.2 }),
	     *   style({ backgroundColor: "orange", offset: 0.3 }),
	     *   style({ backgroundColor: "black", offset: 1 })
	     * ]))
	     * ```
	     *
	     * Alternatively, if there are no `offset` values used within the style entries then the offsets
	     * will
	     * be calculated automatically.
	     *
	     * ```typescript
	     * animate("5s", keyframes([
	     *   style({ backgroundColor: "red" }) // offset = 0
	     *   style({ backgroundColor: "blue" }) // offset = 0.33
	     *   style({ backgroundColor: "orange" }) // offset = 0.66
	     *   style({ backgroundColor: "black" }) // offset = 1
	     * ]))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} steps
	     * @return {?}
	     */
	    function keyframes(steps) {
	        return new AnimationKeyframesSequenceMetadata(steps);
	    }
	    /**
	     * `transition` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `transition` declares the {\@link sequence sequence of animation steps} that will be run when the
	     * provided
	     * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`
	     * which consists
	     * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).
	     *
	     * Animation transitions are placed within an {\@link trigger animation trigger}. For an transition
	     * to animate to
	     * a state value and persist its styles then one or more {\@link state animation states} is expected
	     * to be defined.
	     *
	     * ### Usage
	     *
	     * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
	     * what the
	     * previous state is and what the current state has become. In other words, if a transition is
	     * defined that
	     * matches the old/current state criteria then the associated animation will be triggered.
	     *
	     * ```typescript
	     * // all transition/state changes are defined within an animation trigger
	     * trigger("myAnimationTrigger", [
	     *   // if a state is defined then its styles will be persisted when the
	     *   // animation has fully completed itself
	     *   state("on", style({ background: "green" })),
	     *   state("off", style({ background: "grey" })),
	     *
	     *   // a transition animation that will be kicked off when the state value
	     *   // bound to "myAnimationTrigger" changes from "on" to "off"
	     *   transition("on => off", animate(500)),
	     *
	     *   // it is also possible to do run the same animation for both directions
	     *   transition("on <=> off", animate(500)),
	     *
	     *   // or to define multiple states pairs separated by commas
	     *   transition("on => off, off => void", animate(500)),
	     *
	     *   // this is a catch-all state change for when an element is inserted into
	     *   // the page and the destination state is unknown
	     *   transition("void => *", [
	     *     style({ opacity: 0 }),
	     *     animate(500)
	     *   ]),
	     *
	     *   // this will capture a state change between any states
	     *   transition("* => *", animate("1s 0s")),
	     * ])
	     * ```
	     *
	     * The template associated with this component will make use of the `myAnimationTrigger`
	     * animation trigger by binding to an element within its template code.
	     *
	     * ```html
	     * <!-- somewhere inside of my-component-tpl.html -->
	     * <div [\@myAnimationTrigger]="myStatusExp">...</div>
	     * ```
	     *
	     * #### The final `animate` call
	     *
	     * If the final step within the transition steps is a call to `animate()` that **only**
	     * uses a timing value with **no style data** then it will be automatically used as the final
	     * animation
	     * arc for the element to animate itself to the final state. This involves an automatic mix of
	     * adding/removing CSS styles so that the element will be in the exact state it should be for the
	     * applied state to be presented correctly.
	     *
	     * ```
	     * // start off by hiding the element, but make sure that it animates properly to whatever state
	     * // is currently active for "myAnimationTrigger"
	     * transition("void => *", [
	     *   style({ opacity: 0 }),
	     *   animate(500)
	     * ])
	     * ```
	     *
	     * ### Transition Aliases (`:enter` and `:leave`)
	     *
	     * Given that enter (insertion) and leave (removal) animations are so common,
	     * the `transition` function accepts both `:enter` and `:leave` values which
	     * are aliases for the `void => *` and `* => void` state changes.
	     *
	     * ```
	     * transition(":enter", [
	     *   style({ opacity: 0 }),
	     *   animate(500, style({ opacity: 1 }))
	     * ])
	     * transition(":leave", [
	     *   animate(500, style({ opacity: 0 }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} stateChangeExpr
	     * @param {?} steps
	     * @return {?}
	     */
	    function transition(stateChangeExpr, steps) {
	        var /** @type {?} */ animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
	        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
	    }
	    /**
	     * `trigger` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `trigger` Creates an animation trigger which will a list of {\@link state state} and {\@link
	     * transition transition}
	     * entries that will be evaluated when the expression bound to the trigger changes.
	     *
	     * Triggers are registered within the component annotation data under the
	     * {\@link Component#animations-anchor animations section}. An animation trigger can
	     * be placed on an element within a template by referencing the name of the
	     * trigger followed by the expression value that the trigger is bound to
	     * (in the form of `[\@triggerName]="expression"`.
	     *
	     * ### Usage
	     *
	     * `trigger` will create an animation trigger reference based on the provided `name` value.
	     * The provided `animation` value is expected to be an array consisting of {\@link state state} and
	     * {\@link transition transition}
	     * declarations.
	     *
	     * ```typescript
	     * \@Component({
	     *   selector: 'my-component',
	     *   templateUrl: 'my-component-tpl.html',
	     *   animations: [
	     *     trigger("myAnimationTrigger", [
	     *       state(...),
	     *       state(...),
	     *       transition(...),
	     *       transition(...)
	     *     ])
	     *   ]
	     * })
	     * class MyComponent {
	     *   myStatusExp = "something";
	     * }
	     * ```
	     *
	     * The template associated with this component will make use of the `myAnimationTrigger`
	     * animation trigger by binding to an element within its template code.
	     *
	     * ```html
	     * <!-- somewhere inside of my-component-tpl.html -->
	     * <div [\@myAnimationTrigger]="myStatusExp">...</div>
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} name
	     * @param {?} animation
	     * @return {?}
	     */
	    function trigger(name, animation) {
	        return new AnimationEntryMetadata(name, animation);
	    }

	    /**
	     * @param {?} previousStyles
	     * @param {?} newStyles
	     * @param {?=} nullValue
	     * @return {?}
	     */
	    function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
	        if (nullValue === void 0) { nullValue = null; }
	        var /** @type {?} */ finalStyles = {};
	        Object.keys(newStyles).forEach(function (prop) {
	            var /** @type {?} */ value = newStyles[prop];
	            finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
	        });
	        Object.keys(previousStyles).forEach(function (prop) {
	            if (!isPresent(finalStyles[prop])) {
	                finalStyles[prop] = nullValue;
	            }
	        });
	        return finalStyles;
	    }
	    /**
	     * @param {?} collectedStyles
	     * @param {?} finalStateStyles
	     * @param {?} keyframes
	     * @return {?}
	     */
	    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
	        var /** @type {?} */ limit = keyframes.length - 1;
	        var /** @type {?} */ firstKeyframe = keyframes[0];
	        // phase 1: copy all the styles from the first keyframe into the lookup map
	        var /** @type {?} */ flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
	        var /** @type {?} */ extraFirstKeyframeStyles = {};
	        var /** @type {?} */ hasExtraFirstStyles = false;
	        Object.keys(collectedStyles).forEach(function (prop) {
	            var /** @type {?} */ value = (collectedStyles[prop]);
	            // if the style is already defined in the first keyframe then
	            // we do not replace it.
	            if (!flatenedFirstKeyframeStyles[prop]) {
	                flatenedFirstKeyframeStyles[prop] = value;
	                extraFirstKeyframeStyles[prop] = value;
	                hasExtraFirstStyles = true;
	            }
	        });
	        var /** @type {?} */ keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
	        // phase 2: normalize the final keyframe
	        var /** @type {?} */ finalKeyframe = keyframes[limit];
	        finalKeyframe.styles.styles.unshift(finalStateStyles);
	        var /** @type {?} */ flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
	        var /** @type {?} */ extraFinalKeyframeStyles = {};
	        var /** @type {?} */ hasExtraFinalStyles = false;
	        Object.keys(keyframeCollectedStyles).forEach(function (prop) {
	            if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
	                extraFinalKeyframeStyles[prop] = AUTO_STYLE;
	                hasExtraFinalStyles = true;
	            }
	        });
	        if (hasExtraFinalStyles) {
	            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
	        }
	        Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {
	            if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
	                extraFirstKeyframeStyles[prop] = AUTO_STYLE;
	                hasExtraFirstStyles = true;
	            }
	        });
	        if (hasExtraFirstStyles) {
	            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
	        }
	        collectAndResolveStyles(collectedStyles, [finalStateStyles]);
	        return keyframes;
	    }
	    /**
	     * @param {?} styles
	     * @return {?}
	     */
	    function clearStyles(styles) {
	        var /** @type {?} */ finalStyles = {};
	        Object.keys(styles).forEach(function (key) { finalStyles[key] = null; });
	        return finalStyles;
	    }
	    /**
	     * @param {?} collection
	     * @param {?} styles
	     * @return {?}
	     */
	    function collectAndResolveStyles(collection, styles) {
	        return styles.map(function (entry) {
	            var /** @type {?} */ stylesObj = {};
	            Object.keys(entry).forEach(function (prop) {
	                var /** @type {?} */ value = entry[prop];
	                if (value == FILL_STYLE_FLAG) {
	                    value = collection[prop];
	                    if (!isPresent(value)) {
	                        value = AUTO_STYLE;
	                    }
	                }
	                collection[prop] = value;
	                stylesObj[prop] = value;
	            });
	            return stylesObj;
	        });
	    }
	    /**
	     * @param {?} element
	     * @param {?} renderer
	     * @param {?} styles
	     * @return {?}
	     */
	    function renderStyles(element, renderer, styles) {
	        Object.keys(styles).forEach(function (prop) { renderer.setElementStyle(element, prop, styles[prop]); });
	    }
	    /**
	     * @param {?} styles
	     * @return {?}
	     */
	    function flattenStyles(styles) {
	        var /** @type {?} */ finalStyles = {};
	        styles.forEach(function (entry) {
	            Object.keys(entry).forEach(function (prop) { finalStyles[prop] = (entry[prop]); });
	        });
	        return finalStyles;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * `AnimationStyles` consists of a collection of key/value maps containing CSS-based style data
	     * that can either be used as initial styling data or apart of a series of keyframes within an
	     * animation.
	     * This class is mostly internal, and it is designed to be used alongside
	     * {\@link AnimationKeyframe `AnimationKeyframe`} and {\@link Renderer#animate-anchor
	     * `Renderer.animate`}.
	     *
	     * \@experimental Animation support is experimental
	     */
	    var AnimationStyles = (function () {
	        /**
	         * @param {?} styles
	         */
	        function AnimationStyles(styles) {
	            this.styles = styles;
	        }
	        return AnimationStyles;
	    }());

	    /**
	     * An instance of this class is returned as an event parameter when an animation
	     * callback is captured for an animation either during the start or done phase.
	     *
	     * ```typescript
	     * \@Component({
	     *   host: {
	     *     '[\@myAnimationTrigger]': 'someExpression',
	     *     '(\@myAnimationTrigger.start)': 'captureStartEvent($event)',
	     *     '(\@myAnimationTrigger.done)': 'captureDoneEvent($event)',
	     *   },
	     *   animations: [
	     *     trigger("myAnimationTrigger", [
	     *        // ...
	     *     ])
	     *   ]
	     * })
	     * class MyComponent {
	     *   someExpression: any = false;
	     *   captureStartEvent(event: AnimationTransitionEvent) {
	     *     // the toState, fromState and totalTime data is accessible from the event variable
	     *   }
	     *
	     *   captureDoneEvent(event: AnimationTransitionEvent) {
	     *     // the toState, fromState and totalTime data is accessible from the event variable
	     *   }
	     * }
	     * ```
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationTransitionEvent = (function () {
	        /**
	         * @param {?} __0
	         */
	        function AnimationTransitionEvent(_a) {
	            var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName;
	            this.fromState = fromState;
	            this.toState = toState;
	            this.totalTime = totalTime;
	            this.phaseName = phaseName;
	        }
	        return AnimationTransitionEvent;
	    }());

	    var AnimationTransition = (function () {
	        /**
	         * @param {?} _player
	         * @param {?} _fromState
	         * @param {?} _toState
	         * @param {?} _totalTime
	         */
	        function AnimationTransition(_player, _fromState, _toState, _totalTime) {
	            this._player = _player;
	            this._fromState = _fromState;
	            this._toState = _toState;
	            this._totalTime = _totalTime;
	        }
	        /**
	         * @param {?} phaseName
	         * @return {?}
	         */
	        AnimationTransition.prototype._createEvent = function (phaseName) {
	            return new AnimationTransitionEvent({
	                fromState: this._fromState,
	                toState: this._toState,
	                totalTime: this._totalTime,
	                phaseName: phaseName
	            });
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        AnimationTransition.prototype.onStart = function (callback) {
	            var _this = this;
	            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('start')); }, 'player.onStart'));
	            this._player.onStart(fn);
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        AnimationTransition.prototype.onDone = function (callback) {
	            var _this = this;
	            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('done')); }, 'player.onDone'));
	            this._player.onDone(fn);
	        };
	        return AnimationTransition;
	    }());

	    var DebugDomRootRenderer = (function () {
	        /**
	         * @param {?} _delegate
	         */
	        function DebugDomRootRenderer(_delegate) {
	            this._delegate = _delegate;
	        }
	        /**
	         * @param {?} componentProto
	         * @return {?}
	         */
	        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {
	            return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
	        };
	        return DebugDomRootRenderer;
	    }());
	    var DebugDomRenderer = (function () {
	        /**
	         * @param {?} _delegate
	         */
	        function DebugDomRenderer(_delegate) {
	            this._delegate = _delegate;
	        }
	        /**
	         * @param {?} selectorOrNode
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
	            var /** @type {?} */ nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
	            var /** @type {?} */ debugEl = new DebugElement(nativeEl, null, debugInfo);
	            indexDebugNode(debugEl);
	            return nativeEl;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} name
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {
	            var /** @type {?} */ nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
	            var /** @type {?} */ debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
	            debugEl.name = name;
	            indexDebugNode(debugEl);
	            return nativeEl;
	        };
	        /**
	         * @param {?} hostElement
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };
	        /**
	         * @param {?} parentElement
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
	            var /** @type {?} */ comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
	            var /** @type {?} */ debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
	            indexDebugNode(debugEl);
	            return comment;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} value
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
	            var /** @type {?} */ text = this._delegate.createText(parentElement, value, debugInfo);
	            var /** @type {?} */ debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
	            indexDebugNode(debugEl);
	            return text;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} nodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	            var /** @type {?} */ debugParent = getDebugNode(parentElement);
	            if (isPresent(debugParent) && debugParent instanceof DebugElement) {
	                var /** @type {?} */ debugElement_1 = debugParent;
	                nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)); });
	            }
	            this._delegate.projectNodes(parentElement, nodes);
	        };
	        /**
	         * @param {?} node
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
	            var /** @type {?} */ debugNode = getDebugNode(node);
	            if (isPresent(debugNode)) {
	                var /** @type {?} */ debugParent = debugNode.parent;
	                if (viewRootNodes.length > 0 && isPresent(debugParent)) {
	                    var /** @type {?} */ debugViewRootNodes_1 = [];
	                    viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes_1.push(getDebugNode(rootNode)); });
	                    debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);
	                }
	            }
	            this._delegate.attachViewAfter(node, viewRootNodes);
	        };
	        /**
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {
	            viewRootNodes.forEach(function (node) {
	                var /** @type {?} */ debugNode = getDebugNode(node);
	                if (isPresent(debugNode) && isPresent(debugNode.parent)) {
	                    debugNode.parent.removeChild(debugNode);
	                }
	            });
	            this._delegate.detachView(viewRootNodes);
	        };
	        /**
	         * @param {?} hostElement
	         * @param {?} viewAllNodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	            viewAllNodes = viewAllNodes || [];
	            viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)); });
	            this._delegate.destroyView(hostElement, viewAllNodes);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl)) {
	                debugEl.listeners.push(new EventListener(name, callback));
	            }
	            return this._delegate.listen(renderElement, name, callback);
	        };
	        /**
	         * @param {?} target
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {
	            return this._delegate.listenGlobal(target, name, callback);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.properties[propertyName] = propertyValue;
	            }
	            this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} attributeName
	         * @param {?} attributeValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.attributes[attributeName] = attributeValue;
	            }
	            this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	            this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} className
	         * @param {?} isAdd
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.classes[className] = isAdd;
	            }
	            this._delegate.setElementClass(renderElement, className, isAdd);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.styles[styleName] = styleValue;
	            }
	            this._delegate.setElementStyle(renderElement, styleName, styleValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} methodName
	         * @param {?=} args
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	            this._delegate.invokeElementMethod(renderElement, methodName, args);
	        };
	        /**
	         * @param {?} renderNode
	         * @param {?} text
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };
	        /**
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
	        };
	        return DebugDomRenderer;
	    }());

	    var ViewType = {};
	    ViewType.HOST = 0;
	    ViewType.COMPONENT = 1;
	    ViewType.EMBEDDED = 2;
	    ViewType[ViewType.HOST] = "HOST";
	    ViewType[ViewType.COMPONENT] = "COMPONENT";
	    ViewType[ViewType.EMBEDDED] = "EMBEDDED";

	    var StaticNodeDebugInfo = (function () {
	        /**
	         * @param {?} providerTokens
	         * @param {?} componentToken
	         * @param {?} refTokens
	         */
	        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
	            this.providerTokens = providerTokens;
	            this.componentToken = componentToken;
	            this.refTokens = refTokens;
	        }
	        return StaticNodeDebugInfo;
	    }());
	    var DebugContext = (function () {
	        /**
	         * @param {?} _view
	         * @param {?} _nodeIndex
	         * @param {?} _tplRow
	         * @param {?} _tplCol
	         */
	        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
	            this._view = _view;
	            this._nodeIndex = _nodeIndex;
	            this._tplRow = _tplRow;
	            this._tplCol = _tplCol;
	        }
	        Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "component", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
	                if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
	                    return this.injector.get(staticNodeInfo.componentToken);
	                }
	                return null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ componentView = this._view;
	                while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {
	                    componentView = (componentView.parentView);
	                }
	                return componentView.parentElement;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.injector(this._nodeIndex); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "renderNode", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                if (isPresent(this._nodeIndex) && this._view.allNodes) {
	                    return this._view.allNodes[this._nodeIndex];
	                }
	                else {
	                    return null;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "providerTokens", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
	                return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "source", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "references", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var _this = this;
	                var /** @type {?} */ varValues = {};
	                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
	                if (isPresent(staticNodeInfo)) {
	                    var /** @type {?} */ refs_1 = staticNodeInfo.refTokens;
	                    Object.keys(refs_1).forEach(function (refName) {
	                        var /** @type {?} */ refToken = refs_1[refName];
	                        var /** @type {?} */ varValue;
	                        if (isBlank(refToken)) {
	                            varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
	                        }
	                        else {
	                            varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
	                        }
	                        varValues[refName] = varValue;
	                    });
	                }
	                return varValues;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return DebugContext;
	    }());

	    var ViewAnimationMap = (function () {
	        function ViewAnimationMap() {
	            this._map = new Map();
	            this._allPlayers = [];
	        }
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.find = function (element, animationName) {
	            var /** @type {?} */ playersByAnimation = this._map.get(element);
	            if (isPresent(playersByAnimation)) {
	                return playersByAnimation[animationName];
	            }
	        };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {
	            var /** @type {?} */ el = this._map.get(element);
	            return el ? Object.keys(el).map(function (k) { return el[k]; }) : [];
	        };
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @param {?} player
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.set = function (element, animationName, player) {
	            var /** @type {?} */ playersByAnimation = this._map.get(element);
	            if (!isPresent(playersByAnimation)) {
	                playersByAnimation = {};
	            }
	            var /** @type {?} */ existingEntry = playersByAnimation[animationName];
	            if (isPresent(existingEntry)) {
	                this.remove(element, animationName);
	            }
	            playersByAnimation[animationName] = player;
	            this._allPlayers.push(player);
	            this._map.set(element, playersByAnimation);
	        };
	        /**
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @param {?=} targetPlayer
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.remove = function (element, animationName, targetPlayer) {
	            if (targetPlayer === void 0) { targetPlayer = null; }
	            var /** @type {?} */ playersByAnimation = this._map.get(element);
	            if (playersByAnimation) {
	                var /** @type {?} */ player = playersByAnimation[animationName];
	                if (!targetPlayer || player === targetPlayer) {
	                    delete playersByAnimation[animationName];
	                    var /** @type {?} */ index = this._allPlayers.indexOf(player);
	                    this._allPlayers.splice(index, 1);
	                    if (Object.keys(playersByAnimation).length === 0) {
	                        this._map.delete(element);
	                    }
	                }
	            }
	        };
	        return ViewAnimationMap;
	    }());

	    var AnimationViewContext = (function () {
	        /**
	         * @param {?} _animationQueue
	         */
	        function AnimationViewContext(_animationQueue) {
	            this._animationQueue = _animationQueue;
	            this._players = new ViewAnimationMap();
	        }
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) {
	            var /** @type {?} */ activeAnimationPlayers = this._players.getAllPlayers();
	            // we check for the length to avoid having GroupAnimationPlayer
	            // issue an unnecessary microtask when zero players are passed in
	            if (activeAnimationPlayers.length) {
	                new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () { return callback(); });
	            }
	            else {
	                callback();
	            }
	        };
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @param {?} player
	         * @return {?}
	         */
	        AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) {
	            var _this = this;
	            this._animationQueue.enqueue(player);
	            this._players.set(element, animationName, player);
	            player.onDone(function () { return _this._players.remove(element, animationName, player); });
	        };
	        /**
	         * @param {?} element
	         * @param {?=} animationName
	         * @return {?}
	         */
	        AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName) {
	            if (animationName === void 0) { animationName = null; }
	            var /** @type {?} */ players = [];
	            if (animationName) {
	                var /** @type {?} */ currentPlayer = this._players.find(element, animationName);
	                if (currentPlayer) {
	                    _recursePlayers(currentPlayer, players);
	                }
	            }
	            else {
	                this._players.findAllPlayersByElement(element).forEach(function (player) { return _recursePlayers(player, players); });
	            }
	            return players;
	        };
	        return AnimationViewContext;
	    }());
	    /**
	     * @param {?} player
	     * @param {?} collectedPlayers
	     * @return {?}
	     */
	    function _recursePlayers(player, collectedPlayers) {
	        if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {
	            player.players.forEach(function (player) { return _recursePlayers(player, collectedPlayers); });
	        }
	        else {
	            collectedPlayers.push(player);
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$15 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ElementInjector = (function (_super) {
	        __extends$15(ElementInjector, _super);
	        /**
	         * @param {?} _view
	         * @param {?} _nodeIndex
	         */
	        function ElementInjector(_view, _nodeIndex) {
	            _super.call(this);
	            this._view = _view;
	            this._nodeIndex = _nodeIndex;
	        }
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        ElementInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            return this._view.injectorGet(token, this._nodeIndex, notFoundValue);
	        };
	        return ElementInjector;
	    }(Injector));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$14 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _scope_check = wtfCreateScope("AppView#check(ascii id)");
	    /**
	     * @experimental
	     */
	    var /** @type {?} */ EMPTY_CONTEXT = new Object();
	    var /** @type {?} */ UNDEFINED$1 = new Object();
	    /**
	     * Cost of making objects: http://jsperf.com/instantiate-size-of-object
	     *
	     * @abstract
	     */
	    var AppView = (function () {
	        /**
	         * @param {?} clazz
	         * @param {?} componentType
	         * @param {?} type
	         * @param {?} viewUtils
	         * @param {?} parentView
	         * @param {?} parentIndex
	         * @param {?} parentElement
	         * @param {?} cdMode
	         * @param {?=} declaredViewContainer
	         */
	        function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {
	            if (declaredViewContainer === void 0) { declaredViewContainer = null; }
	            this.clazz = clazz;
	            this.componentType = componentType;
	            this.type = type;
	            this.viewUtils = viewUtils;
	            this.parentView = parentView;
	            this.parentIndex = parentIndex;
	            this.parentElement = parentElement;
	            this.cdMode = cdMode;
	            this.declaredViewContainer = declaredViewContainer;
	            this.numberOfChecks = 0;
	            this.ref = new ViewRef_(this, viewUtils.animationQueue);
	            if (type === ViewType.COMPONENT || type === ViewType.HOST) {
	                this.renderer = viewUtils.renderComponent(componentType);
	            }
	            else {
	                this.renderer = parentView.renderer;
	            }
	            this._directRenderer = this.renderer.directRenderer;
	        }
	        Object.defineProperty(AppView.prototype, "animationContext", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                if (!this._animationContext) {
	                    this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);
	                }
	                return this._animationContext;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppView.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} context
	         * @return {?}
	         */
	        AppView.prototype.create = function (context) {
	            this.context = context;
	            return this.createInternal(null);
	        };
	        /**
	         * @param {?} rootSelectorOrNode
	         * @param {?} hostInjector
	         * @param {?} projectableNodes
	         * @return {?}
	         */
	        AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {
	            this.context = (EMPTY_CONTEXT);
	            this._hasExternalHostElement = isPresent(rootSelectorOrNode);
	            this._hostInjector = hostInjector;
	            this._hostProjectableNodes = projectableNodes;
	            return this.createInternal(rootSelectorOrNode);
	        };
	        /**
	         * Overwritten by implementations.
	         * Returns the ComponentRef for the host element for ViewType.HOST.
	         * @param {?} rootSelectorOrNode
	         * @return {?}
	         */
	        AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };
	        /**
	         * Overwritten by implementations.
	         * @param {?} templateNodeIndex
	         * @return {?}
	         */
	        AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null; };
	        /**
	         * @param {?} lastRootNode
	         * @param {?} allNodes
	         * @param {?} disposables
	         * @return {?}
	         */
	        AppView.prototype.init = function (lastRootNode, allNodes, disposables) {
	            this.lastRootNode = lastRootNode;
	            this.allNodes = allNodes;
	            this.disposables = disposables;
	            if (this.type === ViewType.COMPONENT) {
	                this.dirtyParentQueriesInternal();
	            }
	        };
	        /**
	         * @param {?} token
	         * @param {?} nodeIndex
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            var /** @type {?} */ result = UNDEFINED$1;
	            var /** @type {?} */ view = this;
	            while (result === UNDEFINED$1) {
	                if (isPresent(nodeIndex)) {
	                    result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);
	                }
	                if (result === UNDEFINED$1 && view.type === ViewType.HOST) {
	                    result = view._hostInjector.get(token, notFoundValue);
	                }
	                nodeIndex = view.parentIndex;
	                view = view.parentView;
	            }
	            return result;
	        };
	        /**
	         * Overwritten by implementations
	         * @param {?} token
	         * @param {?} nodeIndex
	         * @param {?} notFoundResult
	         * @return {?}
	         */
	        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
	            return notFoundResult;
	        };
	        /**
	         * @param {?} nodeIndex
	         * @return {?}
	         */
	        AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex); };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.detachAndDestroy = function () {
	            if (this.viewContainer) {
	                this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
	            }
	            else if (this.appRef) {
	                this.appRef.detachView(this.ref);
	            }
	            else if (this._hasExternalHostElement) {
	                this.detach();
	            }
	            this.destroy();
	        };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.destroy = function () {
	            var _this = this;
	            if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	                return;
	            }
	            var /** @type {?} */ hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
	            if (this.disposables) {
	                for (var /** @type {?} */ i = 0; i < this.disposables.length; i++) {
	                    this.disposables[i]();
	                }
	            }
	            this.destroyInternal();
	            this.dirtyParentQueriesInternal();
	            if (this._animationContext) {
	                this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes); });
	            }
	            else {
	                this.renderer.destroyView(hostElement, this.allNodes);
	            }
	            this.cdMode = ChangeDetectorStatus.Destroyed;
	        };
	        /**
	         * Overwritten by implementations
	         * @return {?}
	         */
	        AppView.prototype.destroyInternal = function () { };
	        /**
	         * Overwritten by implementations
	         * @return {?}
	         */
	        AppView.prototype.detachInternal = function () { };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.detach = function () {
	            var _this = this;
	            this.detachInternal();
	            if (this._animationContext) {
	                this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach(); });
	            }
	            else {
	                this._renderDetach();
	            }
	            if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer &&
	                this.declaredViewContainer.projectedViews) {
	                var /** @type {?} */ projectedViews = this.declaredViewContainer.projectedViews;
	                var /** @type {?} */ index = projectedViews.indexOf(this);
	                // perf: pop is faster than splice!
	                if (index >= projectedViews.length - 1) {
	                    projectedViews.pop();
	                }
	                else {
	                    projectedViews.splice(index, 1);
	                }
	            }
	            this.appRef = null;
	            this.viewContainer = null;
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @return {?}
	         */
	        AppView.prototype._renderDetach = function () {
	            if (this._directRenderer) {
	                this.visitRootNodesInternal(this._directRenderer.remove, null);
	            }
	            else {
	                this.renderer.detachView(this.flatRootNodes);
	            }
	        };
	        /**
	         * @param {?} appRef
	         * @return {?}
	         */
	        AppView.prototype.attachToAppRef = function (appRef) {
	            if (this.viewContainer) {
	                throw new Error('This view is already attached to a ViewContainer!');
	            }
	            this.appRef = appRef;
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @param {?} viewContainer
	         * @param {?} prevView
	         * @return {?}
	         */
	        AppView.prototype.attachAfter = function (viewContainer, prevView) {
	            if (this.appRef) {
	                throw new Error('This view is already attached directly to the ApplicationRef!');
	            }
	            this._renderAttach(viewContainer, prevView);
	            this.viewContainer = viewContainer;
	            if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
	                if (!this.declaredViewContainer.projectedViews) {
	                    this.declaredViewContainer.projectedViews = [];
	                }
	                this.declaredViewContainer.projectedViews.push(this);
	            }
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @param {?} viewContainer
	         * @param {?} prevView
	         * @return {?}
	         */
	        AppView.prototype.moveAfter = function (viewContainer, prevView) {
	            this._renderAttach(viewContainer, prevView);
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @param {?} viewContainer
	         * @param {?} prevView
	         * @return {?}
	         */
	        AppView.prototype._renderAttach = function (viewContainer, prevView) {
	            var /** @type {?} */ prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
	            if (this._directRenderer) {
	                var /** @type {?} */ nextSibling = this._directRenderer.nextSibling(prevNode);
	                if (nextSibling) {
	                    this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
	                }
	                else {
	                    var /** @type {?} */ parentElement = this._directRenderer.parentElement(prevNode);
	                    if (parentElement) {
	                        this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
	                    }
	                }
	            }
	            else {
	                this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
	            }
	        };
	        Object.defineProperty(AppView.prototype, "changeDetectorRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppView.prototype, "flatRootNodes", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ nodes = [];
	                this.visitRootNodesInternal(addToArray, nodes);
	                return nodes;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} parentElement
	         * @param {?} ngContentIndex
	         * @return {?}
	         */
	        AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {
	            if (this._directRenderer) {
	                this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
	            }
	            else {
	                var /** @type {?} */ nodes = [];
	                this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
	                this.renderer.projectNodes(parentElement, nodes);
	            }
	        };
	        /**
	         * @param {?} ngContentIndex
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {
	            switch (this.type) {
	                case ViewType.EMBEDDED:
	                    this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
	                    break;
	                case ViewType.COMPONENT:
	                    if (this.parentView.type === ViewType.HOST) {
	                        var /** @type {?} */ nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
	                        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	                            cb(nodes[i], c);
	                        }
	                    }
	                    else {
	                        this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
	                    }
	                    break;
	            }
	        };
	        /**
	         * Overwritten by implementations
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        AppView.prototype.visitRootNodesInternal = function (cb, c) { };
	        /**
	         * Overwritten by implementations
	         * @param {?} nodeIndex
	         * @param {?} ngContentIndex
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { };
	        /**
	         * Overwritten by implementations
	         * @return {?}
	         */
	        AppView.prototype.dirtyParentQueriesInternal = function () { };
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        AppView.prototype.internalDetectChanges = function (throwOnChange) {
	            if (this.cdMode !== ChangeDetectorStatus.Detached) {
	                this.detectChanges(throwOnChange);
	            }
	        };
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        AppView.prototype.detectChanges = function (throwOnChange) {
	            var /** @type {?} */ s = _scope_check(this.clazz);
	            if (this.cdMode === ChangeDetectorStatus.Checked ||
	                this.cdMode === ChangeDetectorStatus.Errored)
	                return;
	            if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	                this.throwDestroyedError('detectChanges');
	            }
	            this.detectChangesInternal(throwOnChange);
	            if (this.cdMode === ChangeDetectorStatus.CheckOnce)
	                this.cdMode = ChangeDetectorStatus.Checked;
	            this.numberOfChecks++;
	            wtfLeave(s);
	        };
	        /**
	         * Overwritten by implementations
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        AppView.prototype.detectChangesInternal = function (throwOnChange) { };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.markPathToRootAsCheckOnce = function () {
	            var /** @type {?} */ c = this;
	            while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
	                if (c.cdMode === ChangeDetectorStatus.Checked) {
	                    c.cdMode = ChangeDetectorStatus.CheckOnce;
	                }
	                if (c.type === ViewType.COMPONENT) {
	                    c = c.parentView;
	                }
	                else {
	                    c = c.viewContainer ? c.viewContainer.parentView : null;
	                }
	            }
	        };
	        /**
	         * @param {?} cb
	         * @return {?}
	         */
	        AppView.prototype.eventHandler = function (cb) {
	            return cb;
	        };
	        /**
	         * @param {?} details
	         * @return {?}
	         */
	        AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };
	        return AppView;
	    }());
	    var DebugAppView = (function (_super) {
	        __extends$14(DebugAppView, _super);
	        /**
	         * @param {?} clazz
	         * @param {?} componentType
	         * @param {?} type
	         * @param {?} viewUtils
	         * @param {?} parentView
	         * @param {?} parentIndex
	         * @param {?} parentNode
	         * @param {?} cdMode
	         * @param {?} staticNodeDebugInfos
	         * @param {?=} declaredViewContainer
	         */
	        function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {
	            if (declaredViewContainer === void 0) { declaredViewContainer = null; }
	            _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
	            this.staticNodeDebugInfos = staticNodeDebugInfos;
	            this._currentDebugContext = null;
	        }
	        /**
	         * @param {?} context
	         * @return {?}
	         */
	        DebugAppView.prototype.create = function (context) {
	            this._resetDebug();
	            try {
	                return _super.prototype.create.call(this, context);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} rootSelectorOrNode
	         * @param {?} injector
	         * @param {?=} projectableNodes
	         * @return {?}
	         */
	        DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            this._resetDebug();
	            try {
	                return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} token
	         * @param {?} nodeIndex
	         * @param {?=} notFoundResult
	         * @return {?}
	         */
	        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
	            this._resetDebug();
	            try {
	                return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DebugAppView.prototype.detach = function () {
	            this._resetDebug();
	            try {
	                _super.prototype.detach.call(this);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DebugAppView.prototype.destroy = function () {
	            this._resetDebug();
	            try {
	                _super.prototype.destroy.call(this);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        DebugAppView.prototype.detectChanges = function (throwOnChange) {
	            this._resetDebug();
	            try {
	                _super.prototype.detectChanges.call(this, throwOnChange);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };
	        /**
	         * @param {?} nodeIndex
	         * @param {?} rowNum
	         * @param {?} colNum
	         * @return {?}
	         */
	        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {
	            return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
	        };
	        /**
	         * @param {?} e
	         * @return {?}
	         */
	        DebugAppView.prototype._rethrowWithContext = function (e) {
	            if (!(e instanceof ViewWrappedError)) {
	                if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
	                    this.cdMode = ChangeDetectorStatus.Errored;
	                }
	                if (isPresent(this._currentDebugContext)) {
	                    throw new ViewWrappedError(e, this._currentDebugContext);
	                }
	            }
	        };
	        /**
	         * @param {?} cb
	         * @return {?}
	         */
	        DebugAppView.prototype.eventHandler = function (cb) {
	            var _this = this;
	            var /** @type {?} */ superHandler = _super.prototype.eventHandler.call(this, cb);
	            return function (eventName, event) {
	                _this._resetDebug();
	                try {
	                    return superHandler.call(_this, eventName, event);
	                }
	                catch (e) {
	                    _this._rethrowWithContext(e);
	                    throw e;
	                }
	            };
	        };
	        return DebugAppView;
	    }(AppView));

	    /**
	     * A ViewContainer is created for elements that have a ViewContainerRef
	     * to keep track of the nested views.
	     */
	    var ViewContainer = (function () {
	        /**
	         * @param {?} index
	         * @param {?} parentIndex
	         * @param {?} parentView
	         * @param {?} nativeElement
	         */
	        function ViewContainer(index, parentIndex, parentView, nativeElement) {
	            this.index = index;
	            this.parentIndex = parentIndex;
	            this.parentView = parentView;
	            this.nativeElement = nativeElement;
	        }
	        Object.defineProperty(ViewContainer.prototype, "elementRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ElementRef(this.nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "vcRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ViewContainerRef_(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "parentInjector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.parentView.injector(this.parentIndex); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.parentView.injector(this.index); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) {
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].detectChanges(throwOnChange);
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        ViewContainer.prototype.destroyNestedViews = function () {
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].destroy();
	                }
	            }
	        };
	        /**
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) {
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].visitRootNodesInternal(cb, c);
	                }
	            }
	        };
	        /**
	         * @param {?} nestedViewClass
	         * @param {?} callback
	         * @return {?}
	         */
	        ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) {
	            var /** @type {?} */ result = [];
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    var /** @type {?} */ nestedView = this.nestedViews[i];
	                    if (nestedView.clazz === nestedViewClass) {
	                        result.push(callback(nestedView));
	                    }
	                }
	            }
	            if (this.projectedViews) {
	                for (var /** @type {?} */ i = 0; i < this.projectedViews.length; i++) {
	                    var /** @type {?} */ projectedView = this.projectedViews[i];
	                    if (projectedView.clazz === nestedViewClass) {
	                        result.push(callback(projectedView));
	                    }
	                }
	            }
	            return result;
	        };
	        /**
	         * @param {?} view
	         * @param {?} currentIndex
	         * @return {?}
	         */
	        ViewContainer.prototype.moveView = function (view, currentIndex) {
	            var /** @type {?} */ previousIndex = this.nestedViews.indexOf(view);
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            var /** @type {?} */ nestedViews = this.nestedViews;
	            if (nestedViews == null) {
	                nestedViews = [];
	                this.nestedViews = nestedViews;
	            }
	            nestedViews.splice(previousIndex, 1);
	            nestedViews.splice(currentIndex, 0, view);
	            var /** @type {?} */ prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;
	            view.moveAfter(this, prevView);
	        };
	        /**
	         * @param {?} view
	         * @param {?} viewIndex
	         * @return {?}
	         */
	        ViewContainer.prototype.attachView = function (view, viewIndex) {
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            var /** @type {?} */ nestedViews = this.nestedViews;
	            if (nestedViews == null) {
	                nestedViews = [];
	                this.nestedViews = nestedViews;
	            }
	            // perf: array.push is faster than array.splice!
	            if (viewIndex >= nestedViews.length) {
	                nestedViews.push(view);
	            }
	            else {
	                nestedViews.splice(viewIndex, 0, view);
	            }
	            var /** @type {?} */ prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;
	            view.attachAfter(this, prevView);
	        };
	        /**
	         * @param {?} viewIndex
	         * @return {?}
	         */
	        ViewContainer.prototype.detachView = function (viewIndex) {
	            var /** @type {?} */ view = this.nestedViews[viewIndex];
	            // perf: array.pop is faster than array.splice!
	            if (viewIndex >= this.nestedViews.length - 1) {
	                this.nestedViews.pop();
	            }
	            else {
	                this.nestedViews.splice(viewIndex, 1);
	            }
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            view.detach();
	            return view;
	        };
	        return ViewContainer;
	    }());

	    var /** @type {?} */ __core_private__ = {
	        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
	        ChangeDetectorStatus: ChangeDetectorStatus,
	        constructDependencies: constructDependencies,
	        LifecycleHooks: LifecycleHooks,
	        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
	        ReflectorReader: ReflectorReader,
	        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
	        ComponentRef_: ComponentRef_,
	        ViewContainer: ViewContainer,
	        AppView: AppView,
	        DebugAppView: DebugAppView,
	        NgModuleInjector: NgModuleInjector,
	        registerModuleFactory: registerModuleFactory,
	        ViewType: ViewType,
	        view_utils: view_utils,
	        ViewMetadata: ViewMetadata,
	        DebugContext: DebugContext,
	        StaticNodeDebugInfo: StaticNodeDebugInfo,
	        devModeEqual: devModeEqual,
	        UNINITIALIZED: UNINITIALIZED,
	        ValueUnwrapper: ValueUnwrapper,
	        RenderDebugInfo: RenderDebugInfo,
	        TemplateRef_: TemplateRef_,
	        ReflectionCapabilities: ReflectionCapabilities,
	        makeDecorator: makeDecorator,
	        DebugDomRootRenderer: DebugDomRootRenderer,
	        Console: Console,
	        reflector: reflector,
	        Reflector: Reflector,
	        NoOpAnimationPlayer: NoOpAnimationPlayer,
	        AnimationPlayer: AnimationPlayer,
	        AnimationSequencePlayer: AnimationSequencePlayer,
	        AnimationGroupPlayer: AnimationGroupPlayer,
	        AnimationKeyframe: AnimationKeyframe,
	        prepareFinalAnimationStyles: prepareFinalAnimationStyles,
	        balanceAnimationKeyframes: balanceAnimationKeyframes,
	        flattenStyles: flattenStyles,
	        clearStyles: clearStyles,
	        renderStyles: renderStyles,
	        collectAndResolveStyles: collectAndResolveStyles,
	        APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
	        AnimationStyles: AnimationStyles,
	        ANY_STATE: ANY_STATE,
	        DEFAULT_STATE: DEFAULT_STATE,
	        EMPTY_STATE: EMPTY_STATE,
	        FILL_STYLE_FLAG: FILL_STYLE_FLAG,
	        ComponentStillLoadingError: ComponentStillLoadingError,
	        isPromise: isPromise,
	        isObservable: isObservable,
	        AnimationTransition: AnimationTransition
	    };

	    exports.createPlatform = createPlatform;
	    exports.assertPlatform = assertPlatform;
	    exports.destroyPlatform = destroyPlatform;
	    exports.getPlatform = getPlatform;
	    exports.PlatformRef = PlatformRef;
	    exports.ApplicationRef = ApplicationRef;
	    exports.enableProdMode = enableProdMode;
	    exports.isDevMode = isDevMode;
	    exports.createPlatformFactory = createPlatformFactory;
	    exports.NgProbeToken = NgProbeToken;
	    exports.APP_ID = APP_ID;
	    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
	    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
	    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
	    exports.APP_INITIALIZER = APP_INITIALIZER;
	    exports.ApplicationInitStatus = ApplicationInitStatus;
	    exports.DebugElement = DebugElement;
	    exports.DebugNode = DebugNode;
	    exports.asNativeElements = asNativeElements;
	    exports.getDebugNode = getDebugNode;
	    exports.Testability = Testability;
	    exports.TestabilityRegistry = TestabilityRegistry;
	    exports.setTestabilityGetter = setTestabilityGetter;
	    exports.TRANSLATIONS = TRANSLATIONS;
	    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
	    exports.LOCALE_ID = LOCALE_ID;
	    exports.ApplicationModule = ApplicationModule;
	    exports.wtfCreateScope = wtfCreateScope;
	    exports.wtfLeave = wtfLeave;
	    exports.wtfStartTimeRange = wtfStartTimeRange;
	    exports.wtfEndTimeRange = wtfEndTimeRange;
	    exports.Type = Type;
	    exports.EventEmitter = EventEmitter;
	    exports.ErrorHandler = ErrorHandler;
	    exports.AnimationTransitionEvent = AnimationTransitionEvent;
	    exports.AnimationPlayer = AnimationPlayer;
	    exports.AnimationStyles = AnimationStyles;
	    exports.AnimationKeyframe = AnimationKeyframe;
	    exports.Sanitizer = Sanitizer;
	    exports.SecurityContext = SecurityContext;
	    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
	    exports.Attribute = Attribute;
	    exports.ContentChild = ContentChild;
	    exports.ContentChildren = ContentChildren;
	    exports.Query = Query;
	    exports.ViewChild = ViewChild;
	    exports.ViewChildren = ViewChildren;
	    exports.Component = Component;
	    exports.Directive = Directive;
	    exports.HostBinding = HostBinding;
	    exports.HostListener = HostListener;
	    exports.Input = Input;
	    exports.Output = Output;
	    exports.Pipe = Pipe;
	    exports.AfterContentChecked = AfterContentChecked;
	    exports.AfterContentInit = AfterContentInit;
	    exports.AfterViewChecked = AfterViewChecked;
	    exports.AfterViewInit = AfterViewInit;
	    exports.DoCheck = DoCheck;
	    exports.OnChanges = OnChanges;
	    exports.OnDestroy = OnDestroy;
	    exports.OnInit = OnInit;
	    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
	    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
	    exports.NgModule = NgModule;
	    exports.ViewEncapsulation = ViewEncapsulation;
	    exports.Version = Version;
	    exports.VERSION = VERSION;
	    exports.Class = Class;
	    exports.forwardRef = forwardRef;
	    exports.resolveForwardRef = resolveForwardRef;
	    exports.Injector = Injector;
	    exports.ReflectiveInjector = ReflectiveInjector;
	    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
	    exports.ReflectiveKey = ReflectiveKey;
	    exports.OpaqueToken = OpaqueToken;
	    exports.Inject = Inject;
	    exports.Optional = Optional;
	    exports.Injectable = Injectable;
	    exports.Self = Self;
	    exports.SkipSelf = SkipSelf;
	    exports.Host = Host;
	    exports.NgZone = NgZone;
	    exports.RenderComponentType = RenderComponentType;
	    exports.Renderer = Renderer;
	    exports.RootRenderer = RootRenderer;
	    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
	    exports.Compiler = Compiler;
	    exports.CompilerFactory = CompilerFactory;
	    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
	    exports.ComponentFactory = ComponentFactory;
	    exports.ComponentRef = ComponentRef;
	    exports.ComponentFactoryResolver = ComponentFactoryResolver;
	    exports.ElementRef = ElementRef;
	    exports.NgModuleFactory = NgModuleFactory;
	    exports.NgModuleRef = NgModuleRef;
	    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
	    exports.getModuleFactory = getModuleFactory;
	    exports.QueryList = QueryList;
	    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
	    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
	    exports.TemplateRef = TemplateRef;
	    exports.ViewContainerRef = ViewContainerRef;
	    exports.EmbeddedViewRef = EmbeddedViewRef;
	    exports.ViewRef = ViewRef;
	    exports.ChangeDetectionStrategy = ChangeDetectionStrategy;
	    exports.ChangeDetectorRef = ChangeDetectorRef;
	    exports.CollectionChangeRecord = CollectionChangeRecord;
	    exports.DefaultIterableDiffer = DefaultIterableDiffer;
	    exports.IterableDiffers = IterableDiffers;
	    exports.KeyValueChangeRecord = KeyValueChangeRecord;
	    exports.KeyValueDiffers = KeyValueDiffers;
	    exports.SimpleChange = SimpleChange;
	    exports.WrappedValue = WrappedValue;
	    exports.platformCore = platformCore;
	    exports.__core_private__ = __core_private__;
	    exports.AUTO_STYLE = AUTO_STYLE;
	    exports.AnimationEntryMetadata = AnimationEntryMetadata;
	    exports.AnimationStateMetadata = AnimationStateMetadata;
	    exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;
	    exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;
	    exports.AnimationMetadata = AnimationMetadata;
	    exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;
	    exports.AnimationStyleMetadata = AnimationStyleMetadata;
	    exports.AnimationAnimateMetadata = AnimationAnimateMetadata;
	    exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;
	    exports.AnimationSequenceMetadata = AnimationSequenceMetadata;
	    exports.AnimationGroupMetadata = AnimationGroupMetadata;
	    exports.animate = animate;
	    exports.group = group;
	    exports.sequence = sequence;
	    exports.style = style;
	    exports.state = state;
	    exports.keyframes = keyframes;
	    exports.transition = transition;
	    exports.trigger = trigger;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(6);
	function getSymbolObservable(context) {
	    var $$observable;
	    var Symbol = context.Symbol;
	    if (typeof Symbol === 'function') {
	        if (Symbol.observable) {
	            $$observable = Symbol.observable;
	        }
	        else {
	            $$observable = Symbol('observable');
	            Symbol.observable = $$observable;
	        }
	    }
	    else {
	        $$observable = '@@observable';
	    }
	    return $$observable;
	}
	exports.getSymbolObservable = getSymbolObservable;
	exports.$$observable = getSymbolObservable(root_1.root);
	//# sourceMappingURL=observable.js.map

/***/ },
/* 6 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	/**
	 * window: browser in DOM main thread
	 * self: browser in WebWorker
	 * global: Node.js/other
	 */
	exports.root = (typeof window == 'object' && window.window === window && window
	    || typeof self == 'object' && self.self === self && self
	    || typeof global == 'object' && global.global === global && global);
	if (!exports.root) {
	    throw new Error('RxJS could not find any global context (window, self, global)');
	}
	//# sourceMappingURL=root.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(8);
	var Subscriber_1 = __webpack_require__(10);
	var Subscription_1 = __webpack_require__(12);
	var ObjectUnsubscribedError_1 = __webpack_require__(20);
	var SubjectSubscription_1 = __webpack_require__(21);
	var rxSubscriber_1 = __webpack_require__(19);
	/**
	 * @class SubjectSubscriber<T>
	 */
	var SubjectSubscriber = (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        _super.call(this, destination);
	        this.destination = destination;
	    }
	    return SubjectSubscriber;
	}(Subscriber_1.Subscriber));
	exports.SubjectSubscriber = SubjectSubscriber;
	/**
	 * @class Subject<T>
	 */
	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        _super.call(this);
	        this.observers = [];
	        this.closed = false;
	        this.isStopped = false;
	        this.hasError = false;
	        this.thrownError = null;
	    }
	    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._trySubscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else {
	            return _super.prototype._trySubscribe.call(this, subscriber);
	        }
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable_1.Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable_1.Observable));
	exports.Subject = Subject;
	/**
	 * @class AnonymousSubject<T>
	 */
	var AnonymousSubject = (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.source = source;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription_1.Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));
	exports.AnonymousSubject = AnonymousSubject;
	//# sourceMappingURL=Subject.js.map

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(6);
	var toSubscriber_1 = __webpack_require__(9);
	var observable_1 = __webpack_require__(5);
	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */
	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is  called when the Observable is
	     * initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or
	     * `complete` can be called to notify of a successful completion.
	     */
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    /**
	     * Creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @return {Observable} a new observable with the Operator applied
	     */
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            operator.call(sink, this.source);
	        }
	        else {
	            sink.add(this._trySubscribe(sink));
	        }
	        if (sink.syncErrorThrowable) {
	            sink.syncErrorThrowable = false;
	            if (sink.syncErrorThrown) {
	                throw sink.syncErrorValue;
	            }
	        }
	        return sink;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            sink.syncErrorThrown = true;
	            sink.syncErrorValue = err;
	            sink.error(err);
	        }
	    };
	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
	     * @return {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */
	    Observable.prototype.forEach = function (next, PromiseCtor) {
	        var _this = this;
	        if (!PromiseCtor) {
	            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	                PromiseCtor = root_1.root.Rx.config.Promise;
	            }
	            else if (root_1.root.Promise) {
	                PromiseCtor = root_1.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        return new PromiseCtor(function (resolve, reject) {
	            var subscription = _this.subscribe(function (value) {
	                if (subscription) {
	                    // if there is a subscription, then we can surmise
	                    // the next handling is asynchronous. Any errors thrown
	                    // need to be rejected explicitly and unsubscribe must be
	                    // called manually
	                    try {
	                        next(value);
	                    }
	                    catch (err) {
	                        reject(err);
	                        subscription.unsubscribe();
	                    }
	                }
	                else {
	                    // if there is NO subscription, then we're getting a nexted
	                    // value synchronously during subscription. We can just call it.
	                    // If it errors, Observable's `subscribe` will ensure the
	                    // unsubscription logic is called, then synchronously rethrow the error.
	                    // After that, Promise will trap the error and send it
	                    // down the rejection path.
	                    next(value);
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        return this.source.subscribe(subscriber);
	    };
	    /**
	     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     * @method Symbol.observable
	     * @return {Observable} this instance of the observable
	     */
	    Observable.prototype[observable_1.$$observable] = function () {
	        return this;
	    };
	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * Creates a new cold Observable by calling the Observable constructor
	     * @static true
	     * @owner Observable
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @return {Observable} a new cold observable
	     */
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	exports.Observable = Observable;
	//# sourceMappingURL=Observable.js.map

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Subscriber_1 = __webpack_require__(10);
	var rxSubscriber_1 = __webpack_require__(19);
	var Observer_1 = __webpack_require__(18);
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
	            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber_1.Subscriber(Observer_1.empty);
	    }
	    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	}
	exports.toSubscriber = toSubscriber;
	//# sourceMappingURL=toSubscriber.js.map

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isFunction_1 = __webpack_require__(11);
	var Subscription_1 = __webpack_require__(12);
	var Observer_1 = __webpack_require__(18);
	var rxSubscriber_1 = __webpack_require__(19);
	/**
	 * Implements the {@link Observer} interface and extends the
	 * {@link Subscription} class. While the {@link Observer} is the public API for
	 * consuming the values of an {@link Observable}, all Observers get converted to
	 * a Subscriber, in order to provide Subscription-like capabilities such as
	 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
	 * implementing operators, but it is rarely used as a public API.
	 *
	 * @class Subscriber<T>
	 */
	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    /**
	     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
	     * defined Observer or a `next` callback function.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     */
	    function Subscriber(destinationOrNext, error, complete) {
	        _super.call(this);
	        this.syncErrorValue = null;
	        this.syncErrorThrown = false;
	        this.syncErrorThrowable = false;
	        this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                this.destination = Observer_1.empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    this.destination = Observer_1.empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        this.destination = destinationOrNext;
	                        this.destination.add(this);
	                    }
	                    else {
	                        this.syncErrorThrowable = true;
	                        this.destination = new SafeSubscriber(this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                this.syncErrorThrowable = true;
	                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
	                break;
	        }
	    }
	    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };
	    /**
	     * A static factory for a Subscriber, given a (potentially partial) definition
	     * of an Observer.
	     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
	     * Observer represented by the given arguments.
	     */
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `next` from
	     * the Observable, with a value. The Observable may call this method 0 or more
	     * times.
	     * @param {T} [value] The `next` value.
	     * @return {void}
	     */
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `error` from
	     * the Observable, with an attached {@link Error}. Notifies the Observer that
	     * the Observable has experienced an error condition.
	     * @param {any} [err] The `error` exception.
	     * @return {void}
	     */
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive a valueless notification of type
	     * `complete` from the Observable. Notifies the Observer that the Observable
	     * has finished sending push-based notifications.
	     * @return {void}
	     */
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    return Subscriber;
	}(Subscription_1.Subscription));
	exports.Subscriber = Subscriber;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SafeSubscriber = (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parent, observerOrNext, error, complete) {
	        _super.call(this);
	        this._parent = _parent;
	        var next;
	        var context = this;
	        if (isFunction_1.isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            context = observerOrNext;
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (isFunction_1.isFunction(context.unsubscribe)) {
	                this.add(context.unsubscribe.bind(context));
	            }
	            context.unsubscribe = this.unsubscribe.bind(this);
	        }
	        this._context = context;
	        this._next = next;
	        this._error = error;
	        this._complete = complete;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parent = this._parent;
	            if (!_parent.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parent, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._error) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parent.syncErrorThrowable) {
	                this.unsubscribe();
	                throw err;
	            }
	            else {
	                _parent.syncErrorValue = err;
	                _parent.syncErrorThrown = true;
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._complete) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._complete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._complete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            throw err;
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            parent.syncErrorValue = err;
	            parent.syncErrorThrown = true;
	            return true;
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parent = this._parent;
	        this._context = null;
	        this._parent = null;
	        _parent.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=Subscriber.js.map

/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";
	function isFunction(x) {
	    return typeof x === 'function';
	}
	exports.isFunction = isFunction;
	//# sourceMappingURL=isFunction.js.map

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isArray_1 = __webpack_require__(13);
	var isObject_1 = __webpack_require__(14);
	var isFunction_1 = __webpack_require__(11);
	var tryCatch_1 = __webpack_require__(15);
	var errorObject_1 = __webpack_require__(16);
	var UnsubscriptionError_1 = __webpack_require__(17);
	/**
	 * Represents a disposable resource, such as the execution of an Observable. A
	 * Subscription has one important method, `unsubscribe`, that takes no argument
	 * and just disposes the resource held by the subscription.
	 *
	 * Additionally, subscriptions may be grouped together through the `add()`
	 * method, which will attach a child Subscription to the current Subscription.
	 * When a Subscription is unsubscribed, all its children (and its grandchildren)
	 * will be unsubscribed as well.
	 *
	 * @class Subscription
	 */
	var Subscription = (function () {
	    /**
	     * @param {function(): void} [unsubscribe] A function describing how to
	     * perform the disposal of resources when the `unsubscribe` method is called.
	     */
	    function Subscription(unsubscribe) {
	        /**
	         * A flag to indicate whether this Subscription has already been unsubscribed.
	         * @type {boolean}
	         */
	        this.closed = false;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    /**
	     * Disposes the resources held by the subscription. May, for instance, cancel
	     * an ongoing Observable execution or cancel any other type of work that
	     * started when the Subscription was created.
	     * @return {void}
	     */
	    Subscription.prototype.unsubscribe = function () {
	        var hasErrors = false;
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this._subscriptions = null;
	        if (isFunction_1.isFunction(_unsubscribe)) {
	            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
	            if (trial === errorObject_1.errorObject) {
	                hasErrors = true;
	                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
	                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
	            }
	        }
	        if (isArray_1.isArray(_subscriptions)) {
	            var index = -1;
	            var len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject_1.isObject(sub)) {
	                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
	                    if (trial === errorObject_1.errorObject) {
	                        hasErrors = true;
	                        errors = errors || [];
	                        var err = errorObject_1.errorObject.e;
	                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
	                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
	                        }
	                        else {
	                            errors.push(err);
	                        }
	                    }
	                }
	            }
	        }
	        if (hasErrors) {
	            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
	        }
	    };
	    /**
	     * Adds a tear down to be called during the unsubscribe() of this
	     * Subscription.
	     *
	     * If the tear down being added is a subscription that is already
	     * unsubscribed, is the same reference `add` is being called on, or is
	     * `Subscription.EMPTY`, it will not be added.
	     *
	     * If this subscription is already in an `closed` state, the passed
	     * tear down logic will be executed immediately.
	     *
	     * @param {TeardownLogic} teardown The additional logic to execute on
	     * teardown.
	     * @return {Subscription} Returns the Subscription used or created to be
	     * added to the inner subscriptions list. This Subscription can be used with
	     * `remove()` to remove the passed teardown logic from the inner subscriptions
	     * list.
	     */
	    Subscription.prototype.add = function (teardown) {
	        if (!teardown || (teardown === Subscription.EMPTY)) {
	            return Subscription.EMPTY;
	        }
	        if (teardown === this) {
	            return this;
	        }
	        var sub = teardown;
	        switch (typeof teardown) {
	            case 'function':
	                sub = new Subscription(teardown);
	            case 'object':
	                if (sub.closed || typeof sub.unsubscribe !== 'function') {
	                    return sub;
	                }
	                else if (this.closed) {
	                    sub.unsubscribe();
	                    return sub;
	                }
	                break;
	            default:
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	        }
	        var childSub = new ChildSubscription(sub, this);
	        this._subscriptions = this._subscriptions || [];
	        this._subscriptions.push(childSub);
	        return childSub;
	    };
	    /**
	     * Removes a Subscription from the internal list of subscriptions that will
	     * unsubscribe during the unsubscribe process of this Subscription.
	     * @param {Subscription} subscription The subscription to remove.
	     * @return {void}
	     */
	    Subscription.prototype.remove = function (subscription) {
	        // HACK: This might be redundant because of the logic in `add()`
	        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
	            return;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	exports.Subscription = Subscription;
	var ChildSubscription = (function (_super) {
	    __extends(ChildSubscription, _super);
	    function ChildSubscription(_innerSub, _parent) {
	        _super.call(this);
	        this._innerSub = _innerSub;
	        this._parent = _parent;
	    }
	    ChildSubscription.prototype._unsubscribe = function () {
	        var _a = this, _innerSub = _a._innerSub, _parent = _a._parent;
	        _parent.remove(this);
	        _innerSub.unsubscribe();
	    };
	    return ChildSubscription;
	}(Subscription));
	exports.ChildSubscription = ChildSubscription;
	function flattenUnsubscriptionErrors(errors) {
	    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
	}
	//# sourceMappingURL=Subscription.js.map

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArray.js.map

/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	function isObject(x) {
	    return x != null && typeof x === 'object';
	}
	exports.isObject = isObject;
	//# sourceMappingURL=isObject.js.map

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var errorObject_1 = __webpack_require__(16);
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    }
	    catch (e) {
	        errorObject_1.errorObject.e = e;
	        return errorObject_1.errorObject;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	exports.tryCatch = tryCatch;
	;
	//# sourceMappingURL=tryCatch.js.map

/***/ },
/* 16 */
/***/ function(module, exports) {

	"use strict";
	// typeof any so that it we don't have to cast when comparing a result to the error object
	exports.errorObject = { e: {} };
	//# sourceMappingURL=errorObject.js.map

/***/ },
/* 17 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when one or more errors have occurred during the
	 * `unsubscribe` of a {@link Subscription}.
	 */
	var UnsubscriptionError = (function (_super) {
	    __extends(UnsubscriptionError, _super);
	    function UnsubscriptionError(errors) {
	        _super.call(this);
	        this.errors = errors;
	        var err = Error.call(this, errors ?
	            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
	        this.name = err.name = 'UnsubscriptionError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return UnsubscriptionError;
	}(Error));
	exports.UnsubscriptionError = UnsubscriptionError;
	//# sourceMappingURL=UnsubscriptionError.js.map

/***/ },
/* 18 */
/***/ function(module, exports) {

	"use strict";
	exports.empty = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) { throw err; },
	    complete: function () { }
	};
	//# sourceMappingURL=Observer.js.map

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(6);
	var Symbol = root_1.root.Symbol;
	exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
	    Symbol.for('rxSubscriber') : '@@rxSubscriber';
	//# sourceMappingURL=rxSubscriber.js.map

/***/ },
/* 20 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an action is invalid because the object has been
	 * unsubscribed.
	 *
	 * @see {@link Subject}
	 * @see {@link BehaviorSubject}
	 *
	 * @class ObjectUnsubscribedError
	 */
	var ObjectUnsubscribedError = (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        var err = _super.call(this, 'object unsubscribed');
	        this.name = err.name = 'ObjectUnsubscribedError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return ObjectUnsubscribedError;
	}(Error));
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(12);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubjectSubscription = (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        _super.call(this);
	        this.subject = subject;
	        this.subscriber = subscriber;
	        this.closed = false;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription_1.Subscription));
	exports.SubjectSubscription = SubjectSubscription;
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.4.7
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(4), __webpack_require__(8), __webpack_require__(23)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Observable', '@angular/platform-browser'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}),global.ng.core,global.Rx,global.ng.platformBrowser));
	}(this, function (exports,_angular_core,rxjs_Observable,_angular_platformBrowser) { 'use strict';

	    /**
	     * A backend for http that uses the `XMLHttpRequest` browser API.
	     *
	     * Take care not to evaluate this in non-browser contexts.
	     *
	     * \@experimental
	     */
	    var BrowserXhr = (function () {
	        function BrowserXhr() {
	        }
	        /**
	         * @return {?}
	         */
	        BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };
	        BrowserXhr.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        BrowserXhr.ctorParameters = function () { return []; };
	        return BrowserXhr;
	    }());

	    var RequestMethod = {};
	    RequestMethod.Get = 0;
	    RequestMethod.Post = 1;
	    RequestMethod.Put = 2;
	    RequestMethod.Delete = 3;
	    RequestMethod.Options = 4;
	    RequestMethod.Head = 5;
	    RequestMethod.Patch = 6;
	    RequestMethod[RequestMethod.Get] = "Get";
	    RequestMethod[RequestMethod.Post] = "Post";
	    RequestMethod[RequestMethod.Put] = "Put";
	    RequestMethod[RequestMethod.Delete] = "Delete";
	    RequestMethod[RequestMethod.Options] = "Options";
	    RequestMethod[RequestMethod.Head] = "Head";
	    RequestMethod[RequestMethod.Patch] = "Patch";
	    var ReadyState = {};
	    ReadyState.Unsent = 0;
	    ReadyState.Open = 1;
	    ReadyState.HeadersReceived = 2;
	    ReadyState.Loading = 3;
	    ReadyState.Done = 4;
	    ReadyState.Cancelled = 5;
	    ReadyState[ReadyState.Unsent] = "Unsent";
	    ReadyState[ReadyState.Open] = "Open";
	    ReadyState[ReadyState.HeadersReceived] = "HeadersReceived";
	    ReadyState[ReadyState.Loading] = "Loading";
	    ReadyState[ReadyState.Done] = "Done";
	    ReadyState[ReadyState.Cancelled] = "Cancelled";
	    var ResponseType = {};
	    ResponseType.Basic = 0;
	    ResponseType.Cors = 1;
	    ResponseType.Default = 2;
	    ResponseType.Error = 3;
	    ResponseType.Opaque = 4;
	    ResponseType[ResponseType.Basic] = "Basic";
	    ResponseType[ResponseType.Cors] = "Cors";
	    ResponseType[ResponseType.Default] = "Default";
	    ResponseType[ResponseType.Error] = "Error";
	    ResponseType[ResponseType.Opaque] = "Opaque";
	    var ContentType = {};
	    ContentType.NONE = 0;
	    ContentType.JSON = 1;
	    ContentType.FORM = 2;
	    ContentType.FORM_DATA = 3;
	    ContentType.TEXT = 4;
	    ContentType.BLOB = 5;
	    ContentType.ARRAY_BUFFER = 6;
	    ContentType[ContentType.NONE] = "NONE";
	    ContentType[ContentType.JSON] = "JSON";
	    ContentType[ContentType.FORM] = "FORM";
	    ContentType[ContentType.FORM_DATA] = "FORM_DATA";
	    ContentType[ContentType.TEXT] = "TEXT";
	    ContentType[ContentType.BLOB] = "BLOB";
	    ContentType[ContentType.ARRAY_BUFFER] = "ARRAY_BUFFER";
	    var ResponseContentType = {};
	    ResponseContentType.Text = 0;
	    ResponseContentType.Json = 1;
	    ResponseContentType.ArrayBuffer = 2;
	    ResponseContentType.Blob = 3;
	    ResponseContentType[ResponseContentType.Text] = "Text";
	    ResponseContentType[ResponseContentType.Json] = "Json";
	    ResponseContentType[ResponseContentType.ArrayBuffer] = "ArrayBuffer";
	    ResponseContentType[ResponseContentType.Blob] = "Blob";

	    /**
	     * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
	     * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
	     *
	     * The only known difference between this `Headers` implementation and the spec is the
	     * lack of an `entries` method.
	     *
	     * ### Example
	     *
	     * ```
	     * import {Headers} from '\@angular/http';
	     *
	     * var firstHeaders = new Headers();
	     * firstHeaders.append('Content-Type', 'image/jpeg');
	     * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
	     *
	     * // Create headers from Plain Old JavaScript Object
	     * var secondHeaders = new Headers({
	     *   'X-My-Custom-Header': 'Angular'
	     * });
	     * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
	     *
	     * var thirdHeaders = new Headers(secondHeaders);
	     * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
	     * ```
	     *
	     * \@experimental
	     */
	    var Headers = (function () {
	        /**
	         * @param {?=} headers
	         */
	        function Headers(headers) {
	            var _this = this;
	            /** @internal header names are lower case */
	            this._headers = new Map();
	            /** @internal map lower case names to actual names */
	            this._normalizedNames = new Map();
	            if (!headers) {
	                return;
	            }
	            if (headers instanceof Headers) {
	                headers.forEach(function (values, name) {
	                    values.forEach(function (value) { return _this.append(name, value); });
	                });
	                return;
	            }
	            Object.keys(headers).forEach(function (name) {
	                var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];
	                _this.delete(name);
	                values.forEach(function (value) { return _this.append(name, value); });
	            });
	        }
	        /**
	         * Returns a new Headers instance from the given DOMString of Response Headers
	         * @param {?} headersString
	         * @return {?}
	         */
	        Headers.fromResponseHeaderString = function (headersString) {
	            var /** @type {?} */ headers = new Headers();
	            headersString.split('\n').forEach(function (line) {
	                var /** @type {?} */ index = line.indexOf(':');
	                if (index > 0) {
	                    var /** @type {?} */ name_1 = line.slice(0, index);
	                    var /** @type {?} */ value = line.slice(index + 1).trim();
	                    headers.set(name_1, value);
	                }
	            });
	            return headers;
	        };
	        /**
	         * Appends a header to existing list of header values for a given header name.
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        Headers.prototype.append = function (name, value) {
	            var /** @type {?} */ values = this.getAll(name);
	            if (values === null) {
	                this.set(name, value);
	            }
	            else {
	                values.push(value);
	            }
	        };
	        /**
	         * Deletes all header values for the given name.
	         * @param {?} name
	         * @return {?}
	         */
	        Headers.prototype.delete = function (name) {
	            var /** @type {?} */ lcName = name.toLowerCase();
	            this._normalizedNames.delete(lcName);
	            this._headers.delete(lcName);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        Headers.prototype.forEach = function (fn) {
	            var _this = this;
	            this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });
	        };
	        /**
	         * Returns first header that matches given name.
	         * @param {?} name
	         * @return {?}
	         */
	        Headers.prototype.get = function (name) {
	            var /** @type {?} */ values = this.getAll(name);
	            if (values === null) {
	                return null;
	            }
	            return values.length > 0 ? values[0] : null;
	        };
	        /**
	         * Checks for existence of header by given name.
	         * @param {?} name
	         * @return {?}
	         */
	        Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };
	        /**
	         * Returns the names of the headers
	         * @return {?}
	         */
	        Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };
	        /**
	         * Sets or overrides header value for given name.
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        Headers.prototype.set = function (name, value) {
	            if (Array.isArray(value)) {
	                if (value.length) {
	                    this._headers.set(name.toLowerCase(), [value.join(',')]);
	                }
	            }
	            else {
	                this._headers.set(name.toLowerCase(), [value]);
	            }
	            this.mayBeSetNormalizedName(name);
	        };
	        /**
	         * Returns values of all headers.
	         * @return {?}
	         */
	        Headers.prototype.values = function () { return Array.from(this._headers.values()); };
	        /**
	         * @return {?}
	         */
	        Headers.prototype.toJSON = function () {
	            var _this = this;
	            var /** @type {?} */ serialized = {};
	            this._headers.forEach(function (values, name) {
	                var /** @type {?} */ split = [];
	                values.forEach(function (v) { return split.push.apply(split, v.split(',')); });
	                serialized[_this._normalizedNames.get(name)] = split;
	            });
	            return serialized;
	        };
	        /**
	         * Returns list of header values for a given name.
	         * @param {?} name
	         * @return {?}
	         */
	        Headers.prototype.getAll = function (name) {
	            return this.has(name) ? this._headers.get(name.toLowerCase()) : null;
	        };
	        /**
	         * This method is not implemented.
	         * @return {?}
	         */
	        Headers.prototype.entries = function () { throw new Error('"entries" method is not implemented on Headers class'); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Headers.prototype.mayBeSetNormalizedName = function (name) {
	            var /** @type {?} */ lcName = name.toLowerCase();
	            if (!this._normalizedNames.has(lcName)) {
	                this._normalizedNames.set(lcName, name);
	            }
	        };
	        return Headers;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Creates a response options object to be optionally provided when instantiating a
	     * {\@link Response}.
	     *
	     * This class is based on the `ResponseInit` description in the [Fetch
	     * Spec](https://fetch.spec.whatwg.org/#responseinit).
	     *
	     * All values are null by default. Typical defaults can be found in the
	     * {\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.
	     *
	     * This class may be used in tests to build {\@link Response Responses} for
	     * mock responses (see {\@link MockBackend}).
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))
	     *
	     * ```typescript
	     * import {ResponseOptions, Response} from '\@angular/http';
	     *
	     * var options = new ResponseOptions({
	     *   body: '{"name":"Jeff"}'
	     * });
	     * var res = new Response(options);
	     *
	     * console.log('res.json():', res.json()); // Object {name: "Jeff"}
	     * ```
	     *
	     * \@experimental
	     */
	    var ResponseOptions = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function ResponseOptions(_a) {
	            var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
	            this.body = body != null ? body : null;
	            this.status = status != null ? status : null;
	            this.headers = headers != null ? headers : null;
	            this.statusText = statusText != null ? statusText : null;
	            this.type = type != null ? type : null;
	            this.url = url != null ? url : null;
	        }
	        /**
	         * Creates a copy of the `ResponseOptions` instance, using the optional input as values to
	         * override
	         * existing values. This method will not change the values of the instance on which it is being
	         * called.
	         *
	         * This may be useful when sharing a base `ResponseOptions` object inside tests,
	         * where certain properties may change from test to test.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))
	         *
	         * ```typescript
	         * import {ResponseOptions, Response} from '\@angular/http';
	         *
	         * var options = new ResponseOptions({
	         *   body: {name: 'Jeff'}
	         * });
	         * var res = new Response(options.merge({
	         *   url: 'https://google.com'
	         * }));
	         * console.log('options.url:', options.url); // null
	         * console.log('res.json():', res.json()); // Object {name: "Jeff"}
	         * console.log('res.url:', res.url); // https://google.com
	         * ```
	         * @param {?=} options
	         * @return {?}
	         */
	        ResponseOptions.prototype.merge = function (options) {
	            return new ResponseOptions({
	                body: options && options.body != null ? options.body : this.body,
	                status: options && options.status != null ? options.status : this.status,
	                headers: options && options.headers != null ? options.headers : this.headers,
	                statusText: options && options.statusText != null ? options.statusText : this.statusText,
	                type: options && options.type != null ? options.type : this.type,
	                url: options && options.url != null ? options.url : this.url,
	            });
	        };
	        return ResponseOptions;
	    }());
	    /**
	     * Subclass of {\@link ResponseOptions}, with default values.
	     *
	     * Default values:
	     *  * status: 200
	     *  * headers: empty {\@link Headers} object
	     *
	     * This class could be extended and bound to the {\@link ResponseOptions} class
	     * when configuring an {\@link Injector}, in order to override the default options
	     * used by {\@link Http} to create {\@link Response Responses}.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))
	     *
	     * ```typescript
	     * import {provide} from '\@angular/core';
	     * import {bootstrap} from '\@angular/platform-browser/browser';
	     * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from
	     * '\@angular/http';
	     * import {App} from './myapp';
	     *
	     * class MyOptions extends BaseResponseOptions {
	     *   headers:Headers = new Headers({network: 'github'});
	     * }
	     *
	     * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);
	     * ```
	     *
	     * The options could also be extended when manually creating a {\@link Response}
	     * object.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))
	     *
	     * ```
	     * import {BaseResponseOptions, Response} from '\@angular/http';
	     *
	     * var options = new BaseResponseOptions();
	     * var res = new Response(options.merge({
	     *   body: 'Angular',
	     *   headers: new Headers({framework: 'angular'})
	     * }));
	     * console.log('res.headers.get("framework"):', res.headers.get('framework')); // angular
	     * console.log('res.text():', res.text()); // Angular;
	     * ```
	     *
	     * \@experimental
	     */
	    var BaseResponseOptions = (function (_super) {
	        __extends$1(BaseResponseOptions, _super);
	        function BaseResponseOptions() {
	            _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() });
	        }
	        BaseResponseOptions.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        BaseResponseOptions.ctorParameters = function () { return []; };
	        return BaseResponseOptions;
	    }(ResponseOptions));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Abstract class from which real backends are derived.
	     *
	     * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
	     * {\@link Request}.
	     *
	     * \@experimental
	     * @abstract
	     */
	    var ConnectionBackend = (function () {
	        function ConnectionBackend() {
	        }
	        /**
	         * @abstract
	         * @param {?} request
	         * @return {?}
	         */
	        ConnectionBackend.prototype.createConnection = function (request) { };
	        return ConnectionBackend;
	    }());
	    /**
	     * Abstract class from which real connections are derived.
	     *
	     * \@experimental
	     * @abstract
	     */
	    var Connection = (function () {
	        function Connection() {
	        }
	        return Connection;
	    }());
	    /**
	     * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.
	     *
	     * \@experimental
	     * @abstract
	     */
	    var XSRFStrategy = (function () {
	        function XSRFStrategy() {
	        }
	        /**
	         * @abstract
	         * @param {?} req
	         * @return {?}
	         */
	        XSRFStrategy.prototype.configureRequest = function (req) { };
	        return XSRFStrategy;
	    }());

	    /**
	     * @param {?} method
	     * @return {?}
	     */
	    function normalizeMethodName(method) {
	        if (typeof method !== 'string')
	            return method;
	        switch (method.toUpperCase()) {
	            case 'GET':
	                return RequestMethod.Get;
	            case 'POST':
	                return RequestMethod.Post;
	            case 'PUT':
	                return RequestMethod.Put;
	            case 'DELETE':
	                return RequestMethod.Delete;
	            case 'OPTIONS':
	                return RequestMethod.Options;
	            case 'HEAD':
	                return RequestMethod.Head;
	            case 'PATCH':
	                return RequestMethod.Patch;
	        }
	        throw new Error("Invalid request method. The method \"" + method + "\" is not supported.");
	    }
	    var /** @type {?} */ isSuccess = function (status) { return (status >= 200 && status < 300); };
	    /**
	     * @param {?} xhr
	     * @return {?}
	     */
	    function getResponseURL(xhr) {
	        if ('responseURL' in xhr) {
	            return xhr.responseURL;
	        }
	        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
	            return xhr.getResponseHeader('X-Request-URL');
	        }
	        return;
	    }
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function stringToArrayBuffer(input) {
	        var /** @type {?} */ view = new Uint16Array(input.length);
	        for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {
	            view[i] = input.charCodeAt(i);
	        }
	        return view.buffer;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     * @param {?=} rawParams
	     * @return {?}
	     */
	    function paramParser(rawParams) {
	        if (rawParams === void 0) { rawParams = ''; }
	        var /** @type {?} */ map = new Map();
	        if (rawParams.length > 0) {
	            var /** @type {?} */ params = rawParams.split('&');
	            params.forEach(function (param) {
	                var /** @type {?} */ eqIdx = param.indexOf('=');
	                var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];
	                var /** @type {?} */ list = map.get(key) || [];
	                list.push(val);
	                map.set(key, list);
	            });
	        }
	        return map;
	    }
	    /**
	     * \@experimental
	     *
	     */
	    var QueryEncoder = (function () {
	        function QueryEncoder() {
	        }
	        /**
	         * @param {?} k
	         * @return {?}
	         */
	        QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };
	        /**
	         * @param {?} v
	         * @return {?}
	         */
	        QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };
	        return QueryEncoder;
	    }());
	    /**
	     * @param {?} v
	     * @return {?}
	     */
	    function standardEncoding(v) {
	        return encodeURIComponent(v)
	            .replace(/%40/gi, '@')
	            .replace(/%3A/gi, ':')
	            .replace(/%24/gi, '$')
	            .replace(/%2C/gi, ',')
	            .replace(/%3B/gi, ';')
	            .replace(/%2B/gi, '+')
	            .replace(/%3D/gi, '=')
	            .replace(/%3F/gi, '?')
	            .replace(/%2F/gi, '/');
	    }
	    /**
	     * Map-like representation of url search parameters, based on
	     * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,
	     * with several extensions for merging URLSearchParams objects:
	     *   - setAll()
	     *   - appendAll()
	     *   - replaceAll()
	     *
	     * This class accepts an optional second parameter of ${\@link QueryEncoder},
	     * which is used to serialize parameters before making a request. By default,
	     * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,
	     * and then un-encodes certain characters that are allowed to be part of the query
	     * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.
	     *
	     * These are the characters that are not encoded: `! $ \' ( ) * + , ; A 9 - . _ ~ ? /`
	     *
	     * If the set of allowed query characters is not acceptable for a particular backend,
	     * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.
	     *
	     * ```
	     * import {URLSearchParams, QueryEncoder} from '\@angular/http';
	     * class MyQueryEncoder extends QueryEncoder {
	     *   encodeKey(k: string): string {
	     *     return myEncodingFunction(k);
	     *   }
	     *
	     *   encodeValue(v: string): string {
	     *     return myEncodingFunction(v);
	     *   }
	     * }
	     *
	     * let params = new URLSearchParams('', new MyQueryEncoder());
	     * ```
	     * \@experimental
	     */
	    var URLSearchParams = (function () {
	        /**
	         * @param {?=} rawParams
	         * @param {?=} queryEncoder
	         */
	        function URLSearchParams(rawParams, queryEncoder) {
	            if (rawParams === void 0) { rawParams = ''; }
	            if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }
	            this.rawParams = rawParams;
	            this.queryEncoder = queryEncoder;
	            this.paramsMap = paramParser(rawParams);
	        }
	        /**
	         * @return {?}
	         */
	        URLSearchParams.prototype.clone = function () {
	            var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);
	            clone.appendAll(this);
	            return clone;
	        };
	        /**
	         * @param {?} param
	         * @return {?}
	         */
	        URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };
	        /**
	         * @param {?} param
	         * @return {?}
	         */
	        URLSearchParams.prototype.get = function (param) {
	            var /** @type {?} */ storedParam = this.paramsMap.get(param);
	            return Array.isArray(storedParam) ? storedParam[0] : null;
	        };
	        /**
	         * @param {?} param
	         * @return {?}
	         */
	        URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };
	        /**
	         * @param {?} param
	         * @param {?} val
	         * @return {?}
	         */
	        URLSearchParams.prototype.set = function (param, val) {
	            if (val === void 0 || val === null) {
	                this.delete(param);
	                return;
	            }
	            var /** @type {?} */ list = this.paramsMap.get(param) || [];
	            list.length = 0;
	            list.push(val);
	            this.paramsMap.set(param, list);
	        };
	        /**
	         * @param {?} searchParams
	         * @return {?}
	         */
	        URLSearchParams.prototype.setAll = function (searchParams) {
	            var _this = this;
	            searchParams.paramsMap.forEach(function (value, param) {
	                var /** @type {?} */ list = _this.paramsMap.get(param) || [];
	                list.length = 0;
	                list.push(value[0]);
	                _this.paramsMap.set(param, list);
	            });
	        };
	        /**
	         * @param {?} param
	         * @param {?} val
	         * @return {?}
	         */
	        URLSearchParams.prototype.append = function (param, val) {
	            if (val === void 0 || val === null)
	                return;
	            var /** @type {?} */ list = this.paramsMap.get(param) || [];
	            list.push(val);
	            this.paramsMap.set(param, list);
	        };
	        /**
	         * @param {?} searchParams
	         * @return {?}
	         */
	        URLSearchParams.prototype.appendAll = function (searchParams) {
	            var _this = this;
	            searchParams.paramsMap.forEach(function (value, param) {
	                var /** @type {?} */ list = _this.paramsMap.get(param) || [];
	                for (var /** @type {?} */ i = 0; i < value.length; ++i) {
	                    list.push(value[i]);
	                }
	                _this.paramsMap.set(param, list);
	            });
	        };
	        /**
	         * @param {?} searchParams
	         * @return {?}
	         */
	        URLSearchParams.prototype.replaceAll = function (searchParams) {
	            var _this = this;
	            searchParams.paramsMap.forEach(function (value, param) {
	                var /** @type {?} */ list = _this.paramsMap.get(param) || [];
	                list.length = 0;
	                for (var /** @type {?} */ i = 0; i < value.length; ++i) {
	                    list.push(value[i]);
	                }
	                _this.paramsMap.set(param, list);
	            });
	        };
	        /**
	         * @return {?}
	         */
	        URLSearchParams.prototype.toString = function () {
	            var _this = this;
	            var /** @type {?} */ paramsList = [];
	            this.paramsMap.forEach(function (values, k) {
	                values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });
	            });
	            return paramsList.join('&');
	        };
	        /**
	         * @param {?} param
	         * @return {?}
	         */
	        URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };
	        return URLSearchParams;
	    }());

	    /**
	     * HTTP request body used by both {\@link Request} and {\@link Response}
	     * https://fetch.spec.whatwg.org/#body
	     * @abstract
	     */
	    var Body = (function () {
	        function Body() {
	        }
	        /**
	         * Attempts to return body as parsed `JSON` object, or raises an exception.
	         * @return {?}
	         */
	        Body.prototype.json = function () {
	            if (typeof this._body === 'string') {
	                return JSON.parse(/** @type {?} */ (this._body));
	            }
	            if (this._body instanceof ArrayBuffer) {
	                return JSON.parse(this.text());
	            }
	            return this._body;
	        };
	        /**
	         * Returns the body as a string, presuming `toString()` can be called on the response body.
	         * @return {?}
	         */
	        Body.prototype.text = function () {
	            if (this._body instanceof URLSearchParams) {
	                return this._body.toString();
	            }
	            if (this._body instanceof ArrayBuffer) {
	                return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));
	            }
	            if (this._body == null) {
	                return '';
	            }
	            if (typeof this._body === 'object') {
	                return JSON.stringify(this._body, null, 2);
	            }
	            return this._body.toString();
	        };
	        /**
	         * Return the body as an ArrayBuffer
	         * @return {?}
	         */
	        Body.prototype.arrayBuffer = function () {
	            if (this._body instanceof ArrayBuffer) {
	                return (this._body);
	            }
	            return stringToArrayBuffer(this.text());
	        };
	        /**
	         * Returns the request's body as a Blob, assuming that body exists.
	         * @return {?}
	         */
	        Body.prototype.blob = function () {
	            if (this._body instanceof Blob) {
	                return (this._body);
	            }
	            if (this._body instanceof ArrayBuffer) {
	                return new Blob([this._body]);
	            }
	            throw new Error('The request body isn\'t either a blob or an array buffer');
	        };
	        return Body;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Creates `Response` instances from provided values.
	     *
	     * Though this object isn't
	     * usually instantiated by end-users, it is the primary object interacted with when it comes time to
	     * add data to a view.
	     *
	     * ### Example
	     *
	     * ```
	     * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
	     * ```
	     *
	     * The Response's interface is inspired by the Response constructor defined in the [Fetch
	     * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
	     * can be accessed many times. There are other differences in the implementation, but this is the
	     * most significant.
	     *
	     * \@experimental
	     */
	    var Response = (function (_super) {
	        __extends$2(Response, _super);
	        /**
	         * @param {?} responseOptions
	         */
	        function Response(responseOptions) {
	            _super.call(this);
	            this._body = responseOptions.body;
	            this.status = responseOptions.status;
	            this.ok = (this.status >= 200 && this.status <= 299);
	            this.statusText = responseOptions.statusText;
	            this.headers = responseOptions.headers;
	            this.type = responseOptions.type;
	            this.url = responseOptions.url;
	        }
	        /**
	         * @return {?}
	         */
	        Response.prototype.toString = function () {
	            return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
	        };
	        return Response;
	    }(Body));

	    var /** @type {?} */ _nextRequestId = 0;
	    var /** @type {?} */ JSONP_HOME = '__ng_jsonp__';
	    var /** @type {?} */ _jsonpConnections = null;
	    /**
	     * @return {?}
	     */
	    function _getJsonpConnections() {
	        var /** @type {?} */ w = typeof window == 'object' ? window : {};
	        if (_jsonpConnections === null) {
	            _jsonpConnections = w[JSONP_HOME] = {};
	        }
	        return _jsonpConnections;
	    }
	    var BrowserJsonp = (function () {
	        function BrowserJsonp() {
	        }
	        /**
	         * @param {?} url
	         * @return {?}
	         */
	        BrowserJsonp.prototype.build = function (url) {
	            var /** @type {?} */ node = document.createElement('script');
	            node.src = url;
	            return node;
	        };
	        /**
	         * @return {?}
	         */
	        BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++; };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        BrowserJsonp.prototype.requestCallback = function (id) { return "" + JSONP_HOME + id + "_finished"; };
	        /**
	         * @param {?} id
	         * @param {?} connection
	         * @return {?}
	         */
	        BrowserJsonp.prototype.exposeConnection = function (id, connection) {
	            var /** @type {?} */ connections = _getJsonpConnections();
	            connections[id] = connection;
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        BrowserJsonp.prototype.removeConnection = function (id) {
	            var /** @type {?} */ connections = _getJsonpConnections();
	            connections[id] = null;
	        };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserJsonp.prototype.cleanup = function (node) {
	            if (node.parentNode) {
	                node.parentNode.removeChild(/** @type {?} */ ((node)));
	            }
	        };
	        BrowserJsonp.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        BrowserJsonp.ctorParameters = function () { return []; };
	        return BrowserJsonp;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
	    var /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
	    /**
	     * Abstract base class for an in-flight JSONP request.
	     *
	     * \@experimental
	     * @abstract
	     */
	    var JSONPConnection = (function () {
	        function JSONPConnection() {
	        }
	        /**
	         * Callback called when the JSONP request completes, to notify the application
	         * of the new data.
	         * @abstract
	         * @param {?=} data
	         * @return {?}
	         */
	        JSONPConnection.prototype.finished = function (data) { };
	        return JSONPConnection;
	    }());
	    var JSONPConnection_ = (function (_super) {
	        __extends(JSONPConnection_, _super);
	        /**
	         * @param {?} req
	         * @param {?} _dom
	         * @param {?=} baseResponseOptions
	         */
	        function JSONPConnection_(req, _dom, baseResponseOptions) {
	            var _this = this;
	            _super.call(this);
	            this._dom = _dom;
	            this.baseResponseOptions = baseResponseOptions;
	            this._finished = false;
	            if (req.method !== RequestMethod.Get) {
	                throw new TypeError(JSONP_ERR_WRONG_METHOD);
	            }
	            this.request = req;
	            this.response = new rxjs_Observable.Observable(function (responseObserver) {
	                _this.readyState = ReadyState.Loading;
	                var id = _this._id = _dom.nextRequestID();
	                _dom.exposeConnection(id, _this);
	                // Workaround Dart
	                // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);
	                var callback = _dom.requestCallback(_this._id);
	                var url = req.url;
	                if (url.indexOf('=JSONP_CALLBACK&') > -1) {
	                    url = url.replace('=JSONP_CALLBACK&', "=" + callback + "&");
	                }
	                else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
	                    url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
	                }
	                var script = _this._script = _dom.build(url);
	                var onLoad = function (event) {
	                    if (_this.readyState === ReadyState.Cancelled)
	                        return;
	                    _this.readyState = ReadyState.Done;
	                    _dom.cleanup(script);
	                    if (!_this._finished) {
	                        var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });
	                        if (baseResponseOptions) {
	                            responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
	                        }
	                        responseObserver.error(new Response(responseOptions_1));
	                        return;
	                    }
	                    var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });
	                    if (_this.baseResponseOptions) {
	                        responseOptions = _this.baseResponseOptions.merge(responseOptions);
	                    }
	                    responseObserver.next(new Response(responseOptions));
	                    responseObserver.complete();
	                };
	                var onError = function (error) {
	                    if (_this.readyState === ReadyState.Cancelled)
	                        return;
	                    _this.readyState = ReadyState.Done;
	                    _dom.cleanup(script);
	                    var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });
	                    if (baseResponseOptions) {
	                        responseOptions = baseResponseOptions.merge(responseOptions);
	                    }
	                    responseObserver.error(new Response(responseOptions));
	                };
	                script.addEventListener('load', onLoad);
	                script.addEventListener('error', onError);
	                _dom.send(script);
	                return function () {
	                    _this.readyState = ReadyState.Cancelled;
	                    script.removeEventListener('load', onLoad);
	                    script.removeEventListener('error', onError);
	                    _this._dom.cleanup(script);
	                };
	            });
	        }
	        /**
	         * @param {?=} data
	         * @return {?}
	         */
	        JSONPConnection_.prototype.finished = function (data) {
	            // Don't leak connections
	            this._finished = true;
	            this._dom.removeConnection(this._id);
	            if (this.readyState === ReadyState.Cancelled)
	                return;
	            this._responseData = data;
	        };
	        return JSONPConnection_;
	    }(JSONPConnection));
	    /**
	     * A {\@link ConnectionBackend} that uses the JSONP strategy of making requests.
	     *
	     * \@experimental
	     * @abstract
	     */
	    var JSONPBackend = (function (_super) {
	        __extends(JSONPBackend, _super);
	        function JSONPBackend() {
	            _super.apply(this, arguments);
	        }
	        return JSONPBackend;
	    }(ConnectionBackend));
	    var JSONPBackend_ = (function (_super) {
	        __extends(JSONPBackend_, _super);
	        /**
	         * @param {?} _browserJSONP
	         * @param {?} _baseResponseOptions
	         */
	        function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
	            _super.call(this);
	            this._browserJSONP = _browserJSONP;
	            this._baseResponseOptions = _baseResponseOptions;
	        }
	        /**
	         * @param {?} request
	         * @return {?}
	         */
	        JSONPBackend_.prototype.createConnection = function (request) {
	            return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
	        };
	        JSONPBackend_.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        JSONPBackend_.ctorParameters = function () { return [
	            { type: BrowserJsonp, },
	            { type: ResponseOptions, },
	        ]; };
	        return JSONPBackend_;
	    }(JSONPBackend));

	    var /** @type {?} */ XSSI_PREFIX = /^\)\]\}',?\n/;
	    /**
	     * Creates connections using `XMLHttpRequest`. Given a fully-qualified
	     * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
	     * request.
	     *
	     * This class would typically not be created or interacted with directly inside applications, though
	     * the {\@link MockConnection} may be interacted with in tests.
	     *
	     * \@experimental
	     */
	    var XHRConnection = (function () {
	        /**
	         * @param {?} req
	         * @param {?} browserXHR
	         * @param {?=} baseResponseOptions
	         */
	        function XHRConnection(req, browserXHR, baseResponseOptions) {
	            var _this = this;
	            this.request = req;
	            this.response = new rxjs_Observable.Observable(function (responseObserver) {
	                var _xhr = browserXHR.build();
	                _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);
	                if (req.withCredentials != null) {
	                    _xhr.withCredentials = req.withCredentials;
	                }
	                // load event handler
	                var onLoad = function () {
	                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	                    var status = _xhr.status === 1223 ? 204 : _xhr.status;
	                    var body = null;
	                    // HTTP 204 means no content
	                    if (status !== 204) {
	                        // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	                        // response/responseType properties were introduced in ResourceLoader Level2 spec
	                        // (supported by IE10)
	                        body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;
	                        // Implicitly strip a potential XSSI prefix.
	                        if (typeof body === 'string') {
	                            body = body.replace(XSSI_PREFIX, '');
	                        }
	                    }
	                    // fix status code when it is 0 (0 status is undocumented).
	                    // Occurs when accessing file resources or on Android 4.1 stock browser
	                    // while retrieving files from application cache.
	                    if (status === 0) {
	                        status = body ? 200 : 0;
	                    }
	                    var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
	                    // IE 9 does not provide the way to get URL of response
	                    var url = getResponseURL(_xhr) || req.url;
	                    var statusText = _xhr.statusText || 'OK';
	                    var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });
	                    if (baseResponseOptions != null) {
	                        responseOptions = baseResponseOptions.merge(responseOptions);
	                    }
	                    var response = new Response(responseOptions);
	                    response.ok = isSuccess(status);
	                    if (response.ok) {
	                        responseObserver.next(response);
	                        // TODO(gdi2290): defer complete if array buffer until done
	                        responseObserver.complete();
	                        return;
	                    }
	                    responseObserver.error(response);
	                };
	                // error event handler
	                var onError = function (err) {
	                    var responseOptions = new ResponseOptions({
	                        body: err,
	                        type: ResponseType.Error,
	                        status: _xhr.status,
	                        statusText: _xhr.statusText,
	                    });
	                    if (baseResponseOptions != null) {
	                        responseOptions = baseResponseOptions.merge(responseOptions);
	                    }
	                    responseObserver.error(new Response(responseOptions));
	                };
	                _this.setDetectedContentType(req, _xhr);
	                if (req.headers == null) {
	                    req.headers = new Headers();
	                }
	                if (!req.headers.has('Accept')) {
	                    req.headers.append('Accept', 'application/json, text/plain, */*');
	                }
	                req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });
	                // Select the correct buffer type to store the response
	                if (req.responseType != null && _xhr.responseType != null) {
	                    switch (req.responseType) {
	                        case ResponseContentType.ArrayBuffer:
	                            _xhr.responseType = 'arraybuffer';
	                            break;
	                        case ResponseContentType.Json:
	                            _xhr.responseType = 'json';
	                            break;
	                        case ResponseContentType.Text:
	                            _xhr.responseType = 'text';
	                            break;
	                        case ResponseContentType.Blob:
	                            _xhr.responseType = 'blob';
	                            break;
	                        default:
	                            throw new Error('The selected responseType is not supported');
	                    }
	                }
	                _xhr.addEventListener('load', onLoad);
	                _xhr.addEventListener('error', onError);
	                _xhr.send(_this.request.getBody());
	                return function () {
	                    _xhr.removeEventListener('load', onLoad);
	                    _xhr.removeEventListener('error', onError);
	                    _xhr.abort();
	                };
	            });
	        }
	        /**
	         * @param {?} req
	         * @param {?} _xhr
	         * @return {?}
	         */
	        XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {
	            // Skip if a custom Content-Type header is provided
	            if (req.headers != null && req.headers.get('Content-Type') != null) {
	                return;
	            }
	            // Set the detected content type
	            switch (req.contentType) {
	                case ContentType.NONE:
	                    break;
	                case ContentType.JSON:
	                    _xhr.setRequestHeader('content-type', 'application/json');
	                    break;
	                case ContentType.FORM:
	                    _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	                    break;
	                case ContentType.TEXT:
	                    _xhr.setRequestHeader('content-type', 'text/plain');
	                    break;
	                case ContentType.BLOB:
	                    var /** @type {?} */ blob = req.blob();
	                    if (blob.type) {
	                        _xhr.setRequestHeader('content-type', blob.type);
	                    }
	                    break;
	            }
	        };
	        return XHRConnection;
	    }());
	    /**
	     * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application
	     * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)
	     * for more information on XSRF.
	     *
	     * Applications can configure custom cookie and header names by binding an instance of this class
	     * with different `cookieName` and `headerName` values. See the main HTTP documentation for more
	     * details.
	     *
	     * \@experimental
	     */
	    var CookieXSRFStrategy = (function () {
	        /**
	         * @param {?=} _cookieName
	         * @param {?=} _headerName
	         */
	        function CookieXSRFStrategy(_cookieName, _headerName) {
	            if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }
	            if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }
	            this._cookieName = _cookieName;
	            this._headerName = _headerName;
	        }
	        /**
	         * @param {?} req
	         * @return {?}
	         */
	        CookieXSRFStrategy.prototype.configureRequest = function (req) {
	            var /** @type {?} */ xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);
	            if (xsrfToken) {
	                req.headers.set(this._headerName, xsrfToken);
	            }
	        };
	        return CookieXSRFStrategy;
	    }());
	    /**
	     * Creates {\@link XHRConnection} instances.
	     *
	     * This class would typically not be used by end users, but could be
	     * overridden if a different backend implementation should be used,
	     * such as in a node backend.
	     *
	     * ### Example
	     *
	     * ```
	     * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\@angular/http';
	     * \@Component({
	     *   viewProviders: [
	     *     HTTP_PROVIDERS,
	     *     {provide: Http, useFactory: (backend, options) => {
	     *       return new Http(backend, options);
	     *     }, deps: [MyNodeBackend, BaseRequestOptions]}]
	     * })
	     * class MyComponent {
	     *   constructor(http:Http) {
	     *     http.request('people.json').subscribe(res => this.people = res.json());
	     *   }
	     * }
	     * ```
	     * \@experimental
	     */
	    var XHRBackend = (function () {
	        /**
	         * @param {?} _browserXHR
	         * @param {?} _baseResponseOptions
	         * @param {?} _xsrfStrategy
	         */
	        function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
	            this._browserXHR = _browserXHR;
	            this._baseResponseOptions = _baseResponseOptions;
	            this._xsrfStrategy = _xsrfStrategy;
	        }
	        /**
	         * @param {?} request
	         * @return {?}
	         */
	        XHRBackend.prototype.createConnection = function (request) {
	            this._xsrfStrategy.configureRequest(request);
	            return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
	        };
	        XHRBackend.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        XHRBackend.ctorParameters = function () { return [
	            { type: BrowserXhr, },
	            { type: ResponseOptions, },
	            { type: XSRFStrategy, },
	        ]; };
	        return XHRBackend;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Creates a request options object to be optionally provided when instantiating a
	     * {\@link Request}.
	     *
	     * This class is based on the `RequestInit` description in the [Fetch
	     * Spec](https://fetch.spec.whatwg.org/#requestinit).
	     *
	     * All values are null by default. Typical defaults can be found in the {\@link BaseRequestOptions}
	     * class, which sub-classes `RequestOptions`.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))
	     *
	     * ```typescript
	     * import {RequestOptions, Request, RequestMethod} from '\@angular/http';
	     *
	     * var options = new RequestOptions({
	     *   method: RequestMethod.Post,
	     *   url: 'https://google.com'
	     * });
	     * var req = new Request(options);
	     * console.log('req.method:', RequestMethod[req.method]); // Post
	     * console.log('options.url:', options.url); // https://google.com
	     * ```
	     *
	     * \@experimental
	     */
	    var RequestOptions = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function RequestOptions(_a) {
	            var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, withCredentials = _b.withCredentials, responseType = _b.responseType;
	            this.method = method != null ? normalizeMethodName(method) : null;
	            this.headers = headers != null ? headers : null;
	            this.body = body != null ? body : null;
	            this.url = url != null ? url : null;
	            this.search =
	                search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;
	            this.withCredentials = withCredentials != null ? withCredentials : null;
	            this.responseType = responseType != null ? responseType : null;
	        }
	        /**
	         * Creates a copy of the `RequestOptions` instance, using the optional input as values to override
	         * existing values. This method will not change the values of the instance on which it is being
	         * called.
	         *
	         * Note that `headers` and `search` will override existing values completely if present in
	         * the `options` object. If these values should be merged, it should be done prior to calling
	         * `merge` on the `RequestOptions` instance.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))
	         *
	         * ```typescript
	         * import {RequestOptions, Request, RequestMethod} from '\@angular/http';
	         *
	         * var options = new RequestOptions({
	         *   method: RequestMethod.Post
	         * });
	         * var req = new Request(options.merge({
	         *   url: 'https://google.com'
	         * }));
	         * console.log('req.method:', RequestMethod[req.method]); // Post
	         * console.log('options.url:', options.url); // null
	         * console.log('req.url:', req.url); // https://google.com
	         * ```
	         * @param {?=} options
	         * @return {?}
	         */
	        RequestOptions.prototype.merge = function (options) {
	            return new RequestOptions({
	                method: options && options.method != null ? options.method : this.method,
	                headers: options && options.headers != null ? options.headers : new Headers(this.headers),
	                body: options && options.body != null ? options.body : this.body,
	                url: options && options.url != null ? options.url : this.url,
	                search: options && options.search != null ?
	                    (typeof options.search === 'string' ? new URLSearchParams(options.search) :
	                        options.search.clone()) :
	                    this.search,
	                withCredentials: options && options.withCredentials != null ? options.withCredentials :
	                    this.withCredentials,
	                responseType: options && options.responseType != null ? options.responseType :
	                    this.responseType
	            });
	        };
	        return RequestOptions;
	    }());
	    /**
	     * Subclass of {\@link RequestOptions}, with default values.
	     *
	     * Default values:
	     *  * method: {\@link RequestMethod RequestMethod.Get}
	     *  * headers: empty {\@link Headers} object
	     *
	     * This class could be extended and bound to the {\@link RequestOptions} class
	     * when configuring an {\@link Injector}, in order to override the default options
	     * used by {\@link Http} to create and send {\@link Request Requests}.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))
	     *
	     * ```typescript
	     * import {provide} from '\@angular/core';
	     * import {bootstrap} from '\@angular/platform-browser/browser';
	     * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '\@angular/http';
	     * import {App} from './myapp';
	     *
	     * class MyOptions extends BaseRequestOptions {
	     *   search: string = 'coreTeam=true';
	     * }
	     *
	     * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);
	     * ```
	     *
	     * The options could also be extended when manually creating a {\@link Request}
	     * object.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))
	     *
	     * ```
	     * import {BaseRequestOptions, Request, RequestMethod} from '\@angular/http';
	     *
	     * var options = new BaseRequestOptions();
	     * var req = new Request(options.merge({
	     *   method: RequestMethod.Post,
	     *   url: 'https://google.com'
	     * }));
	     * console.log('req.method:', RequestMethod[req.method]); // Post
	     * console.log('options.url:', options.url); // null
	     * console.log('req.url:', req.url); // https://google.com
	     * ```
	     *
	     * \@experimental
	     */
	    var BaseRequestOptions = (function (_super) {
	        __extends$3(BaseRequestOptions, _super);
	        function BaseRequestOptions() {
	            _super.call(this, { method: RequestMethod.Get, headers: new Headers() });
	        }
	        BaseRequestOptions.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        BaseRequestOptions.ctorParameters = function () { return []; };
	        return BaseRequestOptions;
	    }(RequestOptions));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Creates `Request` instances from provided values.
	     *
	     * The Request's interface is inspired by the Request constructor defined in the [Fetch
	     * Spec](https://fetch.spec.whatwg.org/#request-class),
	     * but is considered a static value whose body can be accessed many times. There are other
	     * differences in the implementation, but this is the most significant.
	     *
	     * `Request` instances are typically created by higher-level classes, like {\@link Http} and
	     * {\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.
	     * One such example is when creating services that wrap higher-level services, like {\@link Http},
	     * where it may be useful to generate a `Request` with arbitrary headers and search params.
	     *
	     * ```typescript
	     * import {Injectable, Injector} from '\@angular/core';
	     * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\@angular/http';
	     *
	     * \@Injectable()
	     * class AutoAuthenticator {
	     *   constructor(public http:Http) {}
	     *   request(url:string) {
	     *     return this.http.request(new Request({
	     *       method: RequestMethod.Get,
	     *       url: url,
	     *       search: 'password=123'
	     *     }));
	     *   }
	     * }
	     *
	     * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);
	     * var authenticator = injector.get(AutoAuthenticator);
	     * authenticator.request('people.json').subscribe(res => {
	     *   //URL should have included '?password=123'
	     *   console.log('people', res.json());
	     * });
	     * ```
	     *
	     * \@experimental
	     */
	    var Request = (function (_super) {
	        __extends$5(Request, _super);
	        /**
	         * @param {?} requestOptions
	         */
	        function Request(requestOptions) {
	            _super.call(this);
	            // TODO: assert that url is present
	            var url = requestOptions.url;
	            this.url = requestOptions.url;
	            if (requestOptions.search) {
	                var search = requestOptions.search.toString();
	                if (search.length > 0) {
	                    var prefix = '?';
	                    if (this.url.indexOf('?') != -1) {
	                        prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';
	                    }
	                    // TODO: just delete search-query-looking string in url?
	                    this.url = url + prefix + search;
	                }
	            }
	            this._body = requestOptions.body;
	            this.method = normalizeMethodName(requestOptions.method);
	            // TODO(jeffbcross): implement behavior
	            // Defaults to 'omit', consistent with browser
	            this.headers = new Headers(requestOptions.headers);
	            this.contentType = this.detectContentType();
	            this.withCredentials = requestOptions.withCredentials;
	            this.responseType = requestOptions.responseType;
	        }
	        /**
	         * Returns the content type enum based on header options.
	         * @return {?}
	         */
	        Request.prototype.detectContentType = function () {
	            switch (this.headers.get('content-type')) {
	                case 'application/json':
	                    return ContentType.JSON;
	                case 'application/x-www-form-urlencoded':
	                    return ContentType.FORM;
	                case 'multipart/form-data':
	                    return ContentType.FORM_DATA;
	                case 'text/plain':
	                case 'text/html':
	                    return ContentType.TEXT;
	                case 'application/octet-stream':
	                    return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;
	                default:
	                    return this.detectContentTypeFromBody();
	            }
	        };
	        /**
	         * Returns the content type of request's body based on its type.
	         * @return {?}
	         */
	        Request.prototype.detectContentTypeFromBody = function () {
	            if (this._body == null) {
	                return ContentType.NONE;
	            }
	            else if (this._body instanceof URLSearchParams) {
	                return ContentType.FORM;
	            }
	            else if (this._body instanceof FormData) {
	                return ContentType.FORM_DATA;
	            }
	            else if (this._body instanceof Blob$1) {
	                return ContentType.BLOB;
	            }
	            else if (this._body instanceof ArrayBuffer$1) {
	                return ContentType.ARRAY_BUFFER;
	            }
	            else if (this._body && typeof this._body === 'object') {
	                return ContentType.JSON;
	            }
	            else {
	                return ContentType.TEXT;
	            }
	        };
	        /**
	         * Returns the request's body according to its type. If body is undefined, return
	         * null.
	         * @return {?}
	         */
	        Request.prototype.getBody = function () {
	            switch (this.contentType) {
	                case ContentType.JSON:
	                    return this.text();
	                case ContentType.FORM:
	                    return this.text();
	                case ContentType.FORM_DATA:
	                    return this._body;
	                case ContentType.TEXT:
	                    return this.text();
	                case ContentType.BLOB:
	                    return this.blob();
	                case ContentType.ARRAY_BUFFER:
	                    return this.arrayBuffer();
	                default:
	                    return null;
	            }
	        };
	        return Request;
	    }(Body));
	    var /** @type {?} */ noop = function () { };
	    var /** @type {?} */ w = typeof window == 'object' ? window : noop;
	    var /** @type {?} */ FormData = ((w) /** TODO #9100 */)['FormData'] || noop;
	    var /** @type {?} */ Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;
	    var /** @type {?} */ ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @param {?} backend
	     * @param {?} request
	     * @return {?}
	     */
	    function httpRequest(backend, request) {
	        return backend.createConnection(request).response;
	    }
	    /**
	     * @param {?} defaultOpts
	     * @param {?} providedOpts
	     * @param {?} method
	     * @param {?} url
	     * @return {?}
	     */
	    function mergeOptions(defaultOpts, providedOpts, method, url) {
	        var /** @type {?} */ newOptions = defaultOpts;
	        if (providedOpts) {
	            // Hack so Dart can used named parameters
	            return newOptions.merge(new RequestOptions({
	                method: providedOpts.method || method,
	                url: providedOpts.url || url,
	                search: providedOpts.search,
	                headers: providedOpts.headers,
	                body: providedOpts.body,
	                withCredentials: providedOpts.withCredentials,
	                responseType: providedOpts.responseType
	            }));
	        }
	        return newOptions.merge(new RequestOptions({ method: method, url: url }));
	    }
	    /**
	     * Performs http requests using `XMLHttpRequest` as the default backend.
	     *
	     * `Http` is available as an injectable class, with methods to perform http requests. Calling
	     * `request` returns an `Observable` which will emit a single {\@link Response} when a
	     * response is received.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * import {Http, HTTP_PROVIDERS} from '\@angular/http';
	     * import 'rxjs/add/operator/map'
	     * \@Component({
	     *   selector: 'http-app',
	     *   viewProviders: [HTTP_PROVIDERS],
	     *   templateUrl: 'people.html'
	     * })
	     * class PeopleComponent {
	     *   constructor(http: Http) {
	     *     http.get('people.json')
	     *       // Call map on the response observable to get the parsed people object
	     *       .map(res => res.json())
	     *       // Subscribe to the observable to get the parsed people object and attach it to the
	     *       // component
	     *       .subscribe(people => this.people = people);
	     *   }
	     * }
	     * ```
	     *
	     *
	     * ### Example
	     *
	     * ```
	     * http.get('people.json').subscribe((res:Response) => this.people = res.json());
	     * ```
	     *
	     * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a "Backend" (
	     * {\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing
	     * the {\@link XHRBackend} provider, as in the following example:
	     *
	     * ### Example
	     *
	     * ```typescript
	     * import {BaseRequestOptions, Http} from '\@angular/http';
	     * import {MockBackend} from '\@angular/http/testing';
	     * var injector = Injector.resolveAndCreate([
	     *   BaseRequestOptions,
	     *   MockBackend,
	     *   {provide: Http, useFactory:
	     *       function(backend, defaultOptions) {
	     *         return new Http(backend, defaultOptions);
	     *       },
	     *       deps: [MockBackend, BaseRequestOptions]}
	     * ]);
	     * var http = injector.get(Http);
	     * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));
	     * ```
	     *
	     * \@experimental
	     */
	    var Http = (function () {
	        /**
	         * @param {?} _backend
	         * @param {?} _defaultOptions
	         */
	        function Http(_backend, _defaultOptions) {
	            this._backend = _backend;
	            this._defaultOptions = _defaultOptions;
	        }
	        /**
	         * Performs any type of http request. First argument is required, and can either be a url or
	         * a {\@link Request} instance. If the first argument is a url, an optional {\@link RequestOptions}
	         * object can be provided as the 2nd argument. The options object will be merged with the values
	         * of {\@link BaseRequestOptions} before performing the request.
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.request = function (url, options) {
	            var /** @type {?} */ responseObservable;
	            if (typeof url === 'string') {
	                responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));
	            }
	            else if (url instanceof Request) {
	                responseObservable = httpRequest(this._backend, url);
	            }
	            else {
	                throw new Error('First argument must be a url string or Request instance.');
	            }
	            return responseObservable;
	        };
	        /**
	         * Performs a request with `get` http method.
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.get = function (url, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
	        };
	        /**
	         * Performs a request with `post` http method.
	         * @param {?} url
	         * @param {?} body
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.post = function (url, body, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));
	        };
	        /**
	         * Performs a request with `put` http method.
	         * @param {?} url
	         * @param {?} body
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.put = function (url, body, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));
	        };
	        /**
	         * Performs a request with `delete` http method.
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.delete = function (url, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));
	        };
	        /**
	         * Performs a request with `patch` http method.
	         * @param {?} url
	         * @param {?} body
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.patch = function (url, body, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));
	        };
	        /**
	         * Performs a request with `head` http method.
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.head = function (url, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));
	        };
	        /**
	         * Performs a request with `options` http method.
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.options = function (url, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));
	        };
	        Http.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        Http.ctorParameters = function () { return [
	            { type: ConnectionBackend, },
	            { type: RequestOptions, },
	        ]; };
	        return Http;
	    }());
	    /**
	     * \@experimental
	     */
	    var Jsonp = (function (_super) {
	        __extends$4(Jsonp, _super);
	        /**
	         * @param {?} backend
	         * @param {?} defaultOptions
	         */
	        function Jsonp(backend, defaultOptions) {
	            _super.call(this, backend, defaultOptions);
	        }
	        /**
	         * Performs any type of http request. First argument is required, and can either be a url or
	         * a {\@link Request} instance. If the first argument is a url, an optional {\@link RequestOptions}
	         * object can be provided as the 2nd argument. The options object will be merged with the values
	         * of {\@link BaseRequestOptions} before performing the request.
	         *
	         * \@security Regular XHR is the safest alternative to JSONP for most applications, and is
	         * supported by all current browsers. Because JSONP creates a `<script>` element with
	         * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted
	         * source could expose your application to XSS risks. Data exposed by JSONP may also be
	         * readable by malicious third-party websites. In addition, JSONP introduces potential risk for
	         * future security issues (e.g. content sniffing).  For more detail, see the
	         * [Security Guide](http://g.co/ng/security).
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Jsonp.prototype.request = function (url, options) {
	            var /** @type {?} */ responseObservable;
	            if (typeof url === 'string') {
	                url =
	                    new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));
	            }
	            if (url instanceof Request) {
	                if (url.method !== RequestMethod.Get) {
	                    throw new Error('JSONP requests must use GET request method.');
	                }
	                responseObservable = httpRequest(this._backend, url);
	            }
	            else {
	                throw new Error('First argument must be a url string or Request instance.');
	            }
	            return responseObservable;
	        };
	        Jsonp.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        Jsonp.ctorParameters = function () { return [
	            { type: ConnectionBackend, },
	            { type: RequestOptions, },
	        ]; };
	        return Jsonp;
	    }(Http));

	    /**
	     * @return {?}
	     */
	    function _createDefaultCookieXSRFStrategy() {
	        return new CookieXSRFStrategy();
	    }
	    /**
	     * @param {?} xhrBackend
	     * @param {?} requestOptions
	     * @return {?}
	     */
	    function httpFactory(xhrBackend, requestOptions) {
	        return new Http(xhrBackend, requestOptions);
	    }
	    /**
	     * @param {?} jsonpBackend
	     * @param {?} requestOptions
	     * @return {?}
	     */
	    function jsonpFactory(jsonpBackend, requestOptions) {
	        return new Jsonp(jsonpBackend, requestOptions);
	    }
	    /**
	     * The module that includes http's providers
	     *
	     * \@experimental
	     */
	    var HttpModule = (function () {
	        function HttpModule() {
	        }
	        HttpModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        providers: [
	                            // TODO(pascal): use factory type annotations once supported in DI
	                            // issue: https://github.com/angular/angular/issues/3183
	                            { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },
	                            BrowserXhr,
	                            { provide: RequestOptions, useClass: BaseRequestOptions },
	                            { provide: ResponseOptions, useClass: BaseResponseOptions },
	                            XHRBackend,
	                            { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },
	                        ],
	                    },] },
	        ];
	        /** @nocollapse */
	        HttpModule.ctorParameters = function () { return []; };
	        return HttpModule;
	    }());
	    /**
	     * The module that includes jsonp's providers
	     *
	     * \@experimental
	     */
	    var JsonpModule = (function () {
	        function JsonpModule() {
	        }
	        JsonpModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        providers: [
	                            // TODO(pascal): use factory type annotations once supported in DI
	                            // issue: https://github.com/angular/angular/issues/3183
	                            { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },
	                            BrowserJsonp,
	                            { provide: RequestOptions, useClass: BaseRequestOptions },
	                            { provide: ResponseOptions, useClass: BaseResponseOptions },
	                            { provide: JSONPBackend, useClass: JSONPBackend_ },
	                        ],
	                    },] },
	        ];
	        /** @nocollapse */
	        JsonpModule.ctorParameters = function () { return []; };
	        return JsonpModule;
	    }());

	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.7');

	    exports.BrowserXhr = BrowserXhr;
	    exports.JSONPBackend = JSONPBackend;
	    exports.JSONPConnection = JSONPConnection;
	    exports.CookieXSRFStrategy = CookieXSRFStrategy;
	    exports.XHRBackend = XHRBackend;
	    exports.XHRConnection = XHRConnection;
	    exports.BaseRequestOptions = BaseRequestOptions;
	    exports.RequestOptions = RequestOptions;
	    exports.BaseResponseOptions = BaseResponseOptions;
	    exports.ResponseOptions = ResponseOptions;
	    exports.ReadyState = ReadyState;
	    exports.RequestMethod = RequestMethod;
	    exports.ResponseContentType = ResponseContentType;
	    exports.ResponseType = ResponseType;
	    exports.Headers = Headers;
	    exports.Http = Http;
	    exports.Jsonp = Jsonp;
	    exports.HttpModule = HttpModule;
	    exports.JsonpModule = JsonpModule;
	    exports.Connection = Connection;
	    exports.ConnectionBackend = ConnectionBackend;
	    exports.XSRFStrategy = XSRFStrategy;
	    exports.Request = Request;
	    exports.Response = Response;
	    exports.QueryEncoder = QueryEncoder;
	    exports.URLSearchParams = URLSearchParams;
	    exports.VERSION = VERSION;

	}));

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.4.7
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(24), __webpack_require__(4)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}),global.ng.common,global.ng.core));
	}(this, function (exports,_angular_common,core) { 'use strict';

	    var /** @type {?} */ DebugDomRootRenderer = core.__core_private__.DebugDomRootRenderer;
	    var /** @type {?} */ NoOpAnimationPlayer = core.__core_private__.NoOpAnimationPlayer;

	    /**
	     * \@experimental
	     */
	    var NoOpAnimationDriver = (function () {
	        function NoOpAnimationDriver() {
	        }
	        /**
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            return new NoOpAnimationPlayer();
	        };
	        return NoOpAnimationDriver;
	    }());
	    /**
	     * \@experimental
	     * @abstract
	     */
	    var AnimationDriver = (function () {
	        function AnimationDriver() {
	        }
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        AnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
	        AnimationDriver.NOOP = new NoOpAnimationDriver();
	        return AnimationDriver;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = (self);
	        }
	        else {
	            globalScope = (global);
	        }
	    }
	    else {
	        globalScope = (window);
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var /** @type {?} */ global$1 = globalScope;
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    global$1.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return "" + token.overriddenName;
	        }
	        if (token.name) {
	            return "" + token.name;
	        }
	        var /** @type {?} */ res = token.toString();
	        var /** @type {?} */ newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    /**
	     * @param {?} global
	     * @param {?} path
	     * @param {?} value
	     * @return {?}
	     */
	    function setValueOnPath(global, path, value) {
	        var /** @type {?} */ parts = path.split('.');
	        var /** @type {?} */ obj = global;
	        while (parts.length > 1) {
	            var /** @type {?} */ name_1 = parts.shift();
	            if (obj.hasOwnProperty(name_1) && obj[name_1] != null) {
	                obj = obj[name_1];
	            }
	            else {
	                obj = obj[name_1] = {};
	            }
	        }
	        if (obj === undefined || obj === null) {
	            obj = {};
	        }
	        obj[parts.shift()] = value;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ _DOM = null;
	    /**
	     * @return {?}
	     */
	    function getDOM() {
	        return _DOM;
	    }
	    /**
	     * @param {?} adapter
	     * @return {?}
	     */
	    function setRootDomAdapter(adapter) {
	        if (!_DOM) {
	            _DOM = adapter;
	        }
	    }
	    /**
	     * Provides DOM operations in an environment-agnostic way.
	     *
	     * \@security Tread carefully! Interacting with the DOM directly is dangerous and
	     * can introduce XSS risks.
	     * @abstract
	     */
	    var DomAdapter = (function () {
	        function DomAdapter() {
	            this.resourceLoaderType = null;
	        }
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.hasProperty = function (element /** TODO #9100 */, name) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setProperty = function (el, name, value) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.getProperty = function (el, name) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} methodName
	         * @param {?} args
	         * @return {?}
	         */
	        DomAdapter.prototype.invoke = function (el, methodName, args) { };
	        /**
	         * @abstract
	         * @param {?} error
	         * @return {?}
	         */
	        DomAdapter.prototype.logError = function (error) { };
	        /**
	         * @abstract
	         * @param {?} error
	         * @return {?}
	         */
	        DomAdapter.prototype.log = function (error) { };
	        /**
	         * @abstract
	         * @param {?} error
	         * @return {?}
	         */
	        DomAdapter.prototype.logGroup = function (error) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.logGroupEnd = function () { };
	        Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
	            /**
	             * Maps attribute names to their corresponding property names for cases
	             * where attribute name doesn't match property name.
	             * @return {?}
	             */
	            get: function () { return this._attrToPropMap; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) { this._attrToPropMap = value; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        ;
	        /**
	         * @abstract
	         * @param {?} templateHtml
	         * @return {?}
	         */
	        DomAdapter.prototype.parse = function (templateHtml) { };
	        /**
	         * @abstract
	         * @param {?} selector
	         * @return {?}
	         */
	        DomAdapter.prototype.query = function (selector) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} selector
	         * @return {?}
	         */
	        DomAdapter.prototype.querySelector = function (el /** TODO #9100 */, selector) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} selector
	         * @return {?}
	         */
	        DomAdapter.prototype.querySelectorAll = function (el /** TODO #9100 */, selector) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} evt
	         * @param {?} listener
	         * @return {?}
	         */
	        DomAdapter.prototype.on = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} evt
	         * @param {?} listener
	         * @return {?}
	         */
	        DomAdapter.prototype.onAndCancel = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} evt
	         * @return {?}
	         */
	        DomAdapter.prototype.dispatchEvent = function (el /** TODO #9100 */, evt) { };
	        /**
	         * @abstract
	         * @param {?} eventType
	         * @return {?}
	         */
	        DomAdapter.prototype.createMouseEvent = function (eventType) { };
	        /**
	         * @abstract
	         * @param {?} eventType
	         * @return {?}
	         */
	        DomAdapter.prototype.createEvent = function (eventType) { };
	        /**
	         * @abstract
	         * @param {?} evt
	         * @return {?}
	         */
	        DomAdapter.prototype.preventDefault = function (evt) { };
	        /**
	         * @abstract
	         * @param {?} evt
	         * @return {?}
	         */
	        DomAdapter.prototype.isPrevented = function (evt) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getInnerHTML = function (el) { };
	        /**
	         * Returns content if el is a <template> element, null otherwise.
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getTemplateContent = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getOuterHTML = function (el) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.nodeName = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.nodeValue = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.type = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.content = function (node) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.firstChild = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.nextSibling = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.parentElement = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.childNodes = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.childNodesAsList = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.clearNodes = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.appendChild = function (el /** TODO #9100 */, node) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.removeChild = function (el /** TODO #9100 */, node) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} newNode
	         * @param {?} oldNode
	         * @return {?}
	         */
	        DomAdapter.prototype.replaceChild = function (el /** TODO #9100 */, newNode /** TODO #9100 */, oldNode) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.remove = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.insertBefore = function (el /** TODO #9100 */, node) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} nodes
	         * @return {?}
	         */
	        DomAdapter.prototype.insertAllBefore = function (el /** TODO #9100 */, nodes) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.insertAfter = function (el /** TODO #9100 */, node) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setInnerHTML = function (el /** TODO #9100 */, value) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getText = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setText = function (el /** TODO #9100 */, value) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getValue = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setValue = function (el /** TODO #9100 */, value) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getChecked = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setChecked = function (el /** TODO #9100 */, value) { };
	        /**
	         * @abstract
	         * @param {?} text
	         * @return {?}
	         */
	        DomAdapter.prototype.createComment = function (text) { };
	        /**
	         * @abstract
	         * @param {?} html
	         * @return {?}
	         */
	        DomAdapter.prototype.createTemplate = function (html) { };
	        /**
	         * @abstract
	         * @param {?} tagName
	         * @param {?=} doc
	         * @return {?}
	         */
	        DomAdapter.prototype.createElement = function (tagName /** TODO #9100 */, doc) { };
	        /**
	         * @abstract
	         * @param {?} ns
	         * @param {?} tagName
	         * @param {?=} doc
	         * @return {?}
	         */
	        DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };
	        /**
	         * @abstract
	         * @param {?} text
	         * @param {?=} doc
	         * @return {?}
	         */
	        DomAdapter.prototype.createTextNode = function (text, doc) { };
	        /**
	         * @abstract
	         * @param {?} attrName
	         * @param {?} attrValue
	         * @param {?=} doc
	         * @return {?}
	         */
	        DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };
	        /**
	         * @abstract
	         * @param {?} css
	         * @param {?=} doc
	         * @return {?}
	         */
	        DomAdapter.prototype.createStyleElement = function (css, doc) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.createShadowRoot = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getShadowRoot = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getHost = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getDistributedNodes = function (el) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.getElementsByClassName = function (element /** TODO #9100 */, name) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.getElementsByTagName = function (element /** TODO #9100 */, name) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @return {?}
	         */
	        DomAdapter.prototype.classList = function (element) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        DomAdapter.prototype.addClass = function (element /** TODO #9100 */, className) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        DomAdapter.prototype.removeClass = function (element /** TODO #9100 */, className) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        DomAdapter.prototype.hasClass = function (element /** TODO #9100 */, className) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        DomAdapter.prototype.setStyle = function (element /** TODO #9100 */, styleName, styleValue) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} styleName
	         * @return {?}
	         */
	        DomAdapter.prototype.removeStyle = function (element /** TODO #9100 */, styleName) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} styleName
	         * @return {?}
	         */
	        DomAdapter.prototype.getStyle = function (element /** TODO #9100 */, styleName) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} styleName
	         * @param {?=} styleValue
	         * @return {?}
	         */
	        DomAdapter.prototype.hasStyle = function (element /** TODO #9100 */, styleName, styleValue) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @return {?}
	         */
	        DomAdapter.prototype.tagName = function (element) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @return {?}
	         */
	        DomAdapter.prototype.attributeMap = function (element) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.hasAttribute = function (element /** TODO #9100 */, attribute) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.hasAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.getAttribute = function (element /** TODO #9100 */, attribute) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.getAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setAttribute = function (element /** TODO #9100 */, name, value) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setAttributeNS = function (element /** TODO #9100 */, ns, name, value) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.removeAttribute = function (element /** TODO #9100 */, attribute) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.removeAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.templateAwareRoot = function (el) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.createHtmlDocument = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.defaultDoc = function () { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getBoundingClientRect = function (el) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getTitle = function () { };
	        /**
	         * @abstract
	         * @param {?} newTitle
	         * @return {?}
	         */
	        DomAdapter.prototype.setTitle = function (newTitle) { };
	        /**
	         * @abstract
	         * @param {?} n
	         * @param {?} selector
	         * @return {?}
	         */
	        DomAdapter.prototype.elementMatches = function (n /** TODO #9100 */, selector) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.isTemplateElement = function (el) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.isTextNode = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.isCommentNode = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.isElementNode = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.hasShadowRoot = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.isShadowRoot = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @return {?}
	         */
	        DomAdapter.prototype.getHref = function (element) { };
	        /**
	         * @abstract
	         * @param {?} event
	         * @return {?}
	         */
	        DomAdapter.prototype.getEventKey = function (event) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} baseUrl
	         * @param {?} href
	         * @return {?}
	         */
	        DomAdapter.prototype.resolveAndSetHref = function (element /** TODO #9100 */, baseUrl, href) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.supportsDOMEvents = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.supportsNativeShadowDOM = function () { };
	        /**
	         * @abstract
	         * @param {?} target
	         * @return {?}
	         */
	        DomAdapter.prototype.getGlobalEventTarget = function (target) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getHistory = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getLocation = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getBaseHref = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.resetBaseElement = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getUserAgent = function () { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setData = function (element /** TODO #9100 */, name, value) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @return {?}
	         */
	        DomAdapter.prototype.getComputedStyle = function (element) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.getData = function (element /** TODO #9100 */, name) { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setGlobalVar = function (name, value) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.supportsWebAnimation = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.performanceNow = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getAnimationPrefix = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getTransitionEnd = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.supportsAnimation = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.supportsCookies = function () { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.getCookie = function (name) { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setCookie = function (name, value) { };
	        return DomAdapter;
	    }());

	    var WebAnimationsPlayer = (function () {
	        /**
	         * @param {?} element
	         * @param {?} keyframes
	         * @param {?} options
	         * @param {?=} previousPlayers
	         */
	        function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
	            var _this = this;
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            this.element = element;
	            this.keyframes = keyframes;
	            this.options = options;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._initialized = false;
	            this._finished = false;
	            this._started = false;
	            this._destroyed = false;
	            this.parentPlayer = null;
	            this._duration = options['duration'];
	            this.previousStyles = {};
	            previousPlayers.forEach(function (player) {
	                var styles = player._captureStyles();
	                Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop]; });
	            });
	        }
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.init = function () {
	            var _this = this;
	            if (this._initialized)
	                return;
	            this._initialized = true;
	            var /** @type {?} */ keyframes = this.keyframes.map(function (styles) {
	                var /** @type {?} */ formattedKeyframe = {};
	                Object.keys(styles).forEach(function (prop, index) {
	                    var /** @type {?} */ value = styles[prop];
	                    if (value == core.AUTO_STYLE) {
	                        value = _computeStyle(_this.element, prop);
	                    }
	                    if (value != undefined) {
	                        formattedKeyframe[prop] = value;
	                    }
	                });
	                return formattedKeyframe;
	            });
	            var /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);
	            if (previousStyleProps.length) {
	                var /** @type {?} */ startingKeyframe_1 = keyframes[0];
	                var /** @type {?} */ missingStyleProps_1 = [];
	                previousStyleProps.forEach(function (prop) {
	                    if (!isPresent(startingKeyframe_1[prop])) {
	                        missingStyleProps_1.push(prop);
	                    }
	                    startingKeyframe_1[prop] = _this.previousStyles[prop];
	                });
	                if (missingStyleProps_1.length) {
	                    var _loop_1 = function(i) {
	                        var /** @type {?} */ kf = keyframes[i];
	                        missingStyleProps_1.forEach(function (prop) { kf[prop] = _computeStyle(_this.element, prop); });
	                    };
	                    for (var /** @type {?} */ i = 1; i < keyframes.length; i++) {
	                        _loop_1(i);
	                    }
	                }
	            }
	            this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
	            this._finalKeyframe = _copyKeyframeStyles(keyframes[keyframes.length - 1]);
	            // this is required so that the player doesn't start to animate right away
	            this._resetDomPlayerState();
	            this._player.addEventListener('finish', function () { return _this._onFinish(); });
	        };
	        /**
	         * \@internal
	         * @param {?} element
	         * @param {?} keyframes
	         * @param {?} options
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {
	            // jscompiler doesn't seem to know animate is a native property because it's not fully
	            // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
	            return (element['animate'](keyframes, options));
	        };
	        Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._player; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.play = function () {
	            this.init();
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._player.play();
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.pause = function () {
	            this.init();
	            this._player.pause();
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.finish = function () {
	            this.init();
	            this._onFinish();
	            this._player.finish();
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.reset = function () {
	            this._resetDomPlayerState();
	            this._destroyed = false;
	            this._finished = false;
	            this._started = false;
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype._resetDomPlayerState = function () {
	            if (this._player) {
	                this._player.cancel();
	            }
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.restart = function () {
	            this.reset();
	            this.play();
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.destroy = function () {
	            if (!this._destroyed) {
	                this._resetDomPlayerState();
	                this._onFinish();
	                this._destroyed = true;
	            }
	        };
	        Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._duration; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} p
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.totalTime; };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.totalTime; };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype._captureStyles = function () {
	            var _this = this;
	            var /** @type {?} */ styles = {};
	            if (this.hasStarted()) {
	                Object.keys(this._finalKeyframe).forEach(function (prop) {
	                    if (prop != 'offset') {
	                        styles[prop] =
	                            _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
	                    }
	                });
	            }
	            return styles;
	        };
	        return WebAnimationsPlayer;
	    }());
	    /**
	     * @param {?} element
	     * @param {?} prop
	     * @return {?}
	     */
	    function _computeStyle(element, prop) {
	        return getDOM().getComputedStyle(element)[prop];
	    }
	    /**
	     * @param {?} styles
	     * @return {?}
	     */
	    function _copyKeyframeStyles(styles) {
	        var /** @type {?} */ newStyles = {};
	        Object.keys(styles).forEach(function (prop) {
	            if (prop != 'offset') {
	                newStyles[prop] = styles[prop];
	            }
	        });
	        return newStyles;
	    }

	    var WebAnimationsDriver = (function () {
	        function WebAnimationsDriver() {
	        }
	        /**
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        WebAnimationsDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            var /** @type {?} */ formattedSteps = [];
	            var /** @type {?} */ startingStyleLookup = {};
	            if (isPresent(startingStyles)) {
	                startingStyleLookup = _populateStyles(startingStyles, {});
	            }
	            keyframes.forEach(function (keyframe) {
	                var /** @type {?} */ data = _populateStyles(keyframe.styles, startingStyleLookup);
	                data['offset'] = Math.max(0, Math.min(1, keyframe.offset));
	                formattedSteps.push(data);
	            });
	            // Styling passed into element.animate() must always be balanced.
	            // The special cases below can occur if only style() calls exist
	            // within an animation or when a style() calls are used prior
	            // to a group() animation being issued or if the renderer is
	            // invoked by the user directly.
	            if (formattedSteps.length == 0) {
	                formattedSteps = [startingStyleLookup, startingStyleLookup];
	            }
	            else if (formattedSteps.length == 1) {
	                var /** @type {?} */ start = startingStyleLookup;
	                var /** @type {?} */ end = formattedSteps[0];
	                end['offset'] = null;
	                formattedSteps = [start, end];
	            }
	            var /** @type {?} */ playerOptions = {
	                'duration': duration,
	                'delay': delay,
	                'fill': 'both' // we use `both` because it allows for styling at 0% to work with `delay`
	            };
	            // we check for this to avoid having a null|undefined value be present
	            // for the easing (which results in an error for certain browsers #9752)
	            if (easing) {
	                playerOptions['easing'] = easing;
	            }
	            // there may be a chance a NoOp player is returned depending
	            // on when the previous animation was cancelled
	            previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn);
	            return new WebAnimationsPlayer(element, formattedSteps, playerOptions, /** @type {?} */ (previousPlayers));
	        };
	        return WebAnimationsDriver;
	    }());
	    /**
	     * @param {?} styles
	     * @param {?} defaultStyles
	     * @return {?}
	     */
	    function _populateStyles(styles, defaultStyles) {
	        var /** @type {?} */ data = {};
	        styles.styles.forEach(function (entry) { Object.keys(entry).forEach(function (prop) { data[prop] = entry[prop]; }); });
	        Object.keys(defaultStyles).forEach(function (prop) {
	            if (!isPresent(data[prop])) {
	                data[prop] = defaultStyles[prop];
	            }
	        });
	        return data;
	    }
	    /**
	     * @param {?} player
	     * @return {?}
	     */
	    function filterWebAnimationPlayerFn(player) {
	        return player instanceof WebAnimationsPlayer;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Provides DOM operations in any browser environment.
	     *
	     * \@security Tread carefully! Interacting with the DOM directly is dangerous and
	     * can introduce XSS risks.
	     * @abstract
	     */
	    var GenericBrowserDomAdapter = (function (_super) {
	        __extends$1(GenericBrowserDomAdapter, _super);
	        function GenericBrowserDomAdapter() {
	            var _this = this;
	            _super.call(this);
	            this._animationPrefix = null;
	            this._transitionEnd = null;
	            try {
	                var element_1 = this.createElement('div', this.defaultDoc());
	                if (isPresent(this.getStyle(element_1, 'animationName'))) {
	                    this._animationPrefix = '';
	                }
	                else {
	                    var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
	                    for (var i = 0; i < domPrefixes.length; i++) {
	                        if (isPresent(this.getStyle(element_1, domPrefixes[i] + 'AnimationName'))) {
	                            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
	                            break;
	                        }
	                    }
	                }
	                var transEndEventNames_1 = {
	                    WebkitTransition: 'webkitTransitionEnd',
	                    MozTransition: 'transitionend',
	                    OTransition: 'oTransitionEnd otransitionend',
	                    transition: 'transitionend'
	                };
	                Object.keys(transEndEventNames_1).forEach(function (key) {
	                    if (isPresent(_this.getStyle(element_1, key))) {
	                        _this._transitionEnd = transEndEventNames_1[key];
	                    }
	                });
	            }
	            catch (e) {
	                this._animationPrefix = null;
	                this._transitionEnd = null;
	            }
	        }
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };
	        /**
	         * @param {?} el
	         * @param {?} baseUrl
	         * @param {?} href
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	            el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	        };
	        /**
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	        /**
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	            return typeof ((this.defaultDoc().body)).createShadowRoot === 'function';
	        };
	        /**
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
	        /**
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
	        /**
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
	            return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
	        };
	        return GenericBrowserDomAdapter;
	    }(DomAdapter));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _attrToPropMap = {
	        'class': 'className',
	        'innerHtml': 'innerHTML',
	        'readonly': 'readOnly',
	        'tabindex': 'tabIndex',
	    };
	    var /** @type {?} */ DOM_KEY_LOCATION_NUMPAD = 3;
	    // Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	    var /** @type {?} */ _keyMap = {
	        // The following values are here for cross-browser compatibility and to match the W3C standard
	        // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	        '\b': 'Backspace',
	        '\t': 'Tab',
	        '\x7F': 'Delete',
	        '\x1B': 'Escape',
	        'Del': 'Delete',
	        'Esc': 'Escape',
	        'Left': 'ArrowLeft',
	        'Right': 'ArrowRight',
	        'Up': 'ArrowUp',
	        'Down': 'ArrowDown',
	        'Menu': 'ContextMenu',
	        'Scroll': 'ScrollLock',
	        'Win': 'OS'
	    };
	    // There is a bug in Chrome for numeric keypad keys:
	    // https://code.google.com/p/chromium/issues/detail?id=155654
	    // 1, 2, 3 ... are reported as A, B, C ...
	    var /** @type {?} */ _chromeNumKeyPadMap = {
	        'A': '1',
	        'B': '2',
	        'C': '3',
	        'D': '4',
	        'E': '5',
	        'F': '6',
	        'G': '7',
	        'H': '8',
	        'I': '9',
	        'J': '*',
	        'K': '+',
	        'M': '-',
	        'N': '.',
	        'O': '/',
	        '\x60': '0',
	        '\x90': 'NumLock'
	    };
	    var BrowserDomAdapter = (function (_super) {
	        __extends(BrowserDomAdapter, _super);
	        function BrowserDomAdapter() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} templateHtml
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
	        /**
	         * @param {?} el
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };
	        /**
	         * @param {?} el
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };
	        /**
	         * @param {?} el
	         * @param {?} methodName
	         * @param {?} args
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { (_a = ((el)))[methodName].apply(_a, args); var _a; };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.logError = function (error) {
	            if (window.console) {
	                if (console.error) {
	                    console.error(error);
	                }
	                else {
	                    console.log(error);
	                }
	            }
	        };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.log = function (error) {
	            if (window.console) {
	                window.console.log && window.console.log(error);
	            }
	        };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.logGroup = function (error) {
	            if (window.console) {
	                window.console.group && window.console.group(error);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.logGroupEnd = function () {
	            if (window.console) {
	                window.console.groupEnd && window.console.groupEnd();
	            }
	        };
	        Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	            /**
	             * @return {?}
	             */
	            get: function () { return _attrToPropMap; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} selector
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
	        /**
	         * @param {?} el
	         * @param {?} selector
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.querySelector = function (el, selector) {
	            return (el.querySelector(selector));
	        };
	        /**
	         * @param {?} el
	         * @param {?} selector
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
	        /**
	         * @param {?} el
	         * @param {?} evt
	         * @param {?} listener
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
	        /**
	         * @param {?} el
	         * @param {?} evt
	         * @param {?} listener
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	            el.addEventListener(evt, listener, false);
	            // Needed to follow Dart's subscription semantic, until fix of
	            // https://code.google.com/p/dart/issues/detail?id=17406
	            return function () { el.removeEventListener(evt, listener, false); };
	        };
	        /**
	         * @param {?} el
	         * @param {?} evt
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
	        /**
	         * @param {?} eventType
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	            var /** @type {?} */ evt = document.createEvent('MouseEvent');
	            evt.initEvent(eventType, true, true);
	            return evt;
	        };
	        /**
	         * @param {?} eventType
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createEvent = function (eventType) {
	            var /** @type {?} */ evt = document.createEvent('Event');
	            evt.initEvent(eventType, true, true);
	            return evt;
	        };
	        /**
	         * @param {?} evt
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.preventDefault = function (evt) {
	            evt.preventDefault();
	            evt.returnValue = false;
	        };
	        /**
	         * @param {?} evt
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isPrevented = function (evt) {
	            return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getTemplateContent = function (el) {
	            return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.type = function (node) { return node.type; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.content = function (node) {
	            if (this.hasProperty(node, 'content')) {
	                return ((node)).content;
	            }
	            else {
	                return node;
	            }
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	            var /** @type {?} */ childNodes = el.childNodes;
	            var /** @type {?} */ res = new Array(childNodes.length);
	            for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {
	                res[i] = childNodes[i];
	            }
	            return res;
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.clearNodes = function (el) {
	            while (el.firstChild) {
	                el.removeChild(el.firstChild);
	            }
	        };
	        /**
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
	        /**
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
	        /**
	         * @param {?} el
	         * @param {?} newChild
	         * @param {?} oldChild
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.remove = function (node) {
	            if (node.parentNode) {
	                node.parentNode.removeChild(node);
	            }
	            return node;
	        };
	        /**
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el); };
	        /**
	         * @param {?} el
	         * @param {?} nodes
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) {
	            nodes.forEach(function (n) { return el.parentNode.insertBefore(n, el); });
	        };
	        /**
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling); };
	        /**
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
	        /**
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
	        /**
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
	        /**
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
	        /**
	         * @param {?} html
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createTemplate = function (html) {
	            var /** @type {?} */ t = document.createElement('template');
	            t.innerHTML = html;
	            return t;
	        };
	        /**
	         * @param {?} tagName
	         * @param {?=} doc
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createElement(tagName);
	        };
	        /**
	         * @param {?} ns
	         * @param {?} tagName
	         * @param {?=} doc
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createElementNS(ns, tagName);
	        };
	        /**
	         * @param {?} text
	         * @param {?=} doc
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createTextNode(text);
	        };
	        /**
	         * @param {?} attrName
	         * @param {?} attrValue
	         * @param {?=} doc
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	            if (doc === void 0) { doc = document; }
	            var /** @type {?} */ el = (doc.createElement('SCRIPT'));
	            el.setAttribute(attrName, attrValue);
	            return el;
	        };
	        /**
	         * @param {?} css
	         * @param {?=} doc
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	            if (doc === void 0) { doc = document; }
	            var /** @type {?} */ style = (doc.createElement('style'));
	            this.appendChild(style, this.createTextNode(css));
	            return style;
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	            return element.getElementsByClassName(name);
	        };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	            return element.getElementsByTagName(name);
	        };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
	        /**
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
	        /**
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
	        /**
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasClass = function (element, className) {
	            return element.classList.contains(className);
	        };
	        /**
	         * @param {?} element
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
	            element.style[styleName] = styleValue;
	        };
	        /**
	         * @param {?} element
	         * @param {?} stylename
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
	            // IE requires '' instead of null
	            // see https://github.com/angular/angular/issues/7916
	            element.style[stylename] = '';
	        };
	        /**
	         * @param {?} element
	         * @param {?} stylename
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
	        /**
	         * @param {?} element
	         * @param {?} styleName
	         * @param {?=} styleValue
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
	            if (styleValue === void 0) { styleValue = null; }
	            var /** @type {?} */ value = this.getStyle(element, styleName) || '';
	            return styleValue ? value == styleValue : value.length > 0;
	        };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.attributeMap = function (element) {
	            var /** @type {?} */ res = new Map();
	            var /** @type {?} */ elAttrs = element.attributes;
	            for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {
	                var /** @type {?} */ attrib = elAttrs[i];
	                res.set(attrib.name, attrib.value);
	            }
	            return res;
	        };
	        /**
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
	            return element.hasAttribute(attribute);
	        };
	        /**
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} attribute
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
	            return element.hasAttributeNS(ns, attribute);
	        };
	        /**
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
	            return element.getAttribute(attribute);
	        };
	        /**
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
	            return element.getAttributeNS(ns, name);
	        };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
	        /**
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
	            element.setAttributeNS(ns, name, value);
	        };
	        /**
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
	        /**
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
	            element.removeAttributeNS(ns, name);
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createHtmlDocument = function () {
	            return document.implementation.createHTMLDocument('fakeTitle');
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	            try {
	                return el.getBoundingClientRect();
	            }
	            catch (e) {
	                return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
	            }
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
	        /**
	         * @param {?} newTitle
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
	        /**
	         * @param {?} n
	         * @param {?} selector
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	            if (n instanceof HTMLElement) {
	                return n.matches && n.matches(selector) ||
	                    n.msMatchesSelector && n.msMatchesSelector(selector) ||
	                    n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
	            }
	            return false;
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	            return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
	        };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
	            return isPresent(node.shadowRoot) && node instanceof HTMLElement;
	        };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };
	        /**
	         * @param {?} event
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getEventKey = function (event) {
	            var /** @type {?} */ key = event.key;
	            if (isBlank(key)) {
	                key = event.keyIdentifier;
	                // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	                // Safari cf
	                // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	                if (isBlank(key)) {
	                    return 'Unidentified';
	                }
	                if (key.startsWith('U+')) {
	                    key = String.fromCharCode(parseInt(key.substring(2), 16));
	                    if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                        // There is a bug in Chrome for numeric keypad keys:
	                        // https://code.google.com/p/chromium/issues/detail?id=155654
	                        // 1, 2, 3 ... are reported as A, B, C ...
	                        key = ((_chromeNumKeyPadMap))[key];
	                    }
	                }
	            }
	            return _keyMap[key] || key;
	        };
	        /**
	         * @param {?} target
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
	            if (target === 'window') {
	                return window;
	            }
	            if (target === 'document') {
	                return document;
	            }
	            if (target === 'body') {
	                return document.body;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getBaseHref = function () {
	            var /** @type {?} */ href = getBaseElementHref();
	            return isBlank(href) ? null : relativePath(href);
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setData = function (element, name, value) {
	            this.setAttribute(element, 'data-' + name, value);
	        };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getData = function (element, name) {
	            return this.getAttribute(element, 'data-' + name);
	        };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
	        /**
	         * @param {?} path
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath(global$1, path, value); };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.supportsWebAnimation = function () {
	            return typeof ((Element)).prototype['animate'] === 'function';
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.performanceNow = function () {
	            // performance.now() is not available in all browsers, see
	            // http://caniuse.com/#search=performance.now
	            return window.performance && window.performance.now ? window.performance.now() :
	                new Date().getTime();
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setCookie = function (name, value) {
	            // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
	            // not clear other cookies.
	            document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
	        };
	        return BrowserDomAdapter;
	    }(GenericBrowserDomAdapter));
	    var /** @type {?} */ baseElement = null;
	    /**
	     * @return {?}
	     */
	    function getBaseElementHref() {
	        if (!baseElement) {
	            baseElement = document.querySelector('base');
	            if (!baseElement) {
	                return null;
	            }
	        }
	        return baseElement.getAttribute('href');
	    }
	    // based on urlUtils.js in AngularJS 1
	    var /** @type {?} */ urlParsingNode;
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    function relativePath(url) {
	        if (!urlParsingNode) {
	            urlParsingNode = document.createElement('a');
	        }
	        urlParsingNode.setAttribute('href', url);
	        return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	            '/' + urlParsingNode.pathname;
	    }
	    /**
	     * @param {?} cookieStr
	     * @param {?} name
	     * @return {?}
	     */
	    function parseCookieValue(cookieStr, name) {
	        name = encodeURIComponent(name);
	        for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
	            var cookie = _a[_i];
	            var /** @type {?} */ eqIndex = cookie.indexOf('=');
	            var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
	            if (cookieName.trim() === name) {
	                return decodeURIComponent(cookieValue);
	            }
	        }
	        return null;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     * @return {?}
	     */
	    function supportsState() {
	        return !!window.history.pushState;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
	     * This class should not be used directly by an application developer. Instead, use
	     * {\@link Location}.
	     */
	    var BrowserPlatformLocation = (function (_super) {
	        __extends$2(BrowserPlatformLocation, _super);
	        function BrowserPlatformLocation() {
	            _super.call(this);
	            this._init();
	        }
	        /**
	         * \@internal
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype._init = function () {
	            this._location = getDOM().getLocation();
	            this._history = getDOM().getHistory();
	        };
	        Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._location; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.onPopState = function (fn) {
	            getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.onHashChange = function (fn) {
	            getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
	        };
	        Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._location.pathname; },
	            /**
	             * @param {?} newPath
	             * @return {?}
	             */
	            set: function (newPath) { this._location.pathname = newPath; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._location.search; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._location.hash; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
	            if (supportsState()) {
	                this._history.pushState(state, title, url);
	            }
	            else {
	                this._location.hash = url;
	            }
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
	            if (supportsState()) {
	                this._history.replaceState(state, title, url);
	            }
	            else {
	                this._location.hash = url;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
	        /**
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
	        BrowserPlatformLocation.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        BrowserPlatformLocation.ctorParameters = function () { return []; };
	        return BrowserPlatformLocation;
	    }(_angular_common.PlatformLocation));

	    var BrowserGetTestability = (function () {
	        function BrowserGetTestability() {
	        }
	        /**
	         * @return {?}
	         */
	        BrowserGetTestability.init = function () { core.setTestabilityGetter(new BrowserGetTestability()); };
	        /**
	         * @param {?} registry
	         * @return {?}
	         */
	        BrowserGetTestability.prototype.addToWindow = function (registry) {
	            global$1.getAngularTestability = function (elem, findInAncestors) {
	                if (findInAncestors === void 0) { findInAncestors = true; }
	                var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);
	                if (testability == null) {
	                    throw new Error('Could not find testability for element.');
	                }
	                return testability;
	            };
	            global$1.getAllAngularTestabilities = function () { return registry.getAllTestabilities(); };
	            global$1.getAllAngularRootElements = function () { return registry.getAllRootElements(); };
	            var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {
	                var /** @type {?} */ testabilities = global$1.getAllAngularTestabilities();
	                var /** @type {?} */ count = testabilities.length;
	                var /** @type {?} */ didWork = false;
	                var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {
	                    didWork = didWork || didWork_;
	                    count--;
	                    if (count == 0) {
	                        callback(didWork);
	                    }
	                };
	                testabilities.forEach(function (testability /** TODO #9100 */) {
	                    testability.whenStable(decrement);
	                });
	            };
	            if (!global$1['frameworkStabilizers']) {
	                global$1['frameworkStabilizers'] = [];
	            }
	            global$1['frameworkStabilizers'].push(whenAllStable);
	        };
	        /**
	         * @param {?} registry
	         * @param {?} elem
	         * @param {?} findInAncestors
	         * @return {?}
	         */
	        BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	            if (elem == null) {
	                return null;
	            }
	            var /** @type {?} */ t = registry.getTestability(elem);
	            if (isPresent(t)) {
	                return t;
	            }
	            else if (!findInAncestors) {
	                return null;
	            }
	            if (getDOM().isShadowRoot(elem)) {
	                return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
	            }
	            return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
	        };
	        return BrowserGetTestability;
	    }());

	    /**
	     * A service that can be used to get and set the title of a current HTML document.
	     *
	     * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
	     * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	     * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	     * title value.
	     *
	     * \@experimental
	     */
	    var Title = (function () {
	        function Title() {
	        }
	        /**
	         * Get the title of the current HTML document.
	         * @return {?}
	         */
	        Title.prototype.getTitle = function () { return getDOM().getTitle(); };
	        /**
	         * Set the title of the current HTML document.
	         * @param {?} newTitle
	         * @return {?}
	         */
	        Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(newTitle); };
	        return Title;
	    }());

	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.merge = function (m1, m2) {
	            var /** @type {?} */ m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.equals = function (m1, m2) {
	            var /** @type {?} */ k1 = Object.keys(m1);
	            var /** @type {?} */ k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var /** @type {?} */ i = 0; i < k1.length; i++) {
	                var /** @type {?} */ key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());

	    /**
	     * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	     *
	     * Note: Document might not be available in the Application Context when Application and Rendering
	     * Contexts are not the same (e.g. when running the application into a Web Worker).
	     *
	     * @stable
	     */
	    var /** @type {?} */ DOCUMENT = new core.OpaqueToken('DocumentToken');

	    /**
	     * @stable
	     */
	    var /** @type {?} */ EVENT_MANAGER_PLUGINS = new core.OpaqueToken('EventManagerPlugins');
	    /**
	     * \@stable
	     */
	    var EventManager = (function () {
	        /**
	         * @param {?} plugins
	         * @param {?} _zone
	         */
	        function EventManager(plugins, _zone) {
	            var _this = this;
	            this._zone = _zone;
	            this._eventNameToPlugin = new Map();
	            plugins.forEach(function (p) { return p.manager = _this; });
	            this._plugins = plugins.slice().reverse();
	        }
	        /**
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        EventManager.prototype.addEventListener = function (element, eventName, handler) {
	            var /** @type {?} */ plugin = this._findPluginFor(eventName);
	            return plugin.addEventListener(element, eventName, handler);
	        };
	        /**
	         * @param {?} target
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	            var /** @type {?} */ plugin = this._findPluginFor(eventName);
	            return plugin.addGlobalEventListener(target, eventName, handler);
	        };
	        /**
	         * @return {?}
	         */
	        EventManager.prototype.getZone = function () { return this._zone; };
	        /**
	         * \@internal
	         * @param {?} eventName
	         * @return {?}
	         */
	        EventManager.prototype._findPluginFor = function (eventName) {
	            var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);
	            if (plugin) {
	                return plugin;
	            }
	            var /** @type {?} */ plugins = this._plugins;
	            for (var /** @type {?} */ i = 0; i < plugins.length; i++) {
	                var /** @type {?} */ plugin_1 = plugins[i];
	                if (plugin_1.supports(eventName)) {
	                    this._eventNameToPlugin.set(eventName, plugin_1);
	                    return plugin_1;
	                }
	            }
	            throw new Error("No event manager plugin found for event " + eventName);
	        };
	        EventManager.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        EventManager.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: core.Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
	            { type: core.NgZone, },
	        ]; };
	        return EventManager;
	    }());
	    /**
	     * @abstract
	     */
	    var EventManagerPlugin = (function () {
	        function EventManagerPlugin() {
	        }
	        /**
	         * @abstract
	         * @param {?} eventName
	         * @return {?}
	         */
	        EventManagerPlugin.prototype.supports = function (eventName) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };
	        /**
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	            var /** @type {?} */ target = getDOM().getGlobalEventTarget(element);
	            if (!target) {
	                throw new Error("Unsupported event target " + target + " for event " + eventName);
	            }
	            return this.addEventListener(target, eventName, handler);
	        };
	        ;
	        return EventManagerPlugin;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var SharedStylesHost = (function () {
	        function SharedStylesHost() {
	            /** @internal */
	            this._stylesSet = new Set();
	        }
	        /**
	         * @param {?} styles
	         * @return {?}
	         */
	        SharedStylesHost.prototype.addStyles = function (styles) {
	            var _this = this;
	            var /** @type {?} */ additions = new Set();
	            styles.forEach(function (style) {
	                if (!_this._stylesSet.has(style)) {
	                    _this._stylesSet.add(style);
	                    additions.add(style);
	                }
	            });
	            this.onStylesAdded(additions);
	        };
	        /**
	         * @param {?} additions
	         * @return {?}
	         */
	        SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	        /**
	         * @return {?}
	         */
	        SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };
	        SharedStylesHost.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        SharedStylesHost.ctorParameters = function () { return []; };
	        return SharedStylesHost;
	    }());
	    var DomSharedStylesHost = (function (_super) {
	        __extends$4(DomSharedStylesHost, _super);
	        /**
	         * @param {?} _doc
	         */
	        function DomSharedStylesHost(_doc) {
	            _super.call(this);
	            this._doc = _doc;
	            this._hostNodes = new Set();
	            this._styleNodes = new Set();
	            this._hostNodes.add(_doc.head);
	        }
	        /**
	         * @param {?} styles
	         * @param {?} host
	         * @return {?}
	         */
	        DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	            var _this = this;
	            styles.forEach(function (style) {
	                var /** @type {?} */ styleEl = _this._doc.createElement('style');
	                styleEl.textContent = style;
	                _this._styleNodes.add(host.appendChild(styleEl));
	            });
	        };
	        /**
	         * @param {?} hostNode
	         * @return {?}
	         */
	        DomSharedStylesHost.prototype.addHost = function (hostNode) {
	            this._addStylesToHost(this._stylesSet, hostNode);
	            this._hostNodes.add(hostNode);
	        };
	        /**
	         * @param {?} hostNode
	         * @return {?}
	         */
	        DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
	        /**
	         * @param {?} additions
	         * @return {?}
	         */
	        DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	            var _this = this;
	            this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });
	        };
	        /**
	         * @return {?}
	         */
	        DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };
	        DomSharedStylesHost.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        DomSharedStylesHost.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: core.Inject, args: [DOCUMENT,] },] },
	        ]; };
	        return DomSharedStylesHost;
	    }(SharedStylesHost));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ NAMESPACE_URIS = {
	        'xlink': 'http://www.w3.org/1999/xlink',
	        'svg': 'http://www.w3.org/2000/svg',
	        'xhtml': 'http://www.w3.org/1999/xhtml'
	    };
	    var /** @type {?} */ TEMPLATE_COMMENT_TEXT = 'template bindings={}';
	    var /** @type {?} */ TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
	    /**
	     * @abstract
	     */
	    var DomRootRenderer = (function () {
	        /**
	         * @param {?} document
	         * @param {?} eventManager
	         * @param {?} sharedStylesHost
	         * @param {?} animationDriver
	         * @param {?} appId
	         */
	        function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {
	            this.document = document;
	            this.eventManager = eventManager;
	            this.sharedStylesHost = sharedStylesHost;
	            this.animationDriver = animationDriver;
	            this.appId = appId;
	            this.registeredComponents = new Map();
	        }
	        /**
	         * @param {?} componentProto
	         * @return {?}
	         */
	        DomRootRenderer.prototype.renderComponent = function (componentProto) {
	            var /** @type {?} */ renderer = this.registeredComponents.get(componentProto.id);
	            if (!renderer) {
	                renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id);
	                this.registeredComponents.set(componentProto.id, renderer);
	            }
	            return renderer;
	        };
	        return DomRootRenderer;
	    }());
	    var DomRootRenderer_ = (function (_super) {
	        __extends$3(DomRootRenderer_, _super);
	        /**
	         * @param {?} _document
	         * @param {?} _eventManager
	         * @param {?} sharedStylesHost
	         * @param {?} animationDriver
	         * @param {?} appId
	         */
	        function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {
	            _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId);
	        }
	        DomRootRenderer_.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        DomRootRenderer_.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: core.Inject, args: [DOCUMENT,] },] },
	            { type: EventManager, },
	            { type: DomSharedStylesHost, },
	            { type: AnimationDriver, },
	            { type: undefined, decorators: [{ type: core.Inject, args: [core.APP_ID,] },] },
	        ]; };
	        return DomRootRenderer_;
	    }(DomRootRenderer));
	    var /** @type {?} */ DIRECT_DOM_RENDERER = {
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        remove: function (node) {
	            if (node.parentNode) {
	                node.parentNode.removeChild(node);
	            }
	        },
	        /**
	         * @param {?} node
	         * @param {?} parent
	         * @return {?}
	         */
	        appendChild: function (node, parent) { parent.appendChild(node); },
	        /**
	         * @param {?} node
	         * @param {?} refNode
	         * @return {?}
	         */
	        insertBefore: function (node, refNode) { refNode.parentNode.insertBefore(node, refNode); },
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        nextSibling: function (node) { return node.nextSibling; },
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        parentElement: function (node) { return (node.parentNode); }
	    };
	    var DomRenderer = (function () {
	        /**
	         * @param {?} _rootRenderer
	         * @param {?} componentProto
	         * @param {?} _animationDriver
	         * @param {?} styleShimId
	         */
	        function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {
	            this._rootRenderer = _rootRenderer;
	            this.componentProto = componentProto;
	            this._animationDriver = _animationDriver;
	            this.directRenderer = DIRECT_DOM_RENDERER;
	            this._styles = flattenStyles(styleShimId, componentProto.styles, []);
	            if (componentProto.encapsulation !== core.ViewEncapsulation.Native) {
	                this._rootRenderer.sharedStylesHost.addStyles(this._styles);
	            }
	            if (this.componentProto.encapsulation === core.ViewEncapsulation.Emulated) {
	                this._contentAttr = shimContentAttribute(styleShimId);
	                this._hostAttr = shimHostAttribute(styleShimId);
	            }
	            else {
	                this._contentAttr = null;
	                this._hostAttr = null;
	            }
	        }
	        /**
	         * @param {?} selectorOrNode
	         * @param {?} debugInfo
	         * @return {?}
	         */
	        DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
	            var /** @type {?} */ el;
	            if (typeof selectorOrNode === 'string') {
	                el = this._rootRenderer.document.querySelector(selectorOrNode);
	                if (!el) {
	                    throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
	                }
	            }
	            else {
	                el = selectorOrNode;
	            }
	            while (el.firstChild) {
	                el.removeChild(el.firstChild);
	            }
	            return el;
	        };
	        /**
	         * @param {?} parent
	         * @param {?} name
	         * @param {?} debugInfo
	         * @return {?}
	         */
	        DomRenderer.prototype.createElement = function (parent, name, debugInfo) {
	            var /** @type {?} */ el;
	            if (isNamespaced(name)) {
	                var /** @type {?} */ nsAndName = splitNamespace(name);
	                el = document.createElementNS((NAMESPACE_URIS)[nsAndName[0]], nsAndName[1]);
	            }
	            else {
	                el = document.createElement(name);
	            }
	            if (this._contentAttr) {
	                el.setAttribute(this._contentAttr, '');
	            }
	            if (parent) {
	                parent.appendChild(el);
	            }
	            return el;
	        };
	        /**
	         * @param {?} hostElement
	         * @return {?}
	         */
	        DomRenderer.prototype.createViewRoot = function (hostElement) {
	            var /** @type {?} */ nodesParent;
	            if (this.componentProto.encapsulation === core.ViewEncapsulation.Native) {
	                nodesParent = ((hostElement)).createShadowRoot();
	                this._rootRenderer.sharedStylesHost.addHost(nodesParent);
	                for (var /** @type {?} */ i = 0; i < this._styles.length; i++) {
	                    var /** @type {?} */ styleEl = document.createElement('style');
	                    styleEl.textContent = this._styles[i];
	                    nodesParent.appendChild(styleEl);
	                }
	            }
	            else {
	                if (this._hostAttr) {
	                    hostElement.setAttribute(this._hostAttr, '');
	                }
	                nodesParent = hostElement;
	            }
	            return nodesParent;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} debugInfo
	         * @return {?}
	         */
	        DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
	            var /** @type {?} */ comment = document.createComment(TEMPLATE_COMMENT_TEXT);
	            if (parentElement) {
	                parentElement.appendChild(comment);
	            }
	            return comment;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} value
	         * @param {?} debugInfo
	         * @return {?}
	         */
	        DomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
	            var /** @type {?} */ node = document.createTextNode(value);
	            if (parentElement) {
	                parentElement.appendChild(node);
	            }
	            return node;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} nodes
	         * @return {?}
	         */
	        DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	            if (!parentElement)
	                return;
	            appendNodes(parentElement, nodes);
	        };
	        /**
	         * @param {?} node
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) { moveNodesAfterSibling(node, viewRootNodes); };
	        /**
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        DomRenderer.prototype.detachView = function (viewRootNodes) {
	            for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
	                var /** @type {?} */ node = viewRootNodes[i];
	                if (node.parentNode) {
	                    node.parentNode.removeChild(node);
	                }
	            }
	        };
	        /**
	         * @param {?} hostElement
	         * @param {?} viewAllNodes
	         * @return {?}
	         */
	        DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	            if (this.componentProto.encapsulation === core.ViewEncapsulation.Native && hostElement) {
	                this._rootRenderer.sharedStylesHost.removeHost(((hostElement)).shadowRoot);
	            }
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        DomRenderer.prototype.listen = function (renderElement, name, callback) {
	            return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
	        };
	        /**
	         * @param {?} target
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        DomRenderer.prototype.listenGlobal = function (target, name, callback) {
	            return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	            ((renderElement))[propertyName] = propertyValue;
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} attributeName
	         * @param {?} attributeValue
	         * @return {?}
	         */
	        DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	            var /** @type {?} */ attrNs;
	            var /** @type {?} */ attrNameWithoutNs = attributeName;
	            if (isNamespaced(attributeName)) {
	                var /** @type {?} */ nsAndName = splitNamespace(attributeName);
	                attrNameWithoutNs = nsAndName[1];
	                attributeName = nsAndName[0] + ':' + nsAndName[1];
	                attrNs = NAMESPACE_URIS[nsAndName[0]];
	            }
	            if (isPresent(attributeValue)) {
	                if (attrNs) {
	                    renderElement.setAttributeNS(attrNs, attributeName, attributeValue);
	                }
	                else {
	                    renderElement.setAttribute(attributeName, attributeValue);
	                }
	            }
	            else {
	                if (isPresent(attrNs)) {
	                    renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);
	                }
	                else {
	                    renderElement.removeAttribute(attributeName);
	                }
	            }
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	            if (renderElement.nodeType === Node.COMMENT_NODE) {
	                var /** @type {?} */ existingBindings = renderElement.nodeValue.replace(/\n/g, '').match(TEMPLATE_BINDINGS_EXP);
	                var /** @type {?} */ parsedBindings = JSON.parse(existingBindings[1]);
	                parsedBindings[propertyName] = propertyValue;
	                renderElement.nodeValue =
	                    TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2));
	            }
	            else {
	                this.setElementAttribute(renderElement, propertyName, propertyValue);
	            }
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} className
	         * @param {?} isAdd
	         * @return {?}
	         */
	        DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	            if (isAdd) {
	                renderElement.classList.add(className);
	            }
	            else {
	                renderElement.classList.remove(className);
	            }
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	            if (isPresent(styleValue)) {
	                ((renderElement.style))[styleName] = stringify(styleValue);
	            }
	            else {
	                // IE requires '' instead of null
	                // see https://github.com/angular/angular/issues/7916
	                ((renderElement.style))[styleName] = '';
	            }
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} methodName
	         * @param {?} args
	         * @return {?}
	         */
	        DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	            ((renderElement))[methodName].apply(renderElement, args);
	        };
	        /**
	         * @param {?} renderNode
	         * @param {?} text
	         * @return {?}
	         */
	        DomRenderer.prototype.setText = function (renderNode, text) { renderNode.nodeValue = text; };
	        /**
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            if (this._rootRenderer.document.body.contains(element)) {
	                return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
	            }
	            return new NoOpAnimationPlayer();
	        };
	        return DomRenderer;
	    }());
	    /**
	     * @param {?} sibling
	     * @param {?} nodes
	     * @return {?}
	     */
	    function moveNodesAfterSibling(sibling, nodes) {
	        var /** @type {?} */ parent = sibling.parentNode;
	        if (nodes.length > 0 && parent) {
	            var /** @type {?} */ nextSibling = sibling.nextSibling;
	            if (nextSibling) {
	                for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	                    parent.insertBefore(nodes[i], nextSibling);
	                }
	            }
	            else {
	                for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	                    parent.appendChild(nodes[i]);
	                }
	            }
	        }
	    }
	    /**
	     * @param {?} parent
	     * @param {?} nodes
	     * @return {?}
	     */
	    function appendNodes(parent, nodes) {
	        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	            parent.appendChild(nodes[i]);
	        }
	    }
	    /**
	     * @param {?} eventHandler
	     * @return {?}
	     */
	    function decoratePreventDefault(eventHandler) {
	        return function (event) {
	            var /** @type {?} */ allowDefaultBehavior = eventHandler(event);
	            if (allowDefaultBehavior === false) {
	                // TODO(tbosch): move preventDefault into event plugins...
	                event.preventDefault();
	                event.returnValue = false;
	            }
	        };
	    }
	    var /** @type {?} */ COMPONENT_REGEX = /%COMP%/g;
	    var /** @type {?} */ COMPONENT_VARIABLE = '%COMP%';
	    var /** @type {?} */ HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	    var /** @type {?} */ CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	    /**
	     * @param {?} componentShortId
	     * @return {?}
	     */
	    function shimContentAttribute(componentShortId) {
	        return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
	    }
	    /**
	     * @param {?} componentShortId
	     * @return {?}
	     */
	    function shimHostAttribute(componentShortId) {
	        return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
	    }
	    /**
	     * @param {?} compId
	     * @param {?} styles
	     * @param {?} target
	     * @return {?}
	     */
	    function flattenStyles(compId, styles, target) {
	        for (var /** @type {?} */ i = 0; i < styles.length; i++) {
	            var /** @type {?} */ style = styles[i];
	            if (Array.isArray(style)) {
	                flattenStyles(compId, style, target);
	            }
	            else {
	                style = style.replace(COMPONENT_REGEX, compId);
	                target.push(style);
	            }
	        }
	        return target;
	    }
	    var /** @type {?} */ NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    function isNamespaced(name) {
	        return name[0] === ':';
	    }
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    function splitNamespace(name) {
	        var /** @type {?} */ match = name.match(NS_PREFIX_RE);
	        return [match[1], match[2]];
	    }

	    var /** @type {?} */ CORE_TOKENS = {
	        'ApplicationRef': core.ApplicationRef,
	        'NgZone': core.NgZone,
	    };
	    var /** @type {?} */ INSPECT_GLOBAL_NAME = 'ng.probe';
	    var /** @type {?} */ CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
	    /**
	     * Returns a {\@link DebugElement} for the given native DOM element, or
	     * null if the given native element does not have an Angular view associated
	     * with it.
	     * @param {?} element
	     * @return {?}
	     */
	    function inspectNativeElement(element) {
	        return core.getDebugNode(element);
	    }
	    /**
	     * Deprecated. Use the one from '\@angular/core'.
	     * @deprecated
	     */
	    var NgProbeToken = (function () {
	        /**
	         * @param {?} name
	         * @param {?} token
	         */
	        function NgProbeToken(name, token) {
	            this.name = name;
	            this.token = token;
	        }
	        return NgProbeToken;
	    }());
	    /**
	     * @param {?} rootRenderer
	     * @param {?} extraTokens
	     * @param {?} coreTokens
	     * @return {?}
	     */
	    function _createConditionalRootRenderer(rootRenderer, extraTokens, coreTokens) {
	        return core.isDevMode() ?
	            _createRootRenderer(rootRenderer, (extraTokens || []).concat(coreTokens || [])) :
	            rootRenderer;
	    }
	    /**
	     * @param {?} rootRenderer
	     * @param {?} extraTokens
	     * @return {?}
	     */
	    function _createRootRenderer(rootRenderer, extraTokens) {
	        getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
	        getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
	        return new DebugDomRootRenderer(rootRenderer);
	    }
	    /**
	     * @param {?} tokens
	     * @return {?}
	     */
	    function _ngProbeTokensToMap(tokens) {
	        return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
	    }
	    /**
	     * Providers which support debugging Angular applications (e.g. via `ng.probe`).
	     */
	    var /** @type {?} */ ELEMENT_PROBE_PROVIDERS = [{
	            provide: core.RootRenderer,
	            useFactory: _createConditionalRootRenderer,
	            deps: [
	                DomRootRenderer, [NgProbeToken, new core.Optional()],
	                [core.NgProbeToken, new core.Optional()]
	            ]
	        }];

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var DomEventsPlugin = (function (_super) {
	        __extends$5(DomEventsPlugin, _super);
	        function DomEventsPlugin() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} eventName
	         * @return {?}
	         */
	        DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	        /**
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            element.addEventListener(eventName, /** @type {?} */ (handler), false);
	            return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };
	        };
	        DomEventsPlugin.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        DomEventsPlugin.ctorParameters = function () { return []; };
	        return DomEventsPlugin;
	    }(EventManagerPlugin));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ EVENT_NAMES = {
	        // pan
	        'pan': true,
	        'panstart': true,
	        'panmove': true,
	        'panend': true,
	        'pancancel': true,
	        'panleft': true,
	        'panright': true,
	        'panup': true,
	        'pandown': true,
	        // pinch
	        'pinch': true,
	        'pinchstart': true,
	        'pinchmove': true,
	        'pinchend': true,
	        'pinchcancel': true,
	        'pinchin': true,
	        'pinchout': true,
	        // press
	        'press': true,
	        'pressup': true,
	        // rotate
	        'rotate': true,
	        'rotatestart': true,
	        'rotatemove': true,
	        'rotateend': true,
	        'rotatecancel': true,
	        // swipe
	        'swipe': true,
	        'swipeleft': true,
	        'swiperight': true,
	        'swipeup': true,
	        'swipedown': true,
	        // tap
	        'tap': true,
	    };
	    /**
	     * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure
	     * Hammer gestures.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ HAMMER_GESTURE_CONFIG = new core.OpaqueToken('HammerGestureConfig');
	    /**
	     * \@experimental
	     */
	    var HammerGestureConfig = (function () {
	        function HammerGestureConfig() {
	            this.events = [];
	            this.overrides = {};
	        }
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        HammerGestureConfig.prototype.buildHammer = function (element) {
	            var /** @type {?} */ mc = new Hammer(element);
	            mc.get('pinch').set({ enable: true });
	            mc.get('rotate').set({ enable: true });
	            for (var eventName in this.overrides) {
	                mc.get(eventName).set(this.overrides[eventName]);
	            }
	            return mc;
	        };
	        HammerGestureConfig.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        HammerGestureConfig.ctorParameters = function () { return []; };
	        return HammerGestureConfig;
	    }());
	    var HammerGesturesPlugin = (function (_super) {
	        __extends$6(HammerGesturesPlugin, _super);
	        /**
	         * @param {?} _config
	         */
	        function HammerGesturesPlugin(_config) {
	            _super.call(this);
	            this._config = _config;
	        }
	        /**
	         * @param {?} eventName
	         * @return {?}
	         */
	        HammerGesturesPlugin.prototype.supports = function (eventName) {
	            if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
	                return false;
	            }
	            if (!((window)).Hammer) {
	                throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
	            }
	            return true;
	        };
	        /**
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            var _this = this;
	            var /** @type {?} */ zone = this.manager.getZone();
	            eventName = eventName.toLowerCase();
	            return zone.runOutsideAngular(function () {
	                // Creating the manager bind events, must be done outside of angular
	                var /** @type {?} */ mc = _this._config.buildHammer(element);
	                var /** @type {?} */ callback = function (eventObj) {
	                    zone.runGuarded(function () { handler(eventObj); });
	                };
	                mc.on(eventName, callback);
	                return function () { return mc.off(eventName, callback); };
	            });
	        };
	        /**
	         * @param {?} eventName
	         * @return {?}
	         */
	        HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
	        HammerGesturesPlugin.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        HammerGesturesPlugin.ctorParameters = function () { return [
	            { type: HammerGestureConfig, decorators: [{ type: core.Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
	        ]; };
	        return HammerGesturesPlugin;
	    }(EventManagerPlugin));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
	    var /** @type {?} */ MODIFIER_KEY_GETTERS = {
	        'alt': function (event) { return event.altKey; },
	        'control': function (event) { return event.ctrlKey; },
	        'meta': function (event) { return event.metaKey; },
	        'shift': function (event) { return event.shiftKey; }
	    };
	    /**
	     * \@experimental
	     */
	    var KeyEventsPlugin = (function (_super) {
	        __extends$7(KeyEventsPlugin, _super);
	        function KeyEventsPlugin() {
	            _super.call(this);
	        }
	        /**
	         * @param {?} eventName
	         * @return {?}
	         */
	        KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
	        /**
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            var /** @type {?} */ parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	            var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
	            return this.manager.getZone().runOutsideAngular(function () {
	                return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
	            });
	        };
	        /**
	         * @param {?} eventName
	         * @return {?}
	         */
	        KeyEventsPlugin.parseEventName = function (eventName) {
	            var /** @type {?} */ parts = eventName.toLowerCase().split('.');
	            var /** @type {?} */ domEventName = parts.shift();
	            if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
	                return null;
	            }
	            var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(parts.pop());
	            var /** @type {?} */ fullKey = '';
	            MODIFIER_KEYS.forEach(function (modifierName) {
	                var /** @type {?} */ index = parts.indexOf(modifierName);
	                if (index > -1) {
	                    parts.splice(index, 1);
	                    fullKey += modifierName + '.';
	                }
	            });
	            fullKey += key;
	            if (parts.length != 0 || key.length === 0) {
	                // returning null instead of throwing to let another plugin process the event
	                return null;
	            }
	            var /** @type {?} */ result = {};
	            result['domEventName'] = domEventName;
	            result['fullKey'] = fullKey;
	            return result;
	        };
	        /**
	         * @param {?} event
	         * @return {?}
	         */
	        KeyEventsPlugin.getEventFullKey = function (event) {
	            var /** @type {?} */ fullKey = '';
	            var /** @type {?} */ key = getDOM().getEventKey(event);
	            key = key.toLowerCase();
	            if (key === ' ') {
	                key = 'space'; // for readability
	            }
	            else if (key === '.') {
	                key = 'dot'; // because '.' is used as a separator in event names
	            }
	            MODIFIER_KEYS.forEach(function (modifierName) {
	                if (modifierName != key) {
	                    var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
	                    if (modifierGetter(event)) {
	                        fullKey += modifierName + '.';
	                    }
	                }
	            });
	            fullKey += key;
	            return fullKey;
	        };
	        /**
	         * @param {?} fullKey
	         * @param {?} handler
	         * @param {?} zone
	         * @return {?}
	         */
	        KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
	            return function (event /** TODO #9100 */) {
	                if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
	                    zone.runGuarded(function () { return handler(event); });
	                }
	            };
	        };
	        /**
	         * \@internal
	         * @param {?} keyName
	         * @return {?}
	         */
	        KeyEventsPlugin._normalizeKey = function (keyName) {
	            // TODO: switch to a Map if the mapping grows too much
	            switch (keyName) {
	                case 'esc':
	                    return 'escape';
	                default:
	                    return keyName;
	            }
	        };
	        KeyEventsPlugin.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        KeyEventsPlugin.ctorParameters = function () { return []; };
	        return KeyEventsPlugin;
	    }(EventManagerPlugin));

	    /**
	     * A pattern that recognizes a commonly useful subset of URLs that are safe.
	     *
	     * This regular expression matches a subset of URLs that will not cause script
	     * execution if used in URL context within a HTML document. Specifically, this
	     * regular expression matches if (comment from here on and regex copied from
	     * Soy's EscapingConventions):
	     * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
	     * (2) or no protocol.  A protocol must be followed by a colon. The below
	     *     allows that by allowing colons only after one of the characters [/?#].
	     *     A colon after a hash (#) must be in the fragment.
	     *     Otherwise, a colon after a (?) must be in a query.
	     *     Otherwise, a colon after a single solidus (/) must be in a path.
	     *     Otherwise, a colon after a double solidus (//) must be in the authority
	     *     (before port).
	     *
	     * The pattern disallows &, used in HTML entity declarations before
	     * one of the characters in [/?#]. This disallows HTML entities used in the
	     * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
	     * It also disallows HTML entities in the first path part of a relative path,
	     * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
	     * that. More importantly, it disallows masking of a colon,
	     * e.g. "javascript&#58;...".
	     *
	     * This regular expression was taken from the Closure sanitization library.
	     */
	    var /** @type {?} */ SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
	    /** A pattern that matches safe data URLs. Only matches image, video and audio types. */
	    var /** @type {?} */ DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    function sanitizeUrl(url) {
	        url = String(url);
	        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
	            return url;
	        if (core.isDevMode()) {
	            getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
	        }
	        return 'unsafe:' + url;
	    }
	    /**
	     * @param {?} srcset
	     * @return {?}
	     */
	    function sanitizeSrcset(srcset) {
	        srcset = String(srcset);
	        return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
	    }

	    /** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */
	    var /** @type {?} */ inertElement = null;
	    /** Lazily initialized to make sure the DOM adapter gets set before use. */
	    var /** @type {?} */ DOM = null;
	    /**
	     * Returns an HTML element that is guaranteed to not execute code when creating elements in it.
	     * @return {?}
	     */
	    function getInertElement() {
	        if (inertElement)
	            return inertElement;
	        DOM = getDOM();
	        // Prefer using <template> element if supported.
	        var /** @type {?} */ templateEl = DOM.createElement('template');
	        if ('content' in templateEl)
	            return templateEl;
	        var /** @type {?} */ doc = DOM.createHtmlDocument();
	        inertElement = DOM.querySelector(doc, 'body');
	        if (inertElement == null) {
	            // usually there should be only one body element in the document, but IE doesn't have any, so we
	            // need to create one.
	            var /** @type {?} */ html = DOM.createElement('html', doc);
	            inertElement = DOM.createElement('body', doc);
	            DOM.appendChild(html, inertElement);
	            DOM.appendChild(doc, html);
	        }
	        return inertElement;
	    }
	    /**
	     * @param {?} tags
	     * @return {?}
	     */
	    function tagSet(tags) {
	        var /** @type {?} */ res = {};
	        for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
	            var t = _a[_i];
	            res[t] = true;
	        }
	        return res;
	    }
	    /**
	     * @param {...?} sets
	     * @return {?}
	     */
	    function merge() {
	        var sets = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            sets[_i - 0] = arguments[_i];
	        }
	        var /** @type {?} */ res = {};
	        for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
	            var s = sets_1[_a];
	            for (var v in s) {
	                if (s.hasOwnProperty(v))
	                    res[v] = true;
	            }
	        }
	        return res;
	    }
	    // Good source of info about elements and attributes
	    // http://dev.w3.org/html5/spec/Overview.html#semantics
	    // http://simon.html5.org/html-elements
	    // Safe Void Elements - HTML5
	    // http://dev.w3.org/html5/spec/Overview.html#void-elements
	    var /** @type {?} */ VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
	    // Elements that you can, intentionally, leave open (and which close themselves)
	    // http://dev.w3.org/html5/spec/Overview.html#optional-tags
	    var /** @type {?} */ OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
	    var /** @type {?} */ OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
	    var /** @type {?} */ OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
	    // Safe Block Elements - HTML5
	    var /** @type {?} */ BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
	        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
	        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
	    // Inline Elements - HTML5
	    var /** @type {?} */ INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
	        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
	        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
	    var /** @type {?} */ VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
	    // Attributes that have href and hence need to be sanitized
	    var /** @type {?} */ URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
	    // Attributes that have special href set hence need to be sanitized
	    var /** @type {?} */ SRCSET_ATTRS = tagSet('srcset');
	    var /** @type {?} */ HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
	        'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
	        'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
	        'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
	        'valign,value,vspace,width');
	    // NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
	    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
	    // innerHTML is required, SVG attributes should be added here.
	    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
	    // can be sanitized, but they increase security surface area without a legitimate use case, so they
	    // are left out here.
	    var /** @type {?} */ VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
	    /**
	     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
	     * attributes.
	     */
	    var SanitizingHtmlSerializer = (function () {
	        function SanitizingHtmlSerializer() {
	            this.sanitizedSomething = false;
	            this.buf = [];
	        }
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
	            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
	            // However this code never accesses properties off of `document` before deleting its contents
	            // again, so it shouldn't be vulnerable to DOM clobbering.
	            var /** @type {?} */ current = el.firstChild;
	            while (current) {
	                if (DOM.isElementNode(current)) {
	                    this.startElement(/** @type {?} */ (current));
	                }
	                else if (DOM.isTextNode(current)) {
	                    this.chars(DOM.nodeValue(current));
	                }
	                else {
	                    // Strip non-element, non-text nodes.
	                    this.sanitizedSomething = true;
	                }
	                if (DOM.firstChild(current)) {
	                    current = DOM.firstChild(current);
	                    continue;
	                }
	                while (current) {
	                    // Leaving the element. Walk up and to the right, closing tags as we go.
	                    if (DOM.isElementNode(current)) {
	                        this.endElement(/** @type {?} */ (current));
	                    }
	                    if (DOM.nextSibling(current)) {
	                        current = DOM.nextSibling(current);
	                        break;
	                    }
	                    current = DOM.parentElement(current);
	                }
	            }
	            return this.buf.join('');
	        };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        SanitizingHtmlSerializer.prototype.startElement = function (element) {
	            var _this = this;
	            var /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();
	            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
	                this.sanitizedSomething = true;
	                return;
	            }
	            this.buf.push('<');
	            this.buf.push(tagName);
	            DOM.attributeMap(element).forEach(function (value, attrName) {
	                var /** @type {?} */ lower = attrName.toLowerCase();
	                if (!VALID_ATTRS.hasOwnProperty(lower)) {
	                    _this.sanitizedSomething = true;
	                    return;
	                }
	                // TODO(martinprobst): Special case image URIs for data:image/...
	                if (URI_ATTRS[lower])
	                    value = sanitizeUrl(value);
	                if (SRCSET_ATTRS[lower])
	                    value = sanitizeSrcset(value);
	                _this.buf.push(' ');
	                _this.buf.push(attrName);
	                _this.buf.push('="');
	                _this.buf.push(encodeEntities(value));
	                _this.buf.push('"');
	            });
	            this.buf.push('>');
	        };
	        /**
	         * @param {?} current
	         * @return {?}
	         */
	        SanitizingHtmlSerializer.prototype.endElement = function (current) {
	            var /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();
	            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
	                this.buf.push('</');
	                this.buf.push(tagName);
	                this.buf.push('>');
	            }
	        };
	        /**
	         * @param {?} chars
	         * @return {?}
	         */
	        SanitizingHtmlSerializer.prototype.chars = function (chars /** TODO #9100 */) { this.buf.push(encodeEntities(chars)); };
	        return SanitizingHtmlSerializer;
	    }());
	    // Regular Expressions for parsing tags and attributes
	    var /** @type {?} */ SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	    // ! to ~ is the ASCII range.
	    var /** @type {?} */ NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	    /**
	     * Escapes all potentially dangerous characters, so that the
	     * resulting string can be safely inserted into attribute or
	     * element text.
	     * @param {?} value
	     * @return {?}
	     */
	    function encodeEntities(value) {
	        return value.replace(/&/g, '&amp;')
	            .replace(SURROGATE_PAIR_REGEXP, function (match) {
	            var /** @type {?} */ hi = match.charCodeAt(0);
	            var /** @type {?} */ low = match.charCodeAt(1);
	            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	        })
	            .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
	            .replace(/</g, '&lt;')
	            .replace(/>/g, '&gt;');
	    }
	    /**
	     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
	     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
	     *
	     * This is undesirable since we don't want to allow any of these custom attributes. This method
	     * strips them all.
	     * @param {?} el
	     * @return {?}
	     */
	    function stripCustomNsAttrs(el) {
	        DOM.attributeMap(el).forEach(function (_, attrName) {
	            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	                DOM.removeAttribute(el, attrName);
	            }
	        });
	        for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
	            var n = _a[_i];
	            if (DOM.isElementNode(n))
	                stripCustomNsAttrs(/** @type {?} */ (n));
	        }
	    }
	    /**
	     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
	     * the DOM in a browser environment.
	     * @param {?} unsafeHtmlInput
	     * @return {?}
	     */
	    function sanitizeHtml(unsafeHtmlInput) {
	        try {
	            var /** @type {?} */ containerEl = getInertElement();
	            // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
	            var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
	            // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
	            // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
	            var /** @type {?} */ mXSSAttempts = 5;
	            var /** @type {?} */ parsedHtml = unsafeHtml;
	            do {
	                if (mXSSAttempts === 0) {
	                    throw new Error('Failed to sanitize html because the input is unstable');
	                }
	                mXSSAttempts--;
	                unsafeHtml = parsedHtml;
	                DOM.setInnerHTML(containerEl, unsafeHtml);
	                if (((DOM.defaultDoc())).documentMode) {
	                    // strip custom-namespaced attributes on IE<=11
	                    stripCustomNsAttrs(containerEl);
	                }
	                parsedHtml = DOM.getInnerHTML(containerEl);
	            } while (unsafeHtml !== parsedHtml);
	            var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();
	            var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
	            // Clear out the body element.
	            var /** @type {?} */ parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
	            for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
	                var child = _a[_i];
	                DOM.removeChild(parent_1, child);
	            }
	            if (core.isDevMode() && sanitizer.sanitizedSomething) {
	                DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
	            }
	            return safeHtml;
	        }
	        catch (e) {
	            // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
	            inertElement = null;
	            throw e;
	        }
	    }

	    /**
	     * Regular expression for safe style values.
	     *
	     * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
	     *
	     * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
	     * font-family) and hence could allow multiple values to get injected, but that should pose no risk
	     * of XSS.
	     *
	     * The function expression checks only for XSS safety, not for CSS validity.
	     *
	     * This regular expression was taken from the Closure sanitization library, and augmented for
	     * transformation values.
	     */
	    var /** @type {?} */ VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
	    var /** @type {?} */ TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
	    var /** @type {?} */ COLOR_FNS = '(?:rgb|hsl)a?';
	    var /** @type {?} */ GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
	    var /** @type {?} */ CSS3_FNS = '(?:calc|attr)';
	    var /** @type {?} */ FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
	    var /** @type {?} */ SAFE_STYLE_VALUE = new RegExp(("^(" + VALUES + "|") +
	        ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
	        (FN_ARGS + ")$"), 'g');
	    /**
	     * Matches a `url(...)` value with an arbitrary argument as long as it does
	     * not contain parentheses.
	     *
	     * The URL value still needs to be sanitized separately.
	     *
	     * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
	     * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
	     * by observing whether scroll bars are displayed, or character ranges used by a font face
	     * definition.
	     *
	     * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
	     * binding a URL value without further cooperation from the page will cause an information leak, and
	     * if so, it is just a leak, not a full blown XSS vulnerability.
	     *
	     * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
	     * code is permissive and allows URLs that sanitize otherwise.
	     */
	    var /** @type {?} */ URL_RE = /^url\(([^)]+)\)$/;
	    /**
	     * Checks that quotes (" and ') are properly balanced inside a string. Assumes
	     * that neither escape (\) nor any other character that could result in
	     * breaking out of a string parsing context are allowed;
	     * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
	     *
	     * This code was taken from the Closure sanitization library.
	     * @param {?} value
	     * @return {?}
	     */
	    function hasBalancedQuotes(value) {
	        var /** @type {?} */ outsideSingle = true;
	        var /** @type {?} */ outsideDouble = true;
	        for (var /** @type {?} */ i = 0; i < value.length; i++) {
	            var /** @type {?} */ c = value.charAt(i);
	            if (c === '\'' && outsideDouble) {
	                outsideSingle = !outsideSingle;
	            }
	            else if (c === '"' && outsideSingle) {
	                outsideDouble = !outsideDouble;
	            }
	        }
	        return outsideSingle && outsideDouble;
	    }
	    /**
	     * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
	     * value) and returns a value that is safe to use in a browser environment.
	     * @param {?} value
	     * @return {?}
	     */
	    function sanitizeStyle(value) {
	        value = String(value).trim(); // Make sure it's actually a string.
	        if (!value)
	            return '';
	        // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
	        // reasoning behind this.
	        var /** @type {?} */ urlMatch = value.match(URL_RE);
	        if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
	            value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
	            return value; // Safe style values.
	        }
	        if (core.isDevMode()) {
	            getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
	        }
	        return 'unsafe';
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
	     * values to be safe to use in the different DOM contexts.
	     *
	     * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
	     * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
	     * the website.
	     *
	     * In specific situations, it might be necessary to disable sanitization, for example if the
	     * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
	     * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
	     * methods, and then binding to that value from the template.
	     *
	     * These situations should be very rare, and extraordinary care must be taken to avoid creating a
	     * Cross Site Scripting (XSS) security bug!
	     *
	     * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
	     * close as possible to the source of the value, to make it easy to verify no security bug is
	     * created by its use.
	     *
	     * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
	     * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
	     * code. The sanitizer leaves safe values intact.
	     *
	     * \@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
	     * sanitization for the value passed in. Carefully check and audit all values and code paths going
	     * into this call. Make sure any user data is appropriately escaped for this security context.
	     * For more detail, see the [Security Guide](http://g.co/ng/security).
	     *
	     * \@stable
	     * @abstract
	     */
	    var DomSanitizer = (function () {
	        function DomSanitizer() {
	        }
	        /**
	         * Sanitizes a value for use in the given SecurityContext.
	         *
	         * If value is trusted for the context, this method will unwrap the contained safe value and use
	         * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
	         * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
	         * is responsible to make sure that the value can definitely be safely used in the given context.
	         * @abstract
	         * @param {?} context
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.sanitize = function (context, value) { };
	        /**
	         * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
	         * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
	         * leave safe HTML intact, so in most situations this method should not be used.
	         *
	         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	         * security risks!
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };
	        /**
	         * Bypass security and trust the given value to be safe style value (CSS).
	         *
	         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	         * security risks!
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };
	        /**
	         * Bypass security and trust the given value to be safe JavaScript.
	         *
	         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	         * security risks!
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };
	        /**
	         * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
	         * in hyperlinks or `<img src>`.
	         *
	         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	         * security risks!
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };
	        /**
	         * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
	         * be used to load executable code from, like `<script src>`, or `<iframe src>`.
	         *
	         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	         * security risks!
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };
	        return DomSanitizer;
	    }());
	    var DomSanitizerImpl = (function (_super) {
	        __extends$8(DomSanitizerImpl, _super);
	        function DomSanitizerImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} ctx
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
	            if (value == null)
	                return null;
	            switch (ctx) {
	                case core.SecurityContext.NONE:
	                    return value;
	                case core.SecurityContext.HTML:
	                    if (value instanceof SafeHtmlImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'HTML');
	                    return sanitizeHtml(String(value));
	                case core.SecurityContext.STYLE:
	                    if (value instanceof SafeStyleImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'Style');
	                    return sanitizeStyle(value);
	                case core.SecurityContext.SCRIPT:
	                    if (value instanceof SafeScriptImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'Script');
	                    throw new Error('unsafe value used in a script context');
	                case core.SecurityContext.URL:
	                    if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
	                        // Allow resource URLs in URL contexts, they are strictly more trusted.
	                        return value.changingThisBreaksApplicationSecurity;
	                    }
	                    this.checkNotSafeValue(value, 'URL');
	                    return sanitizeUrl(String(value));
	                case core.SecurityContext.RESOURCE_URL:
	                    if (value instanceof SafeResourceUrlImpl) {
	                        return value.changingThisBreaksApplicationSecurity;
	                    }
	                    this.checkNotSafeValue(value, 'ResourceURL');
	                    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
	                default:
	                    throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
	            }
	        };
	        /**
	         * @param {?} value
	         * @param {?} expectedType
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
	            if (value instanceof SafeValueImpl) {
	                throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") +
	                    "(see http://g.co/ng/security#xss)");
	            }
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
	            return new SafeResourceUrlImpl(value);
	        };
	        DomSanitizerImpl.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        DomSanitizerImpl.ctorParameters = function () { return []; };
	        return DomSanitizerImpl;
	    }(DomSanitizer));
	    /**
	     * @abstract
	     */
	    var SafeValueImpl = (function () {
	        /**
	         * @param {?} changingThisBreaksApplicationSecurity
	         */
	        function SafeValueImpl(changingThisBreaksApplicationSecurity) {
	            this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
	            // empty
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        SafeValueImpl.prototype.getTypeName = function () { };
	        /**
	         * @return {?}
	         */
	        SafeValueImpl.prototype.toString = function () {
	            return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) +
	                " (see http://g.co/ng/security#xss)";
	        };
	        return SafeValueImpl;
	    }());
	    var SafeHtmlImpl = (function (_super) {
	        __extends$8(SafeHtmlImpl, _super);
	        function SafeHtmlImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
	        return SafeHtmlImpl;
	    }(SafeValueImpl));
	    var SafeStyleImpl = (function (_super) {
	        __extends$8(SafeStyleImpl, _super);
	        function SafeStyleImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
	        return SafeStyleImpl;
	    }(SafeValueImpl));
	    var SafeScriptImpl = (function (_super) {
	        __extends$8(SafeScriptImpl, _super);
	        function SafeScriptImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
	        return SafeScriptImpl;
	    }(SafeValueImpl));
	    var SafeUrlImpl = (function (_super) {
	        __extends$8(SafeUrlImpl, _super);
	        function SafeUrlImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
	        return SafeUrlImpl;
	    }(SafeValueImpl));
	    var SafeResourceUrlImpl = (function (_super) {
	        __extends$8(SafeResourceUrlImpl, _super);
	        function SafeResourceUrlImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
	        return SafeResourceUrlImpl;
	    }(SafeValueImpl));

	    var /** @type {?} */ INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
	        { provide: core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
	        { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation }
	    ];
	    /**
	     * @security Replacing built-in sanitization providers exposes the application to XSS risks.
	     * Attacker-controlled data introduced by an unsanitized provider could expose your
	     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	     * @experimental
	     */
	    var /** @type {?} */ BROWSER_SANITIZATION_PROVIDERS = [
	        { provide: core.Sanitizer, useExisting: DomSanitizer },
	        { provide: DomSanitizer, useClass: DomSanitizerImpl },
	    ];
	    /**
	     * @stable
	     */
	    var /** @type {?} */ platformBrowser = core.createPlatformFactory(core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
	    /**
	     * @return {?}
	     */
	    function initDomAdapter() {
	        BrowserDomAdapter.makeCurrent();
	        BrowserGetTestability.init();
	    }
	    /**
	     * @return {?}
	     */
	    function errorHandler() {
	        return new core.ErrorHandler();
	    }
	    /**
	     * @return {?}
	     */
	    function _document() {
	        return getDOM().defaultDoc();
	    }
	    /**
	     * @return {?}
	     */
	    function _resolveDefaultAnimationDriver() {
	        if (getDOM().supportsWebAnimation()) {
	            return new WebAnimationsDriver();
	        }
	        return AnimationDriver.NOOP;
	    }
	    /**
	     * The ng module for the browser.
	     *
	     * \@stable
	     */
	    var BrowserModule = (function () {
	        /**
	         * @param {?} parentModule
	         */
	        function BrowserModule(parentModule) {
	            if (parentModule) {
	                throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
	            }
	        }
	        BrowserModule.decorators = [
	            { type: core.NgModule, args: [{
	                        providers: [
	                            BROWSER_SANITIZATION_PROVIDERS, { provide: core.ErrorHandler, useFactory: errorHandler, deps: [] },
	                            { provide: DOCUMENT, useFactory: _document, deps: [] },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
	                            { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
	                            { provide: DomRootRenderer, useClass: DomRootRenderer_ },
	                            { provide: core.RootRenderer, useExisting: DomRootRenderer },
	                            { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
	                            { provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, DomSharedStylesHost,
	                            core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title
	                        ],
	                        exports: [_angular_common.CommonModule, core.ApplicationModule]
	                    },] },
	        ];
	        /** @nocollapse */
	        BrowserModule.ctorParameters = function () { return [
	            { type: BrowserModule, decorators: [{ type: core.Optional }, { type: core.SkipSelf },] },
	        ]; };
	        return BrowserModule;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * JS version of browser APIs. This library can only run in the browser.
	     */
	    var /** @type {?} */ win = typeof window !== 'undefined' && window || ({});

	    var ChangeDetectionPerfRecord = (function () {
	        /**
	         * @param {?} msPerTick
	         * @param {?} numTicks
	         */
	        function ChangeDetectionPerfRecord(msPerTick, numTicks) {
	            this.msPerTick = msPerTick;
	            this.numTicks = numTicks;
	        }
	        return ChangeDetectionPerfRecord;
	    }());
	    /**
	     * Entry point for all Angular debug tools. This object corresponds to the `ng`
	     * global variable accessible in the dev console.
	     */
	    var AngularTools = (function () {
	        /**
	         * @param {?} ref
	         */
	        function AngularTools(ref) {
	            this.profiler = new AngularProfiler(ref);
	        }
	        return AngularTools;
	    }());
	    /**
	     * Entry point for all Angular profiling-related debug tools. This object
	     * corresponds to the `ng.profiler` in the dev console.
	     */
	    var AngularProfiler = (function () {
	        /**
	         * @param {?} ref
	         */
	        function AngularProfiler(ref) {
	            this.appRef = ref.injector.get(core.ApplicationRef);
	        }
	        /**
	         * Exercises change detection in a loop and then prints the average amount of
	         * time in milliseconds how long a single round of change detection takes for
	         * the current state of the UI. It runs a minimum of 5 rounds for a minimum
	         * of 500 milliseconds.
	         *
	         * Optionally, a user may pass a `config` parameter containing a map of
	         * options. Supported options are:
	         *
	         * `record` (boolean) - causes the profiler to record a CPU profile while
	         * it exercises the change detector. Example:
	         *
	         * ```
	         * ng.profiler.timeChangeDetection({record: true})
	         * ```
	         * @param {?} config
	         * @return {?}
	         */
	        AngularProfiler.prototype.timeChangeDetection = function (config) {
	            var /** @type {?} */ record = config && config['record'];
	            var /** @type {?} */ profileName = 'Change Detection';
	            // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
	            var /** @type {?} */ isProfilerAvailable = isPresent(win.console.profile);
	            if (record && isProfilerAvailable) {
	                win.console.profile(profileName);
	            }
	            var /** @type {?} */ start = getDOM().performanceNow();
	            var /** @type {?} */ numTicks = 0;
	            while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
	                this.appRef.tick();
	                numTicks++;
	            }
	            var /** @type {?} */ end = getDOM().performanceNow();
	            if (record && isProfilerAvailable) {
	                // need to cast to <any> because type checker thinks there's no argument
	                // while in fact there is:
	                //
	                // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
	                ((win.console.profileEnd))(profileName);
	            }
	            var /** @type {?} */ msPerTick = (end - start) / numTicks;
	            win.console.log("ran " + numTicks + " change detection cycles");
	            win.console.log(msPerTick.toFixed(2) + " ms per check");
	            return new ChangeDetectionPerfRecord(msPerTick, numTicks);
	        };
	        return AngularProfiler;
	    }());

	    var /** @type {?} */ context = (global$1);
	    /**
	     * Enabled Angular 2 debug tools that are accessible via your browser's
	     * developer console.
	     *
	     * Usage:
	     *
	     * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
	     * 1. Type `ng.` (usually the console will show auto-complete suggestion)
	     * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
	     *    then hit Enter.
	     *
	     * \@experimental All debugging apis are currently experimental.
	     * @param {?} ref
	     * @return {?}
	     */
	    function enableDebugTools(ref) {
	        ((Object)).assign(context.ng, new AngularTools(ref));
	        return ref;
	    }
	    /**
	     * Disables Angular 2 tools.
	     *
	     * \@experimental All debugging apis are currently experimental.
	     * @return {?}
	     */
	    function disableDebugTools() {
	        if (context.ng) {
	            delete context.ng.profiler;
	        }
	    }

	    /**
	     * Predicates for use with {\@link DebugElement}'s query functions.
	     *
	     * \@experimental All debugging apis are currently experimental.
	     */
	    var By = (function () {
	        function By() {
	        }
	        /**
	         * Match all elements.
	         *
	         * ## Example
	         *
	         * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
	         * @return {?}
	         */
	        By.all = function () { return function (debugElement) { return true; }; };
	        /**
	         * Match elements by the given CSS selector.
	         *
	         * ## Example
	         *
	         * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
	         * @param {?} selector
	         * @return {?}
	         */
	        By.css = function (selector) {
	            return function (debugElement) {
	                return isPresent(debugElement.nativeElement) ?
	                    getDOM().elementMatches(debugElement.nativeElement, selector) :
	                    false;
	            };
	        };
	        /**
	         * Match elements that have the given directive present.
	         *
	         * ## Example
	         *
	         * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
	         * @param {?} type
	         * @return {?}
	         */
	        By.directive = function (type) {
	            return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };
	        };
	        return By;
	    }());

	    var /** @type {?} */ __platform_browser_private__ = {
	        BrowserPlatformLocation: BrowserPlatformLocation,
	        DomAdapter: DomAdapter,
	        BrowserDomAdapter: BrowserDomAdapter,
	        BrowserGetTestability: BrowserGetTestability,
	        getDOM: getDOM,
	        setRootDomAdapter: setRootDomAdapter,
	        DomRootRenderer_: DomRootRenderer_,
	        DomRootRenderer: DomRootRenderer,
	        NAMESPACE_URIS: NAMESPACE_URIS,
	        shimContentAttribute: shimContentAttribute,
	        shimHostAttribute: shimHostAttribute,
	        flattenStyles: flattenStyles,
	        splitNamespace: splitNamespace,
	        isNamespaced: isNamespaced,
	        DomSharedStylesHost: DomSharedStylesHost,
	        SharedStylesHost: SharedStylesHost,
	        ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
	        DomEventsPlugin: DomEventsPlugin,
	        KeyEventsPlugin: KeyEventsPlugin,
	        HammerGesturesPlugin: HammerGesturesPlugin,
	        initDomAdapter: initDomAdapter,
	        INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
	        BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS,
	        WebAnimationsDriver: WebAnimationsDriver
	    };

	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new core.Version('2.4.7');

	    exports.BrowserModule = BrowserModule;
	    exports.platformBrowser = platformBrowser;
	    exports.Title = Title;
	    exports.disableDebugTools = disableDebugTools;
	    exports.enableDebugTools = enableDebugTools;
	    exports.AnimationDriver = AnimationDriver;
	    exports.By = By;
	    exports.NgProbeToken = NgProbeToken;
	    exports.DOCUMENT = DOCUMENT;
	    exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
	    exports.EventManager = EventManager;
	    exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
	    exports.HammerGestureConfig = HammerGestureConfig;
	    exports.DomSanitizer = DomSanitizer;
	    exports.VERSION = VERSION;
	    exports.__platform_browser_private__ = __platform_browser_private__;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.4.7
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(4)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}),global.ng.core));
	}(this, function (exports,_angular_core) { 'use strict';

	    /**
	     * This class should not be used directly by an application developer. Instead, use
	     * {\@link Location}.
	     *
	     * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
	     * agnostic.
	     * This means that we can have different implementation of `PlatformLocation` for the different
	     * platforms
	     * that angular supports. For example, the default `PlatformLocation` is {\@link
	     * BrowserPlatformLocation},
	     * however when you run your app in a WebWorker you use {\@link WebWorkerPlatformLocation}.
	     *
	     * The `PlatformLocation` class is used directly by all implementations of {\@link LocationStrategy}
	     * when
	     * they need to interact with the DOM apis like pushState, popState, etc...
	     *
	     * {\@link LocationStrategy} in turn is used by the {\@link Location} service which is used directly
	     * by
	     * the {\@link Router} in order to navigate between routes. Since all interactions between {\@link
	     * Router} /
	     * {\@link Location} / {\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
	     * class
	     * they are all platform independent.
	     *
	     * \@stable
	     * @abstract
	     */
	    var PlatformLocation = (function () {
	        function PlatformLocation() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        PlatformLocation.prototype.getBaseHrefFromDOM = function () { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        PlatformLocation.prototype.onPopState = function (fn) { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        PlatformLocation.prototype.onHashChange = function (fn) { };
	        Object.defineProperty(PlatformLocation.prototype, "pathname", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformLocation.prototype, "search", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformLocation.prototype, "hash", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @return {?}
	         */
	        PlatformLocation.prototype.replaceState = function (state, title, url) { };
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @return {?}
	         */
	        PlatformLocation.prototype.pushState = function (state, title, url) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        PlatformLocation.prototype.forward = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        PlatformLocation.prototype.back = function () { };
	        return PlatformLocation;
	    }());

	    /**
	     * `LocationStrategy` is responsible for representing and reading route state
	     * from the browser's URL. Angular provides two strategies:
	     * {\@link HashLocationStrategy} and {\@link PathLocationStrategy}.
	     *
	     * This is used under the hood of the {\@link Location} service.
	     *
	     * Applications should use the {\@link Router} or {\@link Location} services to
	     * interact with application route state.
	     *
	     * For instance, {\@link HashLocationStrategy} produces URLs like
	     * `http://example.com#/foo`, and {\@link PathLocationStrategy} produces
	     * `http://example.com/foo` as an equivalent URL.
	     *
	     * See these two classes for more.
	     *
	     * \@stable
	     * @abstract
	     */
	    var LocationStrategy = (function () {
	        function LocationStrategy() {
	        }
	        /**
	         * @abstract
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        LocationStrategy.prototype.path = function (includeHash) { };
	        /**
	         * @abstract
	         * @param {?} internal
	         * @return {?}
	         */
	        LocationStrategy.prototype.prepareExternalUrl = function (internal) { };
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        LocationStrategy.prototype.pushState = function (state, title, url, queryParams) { };
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        LocationStrategy.prototype.forward = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        LocationStrategy.prototype.back = function () { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        LocationStrategy.prototype.onPopState = function (fn) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        LocationStrategy.prototype.getBaseHref = function () { };
	        return LocationStrategy;
	    }());
	    /**
	     * The `APP_BASE_HREF` token represents the base href to be used with the
	     * {@link PathLocationStrategy}.
	     *
	     * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
	     * representing the URL prefix that should be preserved when generating and recognizing
	     * URLs.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * import {Component, NgModule} from '@angular/core';
	     * import {APP_BASE_HREF} from '@angular/common';
	     *
	     * @NgModule({
	     *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
	     * })
	     * class AppModule {}
	     * ```
	     *
	     * @stable
	     */
	    var /** @type {?} */ APP_BASE_HREF = new _angular_core.OpaqueToken('appBaseHref');

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = (self);
	        }
	        else {
	            globalScope = (global);
	        }
	    }
	    else {
	        globalScope = (window);
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var /** @type {?} */ _global = globalScope;
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function getTypeNameForDebugging(type) {
	        return type['name'] || typeof type;
	    }
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    _global.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return "" + token.overriddenName;
	        }
	        if (token.name) {
	            return "" + token.name;
	        }
	        var /** @type {?} */ res = token.toString();
	        var /** @type {?} */ newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    var NumberWrapper = (function () {
	        function NumberWrapper() {
	        }
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        NumberWrapper.parseIntAutoRadix = function (text) {
	            var /** @type {?} */ result = parseInt(text);
	            if (isNaN(result)) {
	                throw new Error('Invalid integer literal when parsing ' + text);
	            }
	            return result;
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	        return NumberWrapper;
	    }());
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    var /** @type {?} */ _symbolIterator = null;
	    /**
	     * @return {?}
	     */
	    function getSymbolIterator() {
	        if (!_symbolIterator) {
	            if (((globalScope)).Symbol && Symbol.iterator) {
	                _symbolIterator = Symbol.iterator;
	            }
	            else {
	                // es6-shim specific logic
	                var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
	                for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	                    var /** @type {?} */ key = keys[i];
	                    if (key !== 'entries' && key !== 'size' &&
	                        ((Map)).prototype[key] === Map.prototype['entries']) {
	                        _symbolIterator = key;
	                    }
	                }
	            }
	        }
	        return _symbolIterator;
	    }

	    /**
	     * \@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.
	     * \@description
	     * Depending on which {\@link LocationStrategy} is used, `Location` will either persist
	     * to the URL's path or the URL's hash segment.
	     *
	     * Note: it's better to use {\@link Router#navigate} service to trigger route changes. Use
	     * `Location` only if you need to interact with or create normalized URLs outside of
	     * routing.
	     *
	     * `Location` is responsible for normalizing the URL against the application's base href.
	     * A normalized URL is absolute from the URL host, includes the application's base href, and has no
	     * trailing slash:
	     * - `/my/app/user/123` is normalized
	     * - `my/app/user/123` **is not** normalized
	     * - `/my/app/user/123/` **is not** normalized
	     *
	     * ### Example
	     * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
	     * \@stable
	     */
	    var Location = (function () {
	        /**
	         * @param {?} platformStrategy
	         */
	        function Location(platformStrategy) {
	            var _this = this;
	            /** @internal */
	            this._subject = new _angular_core.EventEmitter();
	            this._platformStrategy = platformStrategy;
	            var browserBaseHref = this._platformStrategy.getBaseHref();
	            this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
	            this._platformStrategy.onPopState(function (ev) {
	                _this._subject.emit({
	                    'url': _this.path(true),
	                    'pop': true,
	                    'type': ev.type,
	                });
	            });
	        }
	        /**
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        Location.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            return this.normalize(this._platformStrategy.path(includeHash));
	        };
	        /**
	         * Normalizes the given path and compares to the current normalized path.
	         * @param {?} path
	         * @param {?=} query
	         * @return {?}
	         */
	        Location.prototype.isCurrentPathEqualTo = function (path, query) {
	            if (query === void 0) { query = ''; }
	            return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
	        };
	        /**
	         * Given a string representing a URL, returns the normalized URL path without leading or
	         * trailing slashes.
	         * @param {?} url
	         * @return {?}
	         */
	        Location.prototype.normalize = function (url) {
	            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
	        };
	        /**
	         * Given a string representing a URL, returns the platform-specific external URL path.
	         * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
	         * before normalizing. This method will also add a hash if `HashLocationStrategy` is
	         * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
	         * @param {?} url
	         * @return {?}
	         */
	        Location.prototype.prepareExternalUrl = function (url) {
	            if (url && url[0] !== '/') {
	                url = '/' + url;
	            }
	            return this._platformStrategy.prepareExternalUrl(url);
	        };
	        /**
	         * Changes the browsers URL to the normalized version of the given URL, and pushes a
	         * new item onto the platform's history.
	         * @param {?} path
	         * @param {?=} query
	         * @return {?}
	         */
	        Location.prototype.go = function (path, query) {
	            if (query === void 0) { query = ''; }
	            this._platformStrategy.pushState(null, '', path, query);
	        };
	        /**
	         * Changes the browsers URL to the normalized version of the given URL, and replaces
	         * the top item on the platform's history stack.
	         * @param {?} path
	         * @param {?=} query
	         * @return {?}
	         */
	        Location.prototype.replaceState = function (path, query) {
	            if (query === void 0) { query = ''; }
	            this._platformStrategy.replaceState(null, '', path, query);
	        };
	        /**
	         * Navigates forward in the platform's history.
	         * @return {?}
	         */
	        Location.prototype.forward = function () { this._platformStrategy.forward(); };
	        /**
	         * Navigates back in the platform's history.
	         * @return {?}
	         */
	        Location.prototype.back = function () { this._platformStrategy.back(); };
	        /**
	         * Subscribe to the platform's `popState` events.
	         * @param {?} onNext
	         * @param {?=} onThrow
	         * @param {?=} onReturn
	         * @return {?}
	         */
	        Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
	            if (onThrow === void 0) { onThrow = null; }
	            if (onReturn === void 0) { onReturn = null; }
	            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
	        };
	        /**
	         * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
	         * is.
	         * @param {?} params
	         * @return {?}
	         */
	        Location.normalizeQueryParams = function (params) {
	            return params && params[0] !== '?' ? '?' + params : params;
	        };
	        /**
	         * Given 2 parts of a url, join them with a slash if needed.
	         * @param {?} start
	         * @param {?} end
	         * @return {?}
	         */
	        Location.joinWithSlash = function (start, end) {
	            if (start.length == 0) {
	                return end;
	            }
	            if (end.length == 0) {
	                return start;
	            }
	            var /** @type {?} */ slashes = 0;
	            if (start.endsWith('/')) {
	                slashes++;
	            }
	            if (end.startsWith('/')) {
	                slashes++;
	            }
	            if (slashes == 2) {
	                return start + end.substring(1);
	            }
	            if (slashes == 1) {
	                return start + end;
	            }
	            return start + '/' + end;
	        };
	        /**
	         * If url has a trailing slash, remove it, otherwise return url as is.
	         * @param {?} url
	         * @return {?}
	         */
	        Location.stripTrailingSlash = function (url) { return url.replace(/\/$/, ''); };
	        Location.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        Location.ctorParameters = function () { return [
	            { type: LocationStrategy, },
	        ]; };
	        return Location;
	    }());
	    /**
	     * @param {?} baseHref
	     * @param {?} url
	     * @return {?}
	     */
	    function _stripBaseHref(baseHref, url) {
	        return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
	    }
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    function _stripIndexHtml(url) {
	        return url.replace(/\/index.html$/, '');
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@whatItDoes Use URL hash for storing application location data.
	     * \@description
	     * `HashLocationStrategy` is a {\@link LocationStrategy} used to configure the
	     * {\@link Location} service to represent its state in the
	     * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
	     * of the browser's URL.
	     *
	     * For instance, if you call `location.go('/foo')`, the browser's URL will become
	     * `example.com#/foo`.
	     *
	     * ### Example
	     *
	     * {\@example common/location/ts/hash_location_component.ts region='LocationComponent'}
	     *
	     * \@stable
	     */
	    var HashLocationStrategy = (function (_super) {
	        __extends(HashLocationStrategy, _super);
	        /**
	         * @param {?} _platformLocation
	         * @param {?=} _baseHref
	         */
	        function HashLocationStrategy(_platformLocation, _baseHref) {
	            _super.call(this);
	            this._platformLocation = _platformLocation;
	            this._baseHref = '';
	            if (isPresent(_baseHref)) {
	                this._baseHref = _baseHref;
	            }
	        }
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.onPopState = function (fn) {
	            this._platformLocation.onPopState(fn);
	            this._platformLocation.onHashChange(fn);
	        };
	        /**
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	        /**
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            // the hash value is always prefixed with a `#`
	            // and if it is empty then it will stay empty
	            var /** @type {?} */ path = this._platformLocation.hash;
	            if (!isPresent(path))
	                path = '#';
	            return path.length > 0 ? path.substring(1) : path;
	        };
	        /**
	         * @param {?} internal
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	            var /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);
	            return url.length > 0 ? ('#' + url) : url;
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} path
	         * @param {?} queryParams
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
	            var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	            if (url.length == 0) {
	                url = this._platformLocation.pathname;
	            }
	            this._platformLocation.pushState(state, title, url);
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} path
	         * @param {?} queryParams
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
	            var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	            if (url.length == 0) {
	                url = this._platformLocation.pathname;
	            }
	            this._platformLocation.replaceState(state, title, url);
	        };
	        /**
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	        /**
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	        HashLocationStrategy.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        HashLocationStrategy.ctorParameters = function () { return [
	            { type: PlatformLocation, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	        ]; };
	        return HashLocationStrategy;
	    }(LocationStrategy));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@whatItDoes Use URL for storing application location data.
	     * \@description
	     * `PathLocationStrategy` is a {\@link LocationStrategy} used to configure the
	     * {\@link Location} service to represent its state in the
	     * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
	     * browser's URL.
	     *
	     * If you're using `PathLocationStrategy`, you must provide a {\@link APP_BASE_HREF}
	     * or add a base element to the document. This URL prefix that will be preserved
	     * when generating and recognizing URLs.
	     *
	     * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
	     * `location.go('/foo')`, the browser's URL will become
	     * `example.com/my/app/foo`.
	     *
	     * Similarly, if you add `<base href='/my/app'/>` to the document and call
	     * `location.go('/foo')`, the browser's URL will become
	     * `example.com/my/app/foo`.
	     *
	     * ### Example
	     *
	     * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
	     *
	     * \@stable
	     */
	    var PathLocationStrategy = (function (_super) {
	        __extends$1(PathLocationStrategy, _super);
	        /**
	         * @param {?} _platformLocation
	         * @param {?=} href
	         */
	        function PathLocationStrategy(_platformLocation, href) {
	            _super.call(this);
	            this._platformLocation = _platformLocation;
	            if (isBlank(href)) {
	                href = this._platformLocation.getBaseHrefFromDOM();
	            }
	            if (isBlank(href)) {
	                throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
	            }
	            this._baseHref = href;
	        }
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.onPopState = function (fn) {
	            this._platformLocation.onPopState(fn);
	            this._platformLocation.onHashChange(fn);
	        };
	        /**
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	        /**
	         * @param {?} internal
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	            return Location.joinWithSlash(this._baseHref, internal);
	        };
	        /**
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            var /** @type {?} */ pathname = this._platformLocation.pathname +
	                Location.normalizeQueryParams(this._platformLocation.search);
	            var /** @type {?} */ hash = this._platformLocation.hash;
	            return hash && includeHash ? "" + pathname + hash : pathname;
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
	            var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	            this._platformLocation.pushState(state, title, externalUrl);
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
	            var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	            this._platformLocation.replaceState(state, title, externalUrl);
	        };
	        /**
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	        /**
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	        PathLocationStrategy.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        PathLocationStrategy.ctorParameters = function () { return [
	            { type: PlatformLocation, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	        ]; };
	        return PathLocationStrategy;
	    }(LocationStrategy));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@experimental
	     * @abstract
	     */
	    var NgLocalization = (function () {
	        function NgLocalization() {
	        }
	        /**
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        NgLocalization.prototype.getPluralCategory = function (value) { };
	        return NgLocalization;
	    }());
	    /**
	     * Returns the plural category for a given value.
	     * - "=value" when the case exists,
	     * - the plural category otherwise
	     *
	     * \@internal
	     * @param {?} value
	     * @param {?} cases
	     * @param {?} ngLocalization
	     * @return {?}
	     */
	    function getPluralCategory(value, cases, ngLocalization) {
	        var /** @type {?} */ key = "=" + value;
	        if (cases.indexOf(key) > -1) {
	            return key;
	        }
	        key = ngLocalization.getPluralCategory(value);
	        if (cases.indexOf(key) > -1) {
	            return key;
	        }
	        if (cases.indexOf('other') > -1) {
	            return 'other';
	        }
	        throw new Error("No plural message found for value \"" + value + "\"");
	    }
	    /**
	     * Returns the plural case based on the locale
	     *
	     * \@experimental
	     */
	    var NgLocaleLocalization = (function (_super) {
	        __extends$2(NgLocaleLocalization, _super);
	        /**
	         * @param {?} _locale
	         */
	        function NgLocaleLocalization(_locale) {
	            _super.call(this);
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NgLocaleLocalization.prototype.getPluralCategory = function (value) {
	            var /** @type {?} */ plural = getPluralCase(this._locale, value);
	            switch (plural) {
	                case Plural.Zero:
	                    return 'zero';
	                case Plural.One:
	                    return 'one';
	                case Plural.Two:
	                    return 'two';
	                case Plural.Few:
	                    return 'few';
	                case Plural.Many:
	                    return 'many';
	                default:
	                    return 'other';
	            }
	        };
	        NgLocaleLocalization.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        NgLocaleLocalization.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return NgLocaleLocalization;
	    }(NgLocalization));
	    var Plural = {};
	    Plural.Zero = 0;
	    Plural.One = 1;
	    Plural.Two = 2;
	    Plural.Few = 3;
	    Plural.Many = 4;
	    Plural.Other = 5;
	    Plural[Plural.Zero] = "Zero";
	    Plural[Plural.One] = "One";
	    Plural[Plural.Two] = "Two";
	    Plural[Plural.Few] = "Few";
	    Plural[Plural.Many] = "Many";
	    Plural[Plural.Other] = "Other";
	    /**
	     * Returns the plural case based on the locale
	     *
	     * \@experimental
	     * @param {?} locale
	     * @param {?} nLike
	     * @return {?}
	     */
	    function getPluralCase(locale, nLike) {
	        // TODO(vicb): lazy compute
	        if (typeof nLike === 'string') {
	            nLike = parseInt(/** @type {?} */ (nLike), 10);
	        }
	        var /** @type {?} */ n = (nLike);
	        var /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\.?/, '');
	        var /** @type {?} */ i = Math.floor(Math.abs(n));
	        var /** @type {?} */ v = nDecimal.length;
	        var /** @type {?} */ f = parseInt(nDecimal, 10);
	        var /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
	        var /** @type {?} */ lang = locale.split('-')[0].toLowerCase();
	        switch (lang) {
	            case 'af':
	            case 'asa':
	            case 'az':
	            case 'bem':
	            case 'bez':
	            case 'bg':
	            case 'brx':
	            case 'ce':
	            case 'cgg':
	            case 'chr':
	            case 'ckb':
	            case 'ee':
	            case 'el':
	            case 'eo':
	            case 'es':
	            case 'eu':
	            case 'fo':
	            case 'fur':
	            case 'gsw':
	            case 'ha':
	            case 'haw':
	            case 'hu':
	            case 'jgo':
	            case 'jmc':
	            case 'ka':
	            case 'kk':
	            case 'kkj':
	            case 'kl':
	            case 'ks':
	            case 'ksb':
	            case 'ky':
	            case 'lb':
	            case 'lg':
	            case 'mas':
	            case 'mgo':
	            case 'ml':
	            case 'mn':
	            case 'nb':
	            case 'nd':
	            case 'ne':
	            case 'nn':
	            case 'nnh':
	            case 'nyn':
	            case 'om':
	            case 'or':
	            case 'os':
	            case 'ps':
	            case 'rm':
	            case 'rof':
	            case 'rwk':
	            case 'saq':
	            case 'seh':
	            case 'sn':
	            case 'so':
	            case 'sq':
	            case 'ta':
	            case 'te':
	            case 'teo':
	            case 'tk':
	            case 'tr':
	            case 'ug':
	            case 'uz':
	            case 'vo':
	            case 'vun':
	            case 'wae':
	            case 'xog':
	                if (n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'agq':
	            case 'bas':
	            case 'cu':
	            case 'dav':
	            case 'dje':
	            case 'dua':
	            case 'dyo':
	            case 'ebu':
	            case 'ewo':
	            case 'guz':
	            case 'kam':
	            case 'khq':
	            case 'ki':
	            case 'kln':
	            case 'kok':
	            case 'ksf':
	            case 'lrc':
	            case 'lu':
	            case 'luo':
	            case 'luy':
	            case 'mer':
	            case 'mfe':
	            case 'mgh':
	            case 'mua':
	            case 'mzn':
	            case 'nmg':
	            case 'nus':
	            case 'qu':
	            case 'rn':
	            case 'rw':
	            case 'sbp':
	            case 'twq':
	            case 'vai':
	            case 'yav':
	            case 'yue':
	            case 'zgh':
	            case 'ak':
	            case 'ln':
	            case 'mg':
	            case 'pa':
	            case 'ti':
	                if (n === Math.floor(n) && n >= 0 && n <= 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'am':
	            case 'as':
	            case 'bn':
	            case 'fa':
	            case 'gu':
	            case 'hi':
	            case 'kn':
	            case 'mr':
	            case 'zu':
	                if (i === 0 || n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'ar':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
	                    return Plural.Few;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'ast':
	            case 'ca':
	            case 'de':
	            case 'en':
	            case 'et':
	            case 'fi':
	            case 'fy':
	            case 'gl':
	            case 'it':
	            case 'nl':
	            case 'sv':
	            case 'sw':
	            case 'ur':
	            case 'yi':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                return Plural.Other;
	            case 'be':
	                if (n % 10 === 1 && !(n % 100 === 11))
	                    return Plural.One;
	                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
	                    !(n % 100 >= 12 && n % 100 <= 14))
	                    return Plural.Few;
	                if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
	                    n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'br':
	                if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
	                    return Plural.One;
	                if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
	                    return Plural.Two;
	                if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
	                    !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
	                        n % 100 >= 90 && n % 100 <= 99))
	                    return Plural.Few;
	                if (!(n === 0) && n % 1e6 === 0)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'bs':
	            case 'hr':
	            case 'sr':
	                if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14) ||
	                    f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
	                        !(f % 100 >= 12 && f % 100 <= 14))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'cs':
	            case 'sk':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
	                    return Plural.Few;
	                if (!(v === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'cy':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n === 3)
	                    return Plural.Few;
	                if (n === 6)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'da':
	                if (n === 1 || !(t === 0) && (i === 0 || i === 1))
	                    return Plural.One;
	                return Plural.Other;
	            case 'dsb':
	            case 'hsb':
	                if (v === 0 && i % 100 === 1 || f % 100 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 100 === 2 || f % 100 === 2)
	                    return Plural.Two;
	                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
	                    f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'ff':
	            case 'fr':
	            case 'hy':
	            case 'kab':
	                if (i === 0 || i === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'fil':
	                if (v === 0 && (i === 1 || i === 2 || i === 3) ||
	                    v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
	                    !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ga':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n === Math.floor(n) && n >= 3 && n <= 6)
	                    return Plural.Few;
	                if (n === Math.floor(n) && n >= 7 && n <= 10)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'gd':
	                if (n === 1 || n === 11)
	                    return Plural.One;
	                if (n === 2 || n === 12)
	                    return Plural.Two;
	                if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'gv':
	                if (v === 0 && i % 10 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 10 === 2)
	                    return Plural.Two;
	                if (v === 0 &&
	                    (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
	                    return Plural.Few;
	                if (!(v === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'he':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (i === 2 && v === 0)
	                    return Plural.Two;
	                if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'is':
	                if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ksh':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'kw':
	            case 'naq':
	            case 'se':
	            case 'smn':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                return Plural.Other;
	            case 'lag':
	                if (n === 0)
	                    return Plural.Zero;
	                if ((i === 0 || i === 1) && !(n === 0))
	                    return Plural.One;
	                return Plural.Other;
	            case 'lt':
	                if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
	                    return Plural.One;
	                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
	                    !(n % 100 >= 11 && n % 100 <= 19))
	                    return Plural.Few;
	                if (!(f === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'lv':
	            case 'prg':
	                if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
	                    v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
	                    return Plural.Zero;
	                if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
	                    !(v === 2) && f % 10 === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'mk':
	                if (v === 0 && i % 10 === 1 || f % 10 === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'mt':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
	                    return Plural.Few;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'pl':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14))
	                    return Plural.Few;
	                if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
	                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'pt':
	                if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ro':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (!(v === 0) || n === 0 ||
	                    !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'ru':
	            case 'uk':
	                if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14))
	                    return Plural.Few;
	                if (v === 0 && i % 10 === 0 ||
	                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'shi':
	                if (i === 0 || n === 1)
	                    return Plural.One;
	                if (n === Math.floor(n) && n >= 2 && n <= 10)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'si':
	                if (n === 0 || n === 1 || i === 0 && f === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'sl':
	                if (v === 0 && i % 100 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 100 === 2)
	                    return Plural.Two;
	                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'tzm':
	                if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
	                    return Plural.One;
	                return Plural.Other;
	            default:
	                return Plural.Other;
	        }
	    }

	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isListLikeIterable(obj) {
	        if (!isJsObject(obj))
	            return false;
	        return Array.isArray(obj) ||
	            (!(obj instanceof Map) &&
	                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	    }

	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Adds and removes CSS classes on an HTML element.
	     *
	     * \@howToUse
	     * ```
	     *     <some-element [ngClass]="'first second'">...</some-element>
	     *
	     *     <some-element [ngClass]="['first', 'second']">...</some-element>
	     *
	     *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
	     *
	     *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
	     *
	     *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
	     * ```
	     *
	     * \@description
	     *
	     * The CSS classes are updated as follows, depending on the type of the expression evaluation:
	     * - `string` - the CSS classes listed in the string (space delimited) are added,
	     * - `Array` - the CSS classes declared as Array elements are added,
	     * - `Object` - keys are CSS classes that get added when the expression given in the value
	     *              evaluates to a truthy value, otherwise they are removed.
	     *
	     * \@stable
	     */
	    var NgClass = (function () {
	        /**
	         * @param {?} _iterableDiffers
	         * @param {?} _keyValueDiffers
	         * @param {?} _ngEl
	         * @param {?} _renderer
	         */
	        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
	            this._iterableDiffers = _iterableDiffers;
	            this._keyValueDiffers = _keyValueDiffers;
	            this._ngEl = _ngEl;
	            this._renderer = _renderer;
	            this._initialClasses = [];
	        }
	        Object.defineProperty(NgClass.prototype, "klass", {
	            /**
	             * @param {?} v
	             * @return {?}
	             */
	            set: function (v) {
	                this._applyInitialClasses(true);
	                this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
	                this._applyInitialClasses(false);
	                this._applyClasses(this._rawClass, false);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgClass.prototype, "ngClass", {
	            /**
	             * @param {?} v
	             * @return {?}
	             */
	            set: function (v) {
	                this._cleanupClasses(this._rawClass);
	                this._iterableDiffer = null;
	                this._keyValueDiffer = null;
	                this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
	                if (this._rawClass) {
	                    if (isListLikeIterable(this._rawClass)) {
	                        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
	                    }
	                    else {
	                        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
	                    }
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgClass.prototype.ngDoCheck = function () {
	            if (this._iterableDiffer) {
	                var /** @type {?} */ changes = this._iterableDiffer.diff(this._rawClass);
	                if (changes) {
	                    this._applyIterableChanges(changes);
	                }
	            }
	            else if (this._keyValueDiffer) {
	                var /** @type {?} */ changes = this._keyValueDiffer.diff(this._rawClass);
	                if (changes) {
	                    this._applyKeyValueChanges(changes);
	                }
	            }
	        };
	        /**
	         * @param {?} rawClassVal
	         * @return {?}
	         */
	        NgClass.prototype._cleanupClasses = function (rawClassVal) {
	            this._applyClasses(rawClassVal, true);
	            this._applyInitialClasses(false);
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgClass.prototype._applyKeyValueChanges = function (changes) {
	            var _this = this;
	            changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	            changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	            changes.forEachRemovedItem(function (record) {
	                if (record.previousValue) {
	                    _this._toggleClass(record.key, false);
	                }
	            });
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgClass.prototype._applyIterableChanges = function (changes) {
	            var _this = this;
	            changes.forEachAddedItem(function (record) {
	                if (typeof record.item === 'string') {
	                    _this._toggleClass(record.item, true);
	                }
	                else {
	                    throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item));
	                }
	            });
	            changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
	        };
	        /**
	         * @param {?} isCleanup
	         * @return {?}
	         */
	        NgClass.prototype._applyInitialClasses = function (isCleanup) {
	            var _this = this;
	            this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	        };
	        /**
	         * @param {?} rawClassVal
	         * @param {?} isCleanup
	         * @return {?}
	         */
	        NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
	            var _this = this;
	            if (rawClassVal) {
	                if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
	                    ((rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	                }
	                else {
	                    Object.keys(rawClassVal).forEach(function (klass) {
	                        if (rawClassVal[klass] != null)
	                            _this._toggleClass(klass, !isCleanup);
	                    });
	                }
	            }
	        };
	        /**
	         * @param {?} klass
	         * @param {?} enabled
	         * @return {?}
	         */
	        NgClass.prototype._toggleClass = function (klass, enabled) {
	            var _this = this;
	            klass = klass.trim();
	            if (klass) {
	                klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled); });
	            }
	        };
	        NgClass.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngClass]' },] },
	        ];
	        /** @nocollapse */
	        NgClass.ctorParameters = function () { return [
	            { type: _angular_core.IterableDiffers, },
	            { type: _angular_core.KeyValueDiffers, },
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	        ]; };
	        NgClass.propDecorators = {
	            'klass': [{ type: _angular_core.Input, args: ['class',] },],
	            'ngClass': [{ type: _angular_core.Input },],
	        };
	        return NgClass;
	    }());

	    var NgForRow = (function () {
	        /**
	         * @param {?} $implicit
	         * @param {?} index
	         * @param {?} count
	         */
	        function NgForRow($implicit, index, count) {
	            this.$implicit = $implicit;
	            this.index = index;
	            this.count = count;
	        }
	        Object.defineProperty(NgForRow.prototype, "first", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.index === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "last", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.index === this.count - 1; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "even", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.index % 2 === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "odd", {
	            /**
	             * @return {?}
	             */
	            get: function () { return !this.even; },
	            enumerable: true,
	            configurable: true
	        });
	        return NgForRow;
	    }());
	    /**
	     * The `NgFor` directive instantiates a template once per item from an iterable. The context for
	     * each instantiated template inherits from the outer context with the given loop variable set
	     * to the current item from the iterable.
	     *
	     * ### Local Variables
	     *
	     * `NgFor` provides several exported values that can be aliased to local variables:
	     *
	     * * `index` will be set to the current loop iteration for each template context.
	     * * `first` will be set to a boolean value indicating whether the item is the first one in the
	     *   iteration.
	     * * `last` will be set to a boolean value indicating whether the item is the last one in the
	     *   iteration.
	     * * `even` will be set to a boolean value indicating whether this item has an even index.
	     * * `odd` will be set to a boolean value indicating whether this item has an odd index.
	     *
	     * ### Change Propagation
	     *
	     * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
	     *
	     * * When an item is added, a new instance of the template is added to the DOM.
	     * * When an item is removed, its template instance is removed from the DOM.
	     * * When items are reordered, their respective templates are reordered in the DOM.
	     * * Otherwise, the DOM element for that item will remain the same.
	     *
	     * Angular uses object identity to track insertions and deletions within the iterator and reproduce
	     * those changes in the DOM. This has important implications for animations and any stateful
	     * controls
	     * (such as `<input>` elements which accept user input) that are present. Inserted rows can be
	     * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such
	     * as user input.
	     *
	     * It is possible for the identities of elements in the iterator to change while the data does not.
	     * This can happen, for example, if the iterator produced from an RPC to the server, and that
	     * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
	     * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
	     * elements were deleted and all new elements inserted). This is an expensive operation and should
	     * be avoided if possible.
	     *
	     * To customize the default tracking algorithm, `NgFor` supports `trackBy` option.
	     * `trackBy` takes a function which has two arguments: `index` and `item`.
	     * If `trackBy` is given, Angular tracks changes by the return value of the function.
	     *
	     * ### Syntax
	     *
	     * - `<li *ngFor="let item of items; let i = index; trackBy: trackByFn">...</li>`
	     * - `<li template="ngFor let item of items; let i = index; trackBy: trackByFn">...</li>`
	     *
	     * With `<template>` element:
	     *
	     * ```
	     * <template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
	     *   <li>...</li>
	     * </template>
	     * ```
	     *
	     * ### Example
	     *
	     * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
	     * example.
	     *
	     * \@stable
	     */
	    var NgFor = (function () {
	        /**
	         * @param {?} _viewContainer
	         * @param {?} _template
	         * @param {?} _differs
	         * @param {?} _cdr
	         */
	        function NgFor(_viewContainer, _template, _differs, _cdr) {
	            this._viewContainer = _viewContainer;
	            this._template = _template;
	            this._differs = _differs;
	            this._cdr = _cdr;
	            this._differ = null;
	        }
	        Object.defineProperty(NgFor.prototype, "ngForTrackBy", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._trackByFn; },
	            /**
	             * @param {?} fn
	             * @return {?}
	             */
	            set: function (fn) {
	                if (_angular_core.isDevMode() && fn != null && typeof fn !== 'function') {
	                    // TODO(vicb): use a log service once there is a public one available
	                    if ((console) && (console.warn)) {
	                        console.warn(("trackBy must be a function, but received " + JSON.stringify(fn) + ". ") +
	                            "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
	                    }
	                }
	                this._trackByFn = fn;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgFor.prototype, "ngForTemplate", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                if (value) {
	                    this._template = value;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgFor.prototype.ngOnChanges = function (changes) {
	            if ('ngForOf' in changes) {
	                // React on ngForOf changes only once all inputs have been initialized
	                var /** @type {?} */ value = changes['ngForOf'].currentValue;
	                if (!this._differ && value) {
	                    try {
	                        this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
	                    }
	                    catch (e) {
	                        throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
	                    }
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgFor.prototype.ngDoCheck = function () {
	            if (this._differ) {
	                var /** @type {?} */ changes = this._differ.diff(this.ngForOf);
	                if (changes)
	                    this._applyChanges(changes);
	            }
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgFor.prototype._applyChanges = function (changes) {
	            var _this = this;
	            var /** @type {?} */ insertTuples = [];
	            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
	                if (item.previousIndex == null) {
	                    var /** @type {?} */ view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
	                    var /** @type {?} */ tuple = new RecordViewTuple(item, view);
	                    insertTuples.push(tuple);
	                }
	                else if (currentIndex == null) {
	                    _this._viewContainer.remove(adjustedPreviousIndex);
	                }
	                else {
	                    var /** @type {?} */ view = _this._viewContainer.get(adjustedPreviousIndex);
	                    _this._viewContainer.move(view, currentIndex);
	                    var /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));
	                    insertTuples.push(tuple);
	                }
	            });
	            for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {
	                this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	            }
	            for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {
	                var /** @type {?} */ viewRef = (this._viewContainer.get(i));
	                viewRef.context.index = i;
	                viewRef.context.count = ilen;
	            }
	            changes.forEachIdentityChange(function (record) {
	                var /** @type {?} */ viewRef = (_this._viewContainer.get(record.currentIndex));
	                viewRef.context.$implicit = record.item;
	            });
	        };
	        /**
	         * @param {?} view
	         * @param {?} record
	         * @return {?}
	         */
	        NgFor.prototype._perViewChange = function (view, record) {
	            view.context.$implicit = record.item;
	        };
	        NgFor.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
	        ];
	        /** @nocollapse */
	        NgFor.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: _angular_core.IterableDiffers, },
	            { type: _angular_core.ChangeDetectorRef, },
	        ]; };
	        NgFor.propDecorators = {
	            'ngForOf': [{ type: _angular_core.Input },],
	            'ngForTrackBy': [{ type: _angular_core.Input },],
	            'ngForTemplate': [{ type: _angular_core.Input },],
	        };
	        return NgFor;
	    }());
	    var RecordViewTuple = (function () {
	        /**
	         * @param {?} record
	         * @param {?} view
	         */
	        function RecordViewTuple(record, view) {
	            this.record = record;
	            this.view = view;
	        }
	        return RecordViewTuple;
	    }());

	    /**
	     * Removes or recreates a portion of the DOM tree based on an {expression}.
	     *
	     * If the expression assigned to `ngIf` evaluates to a falsy value then the element
	     * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
	     *
	     * ```
	     * <div *ngIf="errorCount > 0" class="error">
	     *   <!-- Error message displayed when the errorCount property in the current context is greater
	     * than 0. -->
	     *   {{errorCount}} errors detected
	     * </div>
	     * ```
	     *
	     * ### Syntax
	     *
	     * - `<div *ngIf="condition">...</div>`
	     * - `<div template="ngIf condition">...</div>`
	     * - `<template [ngIf]="condition"><div>...</div></template>`
	     *
	     * \@stable
	     */
	    var NgIf = (function () {
	        /**
	         * @param {?} _viewContainer
	         * @param {?} _template
	         */
	        function NgIf(_viewContainer, _template) {
	            this._viewContainer = _viewContainer;
	            this._template = _template;
	            this._hasView = false;
	        }
	        Object.defineProperty(NgIf.prototype, "ngIf", {
	            /**
	             * @param {?} condition
	             * @return {?}
	             */
	            set: function (condition) {
	                if (condition && !this._hasView) {
	                    this._hasView = true;
	                    this._viewContainer.createEmbeddedView(this._template);
	                }
	                else if (!condition && this._hasView) {
	                    this._hasView = false;
	                    this._viewContainer.clear();
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgIf.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngIf]' },] },
	        ];
	        /** @nocollapse */
	        NgIf.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	        ]; };
	        NgIf.propDecorators = {
	            'ngIf': [{ type: _angular_core.Input },],
	        };
	        return NgIf;
	    }());

	    var SwitchView = (function () {
	        /**
	         * @param {?} _viewContainerRef
	         * @param {?} _templateRef
	         */
	        function SwitchView(_viewContainerRef, _templateRef) {
	            this._viewContainerRef = _viewContainerRef;
	            this._templateRef = _templateRef;
	            this._created = false;
	        }
	        /**
	         * @return {?}
	         */
	        SwitchView.prototype.create = function () {
	            this._created = true;
	            this._viewContainerRef.createEmbeddedView(this._templateRef);
	        };
	        /**
	         * @return {?}
	         */
	        SwitchView.prototype.destroy = function () {
	            this._created = false;
	            this._viewContainerRef.clear();
	        };
	        /**
	         * @param {?} created
	         * @return {?}
	         */
	        SwitchView.prototype.enforceState = function (created) {
	            if (created && !this._created) {
	                this.create();
	            }
	            else if (!created && this._created) {
	                this.destroy();
	            }
	        };
	        return SwitchView;
	    }());
	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
	     *             expression.
	     *
	     * \@howToUse
	     * ```
	     *     <container-element [ngSwitch]="switch_expression">
	     *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
	     *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
	     *       <ng-container *ngSwitchCase="match_expression_3">
	     *         <!-- use a ng-container to group multiple root nodes -->
	     *         <inner-element></inner-element>
	     *         <inner-other-element></inner-other-element>
	     *       </ng-container>
	     *       <some-element *ngSwitchDefault>...</some-element>
	     *     </container-element>
	     * ```
	     * \@description
	     *
	     * `NgSwitch` stamps out nested views when their match expression value matches the value of the
	     * switch expression.
	     *
	     * In other words:
	     * - you define a container element (where you place the directive with a switch expression on the
	     * `[ngSwitch]="..."` attribute)
	     * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
	     * root elements.
	     *
	     * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
	     * be preserved at the location.
	     *
	     * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
	     * expression is evaluated.
	     * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
	     * stamped out.
	     *
	     * \@stable
	     */
	    var NgSwitch = (function () {
	        function NgSwitch() {
	            this._defaultUsed = false;
	            this._caseCount = 0;
	            this._lastCaseCheckIndex = 0;
	            this._lastCasesMatched = false;
	        }
	        Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	            /**
	             * @param {?} newValue
	             * @return {?}
	             */
	            set: function (newValue) {
	                this._ngSwitch = newValue;
	                if (this._caseCount === 0) {
	                    this._updateDefaultCases(true);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * \@internal
	         * @return {?}
	         */
	        NgSwitch.prototype._addCase = function () { return this._caseCount++; };
	        /**
	         * \@internal
	         * @param {?} view
	         * @return {?}
	         */
	        NgSwitch.prototype._addDefault = function (view) {
	            if (!this._defaultViews) {
	                this._defaultViews = [];
	            }
	            this._defaultViews.push(view);
	        };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        NgSwitch.prototype._matchCase = function (value) {
	            var /** @type {?} */ matched = value == this._ngSwitch;
	            this._lastCasesMatched = this._lastCasesMatched || matched;
	            this._lastCaseCheckIndex++;
	            if (this._lastCaseCheckIndex === this._caseCount) {
	                this._updateDefaultCases(!this._lastCasesMatched);
	                this._lastCaseCheckIndex = 0;
	                this._lastCasesMatched = false;
	            }
	            return matched;
	        };
	        /**
	         * @param {?} useDefault
	         * @return {?}
	         */
	        NgSwitch.prototype._updateDefaultCases = function (useDefault) {
	            if (this._defaultViews && useDefault !== this._defaultUsed) {
	                this._defaultUsed = useDefault;
	                for (var /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {
	                    var /** @type {?} */ defaultView = this._defaultViews[i];
	                    defaultView.enforceState(useDefault);
	                }
	            }
	        };
	        NgSwitch.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitch]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitch.ctorParameters = function () { return []; };
	        NgSwitch.propDecorators = {
	            'ngSwitch': [{ type: _angular_core.Input },],
	        };
	        return NgSwitch;
	    }());
	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgSwitch} when the
	     *             given expression evaluate to respectively the same/different value as the switch
	     *             expression.
	     *
	     * \@howToUse
	     * ```
	     * <container-element [ngSwitch]="switch_expression">
	     *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     * </container-element>
	     * ```
	     * \@description
	     *
	     * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
	     * expression.
	     *
	     * If multiple match expressions match the switch expression value, all of them are displayed.
	     *
	     * See {\@link NgSwitch} for more details and example.
	     *
	     * \@stable
	     */
	    var NgSwitchCase = (function () {
	        /**
	         * @param {?} viewContainer
	         * @param {?} templateRef
	         * @param {?} ngSwitch
	         */
	        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
	            this.ngSwitch = ngSwitch;
	            ngSwitch._addCase();
	            this._view = new SwitchView(viewContainer, templateRef);
	        }
	        /**
	         * @return {?}
	         */
	        NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
	        NgSwitchCase.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchCase]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitchCase.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	        ]; };
	        NgSwitchCase.propDecorators = {
	            'ngSwitchCase': [{ type: _angular_core.Input },],
	        };
	        return NgSwitchCase;
	    }());
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Creates a view that is added to the parent {\@link NgSwitch} when no case expressions
	     * match the
	     *             switch expression.
	     *
	     * \@howToUse
	     * ```
	     * <container-element [ngSwitch]="switch_expression">
	     *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     *   <some-other-element *ngSwitchDefault>...</some-other-element>
	     * </container-element>
	     * ```
	     *
	     * \@description
	     *
	     * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
	     * expression.
	     *
	     * See {\@link NgSwitch} for more details and example.
	     *
	     * \@stable
	     */
	    var NgSwitchDefault = (function () {
	        /**
	         * @param {?} viewContainer
	         * @param {?} templateRef
	         * @param {?} ngSwitch
	         */
	        function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
	            ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
	        }
	        NgSwitchDefault.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchDefault]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitchDefault.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	        ]; };
	        return NgSwitchDefault;
	    }());

	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
	     *
	     * \@howToUse
	     * ```
	     * <some-element [ngPlural]="value">
	     *   <template ngPluralCase="=0">there is nothing</template>
	     *   <template ngPluralCase="=1">there is one</template>
	     *   <template ngPluralCase="few">there are a few</template>
	     * </some-element>
	     * ```
	     *
	     * \@description
	     *
	     * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
	     * that match the switch expression's pluralization category.
	     *
	     * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
	     * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
	     * expression:
	     * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
	     *   matches the switch expression exactly,
	     * - otherwise, the view will be treated as a "category match", and will only display if exact
	     *   value matches aren't found and the value maps to its category for the defined locale.
	     *
	     * See http://cldr.unicode.org/index/cldr-spec/plural-rules
	     *
	     * \@experimental
	     */
	    var NgPlural = (function () {
	        /**
	         * @param {?} _localization
	         */
	        function NgPlural(_localization) {
	            this._localization = _localization;
	            this._caseViews = {};
	        }
	        Object.defineProperty(NgPlural.prototype, "ngPlural", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                this._switchValue = value;
	                this._updateView();
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} value
	         * @param {?} switchView
	         * @return {?}
	         */
	        NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
	        /**
	         * @return {?}
	         */
	        NgPlural.prototype._updateView = function () {
	            this._clearViews();
	            var /** @type {?} */ cases = Object.keys(this._caseViews);
	            var /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);
	            this._activateView(this._caseViews[key]);
	        };
	        /**
	         * @return {?}
	         */
	        NgPlural.prototype._clearViews = function () {
	            if (this._activeView)
	                this._activeView.destroy();
	        };
	        /**
	         * @param {?} view
	         * @return {?}
	         */
	        NgPlural.prototype._activateView = function (view) {
	            if (view) {
	                this._activeView = view;
	                this._activeView.create();
	            }
	        };
	        NgPlural.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngPlural]' },] },
	        ];
	        /** @nocollapse */
	        NgPlural.ctorParameters = function () { return [
	            { type: NgLocalization, },
	        ]; };
	        NgPlural.propDecorators = {
	            'ngPlural': [{ type: _angular_core.Input },],
	        };
	        return NgPlural;
	    }());
	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgPlural} when the
	     *             given expression matches the plural expression according to CLDR rules.
	     *
	     * \@howToUse
	     * ```
	     * <some-element [ngPlural]="value">
	     *   <template ngPluralCase="=0">...</template>
	     *   <template ngPluralCase="other">...</template>
	     * </some-element>
	     * ```
	     *
	     * See {\@link NgPlural} for more details and example.
	     *
	     * \@experimental
	     */
	    var NgPluralCase = (function () {
	        /**
	         * @param {?} value
	         * @param {?} template
	         * @param {?} viewContainer
	         * @param {?} ngPlural
	         */
	        function NgPluralCase(value, template, viewContainer, ngPlural) {
	            this.value = value;
	            var isANumber = !isNaN(Number(value));
	            ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
	        }
	        NgPluralCase.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngPluralCase]' },] },
	        ];
	        /** @nocollapse */
	        NgPluralCase.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['ngPluralCase',] },] },
	            { type: _angular_core.TemplateRef, },
	            { type: _angular_core.ViewContainerRef, },
	            { type: NgPlural, decorators: [{ type: _angular_core.Host },] },
	        ]; };
	        return NgPluralCase;
	    }());

	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Update an HTML element styles.
	     *
	     * \@howToUse
	     * ```
	     * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
	     *
	     * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
	     *
	     * <some-element [ngStyle]="objExp">...</some-element>
	     * ```
	     *
	     * \@description
	     *
	     * The styles are updated according to the value of the expression evaluation:
	     * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
	     * - values are the values assigned to those properties (expressed in the given unit).
	     *
	     * \@stable
	     */
	    var NgStyle = (function () {
	        /**
	         * @param {?} _differs
	         * @param {?} _ngEl
	         * @param {?} _renderer
	         */
	        function NgStyle(_differs, _ngEl, _renderer) {
	            this._differs = _differs;
	            this._ngEl = _ngEl;
	            this._renderer = _renderer;
	        }
	        Object.defineProperty(NgStyle.prototype, "ngStyle", {
	            /**
	             * @param {?} v
	             * @return {?}
	             */
	            set: function (v) {
	                this._ngStyle = v;
	                if (!this._differ && v) {
	                    this._differ = this._differs.find(v).create(null);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgStyle.prototype.ngDoCheck = function () {
	            if (this._differ) {
	                var /** @type {?} */ changes = this._differ.diff(this._ngStyle);
	                if (changes) {
	                    this._applyChanges(changes);
	                }
	            }
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgStyle.prototype._applyChanges = function (changes) {
	            var _this = this;
	            changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
	            changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	            changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	        };
	        /**
	         * @param {?} nameAndUnit
	         * @param {?} value
	         * @return {?}
	         */
	        NgStyle.prototype._setStyle = function (nameAndUnit, value) {
	            var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
	            value = value && unit ? "" + value + unit : value;
	            this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
	        };
	        NgStyle.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngStyle]' },] },
	        ];
	        /** @nocollapse */
	        NgStyle.ctorParameters = function () { return [
	            { type: _angular_core.KeyValueDiffers, },
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	        ]; };
	        NgStyle.propDecorators = {
	            'ngStyle': [{ type: _angular_core.Input },],
	        };
	        return NgStyle;
	    }());

	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Inserts an embedded view from a prepared `TemplateRef`
	     *
	     * \@howToUse
	     * ```
	     * <template [ngTemplateOutlet]="templateRefExpression"
	     *           [ngOutletContext]="objectExpression">
	     * </template>
	     * ```
	     *
	     * \@description
	     *
	     * You can attach a context object to the `EmbeddedViewRef` by setting `[ngOutletContext]`.
	     * `[ngOutletContext]` should be an object, the object's keys will be the local template variables
	     * available within the `TemplateRef`.
	     *
	     * Note: using the key `$implicit` in the context object will set it's value as default.
	     *
	     * \@experimental
	     */
	    var NgTemplateOutlet = (function () {
	        /**
	         * @param {?} _viewContainerRef
	         */
	        function NgTemplateOutlet(_viewContainerRef) {
	            this._viewContainerRef = _viewContainerRef;
	        }
	        Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
	            /**
	             * @param {?} context
	             * @return {?}
	             */
	            set: function (context) { this._context = context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
	            /**
	             * @param {?} templateRef
	             * @return {?}
	             */
	            set: function (templateRef) { this._templateRef = templateRef; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
	            if (this._viewRef) {
	                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
	            }
	            if (this._templateRef) {
	                this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
	            }
	        };
	        NgTemplateOutlet.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
	        ];
	        /** @nocollapse */
	        NgTemplateOutlet.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	        ]; };
	        NgTemplateOutlet.propDecorators = {
	            'ngOutletContext': [{ type: _angular_core.Input },],
	            'ngTemplateOutlet': [{ type: _angular_core.Input },],
	        };
	        return NgTemplateOutlet;
	    }());

	    /**
	     * A collection of Angular directives that are likely to be used in each and every Angular
	     * application.
	     */
	    var /** @type {?} */ COMMON_DIRECTIVES = [
	        NgClass,
	        NgFor,
	        NgIf,
	        NgTemplateOutlet,
	        NgStyle,
	        NgSwitch,
	        NgSwitchCase,
	        NgSwitchDefault,
	        NgPlural,
	        NgPluralCase,
	    ];

	    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;
	    var /** @type {?} */ isObservable = _angular_core.__core_private__.isObservable;

	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@stable
	     */
	    var BaseError = (function (_super) {
	        __extends$4(BaseError, _super);
	        /**
	         * @param {?} message
	         */
	        function BaseError(message) {
	            _super.call(this, message);
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            // TODO(bradfordcsmith): Remove this hack when
	            //     google/closure-compiler/issues/2102 is fixed.
	            var nativeError = new Error(message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.message; },
	            /**
	             * @param {?} message
	             * @return {?}
	             */
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () { return ((this._nativeError)).stack; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) { ((this._nativeError)).stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * \@stable
	     */
	    var WrappedError = (function (_super) {
	        __extends$4(WrappedError, _super);
	        /**
	         * @param {?} message
	         * @param {?} error
	         */
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var InvalidPipeArgumentError = (function (_super) {
	        __extends$3(InvalidPipeArgumentError, _super);
	        /**
	         * @param {?} type
	         * @param {?} value
	         */
	        function InvalidPipeArgumentError(type, value) {
	            _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
	        }
	        return InvalidPipeArgumentError;
	    }(BaseError));

	    var ObservableStrategy = (function () {
	        function ObservableStrategy() {
	        }
	        /**
	         * @param {?} async
	         * @param {?} updateLatestValue
	         * @return {?}
	         */
	        ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	            return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
	        };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
	        return ObservableStrategy;
	    }());
	    var PromiseStrategy = (function () {
	        function PromiseStrategy() {
	        }
	        /**
	         * @param {?} async
	         * @param {?} updateLatestValue
	         * @return {?}
	         */
	        PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	            return async.then(updateLatestValue, function (e) { throw e; });
	        };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        PromiseStrategy.prototype.dispose = function (subscription) { };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        PromiseStrategy.prototype.onDestroy = function (subscription) { };
	        return PromiseStrategy;
	    }());
	    var /** @type {?} */ _promiseStrategy = new PromiseStrategy();
	    var /** @type {?} */ _observableStrategy = new ObservableStrategy();
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Unwraps a value from an asynchronous primitive.
	     * \@howToUse `observable_or_promise_expression | async`
	     * \@description
	     * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
	     * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
	     * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
	     * potential memory leaks.
	     *
	     *
	     * ## Examples
	     *
	     * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
	     * promise.
	     *
	     * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
	     *
	     * It's also possible to use `async` with Observables. The example below binds the `time` Observable
	     * to the view. The Observable continuously updates the view with the current time.
	     *
	     * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
	     *
	     * \@stable
	     */
	    var AsyncPipe = (function () {
	        /**
	         * @param {?} _ref
	         */
	        function AsyncPipe(_ref) {
	            this._ref = _ref;
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._subscription = null;
	            this._obj = null;
	            this._strategy = null;
	        }
	        /**
	         * @return {?}
	         */
	        AsyncPipe.prototype.ngOnDestroy = function () {
	            if (this._subscription) {
	                this._dispose();
	            }
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        AsyncPipe.prototype.transform = function (obj) {
	            if (!this._obj) {
	                if (obj) {
	                    this._subscribe(obj);
	                }
	                this._latestReturnedValue = this._latestValue;
	                return this._latestValue;
	            }
	            if (obj !== this._obj) {
	                this._dispose();
	                return this.transform(obj);
	            }
	            if (this._latestValue === this._latestReturnedValue) {
	                return this._latestReturnedValue;
	            }
	            this._latestReturnedValue = this._latestValue;
	            return _angular_core.WrappedValue.wrap(this._latestValue);
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        AsyncPipe.prototype._subscribe = function (obj) {
	            var _this = this;
	            this._obj = obj;
	            this._strategy = this._selectStrategy(obj);
	            this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        AsyncPipe.prototype._selectStrategy = function (obj) {
	            if (isPromise(obj)) {
	                return _promiseStrategy;
	            }
	            if (isObservable(obj)) {
	                return _observableStrategy;
	            }
	            throw new InvalidPipeArgumentError(AsyncPipe, obj);
	        };
	        /**
	         * @return {?}
	         */
	        AsyncPipe.prototype._dispose = function () {
	            this._strategy.dispose(this._subscription);
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._subscription = null;
	            this._obj = null;
	        };
	        /**
	         * @param {?} async
	         * @param {?} value
	         * @return {?}
	         */
	        AsyncPipe.prototype._updateLatestValue = function (async, value) {
	            if (async === this._obj) {
	                this._latestValue = value;
	                this._ref.markForCheck();
	            }
	        };
	        AsyncPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'async', pure: false },] },
	        ];
	        /** @nocollapse */
	        AsyncPipe.ctorParameters = function () { return [
	            { type: _angular_core.ChangeDetectorRef, },
	        ]; };
	        return AsyncPipe;
	    }());

	    var NumberFormatStyle = {};
	    NumberFormatStyle.Decimal = 0;
	    NumberFormatStyle.Percent = 1;
	    NumberFormatStyle.Currency = 2;
	    NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
	    NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
	    NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
	    var NumberFormatter = (function () {
	        function NumberFormatter() {
	        }
	        /**
	         * @param {?} num
	         * @param {?} locale
	         * @param {?} style
	         * @param {?=} __3
	         * @return {?}
	         */
	        NumberFormatter.format = function (num, locale, style, _a) {
	            var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
	            var /** @type {?} */ options = {
	                minimumIntegerDigits: minimumIntegerDigits,
	                minimumFractionDigits: minimumFractionDigits,
	                maximumFractionDigits: maximumFractionDigits,
	                style: NumberFormatStyle[style].toLowerCase()
	            };
	            if (style == NumberFormatStyle.Currency) {
	                options.currency = currency;
	                options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
	            }
	            return new Intl.NumberFormat(locale, options).format(num);
	        };
	        return NumberFormatter;
	    }());
	    var /** @type {?} */ DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
	    var /** @type {?} */ PATTERN_ALIASES = {
	        // Keys are quoted so they do not get renamed during closure compilation.
	        'yMMMdjms': datePartGetterFactory(combine([
	            digitCondition('year', 1),
	            nameCondition('month', 3),
	            digitCondition('day', 1),
	            digitCondition('hour', 1),
	            digitCondition('minute', 1),
	            digitCondition('second', 1),
	        ])),
	        'yMdjm': datePartGetterFactory(combine([
	            digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
	            digitCondition('hour', 1), digitCondition('minute', 1)
	        ])),
	        'yMMMMEEEEd': datePartGetterFactory(combine([
	            digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
	            digitCondition('day', 1)
	        ])),
	        'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
	        'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
	        'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
	        'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
	        'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
	    };
	    var /** @type {?} */ DATE_FORMATS = {
	        // Keys are quoted so they do not get renamed.
	        'yyyy': datePartGetterFactory(digitCondition('year', 4)),
	        'yy': datePartGetterFactory(digitCondition('year', 2)),
	        'y': datePartGetterFactory(digitCondition('year', 1)),
	        'MMMM': datePartGetterFactory(nameCondition('month', 4)),
	        'MMM': datePartGetterFactory(nameCondition('month', 3)),
	        'MM': datePartGetterFactory(digitCondition('month', 2)),
	        'M': datePartGetterFactory(digitCondition('month', 1)),
	        'LLLL': datePartGetterFactory(nameCondition('month', 4)),
	        'L': datePartGetterFactory(nameCondition('month', 1)),
	        'dd': datePartGetterFactory(digitCondition('day', 2)),
	        'd': datePartGetterFactory(digitCondition('day', 1)),
	        'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
	        'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
	        'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
	        'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	        'jj': datePartGetterFactory(digitCondition('hour', 2)),
	        'j': datePartGetterFactory(digitCondition('hour', 1)),
	        'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
	        'm': datePartGetterFactory(digitCondition('minute', 1)),
	        'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
	        's': datePartGetterFactory(digitCondition('second', 1)),
	        // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	        // we can be just safely rely on using `sss` since we currently don't support single or two digit
	        // fractions
	        'sss': datePartGetterFactory(digitCondition('second', 3)),
	        'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
	        'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
	        'EE': datePartGetterFactory(nameCondition('weekday', 2)),
	        'E': datePartGetterFactory(nameCondition('weekday', 1)),
	        'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	        'Z': timeZoneGetter('short'),
	        'z': timeZoneGetter('long'),
	        'ww': datePartGetterFactory({}),
	        // first Thursday of the year. not support ?
	        'w': datePartGetterFactory({}),
	        // of the year not support ?
	        'G': datePartGetterFactory(nameCondition('era', 1)),
	        'GG': datePartGetterFactory(nameCondition('era', 2)),
	        'GGG': datePartGetterFactory(nameCondition('era', 3)),
	        'GGGG': datePartGetterFactory(nameCondition('era', 4))
	    };
	    /**
	     * @param {?} inner
	     * @return {?}
	     */
	    function digitModifier(inner) {
	        return function (date, locale) {
	            var /** @type {?} */ result = inner(date, locale);
	            return result.length == 1 ? '0' + result : result;
	        };
	    }
	    /**
	     * @param {?} inner
	     * @return {?}
	     */
	    function hourClockExtractor(inner) {
	        return function (date, locale) { return inner(date, locale).split(' ')[1]; };
	    }
	    /**
	     * @param {?} inner
	     * @return {?}
	     */
	    function hourExtractor(inner) {
	        return function (date, locale) { return inner(date, locale).split(' ')[0]; };
	    }
	    /**
	     * @param {?} date
	     * @param {?} locale
	     * @param {?} options
	     * @return {?}
	     */
	    function intlDateFormat(date, locale, options) {
	        return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
	    }
	    /**
	     * @param {?} timezone
	     * @return {?}
	     */
	    function timeZoneGetter(timezone) {
	        // To workaround `Intl` API restriction for single timezone let format with 24 hours
	        var /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
	        return function (date, locale) {
	            var /** @type {?} */ result = intlDateFormat(date, locale, options);
	            // Then extract first 3 letters that related to hours
	            return result ? result.substring(3) : '';
	        };
	    }
	    /**
	     * @param {?} options
	     * @param {?} value
	     * @return {?}
	     */
	    function hour12Modify(options, value) {
	        options.hour12 = value;
	        return options;
	    }
	    /**
	     * @param {?} prop
	     * @param {?} len
	     * @return {?}
	     */
	    function digitCondition(prop, len) {
	        var /** @type {?} */ result = {};
	        result[prop] = len === 2 ? '2-digit' : 'numeric';
	        return result;
	    }
	    /**
	     * @param {?} prop
	     * @param {?} len
	     * @return {?}
	     */
	    function nameCondition(prop, len) {
	        var /** @type {?} */ result = {};
	        if (len < 4) {
	            result[prop] = len > 1 ? 'short' : 'narrow';
	        }
	        else {
	            result[prop] = 'long';
	        }
	        return result;
	    }
	    /**
	     * @param {?} options
	     * @return {?}
	     */
	    function combine(options) {
	        return (_a = ((Object))).assign.apply(_a, [{}].concat(options));
	        var _a;
	    }
	    /**
	     * @param {?} ret
	     * @return {?}
	     */
	    function datePartGetterFactory(ret) {
	        return function (date, locale) { return intlDateFormat(date, locale, ret); };
	    }
	    var /** @type {?} */ DATE_FORMATTER_CACHE = new Map();
	    /**
	     * @param {?} format
	     * @param {?} date
	     * @param {?} locale
	     * @return {?}
	     */
	    function dateFormatter(format, date, locale) {
	        var /** @type {?} */ fn = PATTERN_ALIASES[format];
	        if (fn)
	            return fn(date, locale);
	        var /** @type {?} */ cacheKey = format;
	        var /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);
	        if (!parts) {
	            parts = [];
	            var /** @type {?} */ match = void 0;
	            DATE_FORMATS_SPLIT.exec(format);
	            while (format) {
	                match = DATE_FORMATS_SPLIT.exec(format);
	                if (match) {
	                    parts = parts.concat(match.slice(1));
	                    format = parts.pop();
	                }
	                else {
	                    parts.push(format);
	                    format = null;
	                }
	            }
	            DATE_FORMATTER_CACHE.set(cacheKey, parts);
	        }
	        return parts.reduce(function (text, part) {
	            var /** @type {?} */ fn = DATE_FORMATS[part];
	            return text + (fn ? fn(date, locale) : partToTime(part));
	        }, '');
	    }
	    /**
	     * @param {?} part
	     * @return {?}
	     */
	    function partToTime(part) {
	        return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
	    }
	    var DateFormatter = (function () {
	        function DateFormatter() {
	        }
	        /**
	         * @param {?} date
	         * @param {?} locale
	         * @param {?} pattern
	         * @return {?}
	         */
	        DateFormatter.format = function (date, locale, pattern) {
	            return dateFormatter(pattern, date, locale);
	        };
	        return DateFormatter;
	    }());

	    var /** @type {?} */ ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Formats a date according to locale rules.
	     * \@howToUse `date_expression | date[:format]`
	     * \@description
	     *
	     * Where:
	     * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
	     * (https://www.w3.org/TR/NOTE-datetime).
	     * - `format` indicates which date/time components to include. The format can be predefined as
	     *   shown below or custom as shown in the table.
	     *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
	     *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
	     *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
	     *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
	     *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
	     *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
	     *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
	     *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
	     *
	     *
	     *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
	     *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
	     *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
	     *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
	     *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
	     *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
	     *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
	     *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
	     *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
	     *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
	     *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
	     *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
	     *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
	     *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
	     *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
	     *
	     * In javascript, only the components specified will be respected (not the ordering,
	     * punctuations, ...) and details of the formatting will be dependent on the locale.
	     *
	     * Timezone of the formatted text will be the local system timezone of the end-user's machine.
	     *
	     * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
	     * applied and the formatted text will have the same day, month and year of the expression.
	     *
	     * WARNINGS:
	     * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
	     *   Instead users should treat the date as an immutable object and change the reference when the
	     *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
	     *   which would be an expensive operation).
	     * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
	     *   browsers.
	     *
	     * ### Examples
	     *
	     * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
	     * in the _local_ time and locale is 'en-US':
	     *
	     * ```
	     *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
	     *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	     *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	     *     {{ dateObj | date:'mmss' }}        // output is '43:11'
	     * ```
	     *
	     * {\@example common/pipes/ts/date_pipe.ts region='DatePipe'}
	     *
	     * \@stable
	     */
	    var DatePipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function DatePipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} pattern
	         * @return {?}
	         */
	        DatePipe.prototype.transform = function (value, pattern) {
	            if (pattern === void 0) { pattern = 'mediumDate'; }
	            var /** @type {?} */ date;
	            if (isBlank$1(value) || value !== value)
	                return null;
	            if (typeof value === 'string') {
	                value = value.trim();
	            }
	            if (isDate(value)) {
	                date = value;
	            }
	            else if (NumberWrapper.isNumeric(value)) {
	                date = new Date(parseFloat(value));
	            }
	            else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
	                /**
	                * For ISO Strings without time the day, month and year must be extracted from the ISO String
	                * before Date creation to avoid time offset and errors in the new Date.
	                * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
	                * date, some browsers (e.g. IE 9) will throw an invalid Date error
	                * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
	                * is applied
	                * Note: ISO months are 0 for January, 1 for February, ...
	                */
	                var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
	                date = new Date(y, m - 1, d);
	            }
	            else {
	                date = new Date(value);
	            }
	            if (!isDate(date)) {
	                var /** @type {?} */ match = void 0;
	                if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {
	                    date = isoStringToDate(match);
	                }
	                else {
	                    throw new InvalidPipeArgumentError(DatePipe, value);
	                }
	            }
	            return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
	        };
	        /** @internal */
	        DatePipe._ALIASES = {
	            'medium': 'yMMMdjms',
	            'short': 'yMdjm',
	            'fullDate': 'yMMMMEEEEd',
	            'longDate': 'yMMMMd',
	            'mediumDate': 'yMMMd',
	            'shortDate': 'yMd',
	            'mediumTime': 'jms',
	            'shortTime': 'jm'
	        };
	        DatePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'date', pure: true },] },
	        ];
	        /** @nocollapse */
	        DatePipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return DatePipe;
	    }());
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank$1(obj) {
	        return obj == null || obj === '';
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isDate(obj) {
	        return obj instanceof Date && !isNaN(obj.valueOf());
	    }
	    /**
	     * @param {?} match
	     * @return {?}
	     */
	    function isoStringToDate(match) {
	        var /** @type {?} */ date = new Date(0);
	        var /** @type {?} */ tzHour = 0;
	        var /** @type {?} */ tzMin = 0;
	        var /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
	        var /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;
	        if (match[9]) {
	            tzHour = toInt(match[9] + match[10]);
	            tzMin = toInt(match[9] + match[11]);
	        }
	        dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	        var /** @type {?} */ h = toInt(match[4] || '0') - tzHour;
	        var /** @type {?} */ m = toInt(match[5] || '0') - tzMin;
	        var /** @type {?} */ s = toInt(match[6] || '0');
	        var /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	        timeSetter.call(date, h, m, s, ms);
	        return date;
	    }
	    /**
	     * @param {?} str
	     * @return {?}
	     */
	    function toInt(str) {
	        return parseInt(str, 10);
	    }

	    var /** @type {?} */ _INTERPOLATION_REGEXP = /#/g;
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
	     * \@howToUse `expression | i18nPlural:mapping`
	     * \@description
	     *
	     *  Where:
	     *  - `expression` is a number.
	     *  - `mapping` is an object that mimics the ICU format, see
	     *    http://userguide.icu-project.org/formatparse/messages
	     *
	     *  ## Example
	     *
	     * {\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
	     *
	     * \@experimental
	     */
	    var I18nPluralPipe = (function () {
	        /**
	         * @param {?} _localization
	         */
	        function I18nPluralPipe(_localization) {
	            this._localization = _localization;
	        }
	        /**
	         * @param {?} value
	         * @param {?} pluralMap
	         * @return {?}
	         */
	        I18nPluralPipe.prototype.transform = function (value, pluralMap) {
	            if (value == null)
	                return '';
	            if (typeof pluralMap !== 'object' || pluralMap === null) {
	                throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
	            }
	            var /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
	            return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
	        };
	        I18nPluralPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'i18nPlural', pure: true },] },
	        ];
	        /** @nocollapse */
	        I18nPluralPipe.ctorParameters = function () { return [
	            { type: NgLocalization, },
	        ]; };
	        return I18nPluralPipe;
	    }());

	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Generic selector that displays the string that matches the current value.
	     * \@howToUse `expression | i18nSelect:mapping`
	     * \@description
	     *
	     *  Where `mapping` is an object that indicates the text that should be displayed
	     *  for different values of the provided `expression`.
	     *  If none of the keys of the mapping match the value of the `expression`, then the content
	     *  of the `other` key is returned when present, otherwise an empty string is returned.
	     *
	     *  ## Example
	     *
	     * {\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
	     *
	     *  \@experimental
	     */
	    var I18nSelectPipe = (function () {
	        function I18nSelectPipe() {
	        }
	        /**
	         * @param {?} value
	         * @param {?} mapping
	         * @return {?}
	         */
	        I18nSelectPipe.prototype.transform = function (value, mapping) {
	            if (value == null)
	                return '';
	            if (typeof mapping !== 'object' || typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
	            }
	            if (mapping.hasOwnProperty(value)) {
	                return mapping[value];
	            }
	            if (mapping.hasOwnProperty('other')) {
	                return mapping['other'];
	            }
	            return '';
	        };
	        I18nSelectPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'i18nSelect', pure: true },] },
	        ];
	        /** @nocollapse */
	        I18nSelectPipe.ctorParameters = function () { return []; };
	        return I18nSelectPipe;
	    }());

	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Converts value into JSON string.
	     * \@howToUse `expression | json`
	     * \@description
	     *
	     * Converts value into string using `JSON.stringify`. Useful for debugging.
	     *
	     * ### Example
	     * {\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
	     *
	     * \@stable
	     */
	    var JsonPipe = (function () {
	        function JsonPipe() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
	        JsonPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'json', pure: false },] },
	        ];
	        /** @nocollapse */
	        JsonPipe.ctorParameters = function () { return []; };
	        return JsonPipe;
	    }());

	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Transforms string to lowercase.
	     * \@howToUse `expression | lowercase`
	     * \@description
	     *
	     * Converts value into a lowercase string using `String.prototype.toLowerCase()`.
	     *
	     * ### Example
	     *
	     * {\@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
	     *
	     * \@stable
	     */
	    var LowerCasePipe = (function () {
	        function LowerCasePipe() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        LowerCasePipe.prototype.transform = function (value) {
	            if (isBlank(value))
	                return value;
	            if (typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(LowerCasePipe, value);
	            }
	            return value.toLowerCase();
	        };
	        LowerCasePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'lowercase' },] },
	        ];
	        /** @nocollapse */
	        LowerCasePipe.ctorParameters = function () { return []; };
	        return LowerCasePipe;
	    }());

	    var /** @type {?} */ _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
	    /**
	     * @param {?} pipe
	     * @param {?} locale
	     * @param {?} value
	     * @param {?} style
	     * @param {?} digits
	     * @param {?=} currency
	     * @param {?=} currencyAsSymbol
	     * @return {?}
	     */
	    function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
	        if (currency === void 0) { currency = null; }
	        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
	        if (value == null)
	            return null;
	        // Convert strings to numbers
	        value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;
	        if (typeof value !== 'number') {
	            throw new InvalidPipeArgumentError(pipe, value);
	        }
	        var /** @type {?} */ minInt;
	        var /** @type {?} */ minFraction;
	        var /** @type {?} */ maxFraction;
	        if (style !== NumberFormatStyle.Currency) {
	            // rely on Intl default for currency
	            minInt = 1;
	            minFraction = 0;
	            maxFraction = 3;
	        }
	        if (digits) {
	            var /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);
	            if (parts === null) {
	                throw new Error(digits + " is not a valid digit info for number pipes");
	            }
	            if (parts[1] != null) {
	                minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
	            }
	            if (parts[3] != null) {
	                minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
	            }
	            if (parts[5] != null) {
	                maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
	            }
	        }
	        return NumberFormatter.format(/** @type {?} */ (value), locale, style, {
	            minimumIntegerDigits: minInt,
	            minimumFractionDigits: minFraction,
	            maximumFractionDigits: maxFraction,
	            currency: currency,
	            currencyAsSymbol: currencyAsSymbol,
	        });
	    }
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Formats a number according to locale rules.
	     * \@howToUse `number_expression | number[:digitInfo]`
	     *
	     * Formats a number as text. Group sizing and separator and other locale-specific
	     * configurations are based on the active locale.
	     *
	     * where `expression` is a number:
	     *  - `digitInfo` is a `string` which has a following format: <br>
	     *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
	     *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
	     *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
	     *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
	     *
	     * For more information on the acceptable range for each of these numbers and other
	     * details see your native internationalization library.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
	     *
	     * \@stable
	     */
	    var DecimalPipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function DecimalPipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} digits
	         * @return {?}
	         */
	        DecimalPipe.prototype.transform = function (value, digits) {
	            if (digits === void 0) { digits = null; }
	            return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
	        };
	        DecimalPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'number' },] },
	        ];
	        /** @nocollapse */
	        DecimalPipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return DecimalPipe;
	    }());
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Formats a number as a percentage according to locale rules.
	     * \@howToUse `number_expression | percent[:digitInfo]`
	     *
	     * \@description
	     *
	     * Formats a number as percentage.
	     *
	     * - `digitInfo` See {\@link DecimalPipe} for detailed description.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
	     *
	     * \@stable
	     */
	    var PercentPipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function PercentPipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} digits
	         * @return {?}
	         */
	        PercentPipe.prototype.transform = function (value, digits) {
	            if (digits === void 0) { digits = null; }
	            return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
	        };
	        PercentPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'percent' },] },
	        ];
	        /** @nocollapse */
	        PercentPipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return PercentPipe;
	    }());
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Formats a number as currency using locale rules.
	     * \@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
	     * \@description
	     *
	     * Use `currency` to format a number as currency.
	     *
	     * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
	     *    as `USD` for the US dollar and `EUR` for the euro.
	     * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
	     *   - `true`: use symbol (e.g. `$`).
	     *   - `false`(default): use code (e.g. `USD`).
	     * - `digitInfo` See {\@link DecimalPipe} for detailed description.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
	     *
	     * \@stable
	     */
	    var CurrencyPipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function CurrencyPipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} currencyCode
	         * @param {?=} symbolDisplay
	         * @param {?=} digits
	         * @return {?}
	         */
	        CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
	            if (currencyCode === void 0) { currencyCode = 'USD'; }
	            if (symbolDisplay === void 0) { symbolDisplay = false; }
	            if (digits === void 0) { digits = null; }
	            return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
	        };
	        CurrencyPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'currency' },] },
	        ];
	        /** @nocollapse */
	        CurrencyPipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return CurrencyPipe;
	    }());

	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Creates a new List or String containing a subset (slice) of the elements.
	     * \@howToUse `array_or_string_expression | slice:start[:end]`
	     * \@description
	     *
	     * Where the input expression is a `List` or `String`, and:
	     * - `start`: The starting index of the subset to return.
	     *   - **a positive integer**: return the item at `start` index and all items after
	     *     in the list or string expression.
	     *   - **a negative integer**: return the item at `start` index from the end and all items after
	     *     in the list or string expression.
	     *   - **if positive and greater than the size of the expression**: return an empty list or string.
	     *   - **if negative and greater than the size of the expression**: return entire list or string.
	     * - `end`: The ending index of the subset to return.
	     *   - **omitted**: return all items until the end.
	     *   - **if positive**: return all items before `end` index of the list or string.
	     *   - **if negative**: return all items before `end` index from the end of the list or string.
	     *
	     * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
	     * and `String.prototype.slice()`.
	     *
	     * When operating on a [List], the returned list is always a copy even when all
	     * the elements are being returned.
	     *
	     * When operating on a blank value, the pipe returns the blank value.
	     *
	     * ## List Example
	     *
	     * This `ngFor` example:
	     *
	     * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
	     *
	     * produces the following:
	     *
	     *     <li>b</li>
	     *     <li>c</li>
	     *
	     * ## String Examples
	     *
	     * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
	     *
	     * \@stable
	     */
	    var SlicePipe = (function () {
	        function SlicePipe() {
	        }
	        /**
	         * @param {?} value
	         * @param {?} start
	         * @param {?=} end
	         * @return {?}
	         */
	        SlicePipe.prototype.transform = function (value, start, end) {
	            if (value == null)
	                return value;
	            if (!this.supports(value)) {
	                throw new InvalidPipeArgumentError(SlicePipe, value);
	            }
	            return value.slice(start, end);
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
	        SlicePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'slice', pure: false },] },
	        ];
	        /** @nocollapse */
	        SlicePipe.ctorParameters = function () { return []; };
	        return SlicePipe;
	    }());

	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Transforms string to uppercase.
	     * \@howToUse `expression | uppercase`
	     * \@description
	     *
	     * Converts value into an uppercase string using `String.prototype.toUpperCase()`.
	     *
	     * ### Example
	     *
	     * {\@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
	     *
	     * \@stable
	     */
	    var UpperCasePipe = (function () {
	        function UpperCasePipe() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        UpperCasePipe.prototype.transform = function (value) {
	            if (isBlank(value))
	                return value;
	            if (typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(UpperCasePipe, value);
	            }
	            return value.toUpperCase();
	        };
	        UpperCasePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'uppercase' },] },
	        ];
	        /** @nocollapse */
	        UpperCasePipe.ctorParameters = function () { return []; };
	        return UpperCasePipe;
	    }());

	    /**
	     * A collection of Angular pipes that are likely to be used in each and every application.
	     */
	    var /** @type {?} */ COMMON_PIPES = [
	        AsyncPipe,
	        UpperCasePipe,
	        LowerCasePipe,
	        JsonPipe,
	        SlicePipe,
	        DecimalPipe,
	        PercentPipe,
	        CurrencyPipe,
	        DatePipe,
	        I18nPluralPipe,
	        I18nSelectPipe,
	    ];

	    /**
	     * The module that includes all the basic Angular directives like {\@link NgIf}, {\@link NgFor}, ...
	     *
	     * \@stable
	     */
	    var CommonModule = (function () {
	        function CommonModule() {
	        }
	        CommonModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
	                        exports: [COMMON_DIRECTIVES, COMMON_PIPES],
	                        providers: [
	                            { provide: NgLocalization, useClass: NgLocaleLocalization },
	                        ],
	                    },] },
	        ];
	        /** @nocollapse */
	        CommonModule.ctorParameters = function () { return []; };
	        return CommonModule;
	    }());

	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.7');

	    exports.NgLocalization = NgLocalization;
	    exports.CommonModule = CommonModule;
	    exports.NgClass = NgClass;
	    exports.NgFor = NgFor;
	    exports.NgIf = NgIf;
	    exports.NgPlural = NgPlural;
	    exports.NgPluralCase = NgPluralCase;
	    exports.NgStyle = NgStyle;
	    exports.NgSwitch = NgSwitch;
	    exports.NgSwitchCase = NgSwitchCase;
	    exports.NgSwitchDefault = NgSwitchDefault;
	    exports.NgTemplateOutlet = NgTemplateOutlet;
	    exports.AsyncPipe = AsyncPipe;
	    exports.DatePipe = DatePipe;
	    exports.I18nPluralPipe = I18nPluralPipe;
	    exports.I18nSelectPipe = I18nSelectPipe;
	    exports.JsonPipe = JsonPipe;
	    exports.LowerCasePipe = LowerCasePipe;
	    exports.CurrencyPipe = CurrencyPipe;
	    exports.DecimalPipe = DecimalPipe;
	    exports.PercentPipe = PercentPipe;
	    exports.SlicePipe = SlicePipe;
	    exports.UpperCasePipe = UpperCasePipe;
	    exports.VERSION = VERSION;
	    exports.Version = _angular_core.Version;
	    exports.PlatformLocation = PlatformLocation;
	    exports.LocationStrategy = LocationStrategy;
	    exports.APP_BASE_HREF = APP_BASE_HREF;
	    exports.HashLocationStrategy = HashLocationStrategy;
	    exports.PathLocationStrategy = PathLocationStrategy;
	    exports.Location = Location;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.4.7
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(26), __webpack_require__(4), __webpack_require__(23)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/compiler', '@angular/core', '@angular/platform-browser'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}),global.ng.compiler,global.ng.core,global.ng.platformBrowser));
	}(this, function (exports,_angular_compiler,_angular_core,_angular_platformBrowser) { 'use strict';

	    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;

	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ResourceLoaderImpl = (function (_super) {
	        __extends(ResourceLoaderImpl, _super);
	        function ResourceLoaderImpl() {
	            _super.apply(this, arguments);
	        }
	        ResourceLoaderImpl.prototype.get = function (url) {
	            var resolve;
	            var reject;
	            var promise = new Promise(function (res, rej) {
	                resolve = res;
	                reject = rej;
	            });
	            var xhr = new XMLHttpRequest();
	            xhr.open('GET', url, true);
	            xhr.responseType = 'text';
	            xhr.onload = function () {
	                // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	                // response/responseType properties were introduced in ResourceLoader Level2 spec (supported
	                // by IE10)
	                var response = xhr.response || xhr.responseText;
	                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	                var status = xhr.status === 1223 ? 204 : xhr.status;
	                // fix status code when it is 0 (0 status is undocumented).
	                // Occurs when accessing file resources or on Android 4.1 stock browser
	                // while retrieving files from application cache.
	                if (status === 0) {
	                    status = response ? 200 : 0;
	                }
	                if (200 <= status && status <= 300) {
	                    resolve(response);
	                }
	                else {
	                    reject("Failed to load " + url);
	                }
	            };
	            xhr.onerror = function () { reject("Failed to load " + url); };
	            xhr.send();
	            return promise;
	        };
	        ResourceLoaderImpl.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        ResourceLoaderImpl.ctorParameters = function () { return []; };
	        return ResourceLoaderImpl;
	    }(_angular_compiler.ResourceLoader));

	    var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [
	        INTERNAL_BROWSER_PLATFORM_PROVIDERS,
	        {
	            provide: _angular_core.COMPILER_OPTIONS,
	            useValue: { providers: [{ provide: _angular_compiler.ResourceLoader, useClass: ResourceLoaderImpl }] },
	            multi: true
	        },
	    ];

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = self;
	        }
	        else {
	            globalScope = global;
	        }
	    }
	    else {
	        globalScope = window;
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var _global = globalScope;
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    _global.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
	     * ResourceLoader.
	     *
	     * The template cache needs to be built and loaded into window.$templateCache
	     * via a separate mechanism.
	     */
	    var CachedResourceLoader = (function (_super) {
	        __extends$1(CachedResourceLoader, _super);
	        function CachedResourceLoader() {
	            _super.call(this);
	            this._cache = _global.$templateCache;
	            if (this._cache == null) {
	                throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
	            }
	        }
	        CachedResourceLoader.prototype.get = function (url) {
	            if (this._cache.hasOwnProperty(url)) {
	                return Promise.resolve(this._cache[url]);
	            }
	            else {
	                return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
	            }
	        };
	        return CachedResourceLoader;
	    }(_angular_compiler.ResourceLoader));

	    var __platform_browser_dynamic_private__ = {
	        INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
	        ResourceLoaderImpl: ResourceLoaderImpl
	    };

	    /**
	     * @stable
	     */
	    var VERSION = new _angular_core.Version('2.4.7');

	    /**
	     * @experimental
	     */
	    var RESOURCE_CACHE_PROVIDER = [{ provide: _angular_compiler.ResourceLoader, useClass: CachedResourceLoader }];
	    /**
	     * @stable
	     */
	    var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);

	    exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;
	    exports.platformBrowserDynamic = platformBrowserDynamic;
	    exports.VERSION = VERSION;
	    exports.__platform_browser_dynamic_private__ = __platform_browser_dynamic_private__;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.4.7
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(4)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}),global.ng.core));
	}(this, function (exports,_angular_core) { 'use strict';

	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.7');

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * A segment of text within the template.
	     */
	    var TextAst = (function () {
	        /**
	         * @param {?} value
	         * @param {?} ngContentIndex
	         * @param {?} sourceSpan
	         */
	        function TextAst(value, ngContentIndex, sourceSpan) {
	            this.value = value;
	            this.ngContentIndex = ngContentIndex;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	        return TextAst;
	    }());
	    /**
	     * A bound expression within the text of a template.
	     */
	    var BoundTextAst = (function () {
	        /**
	         * @param {?} value
	         * @param {?} ngContentIndex
	         * @param {?} sourceSpan
	         */
	        function BoundTextAst(value, ngContentIndex, sourceSpan) {
	            this.value = value;
	            this.ngContentIndex = ngContentIndex;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BoundTextAst.prototype.visit = function (visitor, context) {
	            return visitor.visitBoundText(this, context);
	        };
	        return BoundTextAst;
	    }());
	    /**
	     * A plain attribute on an element.
	     */
	    var AttrAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function AttrAst(name, value, sourceSpan) {
	            this.name = name;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	        return AttrAst;
	    }());
	    /**
	     * A binding for an element property (e.g. `[property]="expression"`) or an animation trigger (e.g.
	     * `[\@trigger]="stateExp"`)
	     */
	    var BoundElementPropertyAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} type
	         * @param {?} securityContext
	         * @param {?} needsRuntimeSecurityContext
	         * @param {?} value
	         * @param {?} unit
	         * @param {?} sourceSpan
	         */
	        function BoundElementPropertyAst(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) {
	            this.name = name;
	            this.type = type;
	            this.securityContext = securityContext;
	            this.needsRuntimeSecurityContext = needsRuntimeSecurityContext;
	            this.value = value;
	            this.unit = unit;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BoundElementPropertyAst.prototype.visit = function (visitor, context) {
	            return visitor.visitElementProperty(this, context);
	        };
	        Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.type === PropertyBindingType.Animation; },
	            enumerable: true,
	            configurable: true
	        });
	        return BoundElementPropertyAst;
	    }());
	    /**
	     * A binding for an element event (e.g. `(event)="handler()"`) or an animation trigger event (e.g.
	     * `(\@trigger.phase)="callback($event)"`).
	     */
	    var BoundEventAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} target
	         * @param {?} phase
	         * @param {?} handler
	         * @param {?} sourceSpan
	         */
	        function BoundEventAst(name, target, phase, handler, sourceSpan) {
	            this.name = name;
	            this.target = target;
	            this.phase = phase;
	            this.handler = handler;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} name
	         * @param {?} target
	         * @param {?} phase
	         * @return {?}
	         */
	        BoundEventAst.calcFullName = function (name, target, phase) {
	            if (target) {
	                return target + ":" + name;
	            }
	            else if (phase) {
	                return "@" + name + "." + phase;
	            }
	            else {
	                return name;
	            }
	        };
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BoundEventAst.prototype.visit = function (visitor, context) {
	            return visitor.visitEvent(this, context);
	        };
	        Object.defineProperty(BoundEventAst.prototype, "fullName", {
	            /**
	             * @return {?}
	             */
	            get: function () { return BoundEventAst.calcFullName(this.name, this.target, this.phase); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
	            /**
	             * @return {?}
	             */
	            get: function () { return !!this.phase; },
	            enumerable: true,
	            configurable: true
	        });
	        return BoundEventAst;
	    }());
	    /**
	     * A reference declaration on an element (e.g. `let someName="expression"`).
	     */
	    var ReferenceAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function ReferenceAst(name, value, sourceSpan) {
	            this.name = name;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ReferenceAst.prototype.visit = function (visitor, context) {
	            return visitor.visitReference(this, context);
	        };
	        return ReferenceAst;
	    }());
	    /**
	     * A variable declaration on a <template> (e.g. `var-someName="someLocalName"`).
	     */
	    var VariableAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function VariableAst(name, value, sourceSpan) {
	            this.name = name;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        VariableAst.prototype.visit = function (visitor, context) {
	            return visitor.visitVariable(this, context);
	        };
	        return VariableAst;
	    }());
	    /**
	     * An element declaration in a template.
	     */
	    var ElementAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} attrs
	         * @param {?} inputs
	         * @param {?} outputs
	         * @param {?} references
	         * @param {?} directives
	         * @param {?} providers
	         * @param {?} hasViewContainer
	         * @param {?} children
	         * @param {?} ngContentIndex
	         * @param {?} sourceSpan
	         * @param {?} endSourceSpan
	         */
	        function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan, endSourceSpan) {
	            this.name = name;
	            this.attrs = attrs;
	            this.inputs = inputs;
	            this.outputs = outputs;
	            this.references = references;
	            this.directives = directives;
	            this.providers = providers;
	            this.hasViewContainer = hasViewContainer;
	            this.children = children;
	            this.ngContentIndex = ngContentIndex;
	            this.sourceSpan = sourceSpan;
	            this.endSourceSpan = endSourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ElementAst.prototype.visit = function (visitor, context) {
	            return visitor.visitElement(this, context);
	        };
	        return ElementAst;
	    }());
	    /**
	     * A `<template>` element included in an Angular template.
	     */
	    var EmbeddedTemplateAst = (function () {
	        /**
	         * @param {?} attrs
	         * @param {?} outputs
	         * @param {?} references
	         * @param {?} variables
	         * @param {?} directives
	         * @param {?} providers
	         * @param {?} hasViewContainer
	         * @param {?} children
	         * @param {?} ngContentIndex
	         * @param {?} sourceSpan
	         */
	        function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
	            this.attrs = attrs;
	            this.outputs = outputs;
	            this.references = references;
	            this.variables = variables;
	            this.directives = directives;
	            this.providers = providers;
	            this.hasViewContainer = hasViewContainer;
	            this.children = children;
	            this.ngContentIndex = ngContentIndex;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
	            return visitor.visitEmbeddedTemplate(this, context);
	        };
	        return EmbeddedTemplateAst;
	    }());
	    /**
	     * A directive property with a bound value (e.g. `*ngIf="condition").
	     */
	    var BoundDirectivePropertyAst = (function () {
	        /**
	         * @param {?} directiveName
	         * @param {?} templateName
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
	            this.directiveName = directiveName;
	            this.templateName = templateName;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
	            return visitor.visitDirectiveProperty(this, context);
	        };
	        return BoundDirectivePropertyAst;
	    }());
	    /**
	     * A directive declared on an element.
	     */
	    var DirectiveAst = (function () {
	        /**
	         * @param {?} directive
	         * @param {?} inputs
	         * @param {?} hostProperties
	         * @param {?} hostEvents
	         * @param {?} sourceSpan
	         */
	        function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
	            this.directive = directive;
	            this.inputs = inputs;
	            this.hostProperties = hostProperties;
	            this.hostEvents = hostEvents;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        DirectiveAst.prototype.visit = function (visitor, context) {
	            return visitor.visitDirective(this, context);
	        };
	        return DirectiveAst;
	    }());
	    /**
	     * A provider declared on an element
	     */
	    var ProviderAst = (function () {
	        /**
	         * @param {?} token
	         * @param {?} multiProvider
	         * @param {?} eager
	         * @param {?} providers
	         * @param {?} providerType
	         * @param {?} lifecycleHooks
	         * @param {?} sourceSpan
	         */
	        function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
	            this.token = token;
	            this.multiProvider = multiProvider;
	            this.eager = eager;
	            this.providers = providers;
	            this.providerType = providerType;
	            this.lifecycleHooks = lifecycleHooks;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ProviderAst.prototype.visit = function (visitor, context) {
	            // No visit method in the visitor for now...
	            return null;
	        };
	        return ProviderAst;
	    }());
	    var ProviderAstType = {};
	    ProviderAstType.PublicService = 0;
	    ProviderAstType.PrivateService = 1;
	    ProviderAstType.Component = 2;
	    ProviderAstType.Directive = 3;
	    ProviderAstType.Builtin = 4;
	    ProviderAstType[ProviderAstType.PublicService] = "PublicService";
	    ProviderAstType[ProviderAstType.PrivateService] = "PrivateService";
	    ProviderAstType[ProviderAstType.Component] = "Component";
	    ProviderAstType[ProviderAstType.Directive] = "Directive";
	    ProviderAstType[ProviderAstType.Builtin] = "Builtin";
	    /**
	     * Position where content is to be projected (instance of `<ng-content>` in a template).
	     */
	    var NgContentAst = (function () {
	        /**
	         * @param {?} index
	         * @param {?} ngContentIndex
	         * @param {?} sourceSpan
	         */
	        function NgContentAst(index, ngContentIndex, sourceSpan) {
	            this.index = index;
	            this.ngContentIndex = ngContentIndex;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        NgContentAst.prototype.visit = function (visitor, context) {
	            return visitor.visitNgContent(this, context);
	        };
	        return NgContentAst;
	    }());
	    var PropertyBindingType = {};
	    PropertyBindingType.Property = 0;
	    PropertyBindingType.Attribute = 1;
	    PropertyBindingType.Class = 2;
	    PropertyBindingType.Style = 3;
	    PropertyBindingType.Animation = 4;
	    PropertyBindingType[PropertyBindingType.Property] = "Property";
	    PropertyBindingType[PropertyBindingType.Attribute] = "Attribute";
	    PropertyBindingType[PropertyBindingType.Class] = "Class";
	    PropertyBindingType[PropertyBindingType.Style] = "Style";
	    PropertyBindingType[PropertyBindingType.Animation] = "Animation";
	    /**
	     * Visit every node in a list of {\@link TemplateAst}s with the given {\@link TemplateAstVisitor}.
	     * @param {?} visitor
	     * @param {?} asts
	     * @param {?=} context
	     * @return {?}
	     */
	    function templateVisitAll(visitor, asts, context) {
	        if (context === void 0) { context = null; }
	        var /** @type {?} */ result = [];
	        var /** @type {?} */ visit = visitor.visit ?
	            function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	            function (ast) { return ast.visit(visitor, context); };
	        asts.forEach(function (ast) {
	            var /** @type {?} */ astResult = visit(ast);
	            if (astResult) {
	                result.push(astResult);
	            }
	        });
	        return result;
	    }

	    /**
	     * A token representing the a reference to a static type.
	     *
	     * This token is unique for a filePath and name and can be used as a hash table key.
	     */
	    var StaticSymbol = (function () {
	        /**
	         * @param {?} filePath
	         * @param {?} name
	         * @param {?=} members
	         */
	        function StaticSymbol(filePath, name, members) {
	            this.filePath = filePath;
	            this.name = name;
	            this.members = members;
	        }
	        return StaticSymbol;
	    }());
	    /**
	     * A cache of static symbol used by the StaticReflector to return the same symbol for the
	     * same symbol values.
	     */
	    var StaticSymbolCache = (function () {
	        function StaticSymbolCache() {
	            this.cache = new Map();
	        }
	        /**
	         * @param {?} declarationFile
	         * @param {?} name
	         * @param {?=} members
	         * @return {?}
	         */
	        StaticSymbolCache.prototype.get = function (declarationFile, name, members) {
	            members = members || [];
	            var /** @type {?} */ memberSuffix = members.length ? "." + members.join('.') : '';
	            var /** @type {?} */ key = "\"" + declarationFile + "\"." + name + memberSuffix;
	            var /** @type {?} */ result = this.cache.get(key);
	            if (!result) {
	                result = new StaticSymbol(declarationFile, name, members);
	                this.cache.set(key, result);
	            }
	            return result;
	        };
	        return StaticSymbolCache;
	    }());

	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    var /** @type {?} */ STRING_MAP_PROTO = Object.getPrototypeOf({});
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isStrictStringMap(obj) {
	        return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return "" + token.overriddenName;
	        }
	        if (token.name) {
	            return "" + token.name;
	        }
	        var /** @type {?} */ res = token.toString();
	        var /** @type {?} */ newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    var NumberWrapper = (function () {
	        function NumberWrapper() {
	        }
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        NumberWrapper.parseIntAutoRadix = function (text) {
	            var /** @type {?} */ result = parseInt(text);
	            if (isNaN(result)) {
	                throw new Error('Invalid integer literal when parsing ' + text);
	            }
	            return result;
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	        return NumberWrapper;
	    }());
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPrimitive(obj) {
	        return !isJsObject(obj);
	    }
	    /**
	     * @param {?} s
	     * @return {?}
	     */
	    function escapeRegExp(s) {
	        return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	    }

	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.merge = function (m1, m2) {
	            var /** @type {?} */ m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.equals = function (m1, m2) {
	            var /** @type {?} */ k1 = Object.keys(m1);
	            var /** @type {?} */ k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var /** @type {?} */ i = 0; i < k1.length; i++) {
	                var /** @type {?} */ key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        /**
	         * @param {?} arr
	         * @param {?} condition
	         * @return {?}
	         */
	        ListWrapper.findLast = function (arr, condition) {
	            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
	                if (condition(arr[i])) {
	                    return arr[i];
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} list
	         * @param {?} items
	         * @return {?}
	         */
	        ListWrapper.removeAll = function (list, items) {
	            for (var /** @type {?} */ i = 0; i < items.length; ++i) {
	                var /** @type {?} */ index = list.indexOf(items[i]);
	                if (index > -1) {
	                    list.splice(index, 1);
	                }
	            }
	        };
	        /**
	         * @param {?} list
	         * @param {?} el
	         * @return {?}
	         */
	        ListWrapper.remove = function (list, el) {
	            var /** @type {?} */ index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} a
	         * @param {?} b
	         * @return {?}
	         */
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var /** @type {?} */ i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        /**
	         * @param {?} list
	         * @return {?}
	         */
	        ListWrapper.flatten = function (list) {
	            return list.reduce(function (flat, item) {
	                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
	                return ((flat)).concat(flatItem);
	            }, []);
	        };
	        return ListWrapper;
	    }());

	    var /** @type {?} */ isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy;
	    var /** @type {?} */ ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus;
	    var /** @type {?} */ LifecycleHooks = _angular_core.__core_private__.LifecycleHooks;
	    var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES;
	    var /** @type {?} */ ReflectorReader = _angular_core.__core_private__.ReflectorReader;
	    var /** @type {?} */ ViewContainer = _angular_core.__core_private__.ViewContainer;
	    var /** @type {?} */ CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver;
	    var /** @type {?} */ ComponentRef_ = _angular_core.__core_private__.ComponentRef_;
	    var /** @type {?} */ AppView = _angular_core.__core_private__.AppView;
	    var /** @type {?} */ DebugAppView = _angular_core.__core_private__.DebugAppView;
	    var /** @type {?} */ NgModuleInjector = _angular_core.__core_private__.NgModuleInjector;
	    var /** @type {?} */ registerModuleFactory = _angular_core.__core_private__.registerModuleFactory;
	    var /** @type {?} */ ViewType = _angular_core.__core_private__.ViewType;
	    var /** @type {?} */ view_utils = _angular_core.__core_private__.view_utils;
	    var /** @type {?} */ DebugContext = _angular_core.__core_private__.DebugContext;
	    var /** @type {?} */ StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo;
	    var /** @type {?} */ devModeEqual = _angular_core.__core_private__.devModeEqual;
	    var /** @type {?} */ UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED;
	    var /** @type {?} */ ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper;
	    var /** @type {?} */ TemplateRef_ = _angular_core.__core_private__.TemplateRef_;
	    var /** @type {?} */ Console = _angular_core.__core_private__.Console;
	    var /** @type {?} */ reflector = _angular_core.__core_private__.reflector;
	    var /** @type {?} */ Reflector = _angular_core.__core_private__.Reflector;
	    var /** @type {?} */ ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities;
	    var /** @type {?} */ NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
	    var /** @type {?} */ AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer;
	    var /** @type {?} */ AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer;
	    var /** @type {?} */ AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe;
	    var /** @type {?} */ AnimationStyles = _angular_core.__core_private__.AnimationStyles;
	    var /** @type {?} */ ANY_STATE = _angular_core.__core_private__.ANY_STATE;
	    var /** @type {?} */ DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE;
	    var /** @type {?} */ EMPTY_STATE = _angular_core.__core_private__.EMPTY_STATE;
	    var /** @type {?} */ FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG;
	    var /** @type {?} */ prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles;
	    var /** @type {?} */ balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes;
	    var /** @type {?} */ clearStyles = _angular_core.__core_private__.clearStyles;
	    var /** @type {?} */ collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles;
	    var /** @type {?} */ renderStyles = _angular_core.__core_private__.renderStyles;
	    var /** @type {?} */ ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError;
	    var /** @type {?} */ AnimationTransition = _angular_core.__core_private__.AnimationTransition;

	    var TagContentType = {};
	    TagContentType.RAW_TEXT = 0;
	    TagContentType.ESCAPABLE_RAW_TEXT = 1;
	    TagContentType.PARSABLE_DATA = 2;
	    TagContentType[TagContentType.RAW_TEXT] = "RAW_TEXT";
	    TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
	    TagContentType[TagContentType.PARSABLE_DATA] = "PARSABLE_DATA";
	    /**
	     * @param {?} elementName
	     * @return {?}
	     */
	    function splitNsName(elementName) {
	        if (elementName[0] != ':') {
	            return [null, elementName];
	        }
	        var /** @type {?} */ colonIndex = elementName.indexOf(':', 1);
	        if (colonIndex == -1) {
	            throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
	        }
	        return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
	    }
	    /**
	     * @param {?} fullName
	     * @return {?}
	     */
	    function getNsPrefix(fullName) {
	        return fullName === null ? null : splitNsName(fullName)[0];
	    }
	    /**
	     * @param {?} prefix
	     * @param {?} localName
	     * @return {?}
	     */
	    function mergeNsAndName(prefix, localName) {
	        return prefix ? ":" + prefix + ":" + localName : localName;
	    }
	    // see http://www.w3.org/TR/html51/syntax.html#named-character-references
	    // see https://html.spec.whatwg.org/multipage/entities.json
	    // This list is not exhaustive to keep the compiler footprint low.
	    // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
	    var /** @type {?} */ NAMED_ENTITIES = {
	        'Aacute': '\u00C1',
	        'aacute': '\u00E1',
	        'Acirc': '\u00C2',
	        'acirc': '\u00E2',
	        'acute': '\u00B4',
	        'AElig': '\u00C6',
	        'aelig': '\u00E6',
	        'Agrave': '\u00C0',
	        'agrave': '\u00E0',
	        'alefsym': '\u2135',
	        'Alpha': '\u0391',
	        'alpha': '\u03B1',
	        'amp': '&',
	        'and': '\u2227',
	        'ang': '\u2220',
	        'apos': '\u0027',
	        'Aring': '\u00C5',
	        'aring': '\u00E5',
	        'asymp': '\u2248',
	        'Atilde': '\u00C3',
	        'atilde': '\u00E3',
	        'Auml': '\u00C4',
	        'auml': '\u00E4',
	        'bdquo': '\u201E',
	        'Beta': '\u0392',
	        'beta': '\u03B2',
	        'brvbar': '\u00A6',
	        'bull': '\u2022',
	        'cap': '\u2229',
	        'Ccedil': '\u00C7',
	        'ccedil': '\u00E7',
	        'cedil': '\u00B8',
	        'cent': '\u00A2',
	        'Chi': '\u03A7',
	        'chi': '\u03C7',
	        'circ': '\u02C6',
	        'clubs': '\u2663',
	        'cong': '\u2245',
	        'copy': '\u00A9',
	        'crarr': '\u21B5',
	        'cup': '\u222A',
	        'curren': '\u00A4',
	        'dagger': '\u2020',
	        'Dagger': '\u2021',
	        'darr': '\u2193',
	        'dArr': '\u21D3',
	        'deg': '\u00B0',
	        'Delta': '\u0394',
	        'delta': '\u03B4',
	        'diams': '\u2666',
	        'divide': '\u00F7',
	        'Eacute': '\u00C9',
	        'eacute': '\u00E9',
	        'Ecirc': '\u00CA',
	        'ecirc': '\u00EA',
	        'Egrave': '\u00C8',
	        'egrave': '\u00E8',
	        'empty': '\u2205',
	        'emsp': '\u2003',
	        'ensp': '\u2002',
	        'Epsilon': '\u0395',
	        'epsilon': '\u03B5',
	        'equiv': '\u2261',
	        'Eta': '\u0397',
	        'eta': '\u03B7',
	        'ETH': '\u00D0',
	        'eth': '\u00F0',
	        'Euml': '\u00CB',
	        'euml': '\u00EB',
	        'euro': '\u20AC',
	        'exist': '\u2203',
	        'fnof': '\u0192',
	        'forall': '\u2200',
	        'frac12': '\u00BD',
	        'frac14': '\u00BC',
	        'frac34': '\u00BE',
	        'frasl': '\u2044',
	        'Gamma': '\u0393',
	        'gamma': '\u03B3',
	        'ge': '\u2265',
	        'gt': '>',
	        'harr': '\u2194',
	        'hArr': '\u21D4',
	        'hearts': '\u2665',
	        'hellip': '\u2026',
	        'Iacute': '\u00CD',
	        'iacute': '\u00ED',
	        'Icirc': '\u00CE',
	        'icirc': '\u00EE',
	        'iexcl': '\u00A1',
	        'Igrave': '\u00CC',
	        'igrave': '\u00EC',
	        'image': '\u2111',
	        'infin': '\u221E',
	        'int': '\u222B',
	        'Iota': '\u0399',
	        'iota': '\u03B9',
	        'iquest': '\u00BF',
	        'isin': '\u2208',
	        'Iuml': '\u00CF',
	        'iuml': '\u00EF',
	        'Kappa': '\u039A',
	        'kappa': '\u03BA',
	        'Lambda': '\u039B',
	        'lambda': '\u03BB',
	        'lang': '\u27E8',
	        'laquo': '\u00AB',
	        'larr': '\u2190',
	        'lArr': '\u21D0',
	        'lceil': '\u2308',
	        'ldquo': '\u201C',
	        'le': '\u2264',
	        'lfloor': '\u230A',
	        'lowast': '\u2217',
	        'loz': '\u25CA',
	        'lrm': '\u200E',
	        'lsaquo': '\u2039',
	        'lsquo': '\u2018',
	        'lt': '<',
	        'macr': '\u00AF',
	        'mdash': '\u2014',
	        'micro': '\u00B5',
	        'middot': '\u00B7',
	        'minus': '\u2212',
	        'Mu': '\u039C',
	        'mu': '\u03BC',
	        'nabla': '\u2207',
	        'nbsp': '\u00A0',
	        'ndash': '\u2013',
	        'ne': '\u2260',
	        'ni': '\u220B',
	        'not': '\u00AC',
	        'notin': '\u2209',
	        'nsub': '\u2284',
	        'Ntilde': '\u00D1',
	        'ntilde': '\u00F1',
	        'Nu': '\u039D',
	        'nu': '\u03BD',
	        'Oacute': '\u00D3',
	        'oacute': '\u00F3',
	        'Ocirc': '\u00D4',
	        'ocirc': '\u00F4',
	        'OElig': '\u0152',
	        'oelig': '\u0153',
	        'Ograve': '\u00D2',
	        'ograve': '\u00F2',
	        'oline': '\u203E',
	        'Omega': '\u03A9',
	        'omega': '\u03C9',
	        'Omicron': '\u039F',
	        'omicron': '\u03BF',
	        'oplus': '\u2295',
	        'or': '\u2228',
	        'ordf': '\u00AA',
	        'ordm': '\u00BA',
	        'Oslash': '\u00D8',
	        'oslash': '\u00F8',
	        'Otilde': '\u00D5',
	        'otilde': '\u00F5',
	        'otimes': '\u2297',
	        'Ouml': '\u00D6',
	        'ouml': '\u00F6',
	        'para': '\u00B6',
	        'permil': '\u2030',
	        'perp': '\u22A5',
	        'Phi': '\u03A6',
	        'phi': '\u03C6',
	        'Pi': '\u03A0',
	        'pi': '\u03C0',
	        'piv': '\u03D6',
	        'plusmn': '\u00B1',
	        'pound': '\u00A3',
	        'prime': '\u2032',
	        'Prime': '\u2033',
	        'prod': '\u220F',
	        'prop': '\u221D',
	        'Psi': '\u03A8',
	        'psi': '\u03C8',
	        'quot': '\u0022',
	        'radic': '\u221A',
	        'rang': '\u27E9',
	        'raquo': '\u00BB',
	        'rarr': '\u2192',
	        'rArr': '\u21D2',
	        'rceil': '\u2309',
	        'rdquo': '\u201D',
	        'real': '\u211C',
	        'reg': '\u00AE',
	        'rfloor': '\u230B',
	        'Rho': '\u03A1',
	        'rho': '\u03C1',
	        'rlm': '\u200F',
	        'rsaquo': '\u203A',
	        'rsquo': '\u2019',
	        'sbquo': '\u201A',
	        'Scaron': '\u0160',
	        'scaron': '\u0161',
	        'sdot': '\u22C5',
	        'sect': '\u00A7',
	        'shy': '\u00AD',
	        'Sigma': '\u03A3',
	        'sigma': '\u03C3',
	        'sigmaf': '\u03C2',
	        'sim': '\u223C',
	        'spades': '\u2660',
	        'sub': '\u2282',
	        'sube': '\u2286',
	        'sum': '\u2211',
	        'sup': '\u2283',
	        'sup1': '\u00B9',
	        'sup2': '\u00B2',
	        'sup3': '\u00B3',
	        'supe': '\u2287',
	        'szlig': '\u00DF',
	        'Tau': '\u03A4',
	        'tau': '\u03C4',
	        'there4': '\u2234',
	        'Theta': '\u0398',
	        'theta': '\u03B8',
	        'thetasym': '\u03D1',
	        'thinsp': '\u2009',
	        'THORN': '\u00DE',
	        'thorn': '\u00FE',
	        'tilde': '\u02DC',
	        'times': '\u00D7',
	        'trade': '\u2122',
	        'Uacute': '\u00DA',
	        'uacute': '\u00FA',
	        'uarr': '\u2191',
	        'uArr': '\u21D1',
	        'Ucirc': '\u00DB',
	        'ucirc': '\u00FB',
	        'Ugrave': '\u00D9',
	        'ugrave': '\u00F9',
	        'uml': '\u00A8',
	        'upsih': '\u03D2',
	        'Upsilon': '\u03A5',
	        'upsilon': '\u03C5',
	        'Uuml': '\u00DC',
	        'uuml': '\u00FC',
	        'weierp': '\u2118',
	        'Xi': '\u039E',
	        'xi': '\u03BE',
	        'Yacute': '\u00DD',
	        'yacute': '\u00FD',
	        'yen': '\u00A5',
	        'yuml': '\u00FF',
	        'Yuml': '\u0178',
	        'Zeta': '\u0396',
	        'zeta': '\u03B6',
	        'zwj': '\u200D',
	        'zwnj': '\u200C',
	    };

	    var HtmlTagDefinition = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function HtmlTagDefinition(_a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;
	            this.closedByChildren = {};
	            this.closedByParent = false;
	            this.canSelfClose = false;
	            if (closedByChildren && closedByChildren.length > 0) {
	                closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
	            }
	            this.isVoid = isVoid;
	            this.closedByParent = closedByParent || isVoid;
	            if (requiredParents && requiredParents.length > 0) {
	                this.requiredParents = {};
	                // The first parent is the list is automatically when none of the listed parents are present
	                this.parentToAdd = requiredParents[0];
	                requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });
	            }
	            this.implicitNamespacePrefix = implicitNamespacePrefix;
	            this.contentType = contentType;
	            this.ignoreFirstLf = ignoreFirstLf;
	        }
	        /**
	         * @param {?} currentParent
	         * @return {?}
	         */
	        HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
	            if (!this.requiredParents) {
	                return false;
	            }
	            if (!currentParent) {
	                return true;
	            }
	            var /** @type {?} */ lcParent = currentParent.toLowerCase();
	            return this.requiredParents[lcParent] != true && lcParent != 'template';
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        HtmlTagDefinition.prototype.isClosedByChild = function (name) {
	            return this.isVoid || name.toLowerCase() in this.closedByChildren;
	        };
	        return HtmlTagDefinition;
	    }());
	    // see http://www.w3.org/TR/html51/syntax.html#optional-tags
	    // This implementation does not fully conform to the HTML5 spec.
	    var /** @type {?} */ TAG_DEFINITIONS = {
	        'base': new HtmlTagDefinition({ isVoid: true }),
	        'meta': new HtmlTagDefinition({ isVoid: true }),
	        'area': new HtmlTagDefinition({ isVoid: true }),
	        'embed': new HtmlTagDefinition({ isVoid: true }),
	        'link': new HtmlTagDefinition({ isVoid: true }),
	        'img': new HtmlTagDefinition({ isVoid: true }),
	        'input': new HtmlTagDefinition({ isVoid: true }),
	        'param': new HtmlTagDefinition({ isVoid: true }),
	        'hr': new HtmlTagDefinition({ isVoid: true }),
	        'br': new HtmlTagDefinition({ isVoid: true }),
	        'source': new HtmlTagDefinition({ isVoid: true }),
	        'track': new HtmlTagDefinition({ isVoid: true }),
	        'wbr': new HtmlTagDefinition({ isVoid: true }),
	        'p': new HtmlTagDefinition({
	            closedByChildren: [
	                'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',
	                'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',
	                'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'
	            ],
	            closedByParent: true
	        }),
	        'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
	        'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
	        'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
	        'tr': new HtmlTagDefinition({
	            closedByChildren: ['tr'],
	            requiredParents: ['tbody', 'tfoot', 'thead'],
	            closedByParent: true
	        }),
	        'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	        'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	        'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
	        'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
	        'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
	        'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
	        'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
	        'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
	        'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	        'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	        'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
	        'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	        'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
	        'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
	        'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
	        'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
	        'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	        'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	        'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
	        'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
	    };
	    var /** @type {?} */ _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
	    /**
	     * @param {?} tagName
	     * @return {?}
	     */
	    function getHtmlTagDefinition(tagName) {
	        return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
	    }

	    var /** @type {?} */ _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' +
	        '([-\\w]+)|' +
	        '(?:\\.([-\\w]+))|' +
	        // "-" should appear first in the regexp below as FF31 parses "[.-\w]" as a range
	        '(?:\\[([-.\\w*]+)(?:=([^\\]]*))?\\])|' +
	        '(\\))|' +
	        '(\\s*,\\s*)', // ","
	    'g');
	    /**
	     * A css selector contains an element name,
	     * css classes and attribute/value pairs with the purpose
	     * of selecting subsets out of them.
	     */
	    var CssSelector = (function () {
	        function CssSelector() {
	            this.element = null;
	            this.classNames = [];
	            this.attrs = [];
	            this.notSelectors = [];
	        }
	        /**
	         * @param {?} selector
	         * @return {?}
	         */
	        CssSelector.parse = function (selector) {
	            var /** @type {?} */ results = [];
	            var /** @type {?} */ _addResult = function (res, cssSel) {
	                if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&
	                    cssSel.attrs.length == 0) {
	                    cssSel.element = '*';
	                }
	                res.push(cssSel);
	            };
	            var /** @type {?} */ cssSelector = new CssSelector();
	            var /** @type {?} */ match;
	            var /** @type {?} */ current = cssSelector;
	            var /** @type {?} */ inNot = false;
	            _SELECTOR_REGEXP.lastIndex = 0;
	            while (match = _SELECTOR_REGEXP.exec(selector)) {
	                if (match[1]) {
	                    if (inNot) {
	                        throw new Error('Nesting :not is not allowed in a selector');
	                    }
	                    inNot = true;
	                    current = new CssSelector();
	                    cssSelector.notSelectors.push(current);
	                }
	                if (match[2]) {
	                    current.setElement(match[2]);
	                }
	                if (match[3]) {
	                    current.addClassName(match[3]);
	                }
	                if (match[4]) {
	                    current.addAttribute(match[4], match[5]);
	                }
	                if (match[6]) {
	                    inNot = false;
	                    current = cssSelector;
	                }
	                if (match[7]) {
	                    if (inNot) {
	                        throw new Error('Multiple selectors in :not are not supported');
	                    }
	                    _addResult(results, cssSelector);
	                    cssSelector = current = new CssSelector();
	                }
	            }
	            _addResult(results, cssSelector);
	            return results;
	        };
	        /**
	         * @return {?}
	         */
	        CssSelector.prototype.isElementSelector = function () {
	            return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&
	                this.notSelectors.length === 0;
	        };
	        /**
	         * @return {?}
	         */
	        CssSelector.prototype.hasElementSelector = function () { return !!this.element; };
	        /**
	         * @param {?=} element
	         * @return {?}
	         */
	        CssSelector.prototype.setElement = function (element) {
	            if (element === void 0) { element = null; }
	            this.element = element;
	        };
	        /**
	         * Gets a template string for an element that matches the selector.
	         * @return {?}
	         */
	        CssSelector.prototype.getMatchingElementTemplate = function () {
	            var /** @type {?} */ tagName = this.element || 'div';
	            var /** @type {?} */ classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
	            var /** @type {?} */ attrs = '';
	            for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {
	                var /** @type {?} */ attrName = this.attrs[i];
	                var /** @type {?} */ attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
	                attrs += " " + attrName + attrValue;
	            }
	            return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" :
	                "<" + tagName + classAttr + attrs + "></" + tagName + ">";
	        };
	        /**
	         * @param {?} name
	         * @param {?=} value
	         * @return {?}
	         */
	        CssSelector.prototype.addAttribute = function (name, value) {
	            if (value === void 0) { value = ''; }
	            this.attrs.push(name, value && value.toLowerCase() || '');
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
	        /**
	         * @return {?}
	         */
	        CssSelector.prototype.toString = function () {
	            var /** @type {?} */ res = this.element || '';
	            if (this.classNames) {
	                this.classNames.forEach(function (klass) { return res += "." + klass; });
	            }
	            if (this.attrs) {
	                for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {
	                    var /** @type {?} */ name_1 = this.attrs[i];
	                    var /** @type {?} */ value = this.attrs[i + 1];
	                    res += "[" + name_1 + (value ? '=' + value : '') + "]";
	                }
	            }
	            this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
	            return res;
	        };
	        return CssSelector;
	    }());
	    /**
	     * Reads a list of CssSelectors and allows to calculate which ones
	     * are contained in a given CssSelector.
	     */
	    var SelectorMatcher = (function () {
	        function SelectorMatcher() {
	            this._elementMap = new Map();
	            this._elementPartialMap = new Map();
	            this._classMap = new Map();
	            this._classPartialMap = new Map();
	            this._attrValueMap = new Map();
	            this._attrValuePartialMap = new Map();
	            this._listContexts = [];
	        }
	        /**
	         * @param {?} notSelectors
	         * @return {?}
	         */
	        SelectorMatcher.createNotMatcher = function (notSelectors) {
	            var /** @type {?} */ notMatcher = new SelectorMatcher();
	            notMatcher.addSelectables(notSelectors, null);
	            return notMatcher;
	        };
	        /**
	         * @param {?} cssSelectors
	         * @param {?=} callbackCtxt
	         * @return {?}
	         */
	        SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	            var /** @type {?} */ listContext = null;
	            if (cssSelectors.length > 1) {
	                listContext = new SelectorListContext(cssSelectors);
	                this._listContexts.push(listContext);
	            }
	            for (var /** @type {?} */ i = 0; i < cssSelectors.length; i++) {
	                this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	            }
	        };
	        /**
	         * Add an object that can be found later on by calling `match`.
	         * @param {?} cssSelector A css selector
	         * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function
	         * @param {?} listContext
	         * @return {?}
	         */
	        SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	            var /** @type {?} */ matcher = this;
	            var /** @type {?} */ element = cssSelector.element;
	            var /** @type {?} */ classNames = cssSelector.classNames;
	            var /** @type {?} */ attrs = cssSelector.attrs;
	            var /** @type {?} */ selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	            if (element) {
	                var /** @type {?} */ isTerminal = attrs.length === 0 && classNames.length === 0;
	                if (isTerminal) {
	                    this._addTerminal(matcher._elementMap, element, selectable);
	                }
	                else {
	                    matcher = this._addPartial(matcher._elementPartialMap, element);
	                }
	            }
	            if (classNames) {
	                for (var /** @type {?} */ i = 0; i < classNames.length; i++) {
	                    var /** @type {?} */ isTerminal = attrs.length === 0 && i === classNames.length - 1;
	                    var /** @type {?} */ className = classNames[i];
	                    if (isTerminal) {
	                        this._addTerminal(matcher._classMap, className, selectable);
	                    }
	                    else {
	                        matcher = this._addPartial(matcher._classPartialMap, className);
	                    }
	                }
	            }
	            if (attrs) {
	                for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                    var /** @type {?} */ isTerminal = i === attrs.length - 2;
	                    var /** @type {?} */ name_2 = attrs[i];
	                    var /** @type {?} */ value = attrs[i + 1];
	                    if (isTerminal) {
	                        var /** @type {?} */ terminalMap = matcher._attrValueMap;
	                        var /** @type {?} */ terminalValuesMap = terminalMap.get(name_2);
	                        if (!terminalValuesMap) {
	                            terminalValuesMap = new Map();
	                            terminalMap.set(name_2, terminalValuesMap);
	                        }
	                        this._addTerminal(terminalValuesMap, value, selectable);
	                    }
	                    else {
	                        var /** @type {?} */ partialMap = matcher._attrValuePartialMap;
	                        var /** @type {?} */ partialValuesMap = partialMap.get(name_2);
	                        if (!partialValuesMap) {
	                            partialValuesMap = new Map();
	                            partialMap.set(name_2, partialValuesMap);
	                        }
	                        matcher = this._addPartial(partialValuesMap, value);
	                    }
	                }
	            }
	        };
	        /**
	         * @param {?} map
	         * @param {?} name
	         * @param {?} selectable
	         * @return {?}
	         */
	        SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	            var /** @type {?} */ terminalList = map.get(name);
	            if (!terminalList) {
	                terminalList = [];
	                map.set(name, terminalList);
	            }
	            terminalList.push(selectable);
	        };
	        /**
	         * @param {?} map
	         * @param {?} name
	         * @return {?}
	         */
	        SelectorMatcher.prototype._addPartial = function (map, name) {
	            var /** @type {?} */ matcher = map.get(name);
	            if (!matcher) {
	                matcher = new SelectorMatcher();
	                map.set(name, matcher);
	            }
	            return matcher;
	        };
	        /**
	         * Find the objects that have been added via `addSelectable`
	         * whose css selector is contained in the given css selector.
	         * @param {?} cssSelector A css selector
	         * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`
	         * @return {?} boolean true if a match was found
	         */
	        SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	            var /** @type {?} */ result = false;
	            var /** @type {?} */ element = cssSelector.element;
	            var /** @type {?} */ classNames = cssSelector.classNames;
	            var /** @type {?} */ attrs = cssSelector.attrs;
	            for (var /** @type {?} */ i = 0; i < this._listContexts.length; i++) {
	                this._listContexts[i].alreadyMatched = false;
	            }
	            result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	            result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	                result;
	            if (classNames) {
	                for (var /** @type {?} */ i = 0; i < classNames.length; i++) {
	                    var /** @type {?} */ className = classNames[i];
	                    result =
	                        this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                    result =
	                        this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                            result;
	                }
	            }
	            if (attrs) {
	                for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                    var /** @type {?} */ name_3 = attrs[i];
	                    var /** @type {?} */ value = attrs[i + 1];
	                    var /** @type {?} */ terminalValuesMap = this._attrValueMap.get(name_3);
	                    if (value) {
	                        result =
	                            this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
	                    }
	                    result =
	                        this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
	                    var /** @type {?} */ partialValuesMap = this._attrValuePartialMap.get(name_3);
	                    if (value) {
	                        result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
	                    }
	                    result =
	                        this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
	                }
	            }
	            return result;
	        };
	        /**
	         * \@internal
	         * @param {?} map
	         * @param {?} name
	         * @param {?} cssSelector
	         * @param {?} matchedCallback
	         * @return {?}
	         */
	        SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	            if (!map || typeof name !== 'string') {
	                return false;
	            }
	            var /** @type {?} */ selectables = map.get(name) || [];
	            var /** @type {?} */ starSelectables = map.get('*');
	            if (starSelectables) {
	                selectables = selectables.concat(starSelectables);
	            }
	            if (selectables.length === 0) {
	                return false;
	            }
	            var /** @type {?} */ selectable;
	            var /** @type {?} */ result = false;
	            for (var /** @type {?} */ i = 0; i < selectables.length; i++) {
	                selectable = selectables[i];
	                result = selectable.finalize(cssSelector, matchedCallback) || result;
	            }
	            return result;
	        };
	        /**
	         * \@internal
	         * @param {?} map
	         * @param {?} name
	         * @param {?} cssSelector
	         * @param {?} matchedCallback
	         * @return {?}
	         */
	        SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
	            if (!map || typeof name !== 'string') {
	                return false;
	            }
	            var /** @type {?} */ nestedSelector = map.get(name);
	            if (!nestedSelector) {
	                return false;
	            }
	            // TODO(perf): get rid of recursion and measure again
	            // TODO(perf): don't pass the whole selector into the recursion,
	            // but only the not processed parts
	            return nestedSelector.match(cssSelector, matchedCallback);
	        };
	        return SelectorMatcher;
	    }());
	    var SelectorListContext = (function () {
	        /**
	         * @param {?} selectors
	         */
	        function SelectorListContext(selectors) {
	            this.selectors = selectors;
	            this.alreadyMatched = false;
	        }
	        return SelectorListContext;
	    }());
	    var SelectorContext = (function () {
	        /**
	         * @param {?} selector
	         * @param {?} cbContext
	         * @param {?} listContext
	         */
	        function SelectorContext(selector, cbContext, listContext) {
	            this.selector = selector;
	            this.cbContext = cbContext;
	            this.listContext = listContext;
	            this.notSelectors = selector.notSelectors;
	        }
	        /**
	         * @param {?} cssSelector
	         * @param {?} callback
	         * @return {?}
	         */
	        SelectorContext.prototype.finalize = function (cssSelector, callback) {
	            var /** @type {?} */ result = true;
	            if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
	                var /** @type {?} */ notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	                result = !notMatcher.match(cssSelector, null);
	            }
	            if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
	                if (this.listContext) {
	                    this.listContext.alreadyMatched = true;
	                }
	                callback(this.selector, this.cbContext);
	            }
	            return result;
	        };
	        return SelectorContext;
	    }());

	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@stable
	     */
	    var BaseError = (function (_super) {
	        __extends$3(BaseError, _super);
	        /**
	         * @param {?} message
	         */
	        function BaseError(message) {
	            _super.call(this, message);
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            // TODO(bradfordcsmith): Remove this hack when
	            //     google/closure-compiler/issues/2102 is fixed.
	            var nativeError = new Error(message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.message; },
	            /**
	             * @param {?} message
	             * @return {?}
	             */
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () { return ((this._nativeError)).stack; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) { ((this._nativeError)).stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * \@stable
	     */
	    var WrappedError = (function (_super) {
	        __extends$3(WrappedError, _super);
	        /**
	         * @param {?} message
	         * @param {?} error
	         */
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ MODULE_SUFFIX = '';
	    var /** @type {?} */ DASH_CASE_REGEXP = /-+([a-z0-9])/g;
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function dashCaseToCamelCase(input) {
	        return input.replace(DASH_CASE_REGEXP, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i - 0] = arguments[_i];
	            }
	            return m[1].toUpperCase();
	        });
	    }
	    /**
	     * @param {?} input
	     * @param {?} defaultValues
	     * @return {?}
	     */
	    function splitAtColon(input, defaultValues) {
	        return _splitAt(input, ':', defaultValues);
	    }
	    /**
	     * @param {?} input
	     * @param {?} defaultValues
	     * @return {?}
	     */
	    function splitAtPeriod(input, defaultValues) {
	        return _splitAt(input, '.', defaultValues);
	    }
	    /**
	     * @param {?} input
	     * @param {?} character
	     * @param {?} defaultValues
	     * @return {?}
	     */
	    function _splitAt(input, character, defaultValues) {
	        var /** @type {?} */ characterIndex = input.indexOf(character);
	        if (characterIndex == -1)
	            return defaultValues;
	        return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
	    }
	    /**
	     * @param {?} value
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    function visitValue(value, visitor, context) {
	        if (Array.isArray(value)) {
	            return visitor.visitArray(/** @type {?} */ (value), context);
	        }
	        if (isStrictStringMap(value)) {
	            return visitor.visitStringMap(/** @type {?} */ (value), context);
	        }
	        if (value == null || isPrimitive(value)) {
	            return visitor.visitPrimitive(value, context);
	        }
	        return visitor.visitOther(value, context);
	    }
	    var ValueTransformer = (function () {
	        function ValueTransformer() {
	        }
	        /**
	         * @param {?} arr
	         * @param {?} context
	         * @return {?}
	         */
	        ValueTransformer.prototype.visitArray = function (arr, context) {
	            var _this = this;
	            return arr.map(function (value) { return visitValue(value, _this, context); });
	        };
	        /**
	         * @param {?} map
	         * @param {?} context
	         * @return {?}
	         */
	        ValueTransformer.prototype.visitStringMap = function (map, context) {
	            var _this = this;
	            var /** @type {?} */ result = {};
	            Object.keys(map).forEach(function (key) { result[key] = visitValue(map[key], _this, context); });
	            return result;
	        };
	        /**
	         * @param {?} value
	         * @param {?} context
	         * @return {?}
	         */
	        ValueTransformer.prototype.visitPrimitive = function (value, context) { return value; };
	        /**
	         * @param {?} value
	         * @param {?} context
	         * @return {?}
	         */
	        ValueTransformer.prototype.visitOther = function (value, context) { return value; };
	        return ValueTransformer;
	    }());
	    var SyncAsyncResult = (function () {
	        /**
	         * @param {?} syncResult
	         * @param {?=} asyncResult
	         */
	        function SyncAsyncResult(syncResult, asyncResult) {
	            if (asyncResult === void 0) { asyncResult = null; }
	            this.syncResult = syncResult;
	            this.asyncResult = asyncResult;
	            if (!asyncResult) {
	                this.asyncResult = Promise.resolve(syncResult);
	            }
	        }
	        return SyncAsyncResult;
	    }());
	    var SyntaxError = (function (_super) {
	        __extends$2(SyntaxError, _super);
	        function SyntaxError() {
	            _super.apply(this, arguments);
	        }
	        return SyntaxError;
	    }(BaseError));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    // group 0: "[prop] or (event) or @trigger"
	    // group 1: "prop" from "[prop]"
	    // group 2: "event" from "(event)"
	    // group 3: "@trigger" from "@trigger"
	    var /** @type {?} */ HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
	    var CompileAnimationEntryMetadata = (function () {
	        /**
	         * @param {?=} name
	         * @param {?=} definitions
	         */
	        function CompileAnimationEntryMetadata(name, definitions) {
	            if (name === void 0) { name = null; }
	            if (definitions === void 0) { definitions = null; }
	            this.name = name;
	            this.definitions = definitions;
	        }
	        return CompileAnimationEntryMetadata;
	    }());
	    /**
	     * @abstract
	     */
	    var CompileAnimationStateMetadata = (function () {
	        function CompileAnimationStateMetadata() {
	        }
	        return CompileAnimationStateMetadata;
	    }());
	    var CompileAnimationStateDeclarationMetadata = (function (_super) {
	        __extends$1(CompileAnimationStateDeclarationMetadata, _super);
	        /**
	         * @param {?} stateNameExpr
	         * @param {?} styles
	         */
	        function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
	            _super.call(this);
	            this.stateNameExpr = stateNameExpr;
	            this.styles = styles;
	        }
	        return CompileAnimationStateDeclarationMetadata;
	    }(CompileAnimationStateMetadata));
	    var CompileAnimationStateTransitionMetadata = (function (_super) {
	        __extends$1(CompileAnimationStateTransitionMetadata, _super);
	        /**
	         * @param {?} stateChangeExpr
	         * @param {?} steps
	         */
	        function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
	            _super.call(this);
	            this.stateChangeExpr = stateChangeExpr;
	            this.steps = steps;
	        }
	        return CompileAnimationStateTransitionMetadata;
	    }(CompileAnimationStateMetadata));
	    /**
	     * @abstract
	     */
	    var CompileAnimationMetadata = (function () {
	        function CompileAnimationMetadata() {
	        }
	        return CompileAnimationMetadata;
	    }());
	    var CompileAnimationKeyframesSequenceMetadata = (function (_super) {
	        __extends$1(CompileAnimationKeyframesSequenceMetadata, _super);
	        /**
	         * @param {?=} steps
	         */
	        function CompileAnimationKeyframesSequenceMetadata(steps) {
	            if (steps === void 0) { steps = []; }
	            _super.call(this);
	            this.steps = steps;
	        }
	        return CompileAnimationKeyframesSequenceMetadata;
	    }(CompileAnimationMetadata));
	    var CompileAnimationStyleMetadata = (function (_super) {
	        __extends$1(CompileAnimationStyleMetadata, _super);
	        /**
	         * @param {?} offset
	         * @param {?=} styles
	         */
	        function CompileAnimationStyleMetadata(offset, styles) {
	            if (styles === void 0) { styles = null; }
	            _super.call(this);
	            this.offset = offset;
	            this.styles = styles;
	        }
	        return CompileAnimationStyleMetadata;
	    }(CompileAnimationMetadata));
	    var CompileAnimationAnimateMetadata = (function (_super) {
	        __extends$1(CompileAnimationAnimateMetadata, _super);
	        /**
	         * @param {?=} timings
	         * @param {?=} styles
	         */
	        function CompileAnimationAnimateMetadata(timings, styles) {
	            if (timings === void 0) { timings = 0; }
	            if (styles === void 0) { styles = null; }
	            _super.call(this);
	            this.timings = timings;
	            this.styles = styles;
	        }
	        return CompileAnimationAnimateMetadata;
	    }(CompileAnimationMetadata));
	    /**
	     * @abstract
	     */
	    var CompileAnimationWithStepsMetadata = (function (_super) {
	        __extends$1(CompileAnimationWithStepsMetadata, _super);
	        /**
	         * @param {?=} steps
	         */
	        function CompileAnimationWithStepsMetadata(steps) {
	            if (steps === void 0) { steps = null; }
	            _super.call(this);
	            this.steps = steps;
	        }
	        return CompileAnimationWithStepsMetadata;
	    }(CompileAnimationMetadata));
	    var CompileAnimationSequenceMetadata = (function (_super) {
	        __extends$1(CompileAnimationSequenceMetadata, _super);
	        /**
	         * @param {?=} steps
	         */
	        function CompileAnimationSequenceMetadata(steps) {
	            if (steps === void 0) { steps = null; }
	            _super.call(this, steps);
	        }
	        return CompileAnimationSequenceMetadata;
	    }(CompileAnimationWithStepsMetadata));
	    var CompileAnimationGroupMetadata = (function (_super) {
	        __extends$1(CompileAnimationGroupMetadata, _super);
	        /**
	         * @param {?=} steps
	         */
	        function CompileAnimationGroupMetadata(steps) {
	            if (steps === void 0) { steps = null; }
	            _super.call(this, steps);
	        }
	        return CompileAnimationGroupMetadata;
	    }(CompileAnimationWithStepsMetadata));
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    function _sanitizeIdentifier(name) {
	        return name.replace(/\W/g, '_');
	    }
	    var /** @type {?} */ _anonymousTypeIndex = 0;
	    /**
	     * @param {?} compileIdentifier
	     * @return {?}
	     */
	    function identifierName(compileIdentifier) {
	        if (!compileIdentifier || !compileIdentifier.reference) {
	            return null;
	        }
	        var /** @type {?} */ ref = compileIdentifier.reference;
	        if (ref instanceof StaticSymbol) {
	            return ref.name;
	        }
	        if (ref['__anonymousType']) {
	            return ref['__anonymousType'];
	        }
	        var /** @type {?} */ identifier = stringify(ref);
	        if (identifier.indexOf('(') >= 0) {
	            // case: anonymous functions!
	            identifier = "anonymous_" + _anonymousTypeIndex++;
	            ref['__anonymousType'] = identifier;
	        }
	        else {
	            identifier = _sanitizeIdentifier(identifier);
	        }
	        return identifier;
	    }
	    /**
	     * @param {?} compileIdentifier
	     * @return {?}
	     */
	    function identifierModuleUrl(compileIdentifier) {
	        var /** @type {?} */ ref = compileIdentifier.reference;
	        if (ref instanceof StaticSymbol) {
	            return ref.filePath;
	        }
	        return reflector.importUri(ref);
	    }
	    var CompileSummaryKind = {};
	    CompileSummaryKind.Pipe = 0;
	    CompileSummaryKind.Directive = 1;
	    CompileSummaryKind.NgModule = 2;
	    CompileSummaryKind.Injectable = 3;
	    CompileSummaryKind[CompileSummaryKind.Pipe] = "Pipe";
	    CompileSummaryKind[CompileSummaryKind.Directive] = "Directive";
	    CompileSummaryKind[CompileSummaryKind.NgModule] = "NgModule";
	    CompileSummaryKind[CompileSummaryKind.Injectable] = "Injectable";
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function tokenName(token) {
	        return isPresent(token.value) ? _sanitizeIdentifier(token.value) :
	            identifierName(token.identifier);
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function tokenReference(token) {
	        if (isPresent(token.identifier)) {
	            return token.identifier.reference;
	        }
	        else {
	            return token.value;
	        }
	    }
	    /**
	     * Metadata about a stylesheet
	     */
	    var CompileStylesheetMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompileStylesheetMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;
	            this.moduleUrl = moduleUrl;
	            this.styles = _normalizeArray(styles);
	            this.styleUrls = _normalizeArray(styleUrls);
	        }
	        return CompileStylesheetMetadata;
	    }());
	    /**
	     * Metadata regarding compilation of a template.
	     */
	    var CompileTemplateMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompileTemplateMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, externalStylesheets = _b.externalStylesheets, animations = _b.animations, ngContentSelectors = _b.ngContentSelectors, interpolation = _b.interpolation;
	            this.encapsulation = encapsulation;
	            this.template = template;
	            this.templateUrl = templateUrl;
	            this.styles = _normalizeArray(styles);
	            this.styleUrls = _normalizeArray(styleUrls);
	            this.externalStylesheets = _normalizeArray(externalStylesheets);
	            this.animations = animations ? ListWrapper.flatten(animations) : [];
	            this.ngContentSelectors = ngContentSelectors || [];
	            if (interpolation && interpolation.length != 2) {
	                throw new Error("'interpolation' should have a start and an end symbol.");
	            }
	            this.interpolation = interpolation;
	        }
	        /**
	         * @return {?}
	         */
	        CompileTemplateMetadata.prototype.toSummary = function () {
	            return {
	                animations: this.animations.map(function (anim) { return anim.name; }),
	                ngContentSelectors: this.ngContentSelectors,
	                encapsulation: this.encapsulation
	            };
	        };
	        return CompileTemplateMetadata;
	    }());
	    /**
	     * Metadata regarding compilation of a directive.
	     */
	    var CompileDirectiveMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompileDirectiveMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
	            this.isHost = !!isHost;
	            this.type = type;
	            this.isComponent = isComponent;
	            this.selector = selector;
	            this.exportAs = exportAs;
	            this.changeDetection = changeDetection;
	            this.inputs = inputs;
	            this.outputs = outputs;
	            this.hostListeners = hostListeners;
	            this.hostProperties = hostProperties;
	            this.hostAttributes = hostAttributes;
	            this.providers = _normalizeArray(providers);
	            this.viewProviders = _normalizeArray(viewProviders);
	            this.queries = _normalizeArray(queries);
	            this.viewQueries = _normalizeArray(viewQueries);
	            this.entryComponents = _normalizeArray(entryComponents);
	            this.template = template;
	        }
	        /**
	         * @param {?=} __0
	         * @return {?}
	         */
	        CompileDirectiveMetadata.create = function (_a) {
	            var _b = _a === void 0 ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
	            var /** @type {?} */ hostListeners = {};
	            var /** @type {?} */ hostProperties = {};
	            var /** @type {?} */ hostAttributes = {};
	            if (isPresent(host)) {
	                Object.keys(host).forEach(function (key) {
	                    var /** @type {?} */ value = host[key];
	                    var /** @type {?} */ matches = key.match(HOST_REG_EXP);
	                    if (matches === null) {
	                        hostAttributes[key] = value;
	                    }
	                    else if (isPresent(matches[1])) {
	                        hostProperties[matches[1]] = value;
	                    }
	                    else if (isPresent(matches[2])) {
	                        hostListeners[matches[2]] = value;
	                    }
	                });
	            }
	            var /** @type {?} */ inputsMap = {};
	            if (isPresent(inputs)) {
	                inputs.forEach(function (bindConfig) {
	                    // canonical syntax: `dirProp: elProp`
	                    // if there is no `:`, use dirProp = elProp
	                    var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                    inputsMap[parts[0]] = parts[1];
	                });
	            }
	            var /** @type {?} */ outputsMap = {};
	            if (isPresent(outputs)) {
	                outputs.forEach(function (bindConfig) {
	                    // canonical syntax: `dirProp: elProp`
	                    // if there is no `:`, use dirProp = elProp
	                    var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                    outputsMap[parts[0]] = parts[1];
	                });
	            }
	            return new CompileDirectiveMetadata({
	                isHost: isHost,
	                type: type,
	                isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection,
	                inputs: inputsMap,
	                outputs: outputsMap,
	                hostListeners: hostListeners,
	                hostProperties: hostProperties,
	                hostAttributes: hostAttributes,
	                providers: providers,
	                viewProviders: viewProviders,
	                queries: queries,
	                viewQueries: viewQueries,
	                entryComponents: entryComponents,
	                template: template,
	            });
	        };
	        /**
	         * @return {?}
	         */
	        CompileDirectiveMetadata.prototype.toSummary = function () {
	            return {
	                summaryKind: CompileSummaryKind.Directive,
	                type: this.type,
	                isComponent: this.isComponent,
	                selector: this.selector,
	                exportAs: this.exportAs,
	                inputs: this.inputs,
	                outputs: this.outputs,
	                hostListeners: this.hostListeners,
	                hostProperties: this.hostProperties,
	                hostAttributes: this.hostAttributes,
	                providers: this.providers,
	                viewProviders: this.viewProviders,
	                queries: this.queries,
	                entryComponents: this.entryComponents,
	                changeDetection: this.changeDetection,
	                template: this.template && this.template.toSummary()
	            };
	        };
	        return CompileDirectiveMetadata;
	    }());
	    /**
	     * Construct {\@link CompileDirectiveMetadata} from {\@link ComponentTypeMetadata} and a selector.
	     * @param {?} typeReference
	     * @param {?} compMeta
	     * @return {?}
	     */
	    function createHostComponentMeta(typeReference, compMeta) {
	        var /** @type {?} */ template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
	        return CompileDirectiveMetadata.create({
	            isHost: true,
	            type: { reference: typeReference, diDeps: [], lifecycleHooks: [] },
	            template: new CompileTemplateMetadata({
	                encapsulation: _angular_core.ViewEncapsulation.None,
	                template: template,
	                templateUrl: '',
	                styles: [],
	                styleUrls: [],
	                ngContentSelectors: [],
	                animations: []
	            }),
	            changeDetection: _angular_core.ChangeDetectionStrategy.Default,
	            inputs: [],
	            outputs: [],
	            host: {},
	            isComponent: true,
	            selector: '*',
	            providers: [],
	            viewProviders: [],
	            queries: [],
	            viewQueries: []
	        });
	    }
	    var CompilePipeMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompilePipeMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;
	            this.type = type;
	            this.name = name;
	            this.pure = !!pure;
	        }
	        /**
	         * @return {?}
	         */
	        CompilePipeMetadata.prototype.toSummary = function () {
	            return {
	                summaryKind: CompileSummaryKind.Pipe,
	                type: this.type,
	                name: this.name,
	                pure: this.pure
	            };
	        };
	        return CompilePipeMetadata;
	    }());
	    /**
	     * Metadata regarding compilation of a module.
	     */
	    var CompileNgModuleMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompileNgModuleMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, type = _b.type, providers = _b.providers, declaredDirectives = _b.declaredDirectives, exportedDirectives = _b.exportedDirectives, declaredPipes = _b.declaredPipes, exportedPipes = _b.exportedPipes, entryComponents = _b.entryComponents, bootstrapComponents = _b.bootstrapComponents, importedModules = _b.importedModules, exportedModules = _b.exportedModules, schemas = _b.schemas, transitiveModule = _b.transitiveModule, id = _b.id;
	            this.type = type;
	            this.declaredDirectives = _normalizeArray(declaredDirectives);
	            this.exportedDirectives = _normalizeArray(exportedDirectives);
	            this.declaredPipes = _normalizeArray(declaredPipes);
	            this.exportedPipes = _normalizeArray(exportedPipes);
	            this.providers = _normalizeArray(providers);
	            this.entryComponents = _normalizeArray(entryComponents);
	            this.bootstrapComponents = _normalizeArray(bootstrapComponents);
	            this.importedModules = _normalizeArray(importedModules);
	            this.exportedModules = _normalizeArray(exportedModules);
	            this.schemas = _normalizeArray(schemas);
	            this.id = id;
	            this.transitiveModule = transitiveModule;
	        }
	        /**
	         * @return {?}
	         */
	        CompileNgModuleMetadata.prototype.toSummary = function () {
	            return {
	                summaryKind: CompileSummaryKind.NgModule,
	                type: this.type,
	                entryComponents: this.transitiveModule.entryComponents,
	                providers: this.transitiveModule.providers,
	                modules: this.transitiveModule.modules,
	                exportedDirectives: this.transitiveModule.exportedDirectives,
	                exportedPipes: this.transitiveModule.exportedPipes
	            };
	        };
	        return CompileNgModuleMetadata;
	    }());
	    var TransitiveCompileNgModuleMetadata = (function () {
	        function TransitiveCompileNgModuleMetadata() {
	            this.directivesSet = new Set();
	            this.directives = [];
	            this.exportedDirectivesSet = new Set();
	            this.exportedDirectives = [];
	            this.pipesSet = new Set();
	            this.pipes = [];
	            this.exportedPipesSet = new Set();
	            this.exportedPipes = [];
	            this.modulesSet = new Set();
	            this.modules = [];
	            this.entryComponentsSet = new Set();
	            this.entryComponents = [];
	            this.providers = [];
	        }
	        /**
	         * @param {?} provider
	         * @param {?} module
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addProvider = function (provider, module) {
	            this.providers.push({ provider: provider, module: module });
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addDirective = function (id) {
	            if (!this.directivesSet.has(id.reference)) {
	                this.directivesSet.add(id.reference);
	                this.directives.push(id);
	            }
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function (id) {
	            if (!this.exportedDirectivesSet.has(id.reference)) {
	                this.exportedDirectivesSet.add(id.reference);
	                this.exportedDirectives.push(id);
	            }
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addPipe = function (id) {
	            if (!this.pipesSet.has(id.reference)) {
	                this.pipesSet.add(id.reference);
	                this.pipes.push(id);
	            }
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function (id) {
	            if (!this.exportedPipesSet.has(id.reference)) {
	                this.exportedPipesSet.add(id.reference);
	                this.exportedPipes.push(id);
	            }
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addModule = function (id) {
	            if (!this.modulesSet.has(id.reference)) {
	                this.modulesSet.add(id.reference);
	                this.modules.push(id);
	            }
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function (id) {
	            if (!this.entryComponentsSet.has(id.reference)) {
	                this.entryComponentsSet.add(id.reference);
	                this.entryComponents.push(id);
	            }
	        };
	        return TransitiveCompileNgModuleMetadata;
	    }());
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function _normalizeArray(obj) {
	        return obj || [];
	    }
	    var ProviderMeta = (function () {
	        /**
	         * @param {?} token
	         * @param {?} __1
	         */
	        function ProviderMeta(token, _a) {
	            var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	            this.token = token;
	            this.useClass = useClass;
	            this.useValue = useValue;
	            this.useExisting = useExisting;
	            this.useFactory = useFactory;
	            this.dependencies = deps;
	            this.multi = !!multi;
	        }
	        return ProviderMeta;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ $EOF = 0;
	    var /** @type {?} */ $TAB = 9;
	    var /** @type {?} */ $LF = 10;
	    var /** @type {?} */ $VTAB = 11;
	    var /** @type {?} */ $FF = 12;
	    var /** @type {?} */ $CR = 13;
	    var /** @type {?} */ $SPACE = 32;
	    var /** @type {?} */ $BANG = 33;
	    var /** @type {?} */ $DQ = 34;
	    var /** @type {?} */ $HASH = 35;
	    var /** @type {?} */ $$ = 36;
	    var /** @type {?} */ $PERCENT = 37;
	    var /** @type {?} */ $AMPERSAND = 38;
	    var /** @type {?} */ $SQ = 39;
	    var /** @type {?} */ $LPAREN = 40;
	    var /** @type {?} */ $RPAREN = 41;
	    var /** @type {?} */ $STAR = 42;
	    var /** @type {?} */ $PLUS = 43;
	    var /** @type {?} */ $COMMA = 44;
	    var /** @type {?} */ $MINUS = 45;
	    var /** @type {?} */ $PERIOD = 46;
	    var /** @type {?} */ $SLASH = 47;
	    var /** @type {?} */ $COLON = 58;
	    var /** @type {?} */ $SEMICOLON = 59;
	    var /** @type {?} */ $LT = 60;
	    var /** @type {?} */ $EQ = 61;
	    var /** @type {?} */ $GT = 62;
	    var /** @type {?} */ $QUESTION = 63;
	    var /** @type {?} */ $0 = 48;
	    var /** @type {?} */ $9 = 57;
	    var /** @type {?} */ $A = 65;
	    var /** @type {?} */ $E = 69;
	    var /** @type {?} */ $F = 70;
	    var /** @type {?} */ $X = 88;
	    var /** @type {?} */ $Z = 90;
	    var /** @type {?} */ $LBRACKET = 91;
	    var /** @type {?} */ $BACKSLASH = 92;
	    var /** @type {?} */ $RBRACKET = 93;
	    var /** @type {?} */ $CARET = 94;
	    var /** @type {?} */ $_ = 95;
	    var /** @type {?} */ $a = 97;
	    var /** @type {?} */ $e = 101;
	    var /** @type {?} */ $f = 102;
	    var /** @type {?} */ $n = 110;
	    var /** @type {?} */ $r = 114;
	    var /** @type {?} */ $t = 116;
	    var /** @type {?} */ $u = 117;
	    var /** @type {?} */ $v = 118;
	    var /** @type {?} */ $x = 120;
	    var /** @type {?} */ $z = 122;
	    var /** @type {?} */ $LBRACE = 123;
	    var /** @type {?} */ $BAR = 124;
	    var /** @type {?} */ $RBRACE = 125;
	    var /** @type {?} */ $NBSP = 160;
	    var /** @type {?} */ $BT = 96;
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isWhitespace(code) {
	        return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isDigit(code) {
	        return $0 <= code && code <= $9;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isAsciiLetter(code) {
	        return code >= $a && code <= $z || code >= $A && code <= $Z;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isAsciiHexDigit(code) {
	        return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
	    }

	    /**
	     * A replacement for \@Injectable to be used in the compiler, so that
	     * we don't try to evaluate the metadata in the compiler during AoT.
	     * This decorator is enough to make the compiler work with the ReflectiveInjector though.
	     * @return {?}
	     */
	    function CompilerInjectable() {
	        return function (x) { return x; };
	    }

	    /**
	     * @param {?} identifier
	     * @param {?} value
	     * @return {?}
	     */
	    function assertArrayOfStrings(identifier, value) {
	        if (!_angular_core.isDevMode() || isBlank(value)) {
	            return;
	        }
	        if (!Array.isArray(value)) {
	            throw new Error("Expected '" + identifier + "' to be an array of strings.");
	        }
	        for (var /** @type {?} */ i = 0; i < value.length; i += 1) {
	            if (typeof value[i] !== 'string') {
	                throw new Error("Expected '" + identifier + "' to be an array of strings.");
	            }
	        }
	    }
	    var /** @type {?} */ INTERPOLATION_BLACKLIST_REGEXPS = [
	        /^\s*$/,
	        /[<>]/,
	        /^[{}]$/,
	        /&(#|[a-z])/i,
	        /^\/\//,
	    ];
	    /**
	     * @param {?} identifier
	     * @param {?} value
	     * @return {?}
	     */
	    function assertInterpolationSymbols(identifier, value) {
	        if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {
	            throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
	        }
	        else if (_angular_core.isDevMode() && !isBlank(value)) {
	            var /** @type {?} */ start_1 = (value[0]);
	            var /** @type {?} */ end_1 = (value[1]);
	            // black list checking
	            INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
	                if (regexp.test(start_1) || regexp.test(end_1)) {
	                    throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
	                }
	            });
	        }
	    }

	    var InterpolationConfig = (function () {
	        /**
	         * @param {?} start
	         * @param {?} end
	         */
	        function InterpolationConfig(start, end) {
	            this.start = start;
	            this.end = end;
	        }
	        /**
	         * @param {?} markers
	         * @return {?}
	         */
	        InterpolationConfig.fromArray = function (markers) {
	            if (!markers) {
	                return DEFAULT_INTERPOLATION_CONFIG;
	            }
	            assertInterpolationSymbols('interpolation', markers);
	            return new InterpolationConfig(markers[0], markers[1]);
	        };
	        ;
	        return InterpolationConfig;
	    }());
	    var /** @type {?} */ DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ParserError = (function () {
	        /**
	         * @param {?} message
	         * @param {?} input
	         * @param {?} errLocation
	         * @param {?=} ctxLocation
	         */
	        function ParserError(message, input, errLocation, ctxLocation) {
	            this.input = input;
	            this.errLocation = errLocation;
	            this.ctxLocation = ctxLocation;
	            this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
	        }
	        return ParserError;
	    }());
	    var ParseSpan = (function () {
	        /**
	         * @param {?} start
	         * @param {?} end
	         */
	        function ParseSpan(start, end) {
	            this.start = start;
	            this.end = end;
	        }
	        return ParseSpan;
	    }());
	    var AST = (function () {
	        /**
	         * @param {?} span
	         */
	        function AST(span) {
	            this.span = span;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        AST.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return null;
	        };
	        /**
	         * @return {?}
	         */
	        AST.prototype.toString = function () { return 'AST'; };
	        return AST;
	    }());
	    /**
	     * Represents a quoted expression of the form:
	     *
	     * quote = prefix `:` uninterpretedExpression
	     * prefix = identifier
	     * uninterpretedExpression = arbitrary string
	     *
	     * A quoted expression is meant to be pre-processed by an AST transformer that
	     * converts it into another AST that no longer contains quoted expressions.
	     * It is meant to allow third-party developers to extend Angular template
	     * expression language. The `uninterpretedExpression` part of the quote is
	     * therefore not interpreted by the Angular's own expression parser.
	     */
	    var Quote = (function (_super) {
	        __extends$4(Quote, _super);
	        /**
	         * @param {?} span
	         * @param {?} prefix
	         * @param {?} uninterpretedExpression
	         * @param {?} location
	         */
	        function Quote(span, prefix, uninterpretedExpression, location) {
	            _super.call(this, span);
	            this.prefix = prefix;
	            this.uninterpretedExpression = uninterpretedExpression;
	            this.location = location;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Quote.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitQuote(this, context);
	        };
	        /**
	         * @return {?}
	         */
	        Quote.prototype.toString = function () { return 'Quote'; };
	        return Quote;
	    }(AST));
	    var EmptyExpr = (function (_super) {
	        __extends$4(EmptyExpr, _super);
	        function EmptyExpr() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        EmptyExpr.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            // do nothing
	        };
	        return EmptyExpr;
	    }(AST));
	    var ImplicitReceiver = (function (_super) {
	        __extends$4(ImplicitReceiver, _super);
	        function ImplicitReceiver() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        ImplicitReceiver.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitImplicitReceiver(this, context);
	        };
	        return ImplicitReceiver;
	    }(AST));
	    /**
	     * Multiple expressions separated by a semicolon.
	     */
	    var Chain = (function (_super) {
	        __extends$4(Chain, _super);
	        /**
	         * @param {?} span
	         * @param {?} expressions
	         */
	        function Chain(span, expressions) {
	            _super.call(this, span);
	            this.expressions = expressions;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Chain.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitChain(this, context);
	        };
	        return Chain;
	    }(AST));
	    var Conditional = (function (_super) {
	        __extends$4(Conditional, _super);
	        /**
	         * @param {?} span
	         * @param {?} condition
	         * @param {?} trueExp
	         * @param {?} falseExp
	         */
	        function Conditional(span, condition, trueExp, falseExp) {
	            _super.call(this, span);
	            this.condition = condition;
	            this.trueExp = trueExp;
	            this.falseExp = falseExp;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Conditional.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitConditional(this, context);
	        };
	        return Conditional;
	    }(AST));
	    var PropertyRead = (function (_super) {
	        __extends$4(PropertyRead, _super);
	        /**
	         * @param {?} span
	         * @param {?} receiver
	         * @param {?} name
	         */
	        function PropertyRead(span, receiver, name) {
	            _super.call(this, span);
	            this.receiver = receiver;
	            this.name = name;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        PropertyRead.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitPropertyRead(this, context);
	        };
	        return PropertyRead;
	    }(AST));
	    var PropertyWrite = (function (_super) {
	        __extends$4(PropertyWrite, _super);
	        /**
	         * @param {?} span
	         * @param {?} receiver
	         * @param {?} name
	         * @param {?} value
	         */
	        function PropertyWrite(span, receiver, name, value) {
	            _super.call(this, span);
	            this.receiver = receiver;
	            this.name = name;
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        PropertyWrite.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitPropertyWrite(this, context);
	        };
	        return PropertyWrite;
	    }(AST));
	    var SafePropertyRead = (function (_super) {
	        __extends$4(SafePropertyRead, _super);
	        /**
	         * @param {?} span
	         * @param {?} receiver
	         * @param {?} name
	         */
	        function SafePropertyRead(span, receiver, name) {
	            _super.call(this, span);
	            this.receiver = receiver;
	            this.name = name;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        SafePropertyRead.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitSafePropertyRead(this, context);
	        };
	        return SafePropertyRead;
	    }(AST));
	    var KeyedRead = (function (_super) {
	        __extends$4(KeyedRead, _super);
	        /**
	         * @param {?} span
	         * @param {?} obj
	         * @param {?} key
	         */
	        function KeyedRead(span, obj, key) {
	            _super.call(this, span);
	            this.obj = obj;
	            this.key = key;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        KeyedRead.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitKeyedRead(this, context);
	        };
	        return KeyedRead;
	    }(AST));
	    var KeyedWrite = (function (_super) {
	        __extends$4(KeyedWrite, _super);
	        /**
	         * @param {?} span
	         * @param {?} obj
	         * @param {?} key
	         * @param {?} value
	         */
	        function KeyedWrite(span, obj, key, value) {
	            _super.call(this, span);
	            this.obj = obj;
	            this.key = key;
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        KeyedWrite.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitKeyedWrite(this, context);
	        };
	        return KeyedWrite;
	    }(AST));
	    var BindingPipe = (function (_super) {
	        __extends$4(BindingPipe, _super);
	        /**
	         * @param {?} span
	         * @param {?} exp
	         * @param {?} name
	         * @param {?} args
	         */
	        function BindingPipe(span, exp, name, args) {
	            _super.call(this, span);
	            this.exp = exp;
	            this.name = name;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        BindingPipe.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitPipe(this, context);
	        };
	        return BindingPipe;
	    }(AST));
	    var LiteralPrimitive = (function (_super) {
	        __extends$4(LiteralPrimitive, _super);
	        /**
	         * @param {?} span
	         * @param {?} value
	         */
	        function LiteralPrimitive(span, value) {
	            _super.call(this, span);
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        LiteralPrimitive.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitLiteralPrimitive(this, context);
	        };
	        return LiteralPrimitive;
	    }(AST));
	    var LiteralArray = (function (_super) {
	        __extends$4(LiteralArray, _super);
	        /**
	         * @param {?} span
	         * @param {?} expressions
	         */
	        function LiteralArray(span, expressions) {
	            _super.call(this, span);
	            this.expressions = expressions;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        LiteralArray.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitLiteralArray(this, context);
	        };
	        return LiteralArray;
	    }(AST));
	    var LiteralMap = (function (_super) {
	        __extends$4(LiteralMap, _super);
	        /**
	         * @param {?} span
	         * @param {?} keys
	         * @param {?} values
	         */
	        function LiteralMap(span, keys, values) {
	            _super.call(this, span);
	            this.keys = keys;
	            this.values = values;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        LiteralMap.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitLiteralMap(this, context);
	        };
	        return LiteralMap;
	    }(AST));
	    var Interpolation = (function (_super) {
	        __extends$4(Interpolation, _super);
	        /**
	         * @param {?} span
	         * @param {?} strings
	         * @param {?} expressions
	         */
	        function Interpolation(span, strings, expressions) {
	            _super.call(this, span);
	            this.strings = strings;
	            this.expressions = expressions;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Interpolation.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitInterpolation(this, context);
	        };
	        return Interpolation;
	    }(AST));
	    var Binary = (function (_super) {
	        __extends$4(Binary, _super);
	        /**
	         * @param {?} span
	         * @param {?} operation
	         * @param {?} left
	         * @param {?} right
	         */
	        function Binary(span, operation, left, right) {
	            _super.call(this, span);
	            this.operation = operation;
	            this.left = left;
	            this.right = right;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Binary.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitBinary(this, context);
	        };
	        return Binary;
	    }(AST));
	    var PrefixNot = (function (_super) {
	        __extends$4(PrefixNot, _super);
	        /**
	         * @param {?} span
	         * @param {?} expression
	         */
	        function PrefixNot(span, expression) {
	            _super.call(this, span);
	            this.expression = expression;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        PrefixNot.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitPrefixNot(this, context);
	        };
	        return PrefixNot;
	    }(AST));
	    var MethodCall = (function (_super) {
	        __extends$4(MethodCall, _super);
	        /**
	         * @param {?} span
	         * @param {?} receiver
	         * @param {?} name
	         * @param {?} args
	         */
	        function MethodCall(span, receiver, name, args) {
	            _super.call(this, span);
	            this.receiver = receiver;
	            this.name = name;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        MethodCall.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitMethodCall(this, context);
	        };
	        return MethodCall;
	    }(AST));
	    var SafeMethodCall = (function (_super) {
	        __extends$4(SafeMethodCall, _super);
	        /**
	         * @param {?} span
	         * @param {?} receiver
	         * @param {?} name
	         * @param {?} args
	         */
	        function SafeMethodCall(span, receiver, name, args) {
	            _super.call(this, span);
	            this.receiver = receiver;
	            this.name = name;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        SafeMethodCall.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitSafeMethodCall(this, context);
	        };
	        return SafeMethodCall;
	    }(AST));
	    var FunctionCall = (function (_super) {
	        __extends$4(FunctionCall, _super);
	        /**
	         * @param {?} span
	         * @param {?} target
	         * @param {?} args
	         */
	        function FunctionCall(span, target, args) {
	            _super.call(this, span);
	            this.target = target;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        FunctionCall.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitFunctionCall(this, context);
	        };
	        return FunctionCall;
	    }(AST));
	    var ASTWithSource = (function (_super) {
	        __extends$4(ASTWithSource, _super);
	        /**
	         * @param {?} ast
	         * @param {?} source
	         * @param {?} location
	         * @param {?} errors
	         */
	        function ASTWithSource(ast, source, location, errors) {
	            _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));
	            this.ast = ast;
	            this.source = source;
	            this.location = location;
	            this.errors = errors;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        ASTWithSource.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return this.ast.visit(visitor, context);
	        };
	        /**
	         * @return {?}
	         */
	        ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	        return ASTWithSource;
	    }(AST));
	    var TemplateBinding = (function () {
	        /**
	         * @param {?} span
	         * @param {?} key
	         * @param {?} keyIsVar
	         * @param {?} name
	         * @param {?} expression
	         */
	        function TemplateBinding(span, key, keyIsVar, name, expression) {
	            this.span = span;
	            this.key = key;
	            this.keyIsVar = keyIsVar;
	            this.name = name;
	            this.expression = expression;
	        }
	        return TemplateBinding;
	    }());
	    var RecursiveAstVisitor = (function () {
	        function RecursiveAstVisitor() {
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
	            ast.left.visit(this);
	            ast.right.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitChain = function (ast, context) { return this.visitAll(ast.expressions, context); };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
	            ast.condition.visit(this);
	            ast.trueExp.visit(this);
	            ast.falseExp.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
	            ast.exp.visit(this);
	            this.visitAll(ast.args, context);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
	            ast.target.visit(this);
	            this.visitAll(ast.args, context);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
	            return this.visitAll(ast.expressions, context);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
	            ast.obj.visit(this);
	            ast.key.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
	            ast.obj.visit(this);
	            ast.key.visit(this);
	            ast.value.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
	            return this.visitAll(ast.expressions, context);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) { return this.visitAll(ast.values, context); };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
	            ast.receiver.visit(this);
	            return this.visitAll(ast.args, context);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
	            ast.expression.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
	            ast.receiver.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
	            ast.receiver.visit(this);
	            ast.value.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
	            ast.receiver.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
	            ast.receiver.visit(this);
	            return this.visitAll(ast.args, context);
	        };
	        /**
	         * @param {?} asts
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
	            var _this = this;
	            asts.forEach(function (ast) { return ast.visit(_this, context); });
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { return null; };
	        return RecursiveAstVisitor;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$2 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var TokenType = {};
	    TokenType.Character = 0;
	    TokenType.Identifier = 1;
	    TokenType.Keyword = 2;
	    TokenType.String = 3;
	    TokenType.Operator = 4;
	    TokenType.Number = 5;
	    TokenType.Error = 6;
	    TokenType[TokenType.Character] = "Character";
	    TokenType[TokenType.Identifier] = "Identifier";
	    TokenType[TokenType.Keyword] = "Keyword";
	    TokenType[TokenType.String] = "String";
	    TokenType[TokenType.Operator] = "Operator";
	    TokenType[TokenType.Number] = "Number";
	    TokenType[TokenType.Error] = "Error";
	    var /** @type {?} */ KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
	    var Lexer = (function () {
	        function Lexer() {
	        }
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        Lexer.prototype.tokenize = function (text) {
	            var /** @type {?} */ scanner = new _Scanner(text);
	            var /** @type {?} */ tokens = [];
	            var /** @type {?} */ token = scanner.scanToken();
	            while (token != null) {
	                tokens.push(token);
	                token = scanner.scanToken();
	            }
	            return tokens;
	        };
	        Lexer = __decorate$2([
	            CompilerInjectable(), 
	            __metadata$2('design:paramtypes', [])
	        ], Lexer);
	        return Lexer;
	    }());
	    var Token = (function () {
	        /**
	         * @param {?} index
	         * @param {?} type
	         * @param {?} numValue
	         * @param {?} strValue
	         */
	        function Token(index, type, numValue, strValue) {
	            this.index = index;
	            this.type = type;
	            this.numValue = numValue;
	            this.strValue = strValue;
	        }
	        /**
	         * @param {?} code
	         * @return {?}
	         */
	        Token.prototype.isCharacter = function (code) {
	            return this.type == TokenType.Character && this.numValue == code;
	        };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isNumber = function () { return this.type == TokenType.Number; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isString = function () { return this.type == TokenType.String; };
	        /**
	         * @param {?} operater
	         * @return {?}
	         */
	        Token.prototype.isOperator = function (operater) {
	            return this.type == TokenType.Operator && this.strValue == operater;
	        };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isIdentifier = function () { return this.type == TokenType.Identifier; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeyword = function () { return this.type == TokenType.Keyword; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordLet = function () { return this.type == TokenType.Keyword && this.strValue == 'let'; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordNull = function () { return this.type == TokenType.Keyword && this.strValue == 'null'; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordUndefined = function () {
	            return this.type == TokenType.Keyword && this.strValue == 'undefined';
	        };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordTrue = function () { return this.type == TokenType.Keyword && this.strValue == 'true'; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordFalse = function () { return this.type == TokenType.Keyword && this.strValue == 'false'; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordThis = function () { return this.type == TokenType.Keyword && this.strValue == 'this'; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isError = function () { return this.type == TokenType.Error; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.toNumber = function () { return this.type == TokenType.Number ? this.numValue : -1; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.toString = function () {
	            switch (this.type) {
	                case TokenType.Character:
	                case TokenType.Identifier:
	                case TokenType.Keyword:
	                case TokenType.Operator:
	                case TokenType.String:
	                case TokenType.Error:
	                    return this.strValue;
	                case TokenType.Number:
	                    return this.numValue.toString();
	                default:
	                    return null;
	            }
	        };
	        return Token;
	    }());
	    /**
	     * @param {?} index
	     * @param {?} code
	     * @return {?}
	     */
	    function newCharacterToken(index, code) {
	        return new Token(index, TokenType.Character, code, String.fromCharCode(code));
	    }
	    /**
	     * @param {?} index
	     * @param {?} text
	     * @return {?}
	     */
	    function newIdentifierToken(index, text) {
	        return new Token(index, TokenType.Identifier, 0, text);
	    }
	    /**
	     * @param {?} index
	     * @param {?} text
	     * @return {?}
	     */
	    function newKeywordToken(index, text) {
	        return new Token(index, TokenType.Keyword, 0, text);
	    }
	    /**
	     * @param {?} index
	     * @param {?} text
	     * @return {?}
	     */
	    function newOperatorToken(index, text) {
	        return new Token(index, TokenType.Operator, 0, text);
	    }
	    /**
	     * @param {?} index
	     * @param {?} text
	     * @return {?}
	     */
	    function newStringToken(index, text) {
	        return new Token(index, TokenType.String, 0, text);
	    }
	    /**
	     * @param {?} index
	     * @param {?} n
	     * @return {?}
	     */
	    function newNumberToken(index, n) {
	        return new Token(index, TokenType.Number, n, '');
	    }
	    /**
	     * @param {?} index
	     * @param {?} message
	     * @return {?}
	     */
	    function newErrorToken(index, message) {
	        return new Token(index, TokenType.Error, 0, message);
	    }
	    var /** @type {?} */ EOF = new Token(-1, TokenType.Character, 0, '');
	    var _Scanner = (function () {
	        /**
	         * @param {?} input
	         */
	        function _Scanner(input) {
	            this.input = input;
	            this.peek = 0;
	            this.index = -1;
	            this.length = input.length;
	            this.advance();
	        }
	        /**
	         * @return {?}
	         */
	        _Scanner.prototype.advance = function () {
	            this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
	        };
	        /**
	         * @return {?}
	         */
	        _Scanner.prototype.scanToken = function () {
	            var /** @type {?} */ input = this.input, /** @type {?} */ length = this.length;
	            var /** @type {?} */ peek = this.peek, /** @type {?} */ index = this.index;
	            // Skip whitespace.
	            while (peek <= $SPACE) {
	                if (++index >= length) {
	                    peek = $EOF;
	                    break;
	                }
	                else {
	                    peek = input.charCodeAt(index);
	                }
	            }
	            this.peek = peek;
	            this.index = index;
	            if (index >= length) {
	                return null;
	            }
	            // Handle identifiers and numbers.
	            if (isIdentifierStart(peek))
	                return this.scanIdentifier();
	            if (isDigit(peek))
	                return this.scanNumber(index);
	            var /** @type {?} */ start = index;
	            switch (peek) {
	                case $PERIOD:
	                    this.advance();
	                    return isDigit(this.peek) ? this.scanNumber(start) :
	                        newCharacterToken(start, $PERIOD);
	                case $LPAREN:
	                case $RPAREN:
	                case $LBRACE:
	                case $RBRACE:
	                case $LBRACKET:
	                case $RBRACKET:
	                case $COMMA:
	                case $COLON:
	                case $SEMICOLON:
	                    return this.scanCharacter(start, peek);
	                case $SQ:
	                case $DQ:
	                    return this.scanString();
	                case $HASH:
	                case $PLUS:
	                case $MINUS:
	                case $STAR:
	                case $SLASH:
	                case $PERCENT:
	                case $CARET:
	                    return this.scanOperator(start, String.fromCharCode(peek));
	                case $QUESTION:
	                    return this.scanComplexOperator(start, '?', $PERIOD, '.');
	                case $LT:
	                case $GT:
	                    return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
	                case $BANG:
	                case $EQ:
	                    return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
	                case $AMPERSAND:
	                    return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
	                case $BAR:
	                    return this.scanComplexOperator(start, '|', $BAR, '|');
	                case $NBSP:
	                    while (isWhitespace(this.peek))
	                        this.advance();
	                    return this.scanToken();
	            }
	            this.advance();
	            return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
	        };
	        /**
	         * @param {?} start
	         * @param {?} code
	         * @return {?}
	         */
	        _Scanner.prototype.scanCharacter = function (start, code) {
	            this.advance();
	            return newCharacterToken(start, code);
	        };
	        /**
	         * @param {?} start
	         * @param {?} str
	         * @return {?}
	         */
	        _Scanner.prototype.scanOperator = function (start, str) {
	            this.advance();
	            return newOperatorToken(start, str);
	        };
	        /**
	         * Tokenize a 2/3 char long operator
	         *
	         * @param {?} start start index in the expression
	         * @param {?} one first symbol (always part of the operator)
	         * @param {?} twoCode code point for the second symbol
	         * @param {?} two second symbol (part of the operator when the second code point matches)
	         * @param {?=} threeCode code point for the third symbol
	         * @param {?=} three third symbol (part of the operator when provided and matches source expression)
	         * @return {?}
	         */
	        _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	            this.advance();
	            var /** @type {?} */ str = one;
	            if (this.peek == twoCode) {
	                this.advance();
	                str += two;
	            }
	            if (threeCode != null && this.peek == threeCode) {
	                this.advance();
	                str += three;
	            }
	            return newOperatorToken(start, str);
	        };
	        /**
	         * @return {?}
	         */
	        _Scanner.prototype.scanIdentifier = function () {
	            var /** @type {?} */ start = this.index;
	            this.advance();
	            while (isIdentifierPart(this.peek))
	                this.advance();
	            var /** @type {?} */ str = this.input.substring(start, this.index);
	            return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :
	                newIdentifierToken(start, str);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Scanner.prototype.scanNumber = function (start) {
	            var /** @type {?} */ simple = (this.index === start);
	            this.advance(); // Skip initial digit.
	            while (true) {
	                if (isDigit(this.peek)) {
	                }
	                else if (this.peek == $PERIOD) {
	                    simple = false;
	                }
	                else if (isExponentStart(this.peek)) {
	                    this.advance();
	                    if (isExponentSign(this.peek))
	                        this.advance();
	                    if (!isDigit(this.peek))
	                        return this.error('Invalid exponent', -1);
	                    simple = false;
	                }
	                else {
	                    break;
	                }
	                this.advance();
	            }
	            var /** @type {?} */ str = this.input.substring(start, this.index);
	            var /** @type {?} */ value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);
	            return newNumberToken(start, value);
	        };
	        /**
	         * @return {?}
	         */
	        _Scanner.prototype.scanString = function () {
	            var /** @type {?} */ start = this.index;
	            var /** @type {?} */ quote = this.peek;
	            this.advance(); // Skip initial quote.
	            var /** @type {?} */ buffer = '';
	            var /** @type {?} */ marker = this.index;
	            var /** @type {?} */ input = this.input;
	            while (this.peek != quote) {
	                if (this.peek == $BACKSLASH) {
	                    buffer += input.substring(marker, this.index);
	                    this.advance();
	                    var /** @type {?} */ unescapedCode = void 0;
	                    if (this.peek == $u) {
	                        // 4 character hex code for unicode character.
	                        var /** @type {?} */ hex = input.substring(this.index + 1, this.index + 5);
	                        if (/^[0-9a-f]+$/i.test(hex)) {
	                            unescapedCode = parseInt(hex, 16);
	                        }
	                        else {
	                            return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                        }
	                        for (var /** @type {?} */ i = 0; i < 5; i++) {
	                            this.advance();
	                        }
	                    }
	                    else {
	                        unescapedCode = unescape(this.peek);
	                        this.advance();
	                    }
	                    buffer += String.fromCharCode(unescapedCode);
	                    marker = this.index;
	                }
	                else if (this.peek == $EOF) {
	                    return this.error('Unterminated quote', 0);
	                }
	                else {
	                    this.advance();
	                }
	            }
	            var /** @type {?} */ last = input.substring(marker, this.index);
	            this.advance(); // Skip terminating quote.
	            return newStringToken(start, buffer + last);
	        };
	        /**
	         * @param {?} message
	         * @param {?} offset
	         * @return {?}
	         */
	        _Scanner.prototype.error = function (message, offset) {
	            var /** @type {?} */ position = this.index + offset;
	            return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	        };
	        return _Scanner;
	    }());
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isIdentifierStart(code) {
	        return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||
	            (code == $_) || (code == $$);
	    }
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function isIdentifier(input) {
	        if (input.length == 0)
	            return false;
	        var /** @type {?} */ scanner = new _Scanner(input);
	        if (!isIdentifierStart(scanner.peek))
	            return false;
	        scanner.advance();
	        while (scanner.peek !== $EOF) {
	            if (!isIdentifierPart(scanner.peek))
	                return false;
	            scanner.advance();
	        }
	        return true;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isIdentifierPart(code) {
	        return isAsciiLetter(code) || isDigit(code) || (code == $_) ||
	            (code == $$);
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isExponentStart(code) {
	        return code == $e || code == $E;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isExponentSign(code) {
	        return code == $MINUS || code == $PLUS;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isQuote(code) {
	        return code === $SQ || code === $DQ || code === $BT;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function unescape(code) {
	        switch (code) {
	            case $n:
	                return $LF;
	            case $f:
	                return $FF;
	            case $r:
	                return $CR;
	            case $t:
	                return $TAB;
	            case $v:
	                return $VTAB;
	            default:
	                return code;
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$1 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var SplitInterpolation = (function () {
	        /**
	         * @param {?} strings
	         * @param {?} expressions
	         * @param {?} offsets
	         */
	        function SplitInterpolation(strings, expressions, offsets) {
	            this.strings = strings;
	            this.expressions = expressions;
	            this.offsets = offsets;
	        }
	        return SplitInterpolation;
	    }());
	    var TemplateBindingParseResult = (function () {
	        /**
	         * @param {?} templateBindings
	         * @param {?} warnings
	         * @param {?} errors
	         */
	        function TemplateBindingParseResult(templateBindings, warnings, errors) {
	            this.templateBindings = templateBindings;
	            this.warnings = warnings;
	            this.errors = errors;
	        }
	        return TemplateBindingParseResult;
	    }());
	    /**
	     * @param {?} config
	     * @return {?}
	     */
	    function _createInterpolateRegExp(config) {
	        var /** @type {?} */ pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
	        return new RegExp(pattern, 'g');
	    }
	    var Parser = (function () {
	        /**
	         * @param {?} _lexer
	         */
	        function Parser(_lexer) {
	            this._lexer = _lexer;
	            this.errors = [];
	        }
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.parseAction = function (input, location, interpolationConfig) {
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            this._checkNoInterpolation(input, location, interpolationConfig);
	            var /** @type {?} */ sourceToLex = this._stripComments(input);
	            var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));
	            var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)
	                .parseChain();
	            return new ASTWithSource(ast, input, location, this.errors);
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.parseBinding = function (input, location, interpolationConfig) {
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
	            return new ASTWithSource(ast, input, location, this.errors);
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
	            var /** @type {?} */ errors = SimpleExpressionChecker.check(ast);
	            if (errors.length > 0) {
	                this._reportError("Host binding expression cannot contain " + errors.join(' '), input, location);
	            }
	            return new ASTWithSource(ast, input, location, this.errors);
	        };
	        /**
	         * @param {?} message
	         * @param {?} input
	         * @param {?} errLocation
	         * @param {?=} ctxLocation
	         * @return {?}
	         */
	        Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {
	            this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {
	            // Quotes expressions use 3rd-party expression language. We don't want to use
	            // our lexer or parser for that, so we check for that ahead of time.
	            var /** @type {?} */ quote = this._parseQuote(input, location);
	            if (isPresent(quote)) {
	                return quote;
	            }
	            this._checkNoInterpolation(input, location, interpolationConfig);
	            var /** @type {?} */ sourceToLex = this._stripComments(input);
	            var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);
	            return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)
	                .parseChain();
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @return {?}
	         */
	        Parser.prototype._parseQuote = function (input, location) {
	            if (isBlank(input))
	                return null;
	            var /** @type {?} */ prefixSeparatorIndex = input.indexOf(':');
	            if (prefixSeparatorIndex == -1)
	                return null;
	            var /** @type {?} */ prefix = input.substring(0, prefixSeparatorIndex).trim();
	            if (!isIdentifier(prefix))
	                return null;
	            var /** @type {?} */ uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
	            return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
	        };
	        /**
	         * @param {?} prefixToken
	         * @param {?} input
	         * @param {?} location
	         * @return {?}
	         */
	        Parser.prototype.parseTemplateBindings = function (prefixToken, input, location) {
	            var /** @type {?} */ tokens = this._lexer.tokenize(input);
	            if (prefixToken) {
	                // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).
	                var /** @type {?} */ prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {
	                    t.index = 0;
	                    return t;
	                });
	                tokens.unshift.apply(tokens, prefixTokens);
	            }
	            return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)
	                .parseTemplateBindings();
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ split = this.splitInterpolation(input, location, interpolationConfig);
	            if (split == null)
	                return null;
	            var /** @type {?} */ expressions = [];
	            for (var /** @type {?} */ i = 0; i < split.expressions.length; ++i) {
	                var /** @type {?} */ expressionText = split.expressions[i];
	                var /** @type {?} */ sourceToLex = this._stripComments(expressionText);
	                var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
	                var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))
	                    .parseChain();
	                expressions.push(ast);
	            }
	            return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
	            var /** @type {?} */ parts = input.split(regexp);
	            if (parts.length <= 1) {
	                return null;
	            }
	            var /** @type {?} */ strings = [];
	            var /** @type {?} */ expressions = [];
	            var /** @type {?} */ offsets = [];
	            var /** @type {?} */ offset = 0;
	            for (var /** @type {?} */ i = 0; i < parts.length; i++) {
	                var /** @type {?} */ part = parts[i];
	                if (i % 2 === 0) {
	                    // fixed string
	                    strings.push(part);
	                    offset += part.length;
	                }
	                else if (part.trim().length > 0) {
	                    offset += interpolationConfig.start.length;
	                    expressions.push(part);
	                    offsets.push(offset);
	                    offset += part.length + interpolationConfig.end.length;
	                }
	                else {
	                    this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
	                    expressions.push('$implict');
	                    offsets.push(offset);
	                }
	            }
	            return new SplitInterpolation(strings, expressions, offsets);
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @return {?}
	         */
	        Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	            return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
	        };
	        /**
	         * @param {?} input
	         * @return {?}
	         */
	        Parser.prototype._stripComments = function (input) {
	            var /** @type {?} */ i = this._commentStart(input);
	            return isPresent(i) ? input.substring(0, i).trim() : input;
	        };
	        /**
	         * @param {?} input
	         * @return {?}
	         */
	        Parser.prototype._commentStart = function (input) {
	            var /** @type {?} */ outerQuote = null;
	            for (var /** @type {?} */ i = 0; i < input.length - 1; i++) {
	                var /** @type {?} */ char = input.charCodeAt(i);
	                var /** @type {?} */ nextChar = input.charCodeAt(i + 1);
	                if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))
	                    return i;
	                if (outerQuote === char) {
	                    outerQuote = null;
	                }
	                else if (isBlank(outerQuote) && isQuote(char)) {
	                    outerQuote = char;
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
	            var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
	            var /** @type {?} */ parts = input.split(regexp);
	            if (parts.length > 1) {
	                this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
	            }
	        };
	        /**
	         * @param {?} parts
	         * @param {?} partInErrIdx
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
	            var /** @type {?} */ errLocation = '';
	            for (var /** @type {?} */ j = 0; j < partInErrIdx; j++) {
	                errLocation += j % 2 === 0 ?
	                    parts[j] :
	                    "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
	            }
	            return errLocation.length;
	        };
	        Parser = __decorate$1([
	            CompilerInjectable(), 
	            __metadata$1('design:paramtypes', [Lexer])
	        ], Parser);
	        return Parser;
	    }());
	    var _ParseAST = (function () {
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?} tokens
	         * @param {?} inputLength
	         * @param {?} parseAction
	         * @param {?} errors
	         * @param {?} offset
	         */
	        function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
	            this.input = input;
	            this.location = location;
	            this.tokens = tokens;
	            this.inputLength = inputLength;
	            this.parseAction = parseAction;
	            this.errors = errors;
	            this.offset = offset;
	            this.rparensExpected = 0;
	            this.rbracketsExpected = 0;
	            this.rbracesExpected = 0;
	            this.index = 0;
	        }
	        /**
	         * @param {?} offset
	         * @return {?}
	         */
	        _ParseAST.prototype.peek = function (offset) {
	            var /** @type {?} */ i = this.index + offset;
	            return i < this.tokens.length ? this.tokens[i] : EOF;
	        };
	        Object.defineProperty(_ParseAST.prototype, "next", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.peek(0); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (this.index < this.tokens.length) ? this.next.index + this.offset :
	                    this.inputLength + this.offset;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _ParseAST.prototype.span = function (start) { return new ParseSpan(start, this.inputIndex); };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.advance = function () { this.index++; };
	        /**
	         * @param {?} code
	         * @return {?}
	         */
	        _ParseAST.prototype.optionalCharacter = function (code) {
	            if (this.next.isCharacter(code)) {
	                this.advance();
	                return true;
	            }
	            else {
	                return false;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.peekKeywordLet = function () { return this.next.isKeywordLet(); };
	        /**
	         * @param {?} code
	         * @return {?}
	         */
	        _ParseAST.prototype.expectCharacter = function (code) {
	            if (this.optionalCharacter(code))
	                return;
	            this.error("Missing expected " + String.fromCharCode(code));
	        };
	        /**
	         * @param {?} op
	         * @return {?}
	         */
	        _ParseAST.prototype.optionalOperator = function (op) {
	            if (this.next.isOperator(op)) {
	                this.advance();
	                return true;
	            }
	            else {
	                return false;
	            }
	        };
	        /**
	         * @param {?} operator
	         * @return {?}
	         */
	        _ParseAST.prototype.expectOperator = function (operator) {
	            if (this.optionalOperator(operator))
	                return;
	            this.error("Missing expected operator " + operator);
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	            var /** @type {?} */ n = this.next;
	            if (!n.isIdentifier() && !n.isKeyword()) {
	                this.error("Unexpected token " + n + ", expected identifier or keyword");
	                return '';
	            }
	            this.advance();
	            return n.toString();
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	            var /** @type {?} */ n = this.next;
	            if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	                this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	                return '';
	            }
	            this.advance();
	            return n.toString();
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseChain = function () {
	            var /** @type {?} */ exprs = [];
	            var /** @type {?} */ start = this.inputIndex;
	            while (this.index < this.tokens.length) {
	                var /** @type {?} */ expr = this.parsePipe();
	                exprs.push(expr);
	                if (this.optionalCharacter($SEMICOLON)) {
	                    if (!this.parseAction) {
	                        this.error('Binding expression cannot contain chained expression');
	                    }
	                    while (this.optionalCharacter($SEMICOLON)) {
	                    } // read all semicolons
	                }
	                else if (this.index < this.tokens.length) {
	                    this.error("Unexpected token '" + this.next + "'");
	                }
	            }
	            if (exprs.length == 0)
	                return new EmptyExpr(this.span(start));
	            if (exprs.length == 1)
	                return exprs[0];
	            return new Chain(this.span(start), exprs);
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parsePipe = function () {
	            var /** @type {?} */ result = this.parseExpression();
	            if (this.optionalOperator('|')) {
	                if (this.parseAction) {
	                    this.error('Cannot have a pipe in an action expression');
	                }
	                do {
	                    var /** @type {?} */ name_1 = this.expectIdentifierOrKeyword();
	                    var /** @type {?} */ args = [];
	                    while (this.optionalCharacter($COLON)) {
	                        args.push(this.parseExpression());
	                    }
	                    result = new BindingPipe(this.span(result.span.start), result, name_1, args);
	                } while (this.optionalOperator('|'));
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseConditional = function () {
	            var /** @type {?} */ start = this.inputIndex;
	            var /** @type {?} */ result = this.parseLogicalOr();
	            if (this.optionalOperator('?')) {
	                var /** @type {?} */ yes = this.parsePipe();
	                var /** @type {?} */ no = void 0;
	                if (!this.optionalCharacter($COLON)) {
	                    var /** @type {?} */ end = this.inputIndex;
	                    var /** @type {?} */ expression = this.input.substring(start, end);
	                    this.error("Conditional expression " + expression + " requires all 3 expressions");
	                    no = new EmptyExpr(this.span(start));
	                }
	                else {
	                    no = this.parsePipe();
	                }
	                return new Conditional(this.span(start), result, yes, no);
	            }
	            else {
	                return result;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseLogicalOr = function () {
	            // '||'
	            var /** @type {?} */ result = this.parseLogicalAnd();
	            while (this.optionalOperator('||')) {
	                var /** @type {?} */ right = this.parseLogicalAnd();
	                result = new Binary(this.span(result.span.start), '||', result, right);
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseLogicalAnd = function () {
	            // '&&'
	            var /** @type {?} */ result = this.parseEquality();
	            while (this.optionalOperator('&&')) {
	                var /** @type {?} */ right = this.parseEquality();
	                result = new Binary(this.span(result.span.start), '&&', result, right);
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseEquality = function () {
	            // '==','!=','===','!=='
	            var /** @type {?} */ result = this.parseRelational();
	            while (this.next.type == TokenType.Operator) {
	                var /** @type {?} */ operator = this.next.strValue;
	                switch (operator) {
	                    case '==':
	                    case '===':
	                    case '!=':
	                    case '!==':
	                        this.advance();
	                        var /** @type {?} */ right = this.parseRelational();
	                        result = new Binary(this.span(result.span.start), operator, result, right);
	                        continue;
	                }
	                break;
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseRelational = function () {
	            // '<', '>', '<=', '>='
	            var /** @type {?} */ result = this.parseAdditive();
	            while (this.next.type == TokenType.Operator) {
	                var /** @type {?} */ operator = this.next.strValue;
	                switch (operator) {
	                    case '<':
	                    case '>':
	                    case '<=':
	                    case '>=':
	                        this.advance();
	                        var /** @type {?} */ right = this.parseAdditive();
	                        result = new Binary(this.span(result.span.start), operator, result, right);
	                        continue;
	                }
	                break;
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseAdditive = function () {
	            // '+', '-'
	            var /** @type {?} */ result = this.parseMultiplicative();
	            while (this.next.type == TokenType.Operator) {
	                var /** @type {?} */ operator = this.next.strValue;
	                switch (operator) {
	                    case '+':
	                    case '-':
	                        this.advance();
	                        var /** @type {?} */ right = this.parseMultiplicative();
	                        result = new Binary(this.span(result.span.start), operator, result, right);
	                        continue;
	                }
	                break;
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseMultiplicative = function () {
	            // '*', '%', '/'
	            var /** @type {?} */ result = this.parsePrefix();
	            while (this.next.type == TokenType.Operator) {
	                var /** @type {?} */ operator = this.next.strValue;
	                switch (operator) {
	                    case '*':
	                    case '%':
	                    case '/':
	                        this.advance();
	                        var /** @type {?} */ right = this.parsePrefix();
	                        result = new Binary(this.span(result.span.start), operator, result, right);
	                        continue;
	                }
	                break;
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parsePrefix = function () {
	            if (this.next.type == TokenType.Operator) {
	                var /** @type {?} */ start = this.inputIndex;
	                var /** @type {?} */ operator = this.next.strValue;
	                var /** @type {?} */ result = void 0;
	                switch (operator) {
	                    case '+':
	                        this.advance();
	                        return this.parsePrefix();
	                    case '-':
	                        this.advance();
	                        result = this.parsePrefix();
	                        return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
	                    case '!':
	                        this.advance();
	                        result = this.parsePrefix();
	                        return new PrefixNot(this.span(start), result);
	                }
	            }
	            return this.parseCallChain();
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseCallChain = function () {
	            var /** @type {?} */ result = this.parsePrimary();
	            while (true) {
	                if (this.optionalCharacter($PERIOD)) {
	                    result = this.parseAccessMemberOrMethodCall(result, false);
	                }
	                else if (this.optionalOperator('?.')) {
	                    result = this.parseAccessMemberOrMethodCall(result, true);
	                }
	                else if (this.optionalCharacter($LBRACKET)) {
	                    this.rbracketsExpected++;
	                    var /** @type {?} */ key = this.parsePipe();
	                    this.rbracketsExpected--;
	                    this.expectCharacter($RBRACKET);
	                    if (this.optionalOperator('=')) {
	                        var /** @type {?} */ value = this.parseConditional();
	                        result = new KeyedWrite(this.span(result.span.start), result, key, value);
	                    }
	                    else {
	                        result = new KeyedRead(this.span(result.span.start), result, key);
	                    }
	                }
	                else if (this.optionalCharacter($LPAREN)) {
	                    this.rparensExpected++;
	                    var /** @type {?} */ args = this.parseCallArguments();
	                    this.rparensExpected--;
	                    this.expectCharacter($RPAREN);
	                    result = new FunctionCall(this.span(result.span.start), result, args);
	                }
	                else {
	                    return result;
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parsePrimary = function () {
	            var /** @type {?} */ start = this.inputIndex;
	            if (this.optionalCharacter($LPAREN)) {
	                this.rparensExpected++;
	                var /** @type {?} */ result = this.parsePipe();
	                this.rparensExpected--;
	                this.expectCharacter($RPAREN);
	                return result;
	            }
	            else if (this.next.isKeywordNull()) {
	                this.advance();
	                return new LiteralPrimitive(this.span(start), null);
	            }
	            else if (this.next.isKeywordUndefined()) {
	                this.advance();
	                return new LiteralPrimitive(this.span(start), void 0);
	            }
	            else if (this.next.isKeywordTrue()) {
	                this.advance();
	                return new LiteralPrimitive(this.span(start), true);
	            }
	            else if (this.next.isKeywordFalse()) {
	                this.advance();
	                return new LiteralPrimitive(this.span(start), false);
	            }
	            else if (this.next.isKeywordThis()) {
	                this.advance();
	                return new ImplicitReceiver(this.span(start));
	            }
	            else if (this.optionalCharacter($LBRACKET)) {
	                this.rbracketsExpected++;
	                var /** @type {?} */ elements = this.parseExpressionList($RBRACKET);
	                this.rbracketsExpected--;
	                this.expectCharacter($RBRACKET);
	                return new LiteralArray(this.span(start), elements);
	            }
	            else if (this.next.isCharacter($LBRACE)) {
	                return this.parseLiteralMap();
	            }
	            else if (this.next.isIdentifier()) {
	                return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
	            }
	            else if (this.next.isNumber()) {
	                var /** @type {?} */ value = this.next.toNumber();
	                this.advance();
	                return new LiteralPrimitive(this.span(start), value);
	            }
	            else if (this.next.isString()) {
	                var /** @type {?} */ literalValue = this.next.toString();
	                this.advance();
	                return new LiteralPrimitive(this.span(start), literalValue);
	            }
	            else if (this.index >= this.tokens.length) {
	                this.error("Unexpected end of expression: " + this.input);
	                return new EmptyExpr(this.span(start));
	            }
	            else {
	                this.error("Unexpected token " + this.next);
	                return new EmptyExpr(this.span(start));
	            }
	        };
	        /**
	         * @param {?} terminator
	         * @return {?}
	         */
	        _ParseAST.prototype.parseExpressionList = function (terminator) {
	            var /** @type {?} */ result = [];
	            if (!this.next.isCharacter(terminator)) {
	                do {
	                    result.push(this.parsePipe());
	                } while (this.optionalCharacter($COMMA));
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseLiteralMap = function () {
	            var /** @type {?} */ keys = [];
	            var /** @type {?} */ values = [];
	            var /** @type {?} */ start = this.inputIndex;
	            this.expectCharacter($LBRACE);
	            if (!this.optionalCharacter($RBRACE)) {
	                this.rbracesExpected++;
	                do {
	                    var /** @type {?} */ key = this.expectIdentifierOrKeywordOrString();
	                    keys.push(key);
	                    this.expectCharacter($COLON);
	                    values.push(this.parsePipe());
	                } while (this.optionalCharacter($COMMA));
	                this.rbracesExpected--;
	                this.expectCharacter($RBRACE);
	            }
	            return new LiteralMap(this.span(start), keys, values);
	        };
	        /**
	         * @param {?} receiver
	         * @param {?=} isSafe
	         * @return {?}
	         */
	        _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	            if (isSafe === void 0) { isSafe = false; }
	            var /** @type {?} */ start = receiver.span.start;
	            var /** @type {?} */ id = this.expectIdentifierOrKeyword();
	            if (this.optionalCharacter($LPAREN)) {
	                this.rparensExpected++;
	                var /** @type {?} */ args = this.parseCallArguments();
	                this.expectCharacter($RPAREN);
	                this.rparensExpected--;
	                var /** @type {?} */ span = this.span(start);
	                return isSafe ? new SafeMethodCall(span, receiver, id, args) :
	                    new MethodCall(span, receiver, id, args);
	            }
	            else {
	                if (isSafe) {
	                    if (this.optionalOperator('=')) {
	                        this.error('The \'?.\' operator cannot be used in the assignment');
	                        return new EmptyExpr(this.span(start));
	                    }
	                    else {
	                        return new SafePropertyRead(this.span(start), receiver, id);
	                    }
	                }
	                else {
	                    if (this.optionalOperator('=')) {
	                        if (!this.parseAction) {
	                            this.error('Bindings cannot contain assignments');
	                            return new EmptyExpr(this.span(start));
	                        }
	                        var /** @type {?} */ value = this.parseConditional();
	                        return new PropertyWrite(this.span(start), receiver, id, value);
	                    }
	                    else {
	                        return new PropertyRead(this.span(start), receiver, id);
	                    }
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseCallArguments = function () {
	            if (this.next.isCharacter($RPAREN))
	                return [];
	            var /** @type {?} */ positionals = [];
	            do {
	                positionals.push(this.parsePipe());
	            } while (this.optionalCharacter($COMMA));
	            return (positionals);
	        };
	        /**
	         * An identifier, a keyword, a string with an optional `-` inbetween.
	         * @return {?}
	         */
	        _ParseAST.prototype.expectTemplateBindingKey = function () {
	            var /** @type {?} */ result = '';
	            var /** @type {?} */ operatorFound = false;
	            do {
	                result += this.expectIdentifierOrKeywordOrString();
	                operatorFound = this.optionalOperator('-');
	                if (operatorFound) {
	                    result += '-';
	                }
	            } while (operatorFound);
	            return result.toString();
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseTemplateBindings = function () {
	            var /** @type {?} */ bindings = [];
	            var /** @type {?} */ prefix = null;
	            var /** @type {?} */ warnings = [];
	            while (this.index < this.tokens.length) {
	                var /** @type {?} */ start = this.inputIndex;
	                var /** @type {?} */ keyIsVar = this.peekKeywordLet();
	                if (keyIsVar) {
	                    this.advance();
	                }
	                var /** @type {?} */ key = this.expectTemplateBindingKey();
	                if (!keyIsVar) {
	                    if (prefix == null) {
	                        prefix = key;
	                    }
	                    else {
	                        key = prefix + key[0].toUpperCase() + key.substring(1);
	                    }
	                }
	                this.optionalCharacter($COLON);
	                var /** @type {?} */ name_2 = null;
	                var /** @type {?} */ expression = null;
	                if (keyIsVar) {
	                    if (this.optionalOperator('=')) {
	                        name_2 = this.expectTemplateBindingKey();
	                    }
	                    else {
	                        name_2 = '\$implicit';
	                    }
	                }
	                else if (this.next !== EOF && !this.peekKeywordLet()) {
	                    var /** @type {?} */ start_1 = this.inputIndex;
	                    var /** @type {?} */ ast = this.parsePipe();
	                    var /** @type {?} */ source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset);
	                    expression = new ASTWithSource(ast, source, this.location, this.errors);
	                }
	                bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));
	                if (!this.optionalCharacter($SEMICOLON)) {
	                    this.optionalCharacter($COMMA);
	                }
	            }
	            return new TemplateBindingParseResult(bindings, warnings, this.errors);
	        };
	        /**
	         * @param {?} message
	         * @param {?=} index
	         * @return {?}
	         */
	        _ParseAST.prototype.error = function (message, index) {
	            if (index === void 0) { index = null; }
	            this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
	            this.skip();
	        };
	        /**
	         * @param {?=} index
	         * @return {?}
	         */
	        _ParseAST.prototype.locationText = function (index) {
	            if (index === void 0) { index = null; }
	            if (isBlank(index))
	                index = this.index;
	            return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	                "at the end of the expression";
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.skip = function () {
	            var /** @type {?} */ n = this.next;
	            while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&
	                (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&
	                (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&
	                (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
	                if (this.next.isError()) {
	                    this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
	                }
	                this.advance();
	                n = this.next;
	            }
	        };
	        return _ParseAST;
	    }());
	    var SimpleExpressionChecker = (function () {
	        function SimpleExpressionChecker() {
	            this.errors = [];
	        }
	        /**
	         * @param {?} ast
	         * @return {?}
	         */
	        SimpleExpressionChecker.check = function (ast) {
	            var /** @type {?} */ s = new SimpleExpressionChecker();
	            ast.visit(s);
	            return s.errors;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) { this.visitAll(ast.expressions); };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) { this.visitAll(ast.values); };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitPipe = function (ast, context) { this.errors.push('pipes'); };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { };
	        /**
	         * @param {?} asts
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitAll = function (asts) {
	            var _this = this;
	            return asts.map(function (node) { return node.visit(_this); });
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitChain = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { };
	        return SimpleExpressionChecker;
	    }());

	    var ParseLocation = (function () {
	        /**
	         * @param {?} file
	         * @param {?} offset
	         * @param {?} line
	         * @param {?} col
	         */
	        function ParseLocation(file, offset, line, col) {
	            this.file = file;
	            this.offset = offset;
	            this.line = line;
	            this.col = col;
	        }
	        /**
	         * @return {?}
	         */
	        ParseLocation.prototype.toString = function () {
	            return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
	        };
	        /**
	         * @param {?} delta
	         * @return {?}
	         */
	        ParseLocation.prototype.moveBy = function (delta) {
	            var /** @type {?} */ source = this.file.content;
	            var /** @type {?} */ len = source.length;
	            var /** @type {?} */ offset = this.offset;
	            var /** @type {?} */ line = this.line;
	            var /** @type {?} */ col = this.col;
	            while (offset > 0 && delta < 0) {
	                offset--;
	                delta++;
	                var /** @type {?} */ ch = source.charCodeAt(offset);
	                if (ch == $LF) {
	                    line--;
	                    var /** @type {?} */ priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
	                    col = priorLine > 0 ? offset - priorLine : offset;
	                }
	                else {
	                    col--;
	                }
	            }
	            while (offset < len && delta > 0) {
	                var /** @type {?} */ ch = source.charCodeAt(offset);
	                offset++;
	                delta--;
	                if (ch == $LF) {
	                    line++;
	                    col = 0;
	                }
	                else {
	                    col++;
	                }
	            }
	            return new ParseLocation(this.file, offset, line, col);
	        };
	        /**
	         * @param {?} maxChars
	         * @param {?} maxLines
	         * @return {?}
	         */
	        ParseLocation.prototype.getContext = function (maxChars, maxLines) {
	            var /** @type {?} */ content = this.file.content;
	            var /** @type {?} */ startOffset = this.offset;
	            if (isPresent(startOffset)) {
	                if (startOffset > content.length - 1) {
	                    startOffset = content.length - 1;
	                }
	                var /** @type {?} */ endOffset = startOffset;
	                var /** @type {?} */ ctxChars = 0;
	                var /** @type {?} */ ctxLines = 0;
	                while (ctxChars < maxChars && startOffset > 0) {
	                    startOffset--;
	                    ctxChars++;
	                    if (content[startOffset] == '\n') {
	                        if (++ctxLines == maxLines) {
	                            break;
	                        }
	                    }
	                }
	                ctxChars = 0;
	                ctxLines = 0;
	                while (ctxChars < maxChars && endOffset < content.length - 1) {
	                    endOffset++;
	                    ctxChars++;
	                    if (content[endOffset] == '\n') {
	                        if (++ctxLines == maxLines) {
	                            break;
	                        }
	                    }
	                }
	                return {
	                    before: content.substring(startOffset, this.offset),
	                    after: content.substring(this.offset, endOffset + 1),
	                };
	            }
	            return null;
	        };
	        return ParseLocation;
	    }());
	    var ParseSourceFile = (function () {
	        /**
	         * @param {?} content
	         * @param {?} url
	         */
	        function ParseSourceFile(content, url) {
	            this.content = content;
	            this.url = url;
	        }
	        return ParseSourceFile;
	    }());
	    var ParseSourceSpan = (function () {
	        /**
	         * @param {?} start
	         * @param {?} end
	         * @param {?=} details
	         */
	        function ParseSourceSpan(start, end, details) {
	            if (details === void 0) { details = null; }
	            this.start = start;
	            this.end = end;
	            this.details = details;
	        }
	        /**
	         * @return {?}
	         */
	        ParseSourceSpan.prototype.toString = function () {
	            return this.start.file.content.substring(this.start.offset, this.end.offset);
	        };
	        return ParseSourceSpan;
	    }());
	    var ParseErrorLevel = {};
	    ParseErrorLevel.WARNING = 0;
	    ParseErrorLevel.FATAL = 1;
	    ParseErrorLevel[ParseErrorLevel.WARNING] = "WARNING";
	    ParseErrorLevel[ParseErrorLevel.FATAL] = "FATAL";
	    var ParseError = (function () {
	        /**
	         * @param {?} span
	         * @param {?} msg
	         * @param {?=} level
	         */
	        function ParseError(span, msg, level) {
	            if (level === void 0) { level = ParseErrorLevel.FATAL; }
	            this.span = span;
	            this.msg = msg;
	            this.level = level;
	        }
	        /**
	         * @return {?}
	         */
	        ParseError.prototype.toString = function () {
	            var /** @type {?} */ ctx = this.span.start.getContext(100, 3);
	            var /** @type {?} */ contextStr = ctx ? " (\"" + ctx.before + "[ERROR ->]" + ctx.after + "\")" : '';
	            var /** @type {?} */ details = this.span.details ? ", " + this.span.details : '';
	            return "" + this.msg + contextStr + ": " + this.span.start + details;
	        };
	        return ParseError;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var Text = (function () {
	        /**
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function Text(value, sourceSpan) {
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	        return Text;
	    }());
	    var Expansion = (function () {
	        /**
	         * @param {?} switchValue
	         * @param {?} type
	         * @param {?} cases
	         * @param {?} sourceSpan
	         * @param {?} switchValueSourceSpan
	         */
	        function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
	            this.switchValue = switchValue;
	            this.type = type;
	            this.cases = cases;
	            this.sourceSpan = sourceSpan;
	            this.switchValueSourceSpan = switchValueSourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Expansion.prototype.visit = function (visitor, context) { return visitor.visitExpansion(this, context); };
	        return Expansion;
	    }());
	    var ExpansionCase = (function () {
	        /**
	         * @param {?} value
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} valueSourceSpan
	         * @param {?} expSourceSpan
	         */
	        function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
	            this.value = value;
	            this.expression = expression;
	            this.sourceSpan = sourceSpan;
	            this.valueSourceSpan = valueSourceSpan;
	            this.expSourceSpan = expSourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ExpansionCase.prototype.visit = function (visitor, context) { return visitor.visitExpansionCase(this, context); };
	        return ExpansionCase;
	    }());
	    var Attribute$1 = (function () {
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?=} valueSpan
	         */
	        function Attribute(name, value, sourceSpan, valueSpan) {
	            this.name = name;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	            this.valueSpan = valueSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Attribute.prototype.visit = function (visitor, context) { return visitor.visitAttribute(this, context); };
	        return Attribute;
	    }());
	    var Element = (function () {
	        /**
	         * @param {?} name
	         * @param {?} attrs
	         * @param {?} children
	         * @param {?} sourceSpan
	         * @param {?} startSourceSpan
	         * @param {?} endSourceSpan
	         */
	        function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
	            this.name = name;
	            this.attrs = attrs;
	            this.children = children;
	            this.sourceSpan = sourceSpan;
	            this.startSourceSpan = startSourceSpan;
	            this.endSourceSpan = endSourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Element.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
	        return Element;
	    }());
	    var Comment = (function () {
	        /**
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function Comment(value, sourceSpan) {
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Comment.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context); };
	        return Comment;
	    }());
	    /**
	     * @param {?} visitor
	     * @param {?} nodes
	     * @param {?=} context
	     * @return {?}
	     */
	    function visitAll(visitor, nodes, context) {
	        if (context === void 0) { context = null; }
	        var /** @type {?} */ result = [];
	        var /** @type {?} */ visit = visitor.visit ?
	            function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	            function (ast) { return ast.visit(visitor, context); };
	        nodes.forEach(function (ast) {
	            var /** @type {?} */ astResult = visit(ast);
	            if (astResult) {
	                result.push(astResult);
	            }
	        });
	        return result;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var TokenType$1 = {};
	    TokenType$1.TAG_OPEN_START = 0;
	    TokenType$1.TAG_OPEN_END = 1;
	    TokenType$1.TAG_OPEN_END_VOID = 2;
	    TokenType$1.TAG_CLOSE = 3;
	    TokenType$1.TEXT = 4;
	    TokenType$1.ESCAPABLE_RAW_TEXT = 5;
	    TokenType$1.RAW_TEXT = 6;
	    TokenType$1.COMMENT_START = 7;
	    TokenType$1.COMMENT_END = 8;
	    TokenType$1.CDATA_START = 9;
	    TokenType$1.CDATA_END = 10;
	    TokenType$1.ATTR_NAME = 11;
	    TokenType$1.ATTR_VALUE = 12;
	    TokenType$1.DOC_TYPE = 13;
	    TokenType$1.EXPANSION_FORM_START = 14;
	    TokenType$1.EXPANSION_CASE_VALUE = 15;
	    TokenType$1.EXPANSION_CASE_EXP_START = 16;
	    TokenType$1.EXPANSION_CASE_EXP_END = 17;
	    TokenType$1.EXPANSION_FORM_END = 18;
	    TokenType$1.EOF = 19;
	    TokenType$1[TokenType$1.TAG_OPEN_START] = "TAG_OPEN_START";
	    TokenType$1[TokenType$1.TAG_OPEN_END] = "TAG_OPEN_END";
	    TokenType$1[TokenType$1.TAG_OPEN_END_VOID] = "TAG_OPEN_END_VOID";
	    TokenType$1[TokenType$1.TAG_CLOSE] = "TAG_CLOSE";
	    TokenType$1[TokenType$1.TEXT] = "TEXT";
	    TokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
	    TokenType$1[TokenType$1.RAW_TEXT] = "RAW_TEXT";
	    TokenType$1[TokenType$1.COMMENT_START] = "COMMENT_START";
	    TokenType$1[TokenType$1.COMMENT_END] = "COMMENT_END";
	    TokenType$1[TokenType$1.CDATA_START] = "CDATA_START";
	    TokenType$1[TokenType$1.CDATA_END] = "CDATA_END";
	    TokenType$1[TokenType$1.ATTR_NAME] = "ATTR_NAME";
	    TokenType$1[TokenType$1.ATTR_VALUE] = "ATTR_VALUE";
	    TokenType$1[TokenType$1.DOC_TYPE] = "DOC_TYPE";
	    TokenType$1[TokenType$1.EXPANSION_FORM_START] = "EXPANSION_FORM_START";
	    TokenType$1[TokenType$1.EXPANSION_CASE_VALUE] = "EXPANSION_CASE_VALUE";
	    TokenType$1[TokenType$1.EXPANSION_CASE_EXP_START] = "EXPANSION_CASE_EXP_START";
	    TokenType$1[TokenType$1.EXPANSION_CASE_EXP_END] = "EXPANSION_CASE_EXP_END";
	    TokenType$1[TokenType$1.EXPANSION_FORM_END] = "EXPANSION_FORM_END";
	    TokenType$1[TokenType$1.EOF] = "EOF";
	    var Token$1 = (function () {
	        /**
	         * @param {?} type
	         * @param {?} parts
	         * @param {?} sourceSpan
	         */
	        function Token(type, parts, sourceSpan) {
	            this.type = type;
	            this.parts = parts;
	            this.sourceSpan = sourceSpan;
	        }
	        return Token;
	    }());
	    var TokenError = (function (_super) {
	        __extends$6(TokenError, _super);
	        /**
	         * @param {?} errorMsg
	         * @param {?} tokenType
	         * @param {?} span
	         */
	        function TokenError(errorMsg, tokenType, span) {
	            _super.call(this, span, errorMsg);
	            this.tokenType = tokenType;
	        }
	        return TokenError;
	    }(ParseError));
	    var TokenizeResult = (function () {
	        /**
	         * @param {?} tokens
	         * @param {?} errors
	         */
	        function TokenizeResult(tokens, errors) {
	            this.tokens = tokens;
	            this.errors = errors;
	        }
	        return TokenizeResult;
	    }());
	    /**
	     * @param {?} source
	     * @param {?} url
	     * @param {?} getTagDefinition
	     * @param {?=} tokenizeExpansionForms
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
	        if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)
	            .tokenize();
	    }
	    var /** @type {?} */ _CR_OR_CRLF_REGEXP = /\r\n?/g;
	    /**
	     * @param {?} charCode
	     * @return {?}
	     */
	    function _unexpectedCharacterErrorMsg(charCode) {
	        var /** @type {?} */ char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
	        return "Unexpected character \"" + char + "\"";
	    }
	    /**
	     * @param {?} entitySrc
	     * @return {?}
	     */
	    function _unknownEntityErrorMsg(entitySrc) {
	        return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
	    }
	    var _ControlFlowError = (function () {
	        /**
	         * @param {?} error
	         */
	        function _ControlFlowError(error) {
	            this.error = error;
	        }
	        return _ControlFlowError;
	    }());
	    var _Tokenizer = (function () {
	        /**
	         * @param {?} _file The html source
	         * @param {?} _getTagDefinition
	         * @param {?} _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
	         * @param {?=} _interpolationConfig
	         */
	        function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
	            if (_interpolationConfig === void 0) { _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            this._file = _file;
	            this._getTagDefinition = _getTagDefinition;
	            this._tokenizeIcu = _tokenizeIcu;
	            this._interpolationConfig = _interpolationConfig;
	            this._peek = -1;
	            this._nextPeek = -1;
	            this._index = -1;
	            this._line = 0;
	            this._column = -1;
	            this._expansionCaseStack = [];
	            this._inInterpolation = false;
	            this.tokens = [];
	            this.errors = [];
	            this._input = _file.content;
	            this._length = _file.content.length;
	            this._advance();
	        }
	        /**
	         * @param {?} content
	         * @return {?}
	         */
	        _Tokenizer.prototype._processCarriageReturns = function (content) {
	            // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
	            // In order to keep the original position in the source, we can not
	            // pre-process it.
	            // Instead CRs are processed right before instantiating the tokens.
	            return content.replace(_CR_OR_CRLF_REGEXP, '\n');
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype.tokenize = function () {
	            while (this._peek !== $EOF) {
	                var /** @type {?} */ start = this._getLocation();
	                try {
	                    if (this._attemptCharCode($LT)) {
	                        if (this._attemptCharCode($BANG)) {
	                            if (this._attemptCharCode($LBRACKET)) {
	                                this._consumeCdata(start);
	                            }
	                            else if (this._attemptCharCode($MINUS)) {
	                                this._consumeComment(start);
	                            }
	                            else {
	                                this._consumeDocType(start);
	                            }
	                        }
	                        else if (this._attemptCharCode($SLASH)) {
	                            this._consumeTagClose(start);
	                        }
	                        else {
	                            this._consumeTagOpen(start);
	                        }
	                    }
	                    else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
	                        this._consumeText();
	                    }
	                }
	                catch (e) {
	                    if (e instanceof _ControlFlowError) {
	                        this.errors.push(e.error);
	                    }
	                    else {
	                        throw e;
	                    }
	                }
	            }
	            this._beginToken(TokenType$1.EOF);
	            this._endToken([]);
	            return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        _Tokenizer.prototype._tokenizeExpansionForm = function () {
	            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	                this._consumeExpansionFormStart();
	                return true;
	            }
	            if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
	                this._consumeExpansionCaseStart();
	                return true;
	            }
	            if (this._peek === $RBRACE) {
	                if (this._isInExpansionCase()) {
	                    this._consumeExpansionCaseEnd();
	                    return true;
	                }
	                if (this._isInExpansionForm()) {
	                    this._consumeExpansionFormEnd();
	                    return true;
	                }
	            }
	            return false;
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._getLocation = function () {
	            return new ParseLocation(this._file, this._index, this._line, this._column);
	        };
	        /**
	         * @param {?=} start
	         * @param {?=} end
	         * @return {?}
	         */
	        _Tokenizer.prototype._getSpan = function (start, end) {
	            if (start === void 0) { start = this._getLocation(); }
	            if (end === void 0) { end = this._getLocation(); }
	            return new ParseSourceSpan(start, end);
	        };
	        /**
	         * @param {?} type
	         * @param {?=} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._beginToken = function (type, start) {
	            if (start === void 0) { start = this._getLocation(); }
	            this._currentTokenStart = start;
	            this._currentTokenType = type;
	        };
	        /**
	         * @param {?} parts
	         * @param {?=} end
	         * @return {?}
	         */
	        _Tokenizer.prototype._endToken = function (parts, end) {
	            if (end === void 0) { end = this._getLocation(); }
	            var /** @type {?} */ token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
	            this.tokens.push(token);
	            this._currentTokenStart = null;
	            this._currentTokenType = null;
	            return token;
	        };
	        /**
	         * @param {?} msg
	         * @param {?} span
	         * @return {?}
	         */
	        _Tokenizer.prototype._createError = function (msg, span) {
	            if (this._isInExpansionForm()) {
	                msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
	            }
	            var /** @type {?} */ error = new TokenError(msg, this._currentTokenType, span);
	            this._currentTokenStart = null;
	            this._currentTokenType = null;
	            return new _ControlFlowError(error);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._advance = function () {
	            if (this._index >= this._length) {
	                throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
	            }
	            if (this._peek === $LF) {
	                this._line++;
	                this._column = 0;
	            }
	            else if (this._peek !== $LF && this._peek !== $CR) {
	                this._column++;
	            }
	            this._index++;
	            this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
	            this._nextPeek =
	                this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
	        };
	        /**
	         * @param {?} charCode
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptCharCode = function (charCode) {
	            if (this._peek === charCode) {
	                this._advance();
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} charCode
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
	            if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
	                this._advance();
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} charCode
	         * @return {?}
	         */
	        _Tokenizer.prototype._requireCharCode = function (charCode) {
	            var /** @type {?} */ location = this._getLocation();
	            if (!this._attemptCharCode(charCode)) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
	            }
	        };
	        /**
	         * @param {?} chars
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptStr = function (chars) {
	            var /** @type {?} */ len = chars.length;
	            if (this._index + len > this._length) {
	                return false;
	            }
	            var /** @type {?} */ initialPosition = this._savePosition();
	            for (var /** @type {?} */ i = 0; i < len; i++) {
	                if (!this._attemptCharCode(chars.charCodeAt(i))) {
	                    // If attempting to parse the string fails, we want to reset the parser
	                    // to where it was before the attempt
	                    this._restorePosition(initialPosition);
	                    return false;
	                }
	            }
	            return true;
	        };
	        /**
	         * @param {?} chars
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
	            for (var /** @type {?} */ i = 0; i < chars.length; i++) {
	                if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        /**
	         * @param {?} chars
	         * @return {?}
	         */
	        _Tokenizer.prototype._requireStr = function (chars) {
	            var /** @type {?} */ location = this._getLocation();
	            if (!this._attemptStr(chars)) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
	            }
	        };
	        /**
	         * @param {?} predicate
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
	            while (!predicate(this._peek)) {
	                this._advance();
	            }
	        };
	        /**
	         * @param {?} predicate
	         * @param {?} len
	         * @return {?}
	         */
	        _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
	            var /** @type {?} */ start = this._getLocation();
	            this._attemptCharCodeUntilFn(predicate);
	            if (this._index - start.offset < len) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
	            }
	        };
	        /**
	         * @param {?} char
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptUntilChar = function (char) {
	            while (this._peek !== char) {
	                this._advance();
	            }
	        };
	        /**
	         * @param {?} decodeEntities
	         * @return {?}
	         */
	        _Tokenizer.prototype._readChar = function (decodeEntities) {
	            if (decodeEntities && this._peek === $AMPERSAND) {
	                return this._decodeEntity();
	            }
	            else {
	                var /** @type {?} */ index = this._index;
	                this._advance();
	                return this._input[index];
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._decodeEntity = function () {
	            var /** @type {?} */ start = this._getLocation();
	            this._advance();
	            if (this._attemptCharCode($HASH)) {
	                var /** @type {?} */ isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
	                var /** @type {?} */ numberStart = this._getLocation().offset;
	                this._attemptCharCodeUntilFn(isDigitEntityEnd);
	                if (this._peek != $SEMICOLON) {
	                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	                }
	                this._advance();
	                var /** @type {?} */ strNum = this._input.substring(numberStart, this._index - 1);
	                try {
	                    var /** @type {?} */ charCode = parseInt(strNum, isHex ? 16 : 10);
	                    return String.fromCharCode(charCode);
	                }
	                catch (e) {
	                    var /** @type {?} */ entity = this._input.substring(start.offset + 1, this._index - 1);
	                    throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
	                }
	            }
	            else {
	                var /** @type {?} */ startPosition = this._savePosition();
	                this._attemptCharCodeUntilFn(isNamedEntityEnd);
	                if (this._peek != $SEMICOLON) {
	                    this._restorePosition(startPosition);
	                    return '&';
	                }
	                this._advance();
	                var /** @type {?} */ name_1 = this._input.substring(start.offset + 1, this._index - 1);
	                var /** @type {?} */ char = NAMED_ENTITIES[name_1];
	                if (!char) {
	                    throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
	                }
	                return char;
	            }
	        };
	        /**
	         * @param {?} decodeEntities
	         * @param {?} firstCharOfEnd
	         * @param {?} attemptEndRest
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
	            var /** @type {?} */ tagCloseStart;
	            var /** @type {?} */ textStart = this._getLocation();
	            this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
	            var /** @type {?} */ parts = [];
	            while (true) {
	                tagCloseStart = this._getLocation();
	                if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
	                    break;
	                }
	                if (this._index > tagCloseStart.offset) {
	                    // add the characters consumed by the previous if statement to the output
	                    parts.push(this._input.substring(tagCloseStart.offset, this._index));
	                }
	                while (this._peek !== firstCharOfEnd) {
	                    parts.push(this._readChar(decodeEntities));
	                }
	            }
	            return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeComment = function (start) {
	            var _this = this;
	            this._beginToken(TokenType$1.COMMENT_START, start);
	            this._requireCharCode($MINUS);
	            this._endToken([]);
	            var /** @type {?} */ textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr('->'); });
	            this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
	            this._endToken([]);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeCdata = function (start) {
	            var _this = this;
	            this._beginToken(TokenType$1.CDATA_START, start);
	            this._requireStr('CDATA[');
	            this._endToken([]);
	            var /** @type {?} */ textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(']>'); });
	            this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
	            this._endToken([]);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeDocType = function (start) {
	            this._beginToken(TokenType$1.DOC_TYPE, start);
	            this._attemptUntilChar($GT);
	            this._advance();
	            this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumePrefixAndName = function () {
	            var /** @type {?} */ nameOrPrefixStart = this._index;
	            var /** @type {?} */ prefix = null;
	            while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
	                this._advance();
	            }
	            var /** @type {?} */ nameStart;
	            if (this._peek === $COLON) {
	                this._advance();
	                prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
	                nameStart = this._index;
	            }
	            else {
	                nameStart = nameOrPrefixStart;
	            }
	            this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
	            var /** @type {?} */ name = this._input.substring(nameStart, this._index);
	            return [prefix, name];
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeTagOpen = function (start) {
	            var /** @type {?} */ savedPos = this._savePosition();
	            var /** @type {?} */ tagName;
	            var /** @type {?} */ lowercaseTagName;
	            try {
	                if (!isAsciiLetter(this._peek)) {
	                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	                }
	                var /** @type {?} */ nameStart = this._index;
	                this._consumeTagOpenStart(start);
	                tagName = this._input.substring(nameStart, this._index);
	                lowercaseTagName = tagName.toLowerCase();
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	                while (this._peek !== $SLASH && this._peek !== $GT) {
	                    this._consumeAttributeName();
	                    this._attemptCharCodeUntilFn(isNotWhitespace);
	                    if (this._attemptCharCode($EQ)) {
	                        this._attemptCharCodeUntilFn(isNotWhitespace);
	                        this._consumeAttributeValue();
	                    }
	                    this._attemptCharCodeUntilFn(isNotWhitespace);
	                }
	                this._consumeTagOpenEnd();
	            }
	            catch (e) {
	                if (e instanceof _ControlFlowError) {
	                    // When the start tag is invalid, assume we want a "<"
	                    this._restorePosition(savedPos);
	                    // Back to back text tokens are merged at the end
	                    this._beginToken(TokenType$1.TEXT, start);
	                    this._endToken(['<']);
	                    return;
	                }
	                throw e;
	            }
	            var /** @type {?} */ contentTokenType = this._getTagDefinition(tagName).contentType;
	            if (contentTokenType === TagContentType.RAW_TEXT) {
	                this._consumeRawTextWithTagClose(lowercaseTagName, false);
	            }
	            else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
	                this._consumeRawTextWithTagClose(lowercaseTagName, true);
	            }
	        };
	        /**
	         * @param {?} lowercaseTagName
	         * @param {?} decodeEntities
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
	            var _this = this;
	            var /** @type {?} */ textToken = this._consumeRawText(decodeEntities, $LT, function () {
	                if (!_this._attemptCharCode($SLASH))
	                    return false;
	                _this._attemptCharCodeUntilFn(isNotWhitespace);
	                if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
	                    return false;
	                _this._attemptCharCodeUntilFn(isNotWhitespace);
	                return _this._attemptCharCode($GT);
	            });
	            this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
	            this._endToken([null, lowercaseTagName]);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeTagOpenStart = function (start) {
	            this._beginToken(TokenType$1.TAG_OPEN_START, start);
	            var /** @type {?} */ parts = this._consumePrefixAndName();
	            this._endToken(parts);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeAttributeName = function () {
	            this._beginToken(TokenType$1.ATTR_NAME);
	            var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
	            this._endToken(prefixAndName);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeAttributeValue = function () {
	            this._beginToken(TokenType$1.ATTR_VALUE);
	            var /** @type {?} */ value;
	            if (this._peek === $SQ || this._peek === $DQ) {
	                var /** @type {?} */ quoteChar = this._peek;
	                this._advance();
	                var /** @type {?} */ parts = [];
	                while (this._peek !== quoteChar) {
	                    parts.push(this._readChar(true));
	                }
	                value = parts.join('');
	                this._advance();
	            }
	            else {
	                var /** @type {?} */ valueStart = this._index;
	                this._requireCharCodeUntilFn(isNameEnd, 1);
	                value = this._input.substring(valueStart, this._index);
	            }
	            this._endToken([this._processCarriageReturns(value)]);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeTagOpenEnd = function () {
	            var /** @type {?} */ tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
	            this._beginToken(tokenType);
	            this._requireCharCode($GT);
	            this._endToken([]);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeTagClose = function (start) {
	            this._beginToken(TokenType$1.TAG_CLOSE, start);
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            this._requireCharCode($GT);
	            this._endToken(prefixAndName);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeExpansionFormStart = function () {
	            this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
	            this._requireCharCode($LBRACE);
	            this._endToken([]);
	            this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
	            this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	            var /** @type {?} */ condition = this._readUntil($COMMA);
	            this._endToken([condition], this._getLocation());
	            this._requireCharCode($COMMA);
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	            var /** @type {?} */ type = this._readUntil($COMMA);
	            this._endToken([type], this._getLocation());
	            this._requireCharCode($COMMA);
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeExpansionCaseStart = function () {
	            this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
	            var /** @type {?} */ value = this._readUntil($LBRACE).trim();
	            this._endToken([value], this._getLocation());
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
	            this._requireCharCode($LBRACE);
	            this._endToken([], this._getLocation());
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeExpansionCaseEnd = function () {
	            this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
	            this._requireCharCode($RBRACE);
	            this._endToken([], this._getLocation());
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            this._expansionCaseStack.pop();
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeExpansionFormEnd = function () {
	            this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
	            this._requireCharCode($RBRACE);
	            this._endToken([]);
	            this._expansionCaseStack.pop();
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeText = function () {
	            var /** @type {?} */ start = this._getLocation();
	            this._beginToken(TokenType$1.TEXT, start);
	            var /** @type {?} */ parts = [];
	            do {
	                if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
	                    parts.push(this._interpolationConfig.start);
	                    this._inInterpolation = true;
	                }
	                else if (this._interpolationConfig && this._inInterpolation &&
	                    this._attemptStr(this._interpolationConfig.end)) {
	                    parts.push(this._interpolationConfig.end);
	                    this._inInterpolation = false;
	                }
	                else {
	                    parts.push(this._readChar(true));
	                }
	            } while (!this._isTextEnd());
	            this._endToken([this._processCarriageReturns(parts.join(''))]);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._isTextEnd = function () {
	            if (this._peek === $LT || this._peek === $EOF) {
	                return true;
	            }
	            if (this._tokenizeIcu && !this._inInterpolation) {
	                if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	                    // start of an expansion form
	                    return true;
	                }
	                if (this._peek === $RBRACE && this._isInExpansionCase()) {
	                    // end of and expansion case
	                    return true;
	                }
	            }
	            return false;
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._savePosition = function () {
	            return [this._peek, this._index, this._column, this._line, this.tokens.length];
	        };
	        /**
	         * @param {?} char
	         * @return {?}
	         */
	        _Tokenizer.prototype._readUntil = function (char) {
	            var /** @type {?} */ start = this._index;
	            this._attemptUntilChar(char);
	            return this._input.substring(start, this._index);
	        };
	        /**
	         * @param {?} position
	         * @return {?}
	         */
	        _Tokenizer.prototype._restorePosition = function (position) {
	            this._peek = position[0];
	            this._index = position[1];
	            this._column = position[2];
	            this._line = position[3];
	            var /** @type {?} */ nbTokens = position[4];
	            if (nbTokens < this.tokens.length) {
	                // remove any extra tokens
	                this.tokens = this.tokens.slice(0, nbTokens);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._isInExpansionCase = function () {
	            return this._expansionCaseStack.length > 0 &&
	                this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                    TokenType$1.EXPANSION_CASE_EXP_START;
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._isInExpansionForm = function () {
	            return this._expansionCaseStack.length > 0 &&
	                this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                    TokenType$1.EXPANSION_FORM_START;
	        };
	        return _Tokenizer;
	    }());
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isNotWhitespace(code) {
	        return !isWhitespace(code) || code === $EOF;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isNameEnd(code) {
	        return isWhitespace(code) || code === $GT || code === $SLASH ||
	            code === $SQ || code === $DQ || code === $EQ;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isPrefixEnd(code) {
	        return (code < $a || $z < code) && (code < $A || $Z < code) &&
	            (code < $0 || code > $9);
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isDigitEntityEnd(code) {
	        return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isNamedEntityEnd(code) {
	        return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
	    }
	    /**
	     * @param {?} input
	     * @param {?} offset
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    function isExpansionFormStart(input, offset, interpolationConfig) {
	        var /** @type {?} */ isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
	        return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
	    }
	    /**
	     * @param {?} peek
	     * @return {?}
	     */
	    function isExpansionCaseStart(peek) {
	        return peek === $EQ || isAsciiLetter(peek);
	    }
	    /**
	     * @param {?} code1
	     * @param {?} code2
	     * @return {?}
	     */
	    function compareCharCodeCaseInsensitive(code1, code2) {
	        return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function toUpperCaseCharCode(code) {
	        return code >= $a && code <= $z ? code - $a + $A : code;
	    }
	    /**
	     * @param {?} srcTokens
	     * @return {?}
	     */
	    function mergeTextTokens(srcTokens) {
	        var /** @type {?} */ dstTokens = [];
	        var /** @type {?} */ lastDstToken;
	        for (var /** @type {?} */ i = 0; i < srcTokens.length; i++) {
	            var /** @type {?} */ token = srcTokens[i];
	            if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
	                lastDstToken.parts[0] += token.parts[0];
	                lastDstToken.sourceSpan.end = token.sourceSpan.end;
	            }
	            else {
	                lastDstToken = token;
	                dstTokens.push(lastDstToken);
	            }
	        }
	        return dstTokens;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var TreeError = (function (_super) {
	        __extends$5(TreeError, _super);
	        /**
	         * @param {?} elementName
	         * @param {?} span
	         * @param {?} msg
	         */
	        function TreeError(elementName, span, msg) {
	            _super.call(this, span, msg);
	            this.elementName = elementName;
	        }
	        /**
	         * @param {?} elementName
	         * @param {?} span
	         * @param {?} msg
	         * @return {?}
	         */
	        TreeError.create = function (elementName, span, msg) {
	            return new TreeError(elementName, span, msg);
	        };
	        return TreeError;
	    }(ParseError));
	    var ParseTreeResult = (function () {
	        /**
	         * @param {?} rootNodes
	         * @param {?} errors
	         */
	        function ParseTreeResult(rootNodes, errors) {
	            this.rootNodes = rootNodes;
	            this.errors = errors;
	        }
	        return ParseTreeResult;
	    }());
	    var Parser$1 = (function () {
	        /**
	         * @param {?} getTagDefinition
	         */
	        function Parser(getTagDefinition) {
	            this.getTagDefinition = getTagDefinition;
	        }
	        /**
	         * @param {?} source
	         * @param {?} url
	         * @param {?=} parseExpansionForms
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	            if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
	            var /** @type {?} */ treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
	            return new ParseTreeResult(treeAndErrors.rootNodes, ((tokensAndErrors.errors)).concat(treeAndErrors.errors));
	        };
	        return Parser;
	    }());
	    var _TreeBuilder = (function () {
	        /**
	         * @param {?} tokens
	         * @param {?} getTagDefinition
	         */
	        function _TreeBuilder(tokens, getTagDefinition) {
	            this.tokens = tokens;
	            this.getTagDefinition = getTagDefinition;
	            this._index = -1;
	            this._rootNodes = [];
	            this._errors = [];
	            this._elementStack = [];
	            this._advance();
	        }
	        /**
	         * @return {?}
	         */
	        _TreeBuilder.prototype.build = function () {
	            while (this._peek.type !== TokenType$1.EOF) {
	                if (this._peek.type === TokenType$1.TAG_OPEN_START) {
	                    this._consumeStartTag(this._advance());
	                }
	                else if (this._peek.type === TokenType$1.TAG_CLOSE) {
	                    this._consumeEndTag(this._advance());
	                }
	                else if (this._peek.type === TokenType$1.CDATA_START) {
	                    this._closeVoidElement();
	                    this._consumeCdata(this._advance());
	                }
	                else if (this._peek.type === TokenType$1.COMMENT_START) {
	                    this._closeVoidElement();
	                    this._consumeComment(this._advance());
	                }
	                else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT ||
	                    this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
	                    this._closeVoidElement();
	                    this._consumeText(this._advance());
	                }
	                else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
	                    this._consumeExpansion(this._advance());
	                }
	                else {
	                    // Skip all other tokens...
	                    this._advance();
	                }
	            }
	            return new ParseTreeResult(this._rootNodes, this._errors);
	        };
	        /**
	         * @return {?}
	         */
	        _TreeBuilder.prototype._advance = function () {
	            var /** @type {?} */ prev = this._peek;
	            if (this._index < this.tokens.length - 1) {
	                // Note: there is always an EOF token at the end
	                this._index++;
	            }
	            this._peek = this.tokens[this._index];
	            return prev;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        _TreeBuilder.prototype._advanceIf = function (type) {
	            if (this._peek.type === type) {
	                return this._advance();
	            }
	            return null;
	        };
	        /**
	         * @param {?} startToken
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeCdata = function (startToken) {
	            this._consumeText(this._advance());
	            this._advanceIf(TokenType$1.CDATA_END);
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeComment = function (token) {
	            var /** @type {?} */ text = this._advanceIf(TokenType$1.RAW_TEXT);
	            this._advanceIf(TokenType$1.COMMENT_END);
	            var /** @type {?} */ value = isPresent(text) ? text.parts[0].trim() : null;
	            this._addToParent(new Comment(value, token.sourceSpan));
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeExpansion = function (token) {
	            var /** @type {?} */ switchValue = this._advance();
	            var /** @type {?} */ type = this._advance();
	            var /** @type {?} */ cases = [];
	            // read =
	            while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
	                var /** @type {?} */ expCase = this._parseExpansionCase();
	                if (!expCase)
	                    return; // error
	                cases.push(expCase);
	            }
	            // read the final }
	            if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
	                this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
	                return;
	            }
	            var /** @type {?} */ sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
	            this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
	            this._advance();
	        };
	        /**
	         * @return {?}
	         */
	        _TreeBuilder.prototype._parseExpansionCase = function () {
	            var /** @type {?} */ value = this._advance();
	            // read {
	            if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
	                this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
	                return null;
	            }
	            // read until }
	            var /** @type {?} */ start = this._advance();
	            var /** @type {?} */ exp = this._collectExpansionExpTokens(start);
	            if (!exp)
	                return null;
	            var /** @type {?} */ end = this._advance();
	            exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
	            // parse everything in between { and }
	            var /** @type {?} */ parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
	            if (parsedExp.errors.length > 0) {
	                this._errors = this._errors.concat(/** @type {?} */ (parsedExp.errors));
	                return null;
	            }
	            var /** @type {?} */ sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
	            var /** @type {?} */ expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
	            return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
	            var /** @type {?} */ exp = [];
	            var /** @type {?} */ expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
	            while (true) {
	                if (this._peek.type === TokenType$1.EXPANSION_FORM_START ||
	                    this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
	                    expansionFormStack.push(this._peek.type);
	                }
	                if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
	                    if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
	                        expansionFormStack.pop();
	                        if (expansionFormStack.length == 0)
	                            return exp;
	                    }
	                    else {
	                        this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                        return null;
	                    }
	                }
	                if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
	                    if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
	                        expansionFormStack.pop();
	                    }
	                    else {
	                        this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                        return null;
	                    }
	                }
	                if (this._peek.type === TokenType$1.EOF) {
	                    this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                    return null;
	                }
	                exp.push(this._advance());
	            }
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeText = function (token) {
	            var /** @type {?} */ text = token.parts[0];
	            if (text.length > 0 && text[0] == '\n') {
	                var /** @type {?} */ parent_1 = this._getParentElement();
	                if (isPresent(parent_1) && parent_1.children.length == 0 &&
	                    this.getTagDefinition(parent_1.name).ignoreFirstLf) {
	                    text = text.substring(1);
	                }
	            }
	            if (text.length > 0) {
	                this._addToParent(new Text(text, token.sourceSpan));
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _TreeBuilder.prototype._closeVoidElement = function () {
	            if (this._elementStack.length > 0) {
	                var /** @type {?} */ el = this._elementStack[this._elementStack.length - 1];
	                if (this.getTagDefinition(el.name).isVoid) {
	                    this._elementStack.pop();
	                }
	            }
	        };
	        /**
	         * @param {?} startTagToken
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
	            var /** @type {?} */ prefix = startTagToken.parts[0];
	            var /** @type {?} */ name = startTagToken.parts[1];
	            var /** @type {?} */ attrs = [];
	            while (this._peek.type === TokenType$1.ATTR_NAME) {
	                attrs.push(this._consumeAttr(this._advance()));
	            }
	            var /** @type {?} */ fullName = this._getElementFullName(prefix, name, this._getParentElement());
	            var /** @type {?} */ selfClosing = false;
	            // Note: There could have been a tokenizer error
	            // so that we don't get a token for the end tag...
	            if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
	                this._advance();
	                selfClosing = true;
	                var /** @type {?} */ tagDef = this.getTagDefinition(fullName);
	                if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
	                    this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
	                }
	            }
	            else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
	                this._advance();
	                selfClosing = false;
	            }
	            var /** @type {?} */ end = this._peek.sourceSpan.start;
	            var /** @type {?} */ span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
	            var /** @type {?} */ el = new Element(fullName, attrs, [], span, span, null);
	            this._pushElement(el);
	            if (selfClosing) {
	                this._popElement(fullName);
	                el.endSourceSpan = span;
	            }
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        _TreeBuilder.prototype._pushElement = function (el) {
	            if (this._elementStack.length > 0) {
	                var /** @type {?} */ parentEl = this._elementStack[this._elementStack.length - 1];
	                if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
	                    this._elementStack.pop();
	                }
	            }
	            var /** @type {?} */ tagDef = this.getTagDefinition(el.name);
	            var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;
	            if (parent && tagDef.requireExtraParent(parent.name)) {
	                var /** @type {?} */ newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	                this._insertBeforeContainer(parent, container, newParent);
	            }
	            this._addToParent(el);
	            this._elementStack.push(el);
	        };
	        /**
	         * @param {?} endTagToken
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
	            var /** @type {?} */ fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
	            if (this._getParentElement()) {
	                this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
	            }
	            if (this.getTagDefinition(fullName).isVoid) {
	                this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
	            }
	            else if (!this._popElement(fullName)) {
	                this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
	            }
	        };
	        /**
	         * @param {?} fullName
	         * @return {?}
	         */
	        _TreeBuilder.prototype._popElement = function (fullName) {
	            for (var /** @type {?} */ stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
	                var /** @type {?} */ el = this._elementStack[stackIndex];
	                if (el.name == fullName) {
	                    this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
	                    return true;
	                }
	                if (!this.getTagDefinition(el.name).closedByParent) {
	                    return false;
	                }
	            }
	            return false;
	        };
	        /**
	         * @param {?} attrName
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeAttr = function (attrName) {
	            var /** @type {?} */ fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
	            var /** @type {?} */ end = attrName.sourceSpan.end;
	            var /** @type {?} */ value = '';
	            var /** @type {?} */ valueSpan;
	            if (this._peek.type === TokenType$1.ATTR_VALUE) {
	                var /** @type {?} */ valueToken = this._advance();
	                value = valueToken.parts[0];
	                end = valueToken.sourceSpan.end;
	                valueSpan = valueToken.sourceSpan;
	            }
	            return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
	        };
	        /**
	         * @return {?}
	         */
	        _TreeBuilder.prototype._getParentElement = function () {
	            return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
	        };
	        /**
	         * Returns the parent in the DOM and the container.
	         *
	         * `<ng-container>` elements are skipped as they are not rendered as DOM element.
	         * @return {?}
	         */
	        _TreeBuilder.prototype._getParentElementSkippingContainers = function () {
	            var /** @type {?} */ container = null;
	            for (var /** @type {?} */ i = this._elementStack.length - 1; i >= 0; i--) {
	                if (this._elementStack[i].name !== 'ng-container') {
	                    return { parent: this._elementStack[i], container: container };
	                }
	                container = this._elementStack[i];
	            }
	            return { parent: this._elementStack[this._elementStack.length - 1], container: container };
	        };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        _TreeBuilder.prototype._addToParent = function (node) {
	            var /** @type {?} */ parent = this._getParentElement();
	            if (isPresent(parent)) {
	                parent.children.push(node);
	            }
	            else {
	                this._rootNodes.push(node);
	            }
	        };
	        /**
	         * Insert a node between the parent and the container.
	         * When no container is given, the node is appended as a child of the parent.
	         * Also updates the element stack accordingly.
	         *
	         * \@internal
	         * @param {?} parent
	         * @param {?} container
	         * @param {?} node
	         * @return {?}
	         */
	        _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
	            if (!container) {
	                this._addToParent(node);
	                this._elementStack.push(node);
	            }
	            else {
	                if (parent) {
	                    // replace the container with the new node in the children
	                    var /** @type {?} */ index = parent.children.indexOf(container);
	                    parent.children[index] = node;
	                }
	                else {
	                    this._rootNodes.push(node);
	                }
	                node.children.push(container);
	                this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
	            }
	        };
	        /**
	         * @param {?} prefix
	         * @param {?} localName
	         * @param {?} parentElement
	         * @return {?}
	         */
	        _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {
	            if (isBlank(prefix)) {
	                prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
	                if (isBlank(prefix) && isPresent(parentElement)) {
	                    prefix = getNsPrefix(parentElement.name);
	                }
	            }
	            return mergeNsAndName(prefix, localName);
	        };
	        return _TreeBuilder;
	    }());
	    /**
	     * @param {?} stack
	     * @param {?} element
	     * @return {?}
	     */
	    function lastOnStack(stack, element) {
	        return stack.length > 0 && stack[stack.length - 1] === element;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var Message = (function () {
	        /**
	         * @param {?} nodes message AST
	         * @param {?} placeholders maps placeholder names to static content
	         * @param {?} placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
	         * @param {?} meaning
	         * @param {?} description
	         */
	        function Message(nodes, placeholders, placeholderToMessage, meaning, description) {
	            this.nodes = nodes;
	            this.placeholders = placeholders;
	            this.placeholderToMessage = placeholderToMessage;
	            this.meaning = meaning;
	            this.description = description;
	        }
	        return Message;
	    }());
	    var Text$1 = (function () {
	        /**
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function Text(value, sourceSpan) {
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	        return Text;
	    }());
	    var Container = (function () {
	        /**
	         * @param {?} children
	         * @param {?} sourceSpan
	         */
	        function Container(children, sourceSpan) {
	            this.children = children;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Container.prototype.visit = function (visitor, context) { return visitor.visitContainer(this, context); };
	        return Container;
	    }());
	    var Icu = (function () {
	        /**
	         * @param {?} expression
	         * @param {?} type
	         * @param {?} cases
	         * @param {?} sourceSpan
	         */
	        function Icu(expression, type, cases, sourceSpan) {
	            this.expression = expression;
	            this.type = type;
	            this.cases = cases;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Icu.prototype.visit = function (visitor, context) { return visitor.visitIcu(this, context); };
	        return Icu;
	    }());
	    var TagPlaceholder = (function () {
	        /**
	         * @param {?} tag
	         * @param {?} attrs
	         * @param {?} startName
	         * @param {?} closeName
	         * @param {?} children
	         * @param {?} isVoid
	         * @param {?} sourceSpan
	         */
	        function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
	            this.tag = tag;
	            this.attrs = attrs;
	            this.startName = startName;
	            this.closeName = closeName;
	            this.children = children;
	            this.isVoid = isVoid;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        TagPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitTagPlaceholder(this, context); };
	        return TagPlaceholder;
	    }());
	    var Placeholder = (function () {
	        /**
	         * @param {?} value
	         * @param {?} name
	         * @param {?} sourceSpan
	         */
	        function Placeholder(value, name, sourceSpan) {
	            this.value = value;
	            this.name = name;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Placeholder.prototype.visit = function (visitor, context) { return visitor.visitPlaceholder(this, context); };
	        return Placeholder;
	    }());
	    var IcuPlaceholder = (function () {
	        /**
	         * @param {?} value
	         * @param {?} name
	         * @param {?} sourceSpan
	         */
	        function IcuPlaceholder(value, name, sourceSpan) {
	            this.value = value;
	            this.name = name;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        IcuPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitIcuPlaceholder(this, context); };
	        return IcuPlaceholder;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ TAG_TO_PLACEHOLDER_NAMES = {
	        'A': 'LINK',
	        'B': 'BOLD_TEXT',
	        'BR': 'LINE_BREAK',
	        'EM': 'EMPHASISED_TEXT',
	        'H1': 'HEADING_LEVEL1',
	        'H2': 'HEADING_LEVEL2',
	        'H3': 'HEADING_LEVEL3',
	        'H4': 'HEADING_LEVEL4',
	        'H5': 'HEADING_LEVEL5',
	        'H6': 'HEADING_LEVEL6',
	        'HR': 'HORIZONTAL_RULE',
	        'I': 'ITALIC_TEXT',
	        'LI': 'LIST_ITEM',
	        'LINK': 'MEDIA_LINK',
	        'OL': 'ORDERED_LIST',
	        'P': 'PARAGRAPH',
	        'Q': 'QUOTATION',
	        'S': 'STRIKETHROUGH_TEXT',
	        'SMALL': 'SMALL_TEXT',
	        'SUB': 'SUBSTRIPT',
	        'SUP': 'SUPERSCRIPT',
	        'TBODY': 'TABLE_BODY',
	        'TD': 'TABLE_CELL',
	        'TFOOT': 'TABLE_FOOTER',
	        'TH': 'TABLE_HEADER_CELL',
	        'THEAD': 'TABLE_HEADER',
	        'TR': 'TABLE_ROW',
	        'TT': 'MONOSPACED_TEXT',
	        'U': 'UNDERLINED_TEXT',
	        'UL': 'UNORDERED_LIST',
	    };
	    /**
	     * Creates unique names for placeholder with different content.
	     *
	     * Returns the same placeholder name when the content is identical.
	     *
	     * \@internal
	     */
	    var PlaceholderRegistry = (function () {
	        function PlaceholderRegistry() {
	            this._placeHolderNameCounts = {};
	            this._signatureToName = {};
	        }
	        /**
	         * @param {?} tag
	         * @param {?} attrs
	         * @param {?} isVoid
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {
	            var /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);
	            if (this._signatureToName[signature]) {
	                return this._signatureToName[signature];
	            }
	            var /** @type {?} */ upperTag = tag.toUpperCase();
	            var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	            var /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
	            this._signatureToName[signature] = name;
	            return name;
	        };
	        /**
	         * @param {?} tag
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {
	            var /** @type {?} */ signature = this._hashClosingTag(tag);
	            if (this._signatureToName[signature]) {
	                return this._signatureToName[signature];
	            }
	            var /** @type {?} */ upperTag = tag.toUpperCase();
	            var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	            var /** @type {?} */ name = this._generateUniqueName("CLOSE_" + baseName);
	            this._signatureToName[signature] = name;
	            return name;
	        };
	        /**
	         * @param {?} name
	         * @param {?} content
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {
	            var /** @type {?} */ upperName = name.toUpperCase();
	            var /** @type {?} */ signature = "PH: " + upperName + "=" + content;
	            if (this._signatureToName[signature]) {
	                return this._signatureToName[signature];
	            }
	            var /** @type {?} */ uniqueName = this._generateUniqueName(upperName);
	            this._signatureToName[signature] = uniqueName;
	            return uniqueName;
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype.getUniquePlaceholder = function (name) {
	            return this._generateUniqueName(name.toUpperCase());
	        };
	        /**
	         * @param {?} tag
	         * @param {?} attrs
	         * @param {?} isVoid
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {
	            var /** @type {?} */ start = "<" + tag;
	            var /** @type {?} */ strAttrs = Object.keys(attrs).sort().map(function (name) { return (" " + name + "=" + attrs[name]); }).join('');
	            var /** @type {?} */ end = isVoid ? '/>' : "></" + tag + ">";
	            return start + strAttrs + end;
	        };
	        /**
	         * @param {?} tag
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype._hashClosingTag = function (tag) { return this._hashTag("/" + tag, {}, false); };
	        /**
	         * @param {?} base
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype._generateUniqueName = function (base) {
	            var /** @type {?} */ seen = this._placeHolderNameCounts.hasOwnProperty(base);
	            if (!seen) {
	                this._placeHolderNameCounts[base] = 1;
	                return base;
	            }
	            var /** @type {?} */ id = this._placeHolderNameCounts[base];
	            this._placeHolderNameCounts[base] = id + 1;
	            return base + "_" + id;
	        };
	        return PlaceholderRegistry;
	    }());

	    var /** @type {?} */ _expParser = new Parser(new Lexer());
	    /**
	     * Returns a function converting html nodes to an i18n Message given an interpolationConfig
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    function createI18nMessageFactory(interpolationConfig) {
	        var /** @type {?} */ visitor = new _I18nVisitor(_expParser, interpolationConfig);
	        return function (nodes, meaning, description) {
	            return visitor.toI18nMessage(nodes, meaning, description);
	        };
	    }
	    var _I18nVisitor = (function () {
	        /**
	         * @param {?} _expressionParser
	         * @param {?} _interpolationConfig
	         */
	        function _I18nVisitor(_expressionParser, _interpolationConfig) {
	            this._expressionParser = _expressionParser;
	            this._interpolationConfig = _interpolationConfig;
	        }
	        /**
	         * @param {?} nodes
	         * @param {?} meaning
	         * @param {?} description
	         * @return {?}
	         */
	        _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description) {
	            this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
	            this._icuDepth = 0;
	            this._placeholderRegistry = new PlaceholderRegistry();
	            this._placeholderToContent = {};
	            this._placeholderToMessage = {};
	            var /** @type {?} */ i18nodes = visitAll(this, nodes, {});
	            return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description);
	        };
	        /**
	         * @param {?} el
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitElement = function (el, context) {
	            var /** @type {?} */ children = visitAll(this, el.children);
	            var /** @type {?} */ attrs = {};
	            el.attrs.forEach(function (attr) {
	                // Do not visit the attributes, translatable ones are top-level ASTs
	                attrs[attr.name] = attr.value;
	            });
	            var /** @type {?} */ isVoid = getHtmlTagDefinition(el.name).isVoid;
	            var /** @type {?} */ startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
	            this._placeholderToContent[startPhName] = el.sourceSpan.toString();
	            var /** @type {?} */ closePhName = '';
	            if (!isVoid) {
	                closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
	                this._placeholderToContent[closePhName] = "</" + el.name + ">";
	            }
	            return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
	            return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
	        };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitText = function (text, context) {
	            return this._visitTextWithInterpolation(text.value, text.sourceSpan);
	        };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitComment = function (comment, context) { return null; };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitExpansion = function (icu, context) {
	            var _this = this;
	            this._icuDepth++;
	            var /** @type {?} */ i18nIcuCases = {};
	            var /** @type {?} */ i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
	            icu.cases.forEach(function (caze) {
	                i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);
	            });
	            this._icuDepth--;
	            if (this._isIcu || this._icuDepth > 0) {
	                // Returns an ICU node when:
	                // - the message (vs a part of the message) is an ICU message, or
	                // - the ICU message is nested.
	                var /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder("VAR_" + icu.type);
	                i18nIcu.expressionPlaceholder = expPh;
	                this._placeholderToContent[expPh] = icu.switchValue;
	                return i18nIcu;
	            }
	            // Else returns a placeholder
	            // ICU placeholders should not be replaced with their original content but with the their
	            // translations. We need to create a new visitor (they are not re-entrant) to compute the
	            // message id.
	            // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
	            var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
	            var /** @type {?} */ visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
	            this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '');
	            return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
	        };
	        /**
	         * @param {?} icuCase
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {
	            throw new Error('Unreachable code');
	        };
	        /**
	         * @param {?} text
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {
	            var /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
	            if (!splitInterpolation) {
	                // No expression, return a single text
	                return new Text$1(text, sourceSpan);
	            }
	            // Return a group of text + expressions
	            var /** @type {?} */ nodes = [];
	            var /** @type {?} */ container = new Container(nodes, sourceSpan);
	            var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;
	            for (var /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {
	                var /** @type {?} */ expression = splitInterpolation.expressions[i];
	                var /** @type {?} */ baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
	                var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
	                if (splitInterpolation.strings[i].length) {
	                    // No need to add empty strings
	                    nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
	                }
	                nodes.push(new Placeholder(expression, phName, sourceSpan));
	                this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
	            }
	            // The last index contains no expression
	            var /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;
	            if (splitInterpolation.strings[lastStringIdx].length) {
	                nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
	            }
	            return container;
	        };
	        return _I18nVisitor;
	    }());
	    var /** @type {?} */ _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function _extractPlaceholderName(input) {
	        return input.split(_CUSTOM_PH_EXP)[1];
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * An i18n error.
	     */
	    var I18nError = (function (_super) {
	        __extends$7(I18nError, _super);
	        /**
	         * @param {?} span
	         * @param {?} msg
	         */
	        function I18nError(span, msg) {
	            _super.call(this, span, msg);
	        }
	        return I18nError;
	    }(ParseError));

	    var /** @type {?} */ _I18N_ATTR = 'i18n';
	    var /** @type {?} */ _I18N_ATTR_PREFIX = 'i18n-';
	    var /** @type {?} */ _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
	    /**
	     * Extract translatable messages from an html AST
	     * @param {?} nodes
	     * @param {?} interpolationConfig
	     * @param {?} implicitTags
	     * @param {?} implicitAttrs
	     * @return {?}
	     */
	    function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
	        var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);
	        return visitor.extract(nodes, interpolationConfig);
	    }
	    /**
	     * @param {?} nodes
	     * @param {?} translations
	     * @param {?} interpolationConfig
	     * @param {?} implicitTags
	     * @param {?} implicitAttrs
	     * @return {?}
	     */
	    function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
	        var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);
	        return visitor.merge(nodes, translations, interpolationConfig);
	    }
	    var ExtractionResult = (function () {
	        /**
	         * @param {?} messages
	         * @param {?} errors
	         */
	        function ExtractionResult(messages, errors) {
	            this.messages = messages;
	            this.errors = errors;
	        }
	        return ExtractionResult;
	    }());
	    var _VisitorMode = {};
	    _VisitorMode.Extract = 0;
	    _VisitorMode.Merge = 1;
	    _VisitorMode[_VisitorMode.Extract] = "Extract";
	    _VisitorMode[_VisitorMode.Merge] = "Merge";
	    /**
	     * This Visitor is used:
	     * 1. to extract all the translatable strings from an html AST (see `extract()`),
	     * 2. to replace the translatable strings with the actual translations (see `merge()`)
	     *
	     * \@internal
	     */
	    var _Visitor = (function () {
	        /**
	         * @param {?} _implicitTags
	         * @param {?} _implicitAttrs
	         */
	        function _Visitor(_implicitTags, _implicitAttrs) {
	            this._implicitTags = _implicitTags;
	            this._implicitAttrs = _implicitAttrs;
	        }
	        /**
	         * Extracts the messages from the tree
	         * @param {?} nodes
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        _Visitor.prototype.extract = function (nodes, interpolationConfig) {
	            var _this = this;
	            this._init(_VisitorMode.Extract, interpolationConfig);
	            nodes.forEach(function (node) { return node.visit(_this, null); });
	            if (this._inI18nBlock) {
	                this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	            }
	            return new ExtractionResult(this._messages, this._errors);
	        };
	        /**
	         * Returns a tree where all translatable nodes are translated
	         * @param {?} nodes
	         * @param {?} translations
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {
	            this._init(_VisitorMode.Merge, interpolationConfig);
	            this._translations = translations;
	            // Construct a single fake root element
	            var /** @type {?} */ wrapper = new Element('wrapper', [], nodes, null, null, null);
	            var /** @type {?} */ translatedNode = wrapper.visit(this, null);
	            if (this._inI18nBlock) {
	                this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	            }
	            return new ParseTreeResult(translatedNode.children, this._errors);
	        };
	        /**
	         * @param {?} icuCase
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitExpansionCase = function (icuCase, context) {
	            // Parse cases for translatable html attributes
	            var /** @type {?} */ expression = visitAll(this, icuCase.expression, context);
	            if (this._mode === _VisitorMode.Merge) {
	                return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
	            }
	        };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitExpansion = function (icu, context) {
	            this._mayBeAddBlockChildren(icu);
	            var /** @type {?} */ wasInIcu = this._inIcu;
	            if (!this._inIcu) {
	                // nested ICU messages should not be extracted but top-level translated as a whole
	                if (this._isInTranslatableSection) {
	                    this._addMessage([icu]);
	                }
	                this._inIcu = true;
	            }
	            var /** @type {?} */ cases = visitAll(this, icu.cases, context);
	            if (this._mode === _VisitorMode.Merge) {
	                icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
	            }
	            this._inIcu = wasInIcu;
	            return icu;
	        };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitComment = function (comment, context) {
	            var /** @type {?} */ isOpening = _isOpeningComment(comment);
	            if (isOpening && this._isInTranslatableSection) {
	                this._reportError(comment, 'Could not start a block inside a translatable section');
	                return;
	            }
	            var /** @type {?} */ isClosing = _isClosingComment(comment);
	            if (isClosing && !this._inI18nBlock) {
	                this._reportError(comment, 'Trying to close an unopened block');
	                return;
	            }
	            if (!this._inI18nNode && !this._inIcu) {
	                if (!this._inI18nBlock) {
	                    if (isOpening) {
	                        this._inI18nBlock = true;
	                        this._blockStartDepth = this._depth;
	                        this._blockChildren = [];
	                        this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
	                        this._openTranslatableSection(comment);
	                    }
	                }
	                else {
	                    if (isClosing) {
	                        if (this._depth == this._blockStartDepth) {
	                            this._closeTranslatableSection(comment, this._blockChildren);
	                            this._inI18nBlock = false;
	                            var /** @type {?} */ message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
	                            // merge attributes in sections
	                            var /** @type {?} */ nodes = this._translateMessage(comment, message);
	                            return visitAll(this, nodes);
	                        }
	                        else {
	                            this._reportError(comment, 'I18N blocks should not cross element boundaries');
	                            return;
	                        }
	                    }
	                }
	            }
	        };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitText = function (text, context) {
	            if (this._isInTranslatableSection) {
	                this._mayBeAddBlockChildren(text);
	            }
	            return text;
	        };
	        /**
	         * @param {?} el
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitElement = function (el, context) {
	            var _this = this;
	            this._mayBeAddBlockChildren(el);
	            this._depth++;
	            var /** @type {?} */ wasInI18nNode = this._inI18nNode;
	            var /** @type {?} */ wasInImplicitNode = this._inImplicitNode;
	            var /** @type {?} */ childNodes = [];
	            var /** @type {?} */ translatedChildNodes;
	            // Extract:
	            // - top level nodes with the (implicit) "i18n" attribute if not already in a section
	            // - ICU messages
	            var /** @type {?} */ i18nAttr = _getI18nAttr(el);
	            var /** @type {?} */ i18nMeta = i18nAttr ? i18nAttr.value : '';
	            var /** @type {?} */ isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) && !this._inIcu &&
	                !this._isInTranslatableSection;
	            var /** @type {?} */ isTopLevelImplicit = !wasInImplicitNode && isImplicit;
	            this._inImplicitNode = wasInImplicitNode || isImplicit;
	            if (!this._isInTranslatableSection && !this._inIcu) {
	                if (i18nAttr || isTopLevelImplicit) {
	                    this._inI18nNode = true;
	                    var /** @type {?} */ message = this._addMessage(el.children, i18nMeta);
	                    translatedChildNodes = this._translateMessage(el, message);
	                }
	                if (this._mode == _VisitorMode.Extract) {
	                    var /** @type {?} */ isTranslatable = i18nAttr || isTopLevelImplicit;
	                    if (isTranslatable)
	                        this._openTranslatableSection(el);
	                    visitAll(this, el.children);
	                    if (isTranslatable)
	                        this._closeTranslatableSection(el, el.children);
	                }
	            }
	            else {
	                if (i18nAttr || isTopLevelImplicit) {
	                    this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
	                }
	                if (this._mode == _VisitorMode.Extract) {
	                    // Descend into child nodes for extraction
	                    visitAll(this, el.children);
	                }
	            }
	            if (this._mode === _VisitorMode.Merge) {
	                var /** @type {?} */ visitNodes = translatedChildNodes || el.children;
	                visitNodes.forEach(function (child) {
	                    var /** @type {?} */ visited = child.visit(_this, context);
	                    if (visited && !_this._isInTranslatableSection) {
	                        // Do not add the children from translatable sections (= i18n blocks here)
	                        // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)
	                        childNodes = childNodes.concat(visited);
	                    }
	                });
	            }
	            this._visitAttributesOf(el);
	            this._depth--;
	            this._inI18nNode = wasInI18nNode;
	            this._inImplicitNode = wasInImplicitNode;
	            if (this._mode === _VisitorMode.Merge) {
	                var /** @type {?} */ translatedAttrs = this._translateAttributes(el);
	                return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	            }
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitAttribute = function (attribute, context) {
	            throw new Error('unreachable code');
	        };
	        /**
	         * @param {?} mode
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        _Visitor.prototype._init = function (mode, interpolationConfig) {
	            this._mode = mode;
	            this._inI18nBlock = false;
	            this._inI18nNode = false;
	            this._depth = 0;
	            this._inIcu = false;
	            this._msgCountAtSectionStart = void 0;
	            this._errors = [];
	            this._messages = [];
	            this._inImplicitNode = false;
	            this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        _Visitor.prototype._visitAttributesOf = function (el) {
	            var _this = this;
	            var /** @type {?} */ explicitAttrNameToValue = {};
	            var /** @type {?} */ implicitAttrNames = this._implicitAttrs[el.name] || [];
	            el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })
	                .forEach(function (attr) { return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	                attr.value; });
	            el.attrs.forEach(function (attr) {
	                if (attr.name in explicitAttrNameToValue) {
	                    _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
	                }
	                else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {
	                    _this._addMessage([attr]);
	                }
	            });
	        };
	        /**
	         * @param {?} ast
	         * @param {?=} meaningAndDesc
	         * @return {?}
	         */
	        _Visitor.prototype._addMessage = function (ast, meaningAndDesc) {
	            if (ast.length == 0 ||
	                ast.length == 1 && ast[0] instanceof Attribute$1 && !((ast[0])).value) {
	                // Do not create empty messages
	                return;
	            }
	            var _a = _splitMeaningAndDesc(meaningAndDesc), meaning = _a[0], description = _a[1];
	            var /** @type {?} */ message = this._createI18nMessage(ast, meaning, description);
	            this._messages.push(message);
	            return message;
	        };
	        /**
	         * @param {?} el
	         * @param {?} message
	         * @return {?}
	         */
	        _Visitor.prototype._translateMessage = function (el, message) {
	            if (message && this._mode === _VisitorMode.Merge) {
	                var /** @type {?} */ nodes = this._translations.get(message);
	                if (nodes) {
	                    return nodes;
	                }
	                this._reportError(el, "Translation unavailable for message id=\"" + this._translations.digest(message) + "\"");
	            }
	            return [];
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        _Visitor.prototype._translateAttributes = function (el) {
	            var _this = this;
	            var /** @type {?} */ attributes = el.attrs;
	            var /** @type {?} */ i18nAttributeMeanings = {};
	            attributes.forEach(function (attr) {
	                if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                    i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	                        _splitMeaningAndDesc(attr.value)[0];
	                }
	            });
	            var /** @type {?} */ translatedAttributes = [];
	            attributes.forEach(function (attr) {
	                if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                    // strip i18n specific attributes
	                    return;
	                }
	                if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
	                    var /** @type {?} */ meaning = i18nAttributeMeanings[attr.name];
	                    var /** @type {?} */ message = _this._createI18nMessage([attr], meaning, '');
	                    var /** @type {?} */ nodes = _this._translations.get(message);
	                    if (nodes) {
	                        if (nodes.length == 0) {
	                            translatedAttributes.push(new Attribute$1(attr.name, '', attr.sourceSpan));
	                        }
	                        else if (nodes[0] instanceof Text) {
	                            var /** @type {?} */ value = ((nodes[0])).value;
	                            translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
	                        }
	                        else {
	                            _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + _this._translations.digest(message) + "\")");
	                        }
	                    }
	                    else {
	                        _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + _this._translations.digest(message) + "\")");
	                    }
	                }
	                else {
	                    translatedAttributes.push(attr);
	                }
	            });
	            return translatedAttributes;
	        };
	        /**
	         * Add the node as a child of the block when:
	         * - we are in a block,
	         * - we are not inside a ICU message (those are handled separately),
	         * - the node is a "direct child" of the block
	         * @param {?} node
	         * @return {?}
	         */
	        _Visitor.prototype._mayBeAddBlockChildren = function (node) {
	            if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
	                this._blockChildren.push(node);
	            }
	        };
	        /**
	         * Marks the start of a section, see `_closeTranslatableSection`
	         * @param {?} node
	         * @return {?}
	         */
	        _Visitor.prototype._openTranslatableSection = function (node) {
	            if (this._isInTranslatableSection) {
	                this._reportError(node, 'Unexpected section start');
	            }
	            else {
	                this._msgCountAtSectionStart = this._messages.length;
	            }
	        };
	        Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
	            /**
	             * A translatable section could be:
	             * - the content of translatable element,
	             * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
	             * @return {?}
	             */
	            get: function () {
	                return this._msgCountAtSectionStart !== void 0;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Terminates a section.
	         *
	         * If a section has only one significant children (comments not significant) then we should not
	         * keep the message from this children:
	         *
	         * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
	         * - one for the <p> content with meaning and description,
	         * - another one for the ICU message.
	         *
	         * In this case the last message is discarded as it contains less information (the AST is
	         * otherwise identical).
	         *
	         * Note that we should still keep messages extracted from attributes inside the section (ie in the
	         * ICU message here)
	         * @param {?} node
	         * @param {?} directChildren
	         * @return {?}
	         */
	        _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {
	            if (!this._isInTranslatableSection) {
	                this._reportError(node, 'Unexpected section end');
	                return;
	            }
	            var /** @type {?} */ startIndex = this._msgCountAtSectionStart;
	            var /** @type {?} */ significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof Comment ? 0 : 1); }, 0);
	            if (significantChildren == 1) {
	                for (var /** @type {?} */ i = this._messages.length - 1; i >= startIndex; i--) {
	                    var /** @type {?} */ ast = this._messages[i].nodes;
	                    if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
	                        this._messages.splice(i, 1);
	                        break;
	                    }
	                }
	            }
	            this._msgCountAtSectionStart = void 0;
	        };
	        /**
	         * @param {?} node
	         * @param {?} msg
	         * @return {?}
	         */
	        _Visitor.prototype._reportError = function (node, msg) {
	            this._errors.push(new I18nError(node.sourceSpan, msg));
	        };
	        return _Visitor;
	    }());
	    /**
	     * @param {?} n
	     * @return {?}
	     */
	    function _isOpeningComment(n) {
	        return n instanceof Comment && n.value && n.value.startsWith('i18n');
	    }
	    /**
	     * @param {?} n
	     * @return {?}
	     */
	    function _isClosingComment(n) {
	        return n instanceof Comment && n.value && n.value === '/i18n';
	    }
	    /**
	     * @param {?} p
	     * @return {?}
	     */
	    function _getI18nAttr(p) {
	        return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;
	    }
	    /**
	     * @param {?} i18n
	     * @return {?}
	     */
	    function _splitMeaningAndDesc(i18n) {
	        if (!i18n)
	            return ['', ''];
	        var /** @type {?} */ pipeIndex = i18n.indexOf('|');
	        return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
	    }

	    var XmlTagDefinition = (function () {
	        function XmlTagDefinition() {
	            this.closedByParent = false;
	            this.contentType = TagContentType.PARSABLE_DATA;
	            this.isVoid = false;
	            this.ignoreFirstLf = false;
	            this.canSelfClose = true;
	        }
	        /**
	         * @param {?} currentParent
	         * @return {?}
	         */
	        XmlTagDefinition.prototype.requireExtraParent = function (currentParent) { return false; };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        XmlTagDefinition.prototype.isClosedByChild = function (name) { return false; };
	        return XmlTagDefinition;
	    }());
	    var /** @type {?} */ _TAG_DEFINITION = new XmlTagDefinition();
	    /**
	     * @param {?} tagName
	     * @return {?}
	     */
	    function getXmlTagDefinition(tagName) {
	        return _TAG_DEFINITION;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$9 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var XmlParser = (function (_super) {
	        __extends$9(XmlParser, _super);
	        function XmlParser() {
	            _super.call(this, getXmlTagDefinition);
	        }
	        /**
	         * @param {?} source
	         * @param {?} url
	         * @param {?=} parseExpansionForms
	         * @return {?}
	         */
	        XmlParser.prototype.parse = function (source, url, parseExpansionForms) {
	            if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	            return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
	        };
	        return XmlParser;
	    }(Parser$1));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$10 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    function digest(message) {
	        return sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
	    }
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    function decimalDigest(message) {
	        var /** @type {?} */ visitor = new _SerializerIgnoreIcuExpVisitor();
	        var /** @type {?} */ parts = message.nodes.map(function (a) { return a.visit(visitor, null); });
	        return computeMsgId(parts.join(''), message.meaning);
	    }
	    /**
	     * Serialize the i18n ast to something xml-like in order to generate an UID.
	     *
	     * The visitor is also used in the i18n parser tests
	     *
	     * \@internal
	     */
	    var _SerializerVisitor = (function () {
	        function _SerializerVisitor() {
	        }
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitText = function (text, context) { return text.value; };
	        /**
	         * @param {?} container
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitContainer = function (container, context) {
	            var _this = this;
	            return "[" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + "]";
	        };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitIcu = function (icu, context) {
	            var _this = this;
	            var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return (k + " {" + icu.cases[k].visit(_this) + "}"); });
	            return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
	        };
	        /**
	         * @param {?} ph
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	            var _this = this;
	            return ph.isVoid ?
	                "<ph tag name=\"" + ph.startName + "\"/>" :
	                "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
	        };
	        /**
	         * @param {?} ph
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
	            return ph.value ? "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>" : "<ph name=\"" + ph.name + "\"/>";
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	            return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
	        };
	        return _SerializerVisitor;
	    }());
	    var /** @type {?} */ serializerVisitor = new _SerializerVisitor();
	    /**
	     * @param {?} nodes
	     * @return {?}
	     */
	    function serializeNodes(nodes) {
	        return nodes.map(function (a) { return a.visit(serializerVisitor, null); });
	    }
	    /**
	     * Serialize the i18n ast to something xml-like in order to generate an UID.
	     *
	     * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
	     *
	     * \@internal
	     */
	    var _SerializerIgnoreIcuExpVisitor = (function (_super) {
	        __extends$10(_SerializerIgnoreIcuExpVisitor, _super);
	        function _SerializerIgnoreIcuExpVisitor() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function (icu, context) {
	            var _this = this;
	            var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return (k + " {" + icu.cases[k].visit(_this) + "}"); });
	            // Do not take the expression into account
	            return "{" + icu.type + ", " + strCases.join(', ') + "}";
	        };
	        return _SerializerIgnoreIcuExpVisitor;
	    }(_SerializerVisitor));
	    /**
	     * Compute the SHA1 of the given string
	     *
	     * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
	     *
	     * WARNING: this function has not been designed not tested with security in mind.
	     *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
	     * @param {?} str
	     * @return {?}
	     */
	    function sha1(str) {
	        var /** @type {?} */ utf8 = utf8Encode(str);
	        var /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);
	        var /** @type {?} */ len = utf8.length * 8;
	        var /** @type {?} */ w = new Array(80);
	        var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];
	        words32[len >> 5] |= 0x80 << (24 - len % 32);
	        words32[((len + 64 >> 9) << 4) + 15] = len;
	        for (var /** @type {?} */ i = 0; i < words32.length; i += 16) {
	            var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];
	            for (var /** @type {?} */ j = 0; j < 80; j++) {
	                if (j < 16) {
	                    w[j] = words32[i + j];
	                }
	                else {
	                    w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
	                }
	                var _c = fk(j, b, c, d), f = _c[0], k = _c[1];
	                var /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
	                _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
	            }
	            _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
	        }
	        return byteStringToHexString(words32ToByteString([a, b, c, d, e]));
	        var _d, _e;
	    }
	    /**
	     * @param {?} index
	     * @param {?} b
	     * @param {?} c
	     * @param {?} d
	     * @return {?}
	     */
	    function fk(index, b, c, d) {
	        if (index < 20) {
	            return [(b & c) | (~b & d), 0x5a827999];
	        }
	        if (index < 40) {
	            return [b ^ c ^ d, 0x6ed9eba1];
	        }
	        if (index < 60) {
	            return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
	        }
	        return [b ^ c ^ d, 0xca62c1d6];
	    }
	    /**
	     * Compute the fingerprint of the given string
	     *
	     * The output is 64 bit number encoded as a decimal string
	     *
	     * based on:
	     * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
	     * @param {?} str
	     * @return {?}
	     */
	    function fingerprint(str) {
	        var /** @type {?} */ utf8 = utf8Encode(str);
	        var _a = [hash32(utf8, 0), hash32(utf8, 102072)], hi = _a[0], lo = _a[1];
	        if (hi == 0 && (lo == 0 || lo == 1)) {
	            hi = hi ^ 0x130f9bef;
	            lo = lo ^ -0x6b5f56d8;
	        }
	        return [hi, lo];
	    }
	    /**
	     * @param {?} msg
	     * @param {?} meaning
	     * @return {?}
	     */
	    function computeMsgId(msg, meaning) {
	        var _a = fingerprint(msg), hi = _a[0], lo = _a[1];
	        if (meaning) {
	            var _b = fingerprint(meaning), him = _b[0], lom = _b[1];
	            _c = add64(rol64([hi, lo], 1), [him, lom]), hi = _c[0], lo = _c[1];
	        }
	        return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));
	        var _c;
	    }
	    /**
	     * @param {?} str
	     * @param {?} c
	     * @return {?}
	     */
	    function hash32(str, c) {
	        var _a = [0x9e3779b9, 0x9e3779b9], a = _a[0], b = _a[1];
	        var /** @type {?} */ i;
	        var /** @type {?} */ len = str.length;
	        for (i = 0; i + 12 <= len; i += 12) {
	            a = add32(a, wordAt(str, i, Endian.Little));
	            b = add32(b, wordAt(str, i + 4, Endian.Little));
	            c = add32(c, wordAt(str, i + 8, Endian.Little));
	            _b = mix([a, b, c]), a = _b[0], b = _b[1], c = _b[2];
	        }
	        a = add32(a, wordAt(str, i, Endian.Little));
	        b = add32(b, wordAt(str, i + 4, Endian.Little));
	        // the first byte of c is reserved for the length
	        c = add32(c, len);
	        c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);
	        return mix([a, b, c])[2];
	        var _b;
	    }
	    /**
	     * @param {?} __0
	     * @return {?}
	     */
	    function mix(_a) {
	        var a = _a[0], b = _a[1], c = _a[2];
	        a = sub32(a, b);
	        a = sub32(a, c);
	        a ^= c >>> 13;
	        b = sub32(b, c);
	        b = sub32(b, a);
	        b ^= a << 8;
	        c = sub32(c, a);
	        c = sub32(c, b);
	        c ^= b >>> 13;
	        a = sub32(a, b);
	        a = sub32(a, c);
	        a ^= c >>> 12;
	        b = sub32(b, c);
	        b = sub32(b, a);
	        b ^= a << 16;
	        c = sub32(c, a);
	        c = sub32(c, b);
	        c ^= b >>> 5;
	        a = sub32(a, b);
	        a = sub32(a, c);
	        a ^= c >>> 3;
	        b = sub32(b, c);
	        b = sub32(b, a);
	        b ^= a << 10;
	        c = sub32(c, a);
	        c = sub32(c, b);
	        c ^= b >>> 15;
	        return [a, b, c];
	    }
	    var Endian = {};
	    Endian.Little = 0;
	    Endian.Big = 1;
	    Endian[Endian.Little] = "Little";
	    Endian[Endian.Big] = "Big";
	    /**
	     * @param {?} str
	     * @return {?}
	     */
	    function utf8Encode(str) {
	        var /** @type {?} */ encoded = '';
	        for (var /** @type {?} */ index = 0; index < str.length; index++) {
	            var /** @type {?} */ codePoint = decodeSurrogatePairs(str, index);
	            if (codePoint <= 0x7f) {
	                encoded += String.fromCharCode(codePoint);
	            }
	            else if (codePoint <= 0x7ff) {
	                encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
	            }
	            else if (codePoint <= 0xffff) {
	                encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
	            }
	            else if (codePoint <= 0x1fffff) {
	                encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
	            }
	        }
	        return encoded;
	    }
	    /**
	     * @param {?} str
	     * @param {?} index
	     * @return {?}
	     */
	    function decodeSurrogatePairs(str, index) {
	        if (index < 0 || index >= str.length) {
	            throw new Error("index=" + index + " is out of range in \"" + str + "\"");
	        }
	        var /** @type {?} */ high = str.charCodeAt(index);
	        if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
	            var /** @type {?} */ low = byteAt(str, index + 1);
	            if (low >= 0xdc00 && low <= 0xdfff) {
	                return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
	            }
	        }
	        return high;
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function add32(a, b) {
	        return add32to64(a, b)[1];
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function add32to64(a, b) {
	        var /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);
	        var /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);
	        return [high >>> 16, (high << 16) | (low & 0xffff)];
	    }
	    /**
	     * @param {?} __0
	     * @param {?} __1
	     * @return {?}
	     */
	    function add64(_a, _b) {
	        var ah = _a[0], al = _a[1];
	        var bh = _b[0], bl = _b[1];
	        var _c = add32to64(al, bl), carry = _c[0], l = _c[1];
	        var /** @type {?} */ h = add32(add32(ah, bh), carry);
	        return [h, l];
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function sub32(a, b) {
	        var /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);
	        var /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);
	        return (high << 16) | (low & 0xffff);
	    }
	    /**
	     * @param {?} a
	     * @param {?} count
	     * @return {?}
	     */
	    function rol32(a, count) {
	        return (a << count) | (a >>> (32 - count));
	    }
	    /**
	     * @param {?} __0
	     * @param {?} count
	     * @return {?}
	     */
	    function rol64(_a, count) {
	        var hi = _a[0], lo = _a[1];
	        var /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));
	        var /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));
	        return [h, l];
	    }
	    /**
	     * @param {?} str
	     * @param {?} endian
	     * @return {?}
	     */
	    function stringToWords32(str, endian) {
	        var /** @type {?} */ words32 = Array((str.length + 3) >>> 2);
	        for (var /** @type {?} */ i = 0; i < words32.length; i++) {
	            words32[i] = wordAt(str, i * 4, endian);
	        }
	        return words32;
	    }
	    /**
	     * @param {?} str
	     * @param {?} index
	     * @return {?}
	     */
	    function byteAt(str, index) {
	        return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;
	    }
	    /**
	     * @param {?} str
	     * @param {?} index
	     * @param {?} endian
	     * @return {?}
	     */
	    function wordAt(str, index, endian) {
	        var /** @type {?} */ word = 0;
	        if (endian === Endian.Big) {
	            for (var /** @type {?} */ i = 0; i < 4; i++) {
	                word += byteAt(str, index + i) << (24 - 8 * i);
	            }
	        }
	        else {
	            for (var /** @type {?} */ i = 0; i < 4; i++) {
	                word += byteAt(str, index + i) << 8 * i;
	            }
	        }
	        return word;
	    }
	    /**
	     * @param {?} words32
	     * @return {?}
	     */
	    function words32ToByteString(words32) {
	        return words32.reduce(function (str, word) { return str + word32ToByteString(word); }, '');
	    }
	    /**
	     * @param {?} word
	     * @return {?}
	     */
	    function word32ToByteString(word) {
	        var /** @type {?} */ str = '';
	        for (var /** @type {?} */ i = 0; i < 4; i++) {
	            str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);
	        }
	        return str;
	    }
	    /**
	     * @param {?} str
	     * @return {?}
	     */
	    function byteStringToHexString(str) {
	        var /** @type {?} */ hex = '';
	        for (var /** @type {?} */ i = 0; i < str.length; i++) {
	            var /** @type {?} */ b = byteAt(str, i);
	            hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);
	        }
	        return hex.toLowerCase();
	    }
	    /**
	     * @param {?} str
	     * @return {?}
	     */
	    function byteStringToDecString(str) {
	        var /** @type {?} */ decimal = '';
	        var /** @type {?} */ toThePower = '1';
	        for (var /** @type {?} */ i = str.length - 1; i >= 0; i--) {
	            decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));
	            toThePower = numberTimesBigInt(256, toThePower);
	        }
	        return decimal.split('').reverse().join('');
	    }
	    /**
	     * @param {?} x
	     * @param {?} y
	     * @return {?}
	     */
	    function addBigInt(x, y) {
	        var /** @type {?} */ sum = '';
	        var /** @type {?} */ len = Math.max(x.length, y.length);
	        for (var /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {
	            var /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);
	            if (tmpSum >= 10) {
	                carry = 1;
	                sum += tmpSum - 10;
	            }
	            else {
	                carry = 0;
	                sum += tmpSum;
	            }
	        }
	        return sum;
	    }
	    /**
	     * @param {?} num
	     * @param {?} b
	     * @return {?}
	     */
	    function numberTimesBigInt(num, b) {
	        var /** @type {?} */ product = '';
	        var /** @type {?} */ bToThePower = b;
	        for (; num !== 0; num = num >>> 1) {
	            if (num & 1)
	                product = addBigInt(product, bToThePower);
	            bToThePower = addBigInt(bToThePower, bToThePower);
	        }
	        return product;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @abstract
	     */
	    var Serializer = (function () {
	        function Serializer() {
	        }
	        /**
	         * @abstract
	         * @param {?} messages
	         * @return {?}
	         */
	        Serializer.prototype.write = function (messages) { };
	        /**
	         * @abstract
	         * @param {?} content
	         * @param {?} url
	         * @return {?}
	         */
	        Serializer.prototype.load = function (content, url) { };
	        /**
	         * @abstract
	         * @param {?} message
	         * @return {?}
	         */
	        Serializer.prototype.digest = function (message) { };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Serializer.prototype.createNameMapper = function (message) { return null; };
	        return Serializer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$11 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var _Visitor$1 = (function () {
	        function _Visitor() {
	        }
	        /**
	         * @param {?} tag
	         * @return {?}
	         */
	        _Visitor.prototype.visitTag = function (tag) {
	            var _this = this;
	            var /** @type {?} */ strAttrs = this._serializeAttributes(tag.attrs);
	            if (tag.children.length == 0) {
	                return "<" + tag.name + strAttrs + "/>";
	            }
	            var /** @type {?} */ strChildren = tag.children.map(function (node) { return node.visit(_this); });
	            return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
	        };
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        _Visitor.prototype.visitText = function (text) { return text.value; };
	        /**
	         * @param {?} decl
	         * @return {?}
	         */
	        _Visitor.prototype.visitDeclaration = function (decl) {
	            return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
	        };
	        /**
	         * @param {?} attrs
	         * @return {?}
	         */
	        _Visitor.prototype._serializeAttributes = function (attrs) {
	            var /** @type {?} */ strAttrs = Object.keys(attrs).map(function (name) { return (name + "=\"" + attrs[name] + "\""); }).join(' ');
	            return strAttrs.length > 0 ? ' ' + strAttrs : '';
	        };
	        /**
	         * @param {?} doctype
	         * @return {?}
	         */
	        _Visitor.prototype.visitDoctype = function (doctype) {
	            return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
	        };
	        return _Visitor;
	    }());
	    var /** @type {?} */ _visitor = new _Visitor$1();
	    /**
	     * @param {?} nodes
	     * @return {?}
	     */
	    function serialize(nodes) {
	        return nodes.map(function (node) { return node.visit(_visitor); }).join('');
	    }
	    var Declaration = (function () {
	        /**
	         * @param {?} unescapedAttrs
	         */
	        function Declaration(unescapedAttrs) {
	            var _this = this;
	            this.attrs = {};
	            Object.keys(unescapedAttrs).forEach(function (k) {
	                _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	            });
	        }
	        /**
	         * @param {?} visitor
	         * @return {?}
	         */
	        Declaration.prototype.visit = function (visitor) { return visitor.visitDeclaration(this); };
	        return Declaration;
	    }());
	    var Doctype = (function () {
	        /**
	         * @param {?} rootTag
	         * @param {?} dtd
	         */
	        function Doctype(rootTag, dtd) {
	            this.rootTag = rootTag;
	            this.dtd = dtd;
	        }
	        ;
	        /**
	         * @param {?} visitor
	         * @return {?}
	         */
	        Doctype.prototype.visit = function (visitor) { return visitor.visitDoctype(this); };
	        return Doctype;
	    }());
	    var Tag = (function () {
	        /**
	         * @param {?} name
	         * @param {?=} unescapedAttrs
	         * @param {?=} children
	         */
	        function Tag(name, unescapedAttrs, children) {
	            var _this = this;
	            if (unescapedAttrs === void 0) { unescapedAttrs = {}; }
	            if (children === void 0) { children = []; }
	            this.name = name;
	            this.children = children;
	            this.attrs = {};
	            Object.keys(unescapedAttrs).forEach(function (k) {
	                _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	            });
	        }
	        /**
	         * @param {?} visitor
	         * @return {?}
	         */
	        Tag.prototype.visit = function (visitor) { return visitor.visitTag(this); };
	        return Tag;
	    }());
	    var Text$2 = (function () {
	        /**
	         * @param {?} unescapedValue
	         */
	        function Text(unescapedValue) {
	            this.value = _escapeXml(unescapedValue);
	        }
	        ;
	        /**
	         * @param {?} visitor
	         * @return {?}
	         */
	        Text.prototype.visit = function (visitor) { return visitor.visitText(this); };
	        return Text;
	    }());
	    var CR = (function (_super) {
	        __extends$11(CR, _super);
	        /**
	         * @param {?=} ws
	         */
	        function CR(ws) {
	            if (ws === void 0) { ws = 0; }
	            _super.call(this, "\n" + new Array(ws + 1).join(' '));
	        }
	        return CR;
	    }(Text$2));
	    var /** @type {?} */ _ESCAPED_CHARS = [
	        [/&/g, '&amp;'],
	        [/"/g, '&quot;'],
	        [/'/g, '&apos;'],
	        [/</g, '&lt;'],
	        [/>/g, '&gt;'],
	    ];
	    /**
	     * @param {?} text
	     * @return {?}
	     */
	    function _escapeXml(text) {
	        return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _VERSION = '1.2';
	    var /** @type {?} */ _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
	    // TODO(vicb): make this a param (s/_/-/)
	    var /** @type {?} */ _SOURCE_LANG = 'en';
	    var /** @type {?} */ _PLACEHOLDER_TAG = 'x';
	    var /** @type {?} */ _SOURCE_TAG = 'source';
	    var /** @type {?} */ _TARGET_TAG = 'target';
	    var /** @type {?} */ _UNIT_TAG = 'trans-unit';
	    var Xliff = (function (_super) {
	        __extends$8(Xliff, _super);
	        function Xliff() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} messages
	         * @return {?}
	         */
	        Xliff.prototype.write = function (messages) {
	            var _this = this;
	            var /** @type {?} */ visitor = new _WriteVisitor();
	            var /** @type {?} */ visited = {};
	            var /** @type {?} */ transUnits = [];
	            messages.forEach(function (message) {
	                var /** @type {?} */ id = _this.digest(message);
	                // deduplicate messages
	                if (visited[id])
	                    return;
	                visited[id] = true;
	                var /** @type {?} */ transUnit = new Tag(_UNIT_TAG, { id: id, datatype: 'html' });
	                transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));
	                if (message.description) {
	                    transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));
	                }
	                if (message.meaning) {
	                    transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));
	                }
	                transUnit.children.push(new CR(6));
	                transUnits.push(new CR(6), transUnit);
	            });
	            var /** @type {?} */ body = new Tag('body', {}, transUnits.concat([new CR(4)]));
	            var /** @type {?} */ file = new Tag('file', { 'source-language': _SOURCE_LANG, datatype: 'plaintext', original: 'ng2.template' }, [new CR(4), body, new CR(2)]);
	            var /** @type {?} */ xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);
	            return serialize([
	                new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()
	            ]);
	        };
	        /**
	         * @param {?} content
	         * @param {?} url
	         * @return {?}
	         */
	        Xliff.prototype.load = function (content, url) {
	            // xliff to xml nodes
	            var /** @type {?} */ xliffParser = new XliffParser();
	            var _a = xliffParser.parse(content, url), mlNodesByMsgId = _a.mlNodesByMsgId, errors = _a.errors;
	            // xml nodes to i18n nodes
	            var /** @type {?} */ i18nNodesByMsgId = {};
	            var /** @type {?} */ converter = new XmlToI18n();
	            Object.keys(mlNodesByMsgId).forEach(function (msgId) {
	                var _a = converter.convert(mlNodesByMsgId[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;
	                errors.push.apply(errors, e);
	                i18nNodesByMsgId[msgId] = i18nNodes;
	            });
	            if (errors.length) {
	                throw new Error("xliff parse errors:\n" + errors.join('\n'));
	            }
	            return i18nNodesByMsgId;
	        };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Xliff.prototype.digest = function (message) { return digest(message); };
	        return Xliff;
	    }(Serializer));
	    var _WriteVisitor = (function () {
	        function _WriteVisitor() {
	        }
	        /**
	         * @param {?} text
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	        /**
	         * @param {?} container
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitContainer = function (container, context) {
	            var _this = this;
	            var /** @type {?} */ nodes = [];
	            container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	            return nodes;
	        };
	        /**
	         * @param {?} icu
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitIcu = function (icu, context) {
	            if (this._isInIcu) {
	                // nested ICU is not supported
	                throw new Error('xliff does not support nested ICU messages');
	            }
	            this._isInIcu = true;
	            // TODO(vicb): support ICU messages
	            // https://lists.oasis-open.org/archives/xliff/201201/msg00028.html
	            // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-po/xliff-profile-po-1.2-cd02.html
	            var /** @type {?} */ nodes = [];
	            this._isInIcu = false;
	            return nodes;
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	            var /** @type {?} */ ctype = getCtypeForTag(ph.tag);
	            var /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype });
	            if (ph.isVoid) {
	                // void tags have no children nor closing tags
	                return [startTagPh];
	            }
	            var /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype });
	            return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {
	            return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	            return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	        };
	        /**
	         * @param {?} nodes
	         * @return {?}
	         */
	        _WriteVisitor.prototype.serialize = function (nodes) {
	            var _this = this;
	            this._isInIcu = false;
	            return (_a = []).concat.apply(_a, nodes.map(function (node) { return node.visit(_this); }));
	            var _a;
	        };
	        return _WriteVisitor;
	    }());
	    var XliffParser = (function () {
	        function XliffParser() {
	        }
	        /**
	         * @param {?} xliff
	         * @param {?} url
	         * @return {?}
	         */
	        XliffParser.prototype.parse = function (xliff, url) {
	            this._unitMlNodes = [];
	            this._mlNodesByMsgId = {};
	            var /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);
	            this._errors = xml.errors;
	            visitAll(this, xml.rootNodes, null);
	            return {
	                mlNodesByMsgId: this._mlNodesByMsgId,
	                errors: this._errors,
	            };
	        };
	        /**
	         * @param {?} element
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitElement = function (element, context) {
	            switch (element.name) {
	                case _UNIT_TAG:
	                    this._unitMlNodes = null;
	                    var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                    if (!idAttr) {
	                        this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
	                    }
	                    else {
	                        var /** @type {?} */ id = idAttr.value;
	                        if (this._mlNodesByMsgId.hasOwnProperty(id)) {
	                            this._addError(element, "Duplicated translations for msg " + id);
	                        }
	                        else {
	                            visitAll(this, element.children, null);
	                            if (this._unitMlNodes) {
	                                this._mlNodesByMsgId[id] = this._unitMlNodes;
	                            }
	                            else {
	                                this._addError(element, "Message " + id + " misses a translation");
	                            }
	                        }
	                    }
	                    break;
	                case _SOURCE_TAG:
	                    // ignore source message
	                    break;
	                case _TARGET_TAG:
	                    this._unitMlNodes = element.children;
	                    break;
	                default:
	                    // TODO(vicb): assert file structure, xliff version
	                    // For now only recurse on unhandled nodes
	                    visitAll(this, element.children, null);
	            }
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitAttribute = function (attribute, context) { };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitText = function (text, context) { };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitComment = function (comment, context) { };
	        /**
	         * @param {?} expansion
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitExpansion = function (expansion, context) { };
	        /**
	         * @param {?} expansionCase
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	        /**
	         * @param {?} node
	         * @param {?} message
	         * @return {?}
	         */
	        XliffParser.prototype._addError = function (node, message) {
	            this._errors.push(new I18nError(node.sourceSpan, message));
	        };
	        return XliffParser;
	    }());
	    var XmlToI18n = (function () {
	        function XmlToI18n() {
	        }
	        /**
	         * @param {?} nodes
	         * @return {?}
	         */
	        XmlToI18n.prototype.convert = function (nodes) {
	            this._errors = [];
	            return {
	                i18nNodes: visitAll(this, nodes),
	                errors: this._errors,
	            };
	        };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };
	        /**
	         * @param {?} el
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitElement = function (el, context) {
	            if (el.name === _PLACEHOLDER_TAG) {
	                var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'id'; });
	                if (nameAttr) {
	                    return new Placeholder('', nameAttr.value, el.sourceSpan);
	                }
	                this._addError(el, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
	            }
	            else {
	                this._addError(el, "Unexpected tag");
	            }
	        };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitExpansion = function (icu, context) { };
	        /**
	         * @param {?} icuCase
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) { };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitComment = function (comment, context) { };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitAttribute = function (attribute, context) { };
	        /**
	         * @param {?} node
	         * @param {?} message
	         * @return {?}
	         */
	        XmlToI18n.prototype._addError = function (node, message) {
	            this._errors.push(new I18nError(node.sourceSpan, message));
	        };
	        return XmlToI18n;
	    }());
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    function getCtypeForTag(tag) {
	        switch (tag.toLowerCase()) {
	            case 'br':
	                return 'lb';
	            case 'img':
	                return 'image';
	            default:
	                return "x-" + tag;
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$12 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _MESSAGES_TAG = 'messagebundle';
	    var /** @type {?} */ _MESSAGE_TAG = 'msg';
	    var /** @type {?} */ _PLACEHOLDER_TAG$1 = 'ph';
	    var /** @type {?} */ _EXEMPLE_TAG = 'ex';
	    var /** @type {?} */ _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
	    var Xmb = (function (_super) {
	        __extends$12(Xmb, _super);
	        function Xmb() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} messages
	         * @return {?}
	         */
	        Xmb.prototype.write = function (messages) {
	            var _this = this;
	            var /** @type {?} */ exampleVisitor = new ExampleVisitor();
	            var /** @type {?} */ visitor = new _Visitor$2();
	            var /** @type {?} */ visited = {};
	            var /** @type {?} */ rootNode = new Tag(_MESSAGES_TAG);
	            messages.forEach(function (message) {
	                var /** @type {?} */ id = _this.digest(message);
	                // deduplicate messages
	                if (visited[id])
	                    return;
	                visited[id] = true;
	                var /** @type {?} */ mapper = _this.createNameMapper(message);
	                var /** @type {?} */ attrs = { id: id };
	                if (message.description) {
	                    attrs['desc'] = message.description;
	                }
	                if (message.meaning) {
	                    attrs['meaning'] = message.meaning;
	                }
	                rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes, { mapper: mapper })));
	            });
	            rootNode.children.push(new CR());
	            return serialize([
	                new Declaration({ version: '1.0', encoding: 'UTF-8' }),
	                new CR(),
	                new Doctype(_MESSAGES_TAG, _DOCTYPE),
	                new CR(),
	                exampleVisitor.addDefaultExamples(rootNode),
	                new CR(),
	            ]);
	        };
	        /**
	         * @param {?} content
	         * @param {?} url
	         * @return {?}
	         */
	        Xmb.prototype.load = function (content, url) {
	            throw new Error('Unsupported');
	        };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Xmb.prototype.digest = function (message) { return digest$1(message); };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Xmb.prototype.createNameMapper = function (message) {
	            return new XmbPlaceholderMapper(message);
	        };
	        return Xmb;
	    }(Serializer));
	    var _Visitor$2 = (function () {
	        function _Visitor() {
	        }
	        /**
	         * @param {?} text
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitText = function (text, ctx) {
	            return [new Text$2(text.value)];
	        };
	        /**
	         * @param {?} container
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitContainer = function (container, ctx) {
	            var _this = this;
	            var /** @type {?} */ nodes = [];
	            container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this, ctx)); });
	            return nodes;
	        };
	        /**
	         * @param {?} icu
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitIcu = function (icu, ctx) {
	            var _this = this;
	            var /** @type {?} */ nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];
	            Object.keys(icu.cases).forEach(function (c) {
	                nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this, ctx), [new Text$2("} ")]));
	            });
	            nodes.push(new Text$2("}"));
	            return nodes;
	        };
	        /**
	         * @param {?} ph
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitTagPlaceholder = function (ph, ctx) {
	            var /** @type {?} */ startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]);
	            var /** @type {?} */ name = ctx.mapper.toPublicName(ph.startName);
	            var /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: name }, [startEx]);
	            if (ph.isVoid) {
	                // void tags have no children nor closing tags
	                return [startTagPh];
	            }
	            var /** @type {?} */ closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]);
	            name = ctx.mapper.toPublicName(ph.closeName);
	            var /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: name }, [closeEx]);
	            return [startTagPh].concat(this.serialize(ph.children, ctx), [closeTagPh]);
	        };
	        /**
	         * @param {?} ph
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitPlaceholder = function (ph, ctx) {
	            var /** @type {?} */ name = ctx.mapper.toPublicName(ph.name);
	            return [new Tag(_PLACEHOLDER_TAG$1, { name: name })];
	        };
	        /**
	         * @param {?} ph
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitIcuPlaceholder = function (ph, ctx) {
	            var /** @type {?} */ name = ctx.mapper.toPublicName(ph.name);
	            return [new Tag(_PLACEHOLDER_TAG$1, { name: name })];
	        };
	        /**
	         * @param {?} nodes
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.serialize = function (nodes, ctx) {
	            var _this = this;
	            return (_a = []).concat.apply(_a, nodes.map(function (node) { return node.visit(_this, ctx); }));
	            var _a;
	        };
	        return _Visitor;
	    }());
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    function digest$1(message) {
	        return decimalDigest(message);
	    }
	    var ExampleVisitor = (function () {
	        function ExampleVisitor() {
	        }
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        ExampleVisitor.prototype.addDefaultExamples = function (node) {
	            node.visit(this);
	            return node;
	        };
	        /**
	         * @param {?} tag
	         * @return {?}
	         */
	        ExampleVisitor.prototype.visitTag = function (tag) {
	            var _this = this;
	            if (tag.name === _PLACEHOLDER_TAG$1) {
	                if (!tag.children || tag.children.length == 0) {
	                    var /** @type {?} */ exText = new Text$2(tag.attrs['name'] || '...');
	                    tag.children = [new Tag(_EXEMPLE_TAG, {}, [exText])];
	                }
	            }
	            else if (tag.children) {
	                tag.children.forEach(function (node) { return node.visit(_this); });
	            }
	        };
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        ExampleVisitor.prototype.visitText = function (text) { };
	        /**
	         * @param {?} decl
	         * @return {?}
	         */
	        ExampleVisitor.prototype.visitDeclaration = function (decl) { };
	        /**
	         * @param {?} doctype
	         * @return {?}
	         */
	        ExampleVisitor.prototype.visitDoctype = function (doctype) { };
	        return ExampleVisitor;
	    }());
	    /**
	     * XMB/XTB placeholders can only contain A-Z, 0-9 and _
	     *
	     * Because such restrictions do not exist on placeholder names generated locally, the
	     * `PlaceholderMapper` is used to convert internal names to XMB names when the XMB file is
	     * serialized and back from XTB to internal names when an XTB is loaded.
	     */
	    var XmbPlaceholderMapper = (function () {
	        /**
	         * @param {?} message
	         */
	        function XmbPlaceholderMapper(message) {
	            var _this = this;
	            this.internalToXmb = {};
	            this.xmbToNextId = {};
	            this.xmbToInternal = {};
	            message.nodes.forEach(function (node) { return node.visit(_this); });
	        }
	        /**
	         * @param {?} internalName
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.toPublicName = function (internalName) {
	            return this.internalToXmb.hasOwnProperty(internalName) ? this.internalToXmb[internalName] :
	                null;
	        };
	        /**
	         * @param {?} publicName
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.toInternalName = function (publicName) {
	            return this.xmbToInternal.hasOwnProperty(publicName) ? this.xmbToInternal[publicName] : null;
	        };
	        /**
	         * @param {?} text
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitText = function (text, ctx) { return null; };
	        /**
	         * @param {?} container
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitContainer = function (container, ctx) {
	            var _this = this;
	            container.children.forEach(function (child) { return child.visit(_this); });
	        };
	        /**
	         * @param {?} icu
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitIcu = function (icu, ctx) {
	            var _this = this;
	            Object.keys(icu.cases).forEach(function (k) { icu.cases[k].visit(_this); });
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitTagPlaceholder = function (ph, ctx) {
	            var _this = this;
	            this.addPlaceholder(ph.startName);
	            ph.children.forEach(function (child) { return child.visit(_this); });
	            this.addPlaceholder(ph.closeName);
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitPlaceholder = function (ph, ctx) { this.addPlaceholder(ph.name); };
	        /**
	         * @param {?} ph
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitIcuPlaceholder = function (ph, ctx) { this.addPlaceholder(ph.name); };
	        /**
	         * @param {?} internalName
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.addPlaceholder = function (internalName) {
	            if (!internalName || this.internalToXmb.hasOwnProperty(internalName)) {
	                return;
	            }
	            var /** @type {?} */ xmbName = internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');
	            if (this.xmbToInternal.hasOwnProperty(xmbName)) {
	                // Create a new XMB when it has already been used
	                var /** @type {?} */ nextId = this.xmbToNextId[xmbName];
	                this.xmbToNextId[xmbName] = nextId + 1;
	                xmbName = xmbName + "_" + nextId;
	            }
	            else {
	                this.xmbToNextId[xmbName] = 1;
	            }
	            this.internalToXmb[internalName] = xmbName;
	            this.xmbToInternal[xmbName] = internalName;
	        };
	        return XmbPlaceholderMapper;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$13 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _TRANSLATIONS_TAG = 'translationbundle';
	    var /** @type {?} */ _TRANSLATION_TAG = 'translation';
	    var /** @type {?} */ _PLACEHOLDER_TAG$2 = 'ph';
	    var Xtb = (function (_super) {
	        __extends$13(Xtb, _super);
	        function Xtb() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} messages
	         * @return {?}
	         */
	        Xtb.prototype.write = function (messages) { throw new Error('Unsupported'); };
	        /**
	         * @param {?} content
	         * @param {?} url
	         * @return {?}
	         */
	        Xtb.prototype.load = function (content, url) {
	            // xtb to xml nodes
	            var /** @type {?} */ xtbParser = new XtbParser();
	            var _a = xtbParser.parse(content, url), mlNodesByMsgId = _a.mlNodesByMsgId, errors = _a.errors;
	            // xml nodes to i18n nodes
	            var /** @type {?} */ i18nNodesByMsgId = {};
	            var /** @type {?} */ converter = new XmlToI18n$1();
	            Object.keys(mlNodesByMsgId).forEach(function (msgId) {
	                var _a = converter.convert(mlNodesByMsgId[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;
	                errors.push.apply(errors, e);
	                i18nNodesByMsgId[msgId] = i18nNodes;
	            });
	            if (errors.length) {
	                throw new Error("xtb parse errors:\n" + errors.join('\n'));
	            }
	            return i18nNodesByMsgId;
	        };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Xtb.prototype.digest = function (message) { return digest$1(message); };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Xtb.prototype.createNameMapper = function (message) {
	            return new XmbPlaceholderMapper(message);
	        };
	        return Xtb;
	    }(Serializer));
	    var XtbParser = (function () {
	        function XtbParser() {
	        }
	        /**
	         * @param {?} xtb
	         * @param {?} url
	         * @return {?}
	         */
	        XtbParser.prototype.parse = function (xtb, url) {
	            this._bundleDepth = 0;
	            this._mlNodesByMsgId = {};
	            var /** @type {?} */ xml = new XmlParser().parse(xtb, url, true);
	            this._errors = xml.errors;
	            visitAll(this, xml.rootNodes);
	            return {
	                mlNodesByMsgId: this._mlNodesByMsgId,
	                errors: this._errors,
	            };
	        };
	        /**
	         * @param {?} element
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitElement = function (element, context) {
	            switch (element.name) {
	                case _TRANSLATIONS_TAG:
	                    this._bundleDepth++;
	                    if (this._bundleDepth > 1) {
	                        this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
	                    }
	                    visitAll(this, element.children, null);
	                    this._bundleDepth--;
	                    break;
	                case _TRANSLATION_TAG:
	                    var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                    if (!idAttr) {
	                        this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
	                    }
	                    else {
	                        var /** @type {?} */ id = idAttr.value;
	                        if (this._mlNodesByMsgId.hasOwnProperty(id)) {
	                            this._addError(element, "Duplicated translations for msg " + id);
	                        }
	                        else {
	                            this._mlNodesByMsgId[id] = element.children;
	                        }
	                    }
	                    break;
	                default:
	                    this._addError(element, 'Unexpected tag');
	            }
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitAttribute = function (attribute, context) { };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitText = function (text, context) { };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitComment = function (comment, context) { };
	        /**
	         * @param {?} expansion
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitExpansion = function (expansion, context) { };
	        /**
	         * @param {?} expansionCase
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	        /**
	         * @param {?} node
	         * @param {?} message
	         * @return {?}
	         */
	        XtbParser.prototype._addError = function (node, message) {
	            this._errors.push(new I18nError(node.sourceSpan, message));
	        };
	        return XtbParser;
	    }());
	    var XmlToI18n$1 = (function () {
	        function XmlToI18n() {
	        }
	        /**
	         * @param {?} nodes
	         * @return {?}
	         */
	        XmlToI18n.prototype.convert = function (nodes) {
	            this._errors = [];
	            return {
	                i18nNodes: visitAll(this, nodes),
	                errors: this._errors,
	            };
	        };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitExpansion = function (icu, context) {
	            var /** @type {?} */ caseMap = {};
	            visitAll(this, icu.cases).forEach(function (c) {
	                caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
	            });
	            return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
	        };
	        /**
	         * @param {?} icuCase
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) {
	            return {
	                value: icuCase.value,
	                nodes: visitAll(this, icuCase.expression),
	            };
	        };
	        /**
	         * @param {?} el
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitElement = function (el, context) {
	            if (el.name === _PLACEHOLDER_TAG$2) {
	                var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'name'; });
	                if (nameAttr) {
	                    return new Placeholder('', nameAttr.value, el.sourceSpan);
	                }
	                this._addError(el, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"name\" attribute");
	            }
	            else {
	                this._addError(el, "Unexpected tag");
	            }
	        };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitComment = function (comment, context) { };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitAttribute = function (attribute, context) { };
	        /**
	         * @param {?} node
	         * @param {?} message
	         * @return {?}
	         */
	        XmlToI18n.prototype._addError = function (node, message) {
	            this._errors.push(new I18nError(node.sourceSpan, message));
	        };
	        return XmlToI18n;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$14 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$3 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var HtmlParser = (function (_super) {
	        __extends$14(HtmlParser, _super);
	        function HtmlParser() {
	            _super.call(this, getHtmlTagDefinition);
	        }
	        /**
	         * @param {?} source
	         * @param {?} url
	         * @param {?=} parseExpansionForms
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	            if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
	        };
	        HtmlParser = __decorate$3([
	            CompilerInjectable(), 
	            __metadata$3('design:paramtypes', [])
	        ], HtmlParser);
	        return HtmlParser;
	    }(Parser$1));

	    /**
	     * A container for translated messages
	     */
	    var TranslationBundle = (function () {
	        /**
	         * @param {?=} _i18nNodesByMsgId
	         * @param {?} digest
	         * @param {?=} mapperFactory
	         */
	        function TranslationBundle(_i18nNodesByMsgId, digest, mapperFactory) {
	            if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	            this._i18nNodesByMsgId = _i18nNodesByMsgId;
	            this.digest = digest;
	            this.mapperFactory = mapperFactory;
	            this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, digest, mapperFactory);
	        }
	        /**
	         * @param {?} content
	         * @param {?} url
	         * @param {?} serializer
	         * @return {?}
	         */
	        TranslationBundle.load = function (content, url, serializer) {
	            var /** @type {?} */ i18nNodesByMsgId = serializer.load(content, url);
	            var /** @type {?} */ digestFn = function (m) { return serializer.digest(m); };
	            var /** @type {?} */ mapperFactory = function (m) { return serializer.createNameMapper(m); };
	            return new TranslationBundle(i18nNodesByMsgId, digestFn, mapperFactory);
	        };
	        /**
	         * @param {?} srcMsg
	         * @return {?}
	         */
	        TranslationBundle.prototype.get = function (srcMsg) {
	            var /** @type {?} */ html = this._i18nToHtml.convert(srcMsg);
	            if (html.errors.length) {
	                throw new Error(html.errors.join('\n'));
	            }
	            return html.nodes;
	        };
	        /**
	         * @param {?} srcMsg
	         * @return {?}
	         */
	        TranslationBundle.prototype.has = function (srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId; };
	        return TranslationBundle;
	    }());
	    var I18nToHtmlVisitor = (function () {
	        /**
	         * @param {?=} _i18nNodesByMsgId
	         * @param {?} _digest
	         * @param {?} _mapperFactory
	         */
	        function I18nToHtmlVisitor(_i18nNodesByMsgId, _digest, _mapperFactory) {
	            if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	            this._i18nNodesByMsgId = _i18nNodesByMsgId;
	            this._digest = _digest;
	            this._mapperFactory = _mapperFactory;
	            this._contextStack = [];
	            this._errors = [];
	        }
	        /**
	         * @param {?} srcMsg
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.convert = function (srcMsg) {
	            this._contextStack.length = 0;
	            this._errors.length = 0;
	            // i18n to text
	            var /** @type {?} */ text = this._convertToText(srcMsg);
	            // text to html
	            var /** @type {?} */ url = srcMsg.nodes[0].sourceSpan.start.file.url;
	            var /** @type {?} */ html = new HtmlParser().parse(text, url, true);
	            return {
	                nodes: html.rootNodes,
	                errors: this._errors.concat(html.errors),
	            };
	        };
	        /**
	         * @param {?} text
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitText = function (text, context) { return text.value; };
	        /**
	         * @param {?} container
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitContainer = function (container, context) {
	            var _this = this;
	            return container.children.map(function (n) { return n.visit(_this); }).join('');
	        };
	        /**
	         * @param {?} icu
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitIcu = function (icu, context) {
	            var _this = this;
	            var /** @type {?} */ cases = Object.keys(icu.cases).map(function (k) { return (k + " {" + icu.cases[k].visit(_this) + "}"); });
	            // TODO(vicb): Once all format switch to using expression placeholders
	            // we should throw when the placeholder is not in the source message
	            var /** @type {?} */ exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?
	                this._srcMsg.placeholders[icu.expression] :
	                icu.expression;
	            return "{" + exp + ", " + icu.type + ", " + cases.join(' ') + "}";
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitPlaceholder = function (ph, context) {
	            var /** @type {?} */ phName = this._mapper(ph.name);
	            if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
	                return this._srcMsg.placeholders[phName];
	            }
	            if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
	                return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
	            }
	            this._addError(ph, "Unknown placeholder");
	            return '';
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitTagPlaceholder = function (ph, context) { throw 'unreachable code'; };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitIcuPlaceholder = function (ph, context) { throw 'unreachable code'; };
	        /**
	         * Convert a source message to a translated text string:
	         * - text nodes are replaced with their translation,
	         * - placeholders are replaced with their content,
	         * - ICU nodes are converted to ICU expressions.
	         * @param {?} srcMsg
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype._convertToText = function (srcMsg) {
	            var _this = this;
	            var /** @type {?} */ digest = this._digest(srcMsg);
	            var /** @type {?} */ mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;
	            if (this._i18nNodesByMsgId.hasOwnProperty(digest)) {
	                this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });
	                this._srcMsg = srcMsg;
	                this._mapper = function (name) { return mapper ? mapper.toInternalName(name) : name; };
	                var /** @type {?} */ nodes = this._i18nNodesByMsgId[digest];
	                var /** @type {?} */ text = nodes.map(function (node) { return node.visit(_this); }).join('');
	                var /** @type {?} */ context = this._contextStack.pop();
	                this._srcMsg = context.msg;
	                this._mapper = context.mapper;
	                return text;
	            }
	            this._addError(srcMsg.nodes[0], "Missing translation for message " + digest);
	            return '';
	        };
	        /**
	         * @param {?} el
	         * @param {?} msg
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype._addError = function (el, msg) {
	            this._errors.push(new I18nError(el.sourceSpan, msg));
	        };
	        return I18nToHtmlVisitor;
	    }());

	    var I18NHtmlParser = (function () {
	        /**
	         * @param {?} _htmlParser
	         * @param {?=} _translations
	         * @param {?=} _translationsFormat
	         */
	        function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {
	            this._htmlParser = _htmlParser;
	            this._translations = _translations;
	            this._translationsFormat = _translationsFormat;
	        }
	        /**
	         * @param {?} source
	         * @param {?} url
	         * @param {?=} parseExpansionForms
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	            if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
	            if (!this._translations || this._translations === '') {
	                // Do not enable i18n when no translation bundle is provided
	                return parseResult;
	            }
	            // TODO(vicb): add support for implicit tags / attributes
	            if (parseResult.errors.length) {
	                return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
	            }
	            var /** @type {?} */ serializer = this._createSerializer();
	            var /** @type {?} */ translationBundle = TranslationBundle.load(this._translations, url, serializer);
	            return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});
	        };
	        /**
	         * @return {?}
	         */
	        I18NHtmlParser.prototype._createSerializer = function () {
	            var /** @type {?} */ format = (this._translationsFormat || 'xlf').toLowerCase();
	            switch (format) {
	                case 'xmb':
	                    return new Xmb();
	                case 'xtb':
	                    return new Xtb();
	                case 'xliff':
	                case 'xlf':
	                default:
	                    return new Xliff();
	            }
	        };
	        return I18NHtmlParser;
	    }());

	    var /** @type {?} */ APP_VIEW_MODULE_URL = assetUrl('core', 'linker/view');
	    var /** @type {?} */ VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');
	    var /** @type {?} */ CD_MODULE_URL = assetUrl('core', 'change_detection/change_detection');
	    var /** @type {?} */ ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl('core', 'animation/animation_style_util');
	    var Identifiers = (function () {
	        function Identifiers() {
	        }
	        Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
	            name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
	            moduleUrl: assetUrl('core', 'metadata/di'),
	            runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
	        };
	        Identifiers.ViewUtils = {
	            name: 'ViewUtils',
	            moduleUrl: assetUrl('core', 'linker/view_utils'),
	            runtime: view_utils.ViewUtils
	        };
	        Identifiers.AppView = { name: 'AppView', moduleUrl: APP_VIEW_MODULE_URL, runtime: AppView };
	        Identifiers.DebugAppView = {
	            name: 'DebugAppView',
	            moduleUrl: APP_VIEW_MODULE_URL,
	            runtime: DebugAppView
	        };
	        Identifiers.ViewContainer = {
	            name: 'ViewContainer',
	            moduleUrl: assetUrl('core', 'linker/view_container'),
	            runtime: ViewContainer
	        };
	        Identifiers.ElementRef = {
	            name: 'ElementRef',
	            moduleUrl: assetUrl('core', 'linker/element_ref'),
	            runtime: _angular_core.ElementRef
	        };
	        Identifiers.ViewContainerRef = {
	            name: 'ViewContainerRef',
	            moduleUrl: assetUrl('core', 'linker/view_container_ref'),
	            runtime: _angular_core.ViewContainerRef
	        };
	        Identifiers.ChangeDetectorRef = {
	            name: 'ChangeDetectorRef',
	            moduleUrl: assetUrl('core', 'change_detection/change_detector_ref'),
	            runtime: _angular_core.ChangeDetectorRef
	        };
	        Identifiers.RenderComponentType = {
	            name: 'RenderComponentType',
	            moduleUrl: assetUrl('core', 'render/api'),
	            runtime: _angular_core.RenderComponentType
	        };
	        Identifiers.QueryList = {
	            name: 'QueryList',
	            moduleUrl: assetUrl('core', 'linker/query_list'),
	            runtime: _angular_core.QueryList
	        };
	        Identifiers.TemplateRef = {
	            name: 'TemplateRef',
	            moduleUrl: assetUrl('core', 'linker/template_ref'),
	            runtime: _angular_core.TemplateRef
	        };
	        Identifiers.TemplateRef_ = {
	            name: 'TemplateRef_',
	            moduleUrl: assetUrl('core', 'linker/template_ref'),
	            runtime: TemplateRef_
	        };
	        Identifiers.CodegenComponentFactoryResolver = {
	            name: 'CodegenComponentFactoryResolver',
	            moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
	            runtime: CodegenComponentFactoryResolver
	        };
	        Identifiers.ComponentFactoryResolver = {
	            name: 'ComponentFactoryResolver',
	            moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
	            runtime: _angular_core.ComponentFactoryResolver
	        };
	        Identifiers.ComponentFactory = {
	            name: 'ComponentFactory',
	            runtime: _angular_core.ComponentFactory,
	            moduleUrl: assetUrl('core', 'linker/component_factory')
	        };
	        Identifiers.ComponentRef_ = {
	            name: 'ComponentRef_',
	            runtime: ComponentRef_,
	            moduleUrl: assetUrl('core', 'linker/component_factory')
	        };
	        Identifiers.ComponentRef = {
	            name: 'ComponentRef',
	            runtime: _angular_core.ComponentRef,
	            moduleUrl: assetUrl('core', 'linker/component_factory')
	        };
	        Identifiers.NgModuleFactory = {
	            name: 'NgModuleFactory',
	            runtime: _angular_core.NgModuleFactory,
	            moduleUrl: assetUrl('core', 'linker/ng_module_factory')
	        };
	        Identifiers.NgModuleInjector = {
	            name: 'NgModuleInjector',
	            runtime: NgModuleInjector,
	            moduleUrl: assetUrl('core', 'linker/ng_module_factory')
	        };
	        Identifiers.RegisterModuleFactoryFn = {
	            name: 'registerModuleFactory',
	            runtime: registerModuleFactory,
	            moduleUrl: assetUrl('core', 'linker/ng_module_factory_loader')
	        };
	        Identifiers.ValueUnwrapper = { name: 'ValueUnwrapper', moduleUrl: CD_MODULE_URL, runtime: ValueUnwrapper };
	        Identifiers.Injector = {
	            name: 'Injector',
	            moduleUrl: assetUrl('core', 'di/injector'),
	            runtime: _angular_core.Injector
	        };
	        Identifiers.ViewEncapsulation = {
	            name: 'ViewEncapsulation',
	            moduleUrl: assetUrl('core', 'metadata/view'),
	            runtime: _angular_core.ViewEncapsulation
	        };
	        Identifiers.ViewType = {
	            name: 'ViewType',
	            moduleUrl: assetUrl('core', 'linker/view_type'),
	            runtime: ViewType
	        };
	        Identifiers.ChangeDetectionStrategy = {
	            name: 'ChangeDetectionStrategy',
	            moduleUrl: CD_MODULE_URL,
	            runtime: _angular_core.ChangeDetectionStrategy
	        };
	        Identifiers.StaticNodeDebugInfo = {
	            name: 'StaticNodeDebugInfo',
	            moduleUrl: assetUrl('core', 'linker/debug_context'),
	            runtime: StaticNodeDebugInfo
	        };
	        Identifiers.DebugContext = {
	            name: 'DebugContext',
	            moduleUrl: assetUrl('core', 'linker/debug_context'),
	            runtime: DebugContext
	        };
	        Identifiers.Renderer = {
	            name: 'Renderer',
	            moduleUrl: assetUrl('core', 'render/api'),
	            runtime: _angular_core.Renderer
	        };
	        Identifiers.SimpleChange = { name: 'SimpleChange', moduleUrl: CD_MODULE_URL, runtime: _angular_core.SimpleChange };
	        Identifiers.UNINITIALIZED = { name: 'UNINITIALIZED', moduleUrl: CD_MODULE_URL, runtime: UNINITIALIZED };
	        Identifiers.ChangeDetectorStatus = {
	            name: 'ChangeDetectorStatus',
	            moduleUrl: CD_MODULE_URL,
	            runtime: ChangeDetectorStatus
	        };
	        Identifiers.checkBinding = {
	            name: 'checkBinding',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.checkBinding
	        };
	        Identifiers.devModeEqual = { name: 'devModeEqual', moduleUrl: CD_MODULE_URL, runtime: devModeEqual };
	        Identifiers.inlineInterpolate = {
	            name: 'inlineInterpolate',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.inlineInterpolate
	        };
	        Identifiers.interpolate = {
	            name: 'interpolate',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.interpolate
	        };
	        Identifiers.castByValue = {
	            name: 'castByValue',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.castByValue
	        };
	        Identifiers.EMPTY_ARRAY = {
	            name: 'EMPTY_ARRAY',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.EMPTY_ARRAY
	        };
	        Identifiers.EMPTY_MAP = {
	            name: 'EMPTY_MAP',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.EMPTY_MAP
	        };
	        Identifiers.createRenderElement = {
	            name: 'createRenderElement',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.createRenderElement
	        };
	        Identifiers.selectOrCreateRenderHostElement = {
	            name: 'selectOrCreateRenderHostElement',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.selectOrCreateRenderHostElement
	        };
	        Identifiers.pureProxies = [
	            null,
	            { name: 'pureProxy1', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy1 },
	            { name: 'pureProxy2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy2 },
	            { name: 'pureProxy3', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy3 },
	            { name: 'pureProxy4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy4 },
	            { name: 'pureProxy5', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy5 },
	            { name: 'pureProxy6', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy6 },
	            { name: 'pureProxy7', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy7 },
	            { name: 'pureProxy8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy8 },
	            { name: 'pureProxy9', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy9 },
	            { name: 'pureProxy10', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy10 },
	        ];
	        Identifiers.SecurityContext = {
	            name: 'SecurityContext',
	            moduleUrl: assetUrl('core', 'security'),
	            runtime: _angular_core.SecurityContext,
	        };
	        Identifiers.AnimationKeyframe = {
	            name: 'AnimationKeyframe',
	            moduleUrl: assetUrl('core', 'animation/animation_keyframe'),
	            runtime: AnimationKeyframe
	        };
	        Identifiers.AnimationStyles = {
	            name: 'AnimationStyles',
	            moduleUrl: assetUrl('core', 'animation/animation_styles'),
	            runtime: AnimationStyles
	        };
	        Identifiers.NoOpAnimationPlayer = {
	            name: 'NoOpAnimationPlayer',
	            moduleUrl: assetUrl('core', 'animation/animation_player'),
	            runtime: NoOpAnimationPlayer
	        };
	        Identifiers.AnimationGroupPlayer = {
	            name: 'AnimationGroupPlayer',
	            moduleUrl: assetUrl('core', 'animation/animation_group_player'),
	            runtime: AnimationGroupPlayer
	        };
	        Identifiers.AnimationSequencePlayer = {
	            name: 'AnimationSequencePlayer',
	            moduleUrl: assetUrl('core', 'animation/animation_sequence_player'),
	            runtime: AnimationSequencePlayer
	        };
	        Identifiers.prepareFinalAnimationStyles = {
	            name: 'prepareFinalAnimationStyles',
	            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	            runtime: prepareFinalAnimationStyles
	        };
	        Identifiers.balanceAnimationKeyframes = {
	            name: 'balanceAnimationKeyframes',
	            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	            runtime: balanceAnimationKeyframes
	        };
	        Identifiers.clearStyles = {
	            name: 'clearStyles',
	            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	            runtime: clearStyles
	        };
	        Identifiers.renderStyles = {
	            name: 'renderStyles',
	            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	            runtime: renderStyles
	        };
	        Identifiers.collectAndResolveStyles = {
	            name: 'collectAndResolveStyles',
	            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	            runtime: collectAndResolveStyles
	        };
	        Identifiers.LOCALE_ID = {
	            name: 'LOCALE_ID',
	            moduleUrl: assetUrl('core', 'i18n/tokens'),
	            runtime: _angular_core.LOCALE_ID
	        };
	        Identifiers.TRANSLATIONS_FORMAT = {
	            name: 'TRANSLATIONS_FORMAT',
	            moduleUrl: assetUrl('core', 'i18n/tokens'),
	            runtime: _angular_core.TRANSLATIONS_FORMAT
	        };
	        Identifiers.setBindingDebugInfo = {
	            name: 'setBindingDebugInfo',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.setBindingDebugInfo
	        };
	        Identifiers.setBindingDebugInfoForChanges = {
	            name: 'setBindingDebugInfoForChanges',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.setBindingDebugInfoForChanges
	        };
	        Identifiers.AnimationTransition = {
	            name: 'AnimationTransition',
	            moduleUrl: assetUrl('core', 'animation/animation_transition'),
	            runtime: AnimationTransition
	        };
	        // This is just the interface!
	        Identifiers.InlineArray = { name: 'InlineArray', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: null };
	        Identifiers.inlineArrays = [
	            { name: 'InlineArray2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray2 },
	            { name: 'InlineArray2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray2 },
	            { name: 'InlineArray4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray4 },
	            { name: 'InlineArray8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray8 },
	            { name: 'InlineArray16', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray16 },
	        ];
	        Identifiers.EMPTY_INLINE_ARRAY = {
	            name: 'EMPTY_INLINE_ARRAY',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.EMPTY_INLINE_ARRAY
	        };
	        Identifiers.InlineArrayDynamic = {
	            name: 'InlineArrayDynamic',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.InlineArrayDynamic
	        };
	        Identifiers.subscribeToRenderElement = {
	            name: 'subscribeToRenderElement',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.subscribeToRenderElement
	        };
	        Identifiers.createRenderComponentType = {
	            name: 'createRenderComponentType',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.createRenderComponentType
	        };
	        Identifiers.noop = { name: 'noop', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.noop };
	        return Identifiers;
	    }());
	    /**
	     * @param {?} pkg
	     * @param {?=} path
	     * @param {?=} type
	     * @return {?}
	     */
	    function assetUrl(pkg, path, type) {
	        if (path === void 0) { path = null; }
	        if (type === void 0) { type = 'src'; }
	        if (path == null) {
	            return "@angular/" + pkg + "/index";
	        }
	        else {
	            return "@angular/" + pkg + "/" + type + "/" + path;
	        }
	    }
	    /**
	     * @param {?} identifier
	     * @return {?}
	     */
	    function resolveIdentifier(identifier) {
	        return reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime);
	    }
	    /**
	     * @param {?} identifier
	     * @return {?}
	     */
	    function createIdentifier(identifier) {
	        var /** @type {?} */ reference = reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime);
	        return { reference: reference };
	    }
	    /**
	     * @param {?} identifier
	     * @return {?}
	     */
	    function identifierToken(identifier) {
	        return { identifier: identifier };
	    }
	    /**
	     * @param {?} identifier
	     * @return {?}
	     */
	    function createIdentifierToken(identifier) {
	        return identifierToken(createIdentifier(identifier));
	    }
	    /**
	     * @param {?} enumType
	     * @param {?} name
	     * @return {?}
	     */
	    function createEnumIdentifier(enumType, name) {
	        var /** @type {?} */ resolvedEnum = reflector.resolveEnum(resolveIdentifier(enumType), name);
	        return { reference: resolvedEnum };
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$15 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    // http://cldr.unicode.org/index/cldr-spec/plural-rules
	    var /** @type {?} */ PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
	    /**
	     * Expands special forms into elements.
	     *
	     * For example,
	     *
	     * ```
	     * { messages.length, plural,
	     *   =0 {zero}
	     *   =1 {one}
	     *   other {more than one}
	     * }
	     * ```
	     *
	     * will be expanded into
	     *
	     * ```
	     * <ng-container [ngPlural]="messages.length">
	     *   <template ngPluralCase="=0">zero</template>
	     *   <template ngPluralCase="=1">one</template>
	     *   <template ngPluralCase="other">more than one</template>
	     * </ng-container>
	     * ```
	     * @param {?} nodes
	     * @return {?}
	     */
	    function expandNodes(nodes) {
	        var /** @type {?} */ expander = new _Expander();
	        return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
	    }
	    var ExpansionResult = (function () {
	        /**
	         * @param {?} nodes
	         * @param {?} expanded
	         * @param {?} errors
	         */
	        function ExpansionResult(nodes, expanded, errors) {
	            this.nodes = nodes;
	            this.expanded = expanded;
	            this.errors = errors;
	        }
	        return ExpansionResult;
	    }());
	    var ExpansionError = (function (_super) {
	        __extends$15(ExpansionError, _super);
	        /**
	         * @param {?} span
	         * @param {?} errorMsg
	         */
	        function ExpansionError(span, errorMsg) {
	            _super.call(this, span, errorMsg);
	        }
	        return ExpansionError;
	    }(ParseError));
	    /**
	     * Expand expansion forms (plural, select) to directives
	     *
	     * \@internal
	     */
	    var _Expander = (function () {
	        function _Expander() {
	            this.isExpanded = false;
	            this.errors = [];
	        }
	        /**
	         * @param {?} element
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitElement = function (element, context) {
	            return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitAttribute = function (attribute, context) { return attribute; };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitText = function (text, context) { return text; };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitComment = function (comment, context) { return comment; };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitExpansion = function (icu, context) {
	            this.isExpanded = true;
	            return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :
	                _expandDefaultForm(icu, this.errors);
	        };
	        /**
	         * @param {?} icuCase
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitExpansionCase = function (icuCase, context) {
	            throw new Error('Should not be reached');
	        };
	        return _Expander;
	    }());
	    /**
	     * @param {?} ast
	     * @param {?} errors
	     * @return {?}
	     */
	    function _expandPluralForm(ast, errors) {
	        var /** @type {?} */ children = ast.cases.map(function (c) {
	            if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
	                errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
	            }
	            var /** @type {?} */ expansionResult = expandNodes(c.expression);
	            errors.push.apply(errors, expansionResult.errors);
	            return new Element("template", [new Attribute$1('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	        });
	        var /** @type {?} */ switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
	        return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	    }
	    /**
	     * @param {?} ast
	     * @param {?} errors
	     * @return {?}
	     */
	    function _expandDefaultForm(ast, errors) {
	        var /** @type {?} */ children = ast.cases.map(function (c) {
	            var /** @type {?} */ expansionResult = expandNodes(c.expression);
	            errors.push.apply(errors, expansionResult.errors);
	            if (c.value === 'other') {
	                // other is the default case when no values match
	                return new Element("template", [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	            }
	            return new Element("template", [new Attribute$1('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	        });
	        var /** @type {?} */ switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
	        return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$16 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ProviderError = (function (_super) {
	        __extends$16(ProviderError, _super);
	        /**
	         * @param {?} message
	         * @param {?} span
	         */
	        function ProviderError(message, span) {
	            _super.call(this, span, message);
	        }
	        return ProviderError;
	    }(ParseError));
	    var ProviderViewContext = (function () {
	        /**
	         * @param {?} component
	         * @param {?} sourceSpan
	         */
	        function ProviderViewContext(component, sourceSpan) {
	            var _this = this;
	            this.component = component;
	            this.sourceSpan = sourceSpan;
	            this.errors = [];
	            this.viewQueries = _getViewQueries(component);
	            this.viewProviders = new Map();
	            component.viewProviders.forEach(function (provider) {
	                if (isBlank(_this.viewProviders.get(tokenReference(provider.token)))) {
	                    _this.viewProviders.set(tokenReference(provider.token), true);
	                }
	            });
	        }
	        return ProviderViewContext;
	    }());
	    var ProviderElementContext = (function () {
	        /**
	         * @param {?} viewContext
	         * @param {?} _parent
	         * @param {?} _isViewRoot
	         * @param {?} _directiveAsts
	         * @param {?} attrs
	         * @param {?} refs
	         * @param {?} _sourceSpan
	         */
	        function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
	            var _this = this;
	            this.viewContext = viewContext;
	            this._parent = _parent;
	            this._isViewRoot = _isViewRoot;
	            this._directiveAsts = _directiveAsts;
	            this._sourceSpan = _sourceSpan;
	            this._transformedProviders = new Map();
	            this._seenProviders = new Map();
	            this._hasViewContainer = false;
	            this._attrs = {};
	            attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });
	            var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });
	            this._allProviders =
	                _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
	            this._contentQueries = _getContentQueries(directivesMeta);
	            var queriedTokens = new Map();
	            Array.from(this._allProviders.values()).forEach(function (provider) {
	                _this._addQueryReadsTo(provider.token, queriedTokens);
	            });
	            refs.forEach(function (refAst) { _this._addQueryReadsTo({ value: refAst.name }, queriedTokens); });
	            if (isPresent(queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef)))) {
	                this._hasViewContainer = true;
	            }
	            // create the providers that we know are eager first
	            Array.from(this._allProviders.values()).forEach(function (provider) {
	                var eager = provider.eager || isPresent(queriedTokens.get(tokenReference(provider.token)));
	                if (eager) {
	                    _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
	                }
	            });
	        }
	        /**
	         * @return {?}
	         */
	        ProviderElementContext.prototype.afterElement = function () {
	            var _this = this;
	            // collect lazy providers
	            Array.from(this._allProviders.values()).forEach(function (provider) {
	                _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
	            });
	        };
	        Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return Array.from(this._transformedProviders.values());
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });
	                var /** @type {?} */ sortedDirectives = this._directiveAsts.slice();
	                sortedDirectives.sort(function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) -
	                    sortedProviderTypes.indexOf(dir2.directive.type); });
	                return sortedDirectives;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._hasViewContainer; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} token
	         * @param {?} queryReadTokens
	         * @return {?}
	         */
	        ProviderElementContext.prototype._addQueryReadsTo = function (token, queryReadTokens) {
	            this._getQueriesFor(token).forEach(function (query) {
	                var /** @type {?} */ queryReadToken = query.read || token;
	                if (isBlank(queryReadTokens.get(tokenReference(queryReadToken)))) {
	                    queryReadTokens.set(tokenReference(queryReadToken), true);
	                }
	            });
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        ProviderElementContext.prototype._getQueriesFor = function (token) {
	            var /** @type {?} */ result = [];
	            var /** @type {?} */ currentEl = this;
	            var /** @type {?} */ distance = 0;
	            var /** @type {?} */ queries;
	            while (currentEl !== null) {
	                queries = currentEl._contentQueries.get(tokenReference(token));
	                if (queries) {
	                    result.push.apply(result, queries.filter(function (query) { return query.descendants || distance <= 1; }));
	                }
	                if (currentEl._directiveAsts.length > 0) {
	                    distance++;
	                }
	                currentEl = currentEl._parent;
	            }
	            queries = this.viewContext.viewQueries.get(tokenReference(token));
	            if (queries) {
	                result.push.apply(result, queries);
	            }
	            return result;
	        };
	        /**
	         * @param {?} requestingProviderType
	         * @param {?} token
	         * @param {?} eager
	         * @return {?}
	         */
	        ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
	            var _this = this;
	            var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));
	            if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||
	                requestingProviderType === ProviderAstType.PublicService) &&
	                resolvedProvider.providerType === ProviderAstType.PrivateService) ||
	                ((requestingProviderType === ProviderAstType.PrivateService ||
	                    requestingProviderType === ProviderAstType.PublicService) &&
	                    resolvedProvider.providerType === ProviderAstType.Builtin)) {
	                return null;
	            }
	            var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	            if (transformedProviderAst) {
	                return transformedProviderAst;
	            }
	            if (isPresent(this._seenProviders.get(tokenReference(token)))) {
	                this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), this._sourceSpan));
	                return null;
	            }
	            this._seenProviders.set(tokenReference(token), true);
	            var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {
	                var /** @type {?} */ transformedUseValue = provider.useValue;
	                var /** @type {?} */ transformedUseExisting = provider.useExisting;
	                var /** @type {?} */ transformedDeps;
	                if (isPresent(provider.useExisting)) {
	                    var /** @type {?} */ existingDiDep = _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager);
	                    if (isPresent(existingDiDep.token)) {
	                        transformedUseExisting = existingDiDep.token;
	                    }
	                    else {
	                        transformedUseExisting = null;
	                        transformedUseValue = existingDiDep.value;
	                    }
	                }
	                else if (provider.useFactory) {
	                    var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                    transformedDeps =
	                        deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	                }
	                else if (provider.useClass) {
	                    var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                    transformedDeps =
	                        deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	                }
	                return _transformProvider(provider, {
	                    useExisting: transformedUseExisting,
	                    useValue: transformedUseValue,
	                    deps: transformedDeps
	                });
	            });
	            transformedProviderAst =
	                _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	            this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	            return transformedProviderAst;
	        };
	        /**
	         * @param {?} requestingProviderType
	         * @param {?} dep
	         * @param {?=} eager
	         * @return {?}
	         */
	        ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
	            if (eager === void 0) { eager = null; }
	            if (dep.isAttribute) {
	                var /** @type {?} */ attrValue = this._attrs[dep.token.value];
	                return { isValue: true, value: attrValue == null ? null : attrValue };
	            }
	            if (isPresent(dep.token)) {
	                // access builtints
	                if ((requestingProviderType === ProviderAstType.Directive ||
	                    requestingProviderType === ProviderAstType.Component)) {
	                    if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) ||
	                        tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) ||
	                        tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) ||
	                        tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {
	                        return dep;
	                    }
	                    if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {
	                        this._hasViewContainer = true;
	                    }
	                }
	                // access the injector
	                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
	                    return dep;
	                }
	                // access providers
	                if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
	                    return dep;
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} requestingProviderType
	         * @param {?} dep
	         * @param {?=} eager
	         * @return {?}
	         */
	        ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
	            if (eager === void 0) { eager = null; }
	            var /** @type {?} */ currElement = this;
	            var /** @type {?} */ currEager = eager;
	            var /** @type {?} */ result = null;
	            if (!dep.isSkipSelf) {
	                result = this._getLocalDependency(requestingProviderType, dep, eager);
	            }
	            if (dep.isSelf) {
	                if (!result && dep.isOptional) {
	                    result = { isValue: true, value: null };
	                }
	            }
	            else {
	                // check parent elements
	                while (!result && currElement._parent) {
	                    var /** @type {?} */ prevElement = currElement;
	                    currElement = currElement._parent;
	                    if (prevElement._isViewRoot) {
	                        currEager = false;
	                    }
	                    result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
	                }
	                // check @Host restriction
	                if (!result) {
	                    if (!dep.isHost || this.viewContext.component.isHost ||
	                        this.viewContext.component.type.reference === tokenReference(dep.token) ||
	                        isPresent(this.viewContext.viewProviders.get(tokenReference(dep.token)))) {
	                        result = dep;
	                    }
	                    else {
	                        result = dep.isOptional ? result = { isValue: true, value: null } : null;
	                    }
	                }
	            }
	            if (!result) {
	                this.viewContext.errors.push(new ProviderError("No provider for " + tokenName(dep.token), this._sourceSpan));
	            }
	            return result;
	        };
	        return ProviderElementContext;
	    }());
	    var NgModuleProviderAnalyzer = (function () {
	        /**
	         * @param {?} ngModule
	         * @param {?} extraProviders
	         * @param {?} sourceSpan
	         */
	        function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
	            var _this = this;
	            this._transformedProviders = new Map();
	            this._seenProviders = new Map();
	            this._errors = [];
	            this._allProviders = new Map();
	            ngModule.transitiveModule.modules.forEach(function (ngModuleType) {
	                var ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };
	                _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
	            });
	            _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) { return entry.provider; }).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
	        }
	        /**
	         * @return {?}
	         */
	        NgModuleProviderAnalyzer.prototype.parse = function () {
	            var _this = this;
	            Array.from(this._allProviders.values()).forEach(function (provider) {
	                _this._getOrCreateLocalProvider(provider.token, provider.eager);
	            });
	            if (this._errors.length > 0) {
	                var /** @type {?} */ errorString = this._errors.join('\n');
	                throw new Error("Provider parse errors:\n" + errorString);
	            }
	            return Array.from(this._transformedProviders.values());
	        };
	        /**
	         * @param {?} token
	         * @param {?} eager
	         * @return {?}
	         */
	        NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {
	            var _this = this;
	            var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));
	            if (!resolvedProvider) {
	                return null;
	            }
	            var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	            if (transformedProviderAst) {
	                return transformedProviderAst;
	            }
	            if (isPresent(this._seenProviders.get(tokenReference(token)))) {
	                this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), resolvedProvider.sourceSpan));
	                return null;
	            }
	            this._seenProviders.set(tokenReference(token), true);
	            var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {
	                var /** @type {?} */ transformedUseValue = provider.useValue;
	                var /** @type {?} */ transformedUseExisting = provider.useExisting;
	                var /** @type {?} */ transformedDeps;
	                if (isPresent(provider.useExisting)) {
	                    var /** @type {?} */ existingDiDep = _this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);
	                    if (isPresent(existingDiDep.token)) {
	                        transformedUseExisting = existingDiDep.token;
	                    }
	                    else {
	                        transformedUseExisting = null;
	                        transformedUseValue = existingDiDep.value;
	                    }
	                }
	                else if (provider.useFactory) {
	                    var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                    transformedDeps =
	                        deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	                }
	                else if (provider.useClass) {
	                    var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                    transformedDeps =
	                        deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	                }
	                return _transformProvider(provider, {
	                    useExisting: transformedUseExisting,
	                    useValue: transformedUseValue,
	                    deps: transformedDeps
	                });
	            });
	            transformedProviderAst =
	                _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	            this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	            return transformedProviderAst;
	        };
	        /**
	         * @param {?} dep
	         * @param {?=} eager
	         * @param {?} requestorSourceSpan
	         * @return {?}
	         */
	        NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {
	            if (eager === void 0) { eager = null; }
	            var /** @type {?} */ foundLocal = false;
	            if (!dep.isSkipSelf && isPresent(dep.token)) {
	                // access the injector
	                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||
	                    tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
	                    foundLocal = true;
	                }
	                else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
	                    foundLocal = true;
	                }
	            }
	            var /** @type {?} */ result = dep;
	            if (dep.isSelf && !foundLocal) {
	                if (dep.isOptional) {
	                    result = { isValue: true, value: null };
	                }
	                else {
	                    this._errors.push(new ProviderError("No provider for " + tokenName(dep.token), requestorSourceSpan));
	                }
	            }
	            return result;
	        };
	        return NgModuleProviderAnalyzer;
	    }());
	    /**
	     * @param {?} provider
	     * @param {?} __1
	     * @return {?}
	     */
	    function _transformProvider(provider, _a) {
	        var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
	        return {
	            token: provider.token,
	            useClass: provider.useClass,
	            useExisting: useExisting,
	            useFactory: provider.useFactory,
	            useValue: useValue,
	            deps: deps,
	            multi: provider.multi
	        };
	    }
	    /**
	     * @param {?} provider
	     * @param {?} __1
	     * @return {?}
	     */
	    function _transformProviderAst(provider, _a) {
	        var eager = _a.eager, providers = _a.providers;
	        return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
	    }
	    /**
	     * @param {?} directives
	     * @param {?} sourceSpan
	     * @param {?} targetErrors
	     * @return {?}
	     */
	    function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
	        var /** @type {?} */ providersByToken = new Map();
	        directives.forEach(function (directive) {
	            var /** @type {?} */ dirProvider = { token: { identifier: directive.type }, useClass: directive.type };
	            _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
	        });
	        // Note: directives need to be able to overwrite providers of a component!
	        var /** @type {?} */ directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));
	        directivesWithComponentFirst.forEach(function (directive) {
	            _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
	            _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
	        });
	        return providersByToken;
	    }
	    /**
	     * @param {?} providers
	     * @param {?} providerType
	     * @param {?} eager
	     * @param {?} sourceSpan
	     * @param {?} targetErrors
	     * @param {?} targetProvidersByToken
	     * @return {?}
	     */
	    function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
	        providers.forEach(function (provider) {
	            var /** @type {?} */ resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));
	            if (isPresent(resolvedProvider) && !!resolvedProvider.multiProvider !== !!provider.multi) {
	                targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + tokenName(resolvedProvider.token), sourceSpan));
	            }
	            if (!resolvedProvider) {
	                var /** @type {?} */ lifecycleHooks = provider.token.identifier &&
	                    ((provider.token.identifier)).lifecycleHooks ?
	                    ((provider.token.identifier)).lifecycleHooks :
	                    [];
	                resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
	                targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
	            }
	            else {
	                if (!provider.multi) {
	                    resolvedProvider.providers.length = 0;
	                }
	                resolvedProvider.providers.push(provider);
	            }
	        });
	    }
	    /**
	     * @param {?} component
	     * @return {?}
	     */
	    function _getViewQueries(component) {
	        var /** @type {?} */ viewQueries = new Map();
	        if (component.viewQueries) {
	            component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, query); });
	        }
	        return viewQueries;
	    }
	    /**
	     * @param {?} directives
	     * @return {?}
	     */
	    function _getContentQueries(directives) {
	        var /** @type {?} */ contentQueries = new Map();
	        directives.forEach(function (directive) {
	            if (directive.queries) {
	                directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, query); });
	            }
	        });
	        return contentQueries;
	    }
	    /**
	     * @param {?} map
	     * @param {?} query
	     * @return {?}
	     */
	    function _addQueryToTokenMap(map, query) {
	        query.selectors.forEach(function (token) {
	            var /** @type {?} */ entry = map.get(tokenReference(token));
	            if (!entry) {
	                entry = [];
	                map.set(tokenReference(token), entry);
	            }
	            entry.push(query);
	        });
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @abstract
	     */
	    var ElementSchemaRegistry = (function () {
	        function ElementSchemaRegistry() {
	        }
	        /**
	         * @abstract
	         * @param {?} tagName
	         * @param {?} propName
	         * @param {?} schemaMetas
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) { };
	        /**
	         * @abstract
	         * @param {?} tagName
	         * @param {?} schemaMetas
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) { };
	        /**
	         * @abstract
	         * @param {?} elementName
	         * @param {?} propName
	         * @param {?} isAttribute
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.securityContext = function (elementName, propName, isAttribute) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.allKnownElementNames = function () { };
	        /**
	         * @abstract
	         * @param {?} propName
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.getMappedPropName = function (propName) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.validateProperty = function (name) { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.validateAttribute = function (name) { };
	        /**
	         * @abstract
	         * @param {?} propName
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { };
	        /**
	         * @abstract
	         * @param {?} camelCaseProp
	         * @param {?} userProvidedProp
	         * @param {?} val
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) { };
	        return ElementSchemaRegistry;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var StyleWithImports = (function () {
	        /**
	         * @param {?} style
	         * @param {?} styleUrls
	         */
	        function StyleWithImports(style, styleUrls) {
	            this.style = style;
	            this.styleUrls = styleUrls;
	        }
	        return StyleWithImports;
	    }());
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    function isStyleUrlResolvable(url) {
	        if (url == null || url.length === 0 || url[0] == '/')
	            return false;
	        var /** @type {?} */ schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
	        return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
	    }
	    /**
	     * Rewrites stylesheets by resolving and removing the \@import urls that
	     * are either relative or don't have a `package:` scheme
	     * @param {?} resolver
	     * @param {?} baseUrl
	     * @param {?} cssText
	     * @return {?}
	     */
	    function extractStyleUrls(resolver, baseUrl, cssText) {
	        var /** @type {?} */ foundUrls = [];
	        var /** @type {?} */ modifiedCssText = cssText.replace(CSS_COMMENT_REGEXP, '').replace(CSS_IMPORT_REGEXP, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i - 0] = arguments[_i];
	            }
	            var /** @type {?} */ url = m[1] || m[2];
	            if (!isStyleUrlResolvable(url)) {
	                // Do not attempt to resolve non-package absolute URLs with URI scheme
	                return m[0];
	            }
	            foundUrls.push(resolver.resolve(baseUrl, url));
	            return '';
	        });
	        return new StyleWithImports(modifiedCssText, foundUrls);
	    }
	    var /** @type {?} */ CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
	    var /** @type {?} */ CSS_COMMENT_REGEXP = /\/\*.+?\*\//g;
	    var /** @type {?} */ URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$17 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ PROPERTY_PARTS_SEPARATOR = '.';
	    var /** @type {?} */ ATTRIBUTE_PREFIX = 'attr';
	    var /** @type {?} */ CLASS_PREFIX = 'class';
	    var /** @type {?} */ STYLE_PREFIX = 'style';
	    var /** @type {?} */ ANIMATE_PROP_PREFIX = 'animate-';
	    var BoundPropertyType = {};
	    BoundPropertyType.DEFAULT = 0;
	    BoundPropertyType.LITERAL_ATTR = 1;
	    BoundPropertyType.ANIMATION = 2;
	    BoundPropertyType[BoundPropertyType.DEFAULT] = "DEFAULT";
	    BoundPropertyType[BoundPropertyType.LITERAL_ATTR] = "LITERAL_ATTR";
	    BoundPropertyType[BoundPropertyType.ANIMATION] = "ANIMATION";
	    /**
	     * Represents a parsed property.
	     */
	    var BoundProperty = (function () {
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} type
	         * @param {?} sourceSpan
	         */
	        function BoundProperty(name, expression, type, sourceSpan) {
	            this.name = name;
	            this.expression = expression;
	            this.type = type;
	            this.sourceSpan = sourceSpan;
	        }
	        Object.defineProperty(BoundProperty.prototype, "isLiteral", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.type === BoundPropertyType.LITERAL_ATTR; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BoundProperty.prototype, "isAnimation", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.type === BoundPropertyType.ANIMATION; },
	            enumerable: true,
	            configurable: true
	        });
	        return BoundProperty;
	    }());
	    /**
	     * Parses bindings in templates and in the directive host area.
	     */
	    var BindingParser = (function () {
	        /**
	         * @param {?} _exprParser
	         * @param {?} _interpolationConfig
	         * @param {?} _schemaRegistry
	         * @param {?} pipes
	         * @param {?} _targetErrors
	         */
	        function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
	            var _this = this;
	            this._exprParser = _exprParser;
	            this._interpolationConfig = _interpolationConfig;
	            this._schemaRegistry = _schemaRegistry;
	            this._targetErrors = _targetErrors;
	            this.pipesByName = new Map();
	            pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });
	        }
	        /**
	         * @param {?} dirMeta
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype.createDirectiveHostPropertyAsts = function (dirMeta, sourceSpan) {
	            var _this = this;
	            if (dirMeta.hostProperties) {
	                var /** @type {?} */ boundProps_1 = [];
	                Object.keys(dirMeta.hostProperties).forEach(function (propName) {
	                    var /** @type {?} */ expression = dirMeta.hostProperties[propName];
	                    if (typeof expression === 'string') {
	                        _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
	                    }
	                    else {
	                        _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                    }
	                });
	                return boundProps_1.map(function (prop) { return _this.createElementPropertyAst(dirMeta.selector, prop); });
	            }
	        };
	        /**
	         * @param {?} dirMeta
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype.createDirectiveHostEventAsts = function (dirMeta, sourceSpan) {
	            var _this = this;
	            if (dirMeta.hostListeners) {
	                var /** @type {?} */ targetEventAsts_1 = [];
	                Object.keys(dirMeta.hostListeners).forEach(function (propName) {
	                    var /** @type {?} */ expression = dirMeta.hostListeners[propName];
	                    if (typeof expression === 'string') {
	                        _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
	                    }
	                    else {
	                        _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                    }
	                });
	                return targetEventAsts_1;
	            }
	        };
	        /**
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype.parseInterpolation = function (value, sourceSpan) {
	            var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	            try {
	                var /** @type {?} */ ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
	                if (ast)
	                    this._reportExpressionParserErrors(ast.errors, sourceSpan);
	                this._checkPipes(ast, sourceSpan);
	                return ast;
	            }
	            catch (e) {
	                this._reportError("" + e, sourceSpan);
	                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	            }
	        };
	        /**
	         * @param {?} prefixToken
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @param {?} targetVars
	         * @return {?}
	         */
	        BindingParser.prototype.parseInlineTemplateBinding = function (prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
	            var /** @type {?} */ bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
	            for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	                var /** @type {?} */ binding = bindings[i];
	                if (binding.keyIsVar) {
	                    targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
	                }
	                else if (binding.expression) {
	                    this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
	                }
	                else {
	                    targetMatchableAttrs.push([binding.key, '']);
	                    this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
	                }
	            }
	        };
	        /**
	         * @param {?} prefixToken
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype._parseTemplateBindings = function (prefixToken, value, sourceSpan) {
	            var _this = this;
	            var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	            try {
	                var /** @type {?} */ bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
	                this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
	                bindingsResult.templateBindings.forEach(function (binding) {
	                    if (binding.expression) {
	                        _this._checkPipes(binding.expression, sourceSpan);
	                    }
	                });
	                bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });
	                return bindingsResult.templateBindings;
	            }
	            catch (e) {
	                this._reportError("" + e, sourceSpan);
	                return [];
	            }
	        };
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @return {?}
	         */
	        BindingParser.prototype.parseLiteralAttr = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	            if (_isAnimationLabel(name)) {
	                name = name.substring(1);
	                if (value) {
	                    this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." +
	                        " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, ParseErrorLevel.FATAL);
	                }
	                this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
	            }
	            else {
	                targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
	            }
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} isHost
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @return {?}
	         */
	        BindingParser.prototype.parsePropertyBinding = function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
	            var /** @type {?} */ isAnimationProp = false;
	            if (name.startsWith(ANIMATE_PROP_PREFIX)) {
	                isAnimationProp = true;
	                name = name.substring(ANIMATE_PROP_PREFIX.length);
	            }
	            else if (_isAnimationLabel(name)) {
	                isAnimationProp = true;
	                name = name.substring(1);
	            }
	            if (isAnimationProp) {
	                this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
	            }
	            else {
	                this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
	            }
	        };
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @return {?}
	         */
	        BindingParser.prototype.parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	            var /** @type {?} */ expr = this.parseInterpolation(value, sourceSpan);
	            if (expr) {
	                this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} name
	         * @param {?} ast
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @return {?}
	         */
	        BindingParser.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
	            targetMatchableAttrs.push([name, ast.source]);
	            targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @return {?}
	         */
	        BindingParser.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
	            // This will occur when a @trigger is not paired with an expression.
	            // For animations it is valid to not have an expression since */void
	            // states will be applied by angular when the element is attached/detached
	            var /** @type {?} */ ast = this._parseBinding(expression || 'null', false, sourceSpan);
	            targetMatchableAttrs.push([name, ast.source]);
	            targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
	        };
	        /**
	         * @param {?} value
	         * @param {?} isHostBinding
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype._parseBinding = function (value, isHostBinding, sourceSpan) {
	            var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	            try {
	                var /** @type {?} */ ast = isHostBinding ?
	                    this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :
	                    this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
	                if (ast)
	                    this._reportExpressionParserErrors(ast.errors, sourceSpan);
	                this._checkPipes(ast, sourceSpan);
	                return ast;
	            }
	            catch (e) {
	                this._reportError("" + e, sourceSpan);
	                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	            }
	        };
	        /**
	         * @param {?} elementSelector
	         * @param {?} boundProp
	         * @return {?}
	         */
	        BindingParser.prototype.createElementPropertyAst = function (elementSelector, boundProp) {
	            if (boundProp.isAnimation) {
	                return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, false, boundProp.expression, null, boundProp.sourceSpan);
	            }
	            var /** @type {?} */ unit = null;
	            var /** @type {?} */ bindingType;
	            var /** @type {?} */ boundPropertyName = null;
	            var /** @type {?} */ parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
	            var /** @type {?} */ securityContexts;
	            // Check check for special cases (prefix style, attr, class)
	            if (parts.length > 1) {
	                if (parts[0] == ATTRIBUTE_PREFIX) {
	                    boundPropertyName = parts[1];
	                    this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
	                    securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
	                    var /** @type {?} */ nsSeparatorIdx = boundPropertyName.indexOf(':');
	                    if (nsSeparatorIdx > -1) {
	                        var /** @type {?} */ ns = boundPropertyName.substring(0, nsSeparatorIdx);
	                        var /** @type {?} */ name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
	                        boundPropertyName = mergeNsAndName(ns, name_1);
	                    }
	                    bindingType = PropertyBindingType.Attribute;
	                }
	                else if (parts[0] == CLASS_PREFIX) {
	                    boundPropertyName = parts[1];
	                    bindingType = PropertyBindingType.Class;
	                    securityContexts = [_angular_core.SecurityContext.NONE];
	                }
	                else if (parts[0] == STYLE_PREFIX) {
	                    unit = parts.length > 2 ? parts[2] : null;
	                    boundPropertyName = parts[1];
	                    bindingType = PropertyBindingType.Style;
	                    securityContexts = [_angular_core.SecurityContext.STYLE];
	                }
	            }
	            // If not a special case, use the full property name
	            if (boundPropertyName === null) {
	                boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);
	                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
	                bindingType = PropertyBindingType.Property;
	                this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
	            }
	            return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetEvents
	         * @return {?}
	         */
	        BindingParser.prototype.parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	            if (_isAnimationLabel(name)) {
	                name = name.substr(1);
	                this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
	            }
	            else {
	                this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
	            }
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} targetEvents
	         * @return {?}
	         */
	        BindingParser.prototype._parseAnimationEvent = function (name, expression, sourceSpan, targetEvents) {
	            var /** @type {?} */ matches = splitAtPeriod(name, [name, '']);
	            var /** @type {?} */ eventName = matches[0];
	            var /** @type {?} */ phase = matches[1].toLowerCase();
	            if (phase) {
	                switch (phase) {
	                    case 'start':
	                    case 'done':
	                        var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);
	                        targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
	                        break;
	                    default:
	                        this._reportError("The provided animation output phase value \"" + phase + "\" for \"@" + eventName + "\" is not supported (use start or done)", sourceSpan);
	                        break;
	                }
	            }
	            else {
	                this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
	            }
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetEvents
	         * @return {?}
	         */
	        BindingParser.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	            // long format: 'target: eventName'
	            var _a = splitAtColon(name, [null, name]), target = _a[0], eventName = _a[1];
	            var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);
	            targetMatchableAttrs.push([name, ast.source]);
	            targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
	            // Don't detect directives for event names for now,
	            // so don't add the event name to the matchableAttrs
	        };
	        /**
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype._parseAction = function (value, sourceSpan) {
	            var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	            try {
	                var /** @type {?} */ ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
	                if (ast) {
	                    this._reportExpressionParserErrors(ast.errors, sourceSpan);
	                }
	                if (!ast || ast.ast instanceof EmptyExpr) {
	                    this._reportError("Empty expressions are not allowed", sourceSpan);
	                    return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	                }
	                this._checkPipes(ast, sourceSpan);
	                return ast;
	            }
	            catch (e) {
	                this._reportError("" + e, sourceSpan);
	                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	            }
	        };
	        /**
	         * @param {?} message
	         * @param {?} sourceSpan
	         * @param {?=} level
	         * @return {?}
	         */
	        BindingParser.prototype._reportError = function (message, sourceSpan, level) {
	            if (level === void 0) { level = ParseErrorLevel.FATAL; }
	            this._targetErrors.push(new ParseError(sourceSpan, message, level));
	        };
	        /**
	         * @param {?} errors
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype._reportExpressionParserErrors = function (errors, sourceSpan) {
	            for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
	                var error = errors_1[_i];
	                this._reportError(error.message, sourceSpan);
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype._checkPipes = function (ast, sourceSpan) {
	            var _this = this;
	            if (ast) {
	                var /** @type {?} */ collector = new PipeCollector();
	                ast.visit(collector);
	                collector.pipes.forEach(function (ast, pipeName) {
	                    if (!_this.pipesByName.has(pipeName)) {
	                        _this._reportError("The pipe '" + pipeName + "' could not be found", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
	                    }
	                });
	            }
	        };
	        /**
	         * @param {?} propName the name of the property / attribute
	         * @param {?} sourceSpan
	         * @param {?} isAttr true when binding to an attribute
	         * @return {?}
	         */
	        BindingParser.prototype._validatePropertyOrAttributeName = function (propName, sourceSpan, isAttr) {
	            var /** @type {?} */ report = isAttr ? this._schemaRegistry.validateAttribute(propName) :
	                this._schemaRegistry.validateProperty(propName);
	            if (report.error) {
	                this._reportError(report.msg, sourceSpan, ParseErrorLevel.FATAL);
	            }
	        };
	        return BindingParser;
	    }());
	    var PipeCollector = (function (_super) {
	        __extends$17(PipeCollector, _super);
	        function PipeCollector() {
	            _super.apply(this, arguments);
	            this.pipes = new Map();
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        PipeCollector.prototype.visitPipe = function (ast, context) {
	            this.pipes.set(ast.name, ast);
	            ast.exp.visit(this);
	            this.visitAll(ast.args, context);
	            return null;
	        };
	        return PipeCollector;
	    }(RecursiveAstVisitor));
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    function _isAnimationLabel(name) {
	        return name[0] == '@';
	    }
	    /**
	     * @param {?} registry
	     * @param {?} selector
	     * @param {?} propName
	     * @param {?} isAttribute
	     * @return {?}
	     */
	    function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
	        var /** @type {?} */ ctxs = [];
	        CssSelector.parse(selector).forEach(function (selector) {
	            var /** @type {?} */ elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
	            var /** @type {?} */ notElementNames = new Set(selector.notSelectors.filter(function (selector) { return selector.isElementSelector(); })
	                .map(function (selector) { return selector.element; }));
	            var /** @type {?} */ possibleElementNames = elementNames.filter(function (elementName) { return !notElementNames.has(elementName); });
	            ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) { return registry.securityContext(elementName, propName, isAttribute); }));
	        });
	        return ctxs.length === 0 ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
	    }

	    var /** @type {?} */ NG_CONTENT_SELECT_ATTR = 'select';
	    var /** @type {?} */ NG_CONTENT_ELEMENT = 'ng-content';
	    var /** @type {?} */ LINK_ELEMENT = 'link';
	    var /** @type {?} */ LINK_STYLE_REL_ATTR = 'rel';
	    var /** @type {?} */ LINK_STYLE_HREF_ATTR = 'href';
	    var /** @type {?} */ LINK_STYLE_REL_VALUE = 'stylesheet';
	    var /** @type {?} */ STYLE_ELEMENT = 'style';
	    var /** @type {?} */ SCRIPT_ELEMENT = 'script';
	    var /** @type {?} */ NG_NON_BINDABLE_ATTR = 'ngNonBindable';
	    var /** @type {?} */ NG_PROJECT_AS = 'ngProjectAs';
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    function preparseElement(ast) {
	        var /** @type {?} */ selectAttr = null;
	        var /** @type {?} */ hrefAttr = null;
	        var /** @type {?} */ relAttr = null;
	        var /** @type {?} */ nonBindable = false;
	        var /** @type {?} */ projectAs = null;
	        ast.attrs.forEach(function (attr) {
	            var /** @type {?} */ lcAttrName = attr.name.toLowerCase();
	            if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
	                selectAttr = attr.value;
	            }
	            else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
	                hrefAttr = attr.value;
	            }
	            else if (lcAttrName == LINK_STYLE_REL_ATTR) {
	                relAttr = attr.value;
	            }
	            else if (attr.name == NG_NON_BINDABLE_ATTR) {
	                nonBindable = true;
	            }
	            else if (attr.name == NG_PROJECT_AS) {
	                if (attr.value.length > 0) {
	                    projectAs = attr.value;
	                }
	            }
	        });
	        selectAttr = normalizeNgContentSelect(selectAttr);
	        var /** @type {?} */ nodeName = ast.name.toLowerCase();
	        var /** @type {?} */ type = PreparsedElementType.OTHER;
	        if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
	            type = PreparsedElementType.NG_CONTENT;
	        }
	        else if (nodeName == STYLE_ELEMENT) {
	            type = PreparsedElementType.STYLE;
	        }
	        else if (nodeName == SCRIPT_ELEMENT) {
	            type = PreparsedElementType.SCRIPT;
	        }
	        else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
	            type = PreparsedElementType.STYLESHEET;
	        }
	        return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
	    }
	    var PreparsedElementType = {};
	    PreparsedElementType.NG_CONTENT = 0;
	    PreparsedElementType.STYLE = 1;
	    PreparsedElementType.STYLESHEET = 2;
	    PreparsedElementType.SCRIPT = 3;
	    PreparsedElementType.OTHER = 4;
	    PreparsedElementType[PreparsedElementType.NG_CONTENT] = "NG_CONTENT";
	    PreparsedElementType[PreparsedElementType.STYLE] = "STYLE";
	    PreparsedElementType[PreparsedElementType.STYLESHEET] = "STYLESHEET";
	    PreparsedElementType[PreparsedElementType.SCRIPT] = "SCRIPT";
	    PreparsedElementType[PreparsedElementType.OTHER] = "OTHER";
	    var PreparsedElement = (function () {
	        /**
	         * @param {?} type
	         * @param {?} selectAttr
	         * @param {?} hrefAttr
	         * @param {?} nonBindable
	         * @param {?} projectAs
	         */
	        function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
	            this.type = type;
	            this.selectAttr = selectAttr;
	            this.hrefAttr = hrefAttr;
	            this.nonBindable = nonBindable;
	            this.projectAs = projectAs;
	        }
	        return PreparsedElement;
	    }());
	    /**
	     * @param {?} selectAttr
	     * @return {?}
	     */
	    function normalizeNgContentSelect(selectAttr) {
	        if (selectAttr === null || selectAttr.length === 0) {
	            return '*';
	        }
	        return selectAttr;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    // Group 1 = "bind-"
	    // Group 2 = "let-"
	    // Group 3 = "ref-/#"
	    // Group 4 = "on-"
	    // Group 5 = "bindon-"
	    // Group 6 = "@"
	    // Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
	    // Group 8 = identifier inside [()]
	    // Group 9 = identifier inside []
	    // Group 10 = identifier inside ()
	    var /** @type {?} */ BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
	    var /** @type {?} */ KW_BIND_IDX = 1;
	    var /** @type {?} */ KW_LET_IDX = 2;
	    var /** @type {?} */ KW_REF_IDX = 3;
	    var /** @type {?} */ KW_ON_IDX = 4;
	    var /** @type {?} */ KW_BINDON_IDX = 5;
	    var /** @type {?} */ KW_AT_IDX = 6;
	    var /** @type {?} */ IDENT_KW_IDX = 7;
	    var /** @type {?} */ IDENT_BANANA_BOX_IDX = 8;
	    var /** @type {?} */ IDENT_PROPERTY_IDX = 9;
	    var /** @type {?} */ IDENT_EVENT_IDX = 10;
	    var /** @type {?} */ TEMPLATE_ELEMENT = 'template';
	    var /** @type {?} */ TEMPLATE_ATTR = 'template';
	    var /** @type {?} */ TEMPLATE_ATTR_PREFIX = '*';
	    var /** @type {?} */ CLASS_ATTR = 'class';
	    var /** @type {?} */ TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
	    /**
	     * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
	     * parsed templates before compilation is invoked, allowing custom expression syntax
	     * and other advanced transformations.
	     *
	     * This is currently an internal-only feature and not meant for general use.
	     */
	    var /** @type {?} */ TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken('TemplateTransforms');
	    var TemplateParseError = (function (_super) {
	        __extends(TemplateParseError, _super);
	        /**
	         * @param {?} message
	         * @param {?} span
	         * @param {?} level
	         */
	        function TemplateParseError(message, span, level) {
	            _super.call(this, span, message, level);
	        }
	        return TemplateParseError;
	    }(ParseError));
	    var TemplateParseResult = (function () {
	        /**
	         * @param {?=} templateAst
	         * @param {?=} errors
	         */
	        function TemplateParseResult(templateAst, errors) {
	            this.templateAst = templateAst;
	            this.errors = errors;
	        }
	        return TemplateParseResult;
	    }());
	    var TemplateParser = (function () {
	        /**
	         * @param {?} _exprParser
	         * @param {?} _schemaRegistry
	         * @param {?} _htmlParser
	         * @param {?} _console
	         * @param {?} transforms
	         */
	        function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
	            this._exprParser = _exprParser;
	            this._schemaRegistry = _schemaRegistry;
	            this._htmlParser = _htmlParser;
	            this._console = _console;
	            this.transforms = transforms;
	        }
	        /**
	         * @param {?} component
	         * @param {?} template
	         * @param {?} directives
	         * @param {?} pipes
	         * @param {?} schemas
	         * @param {?} templateUrl
	         * @return {?}
	         */
	        TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {
	            var /** @type {?} */ result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
	            var /** @type {?} */ warnings = result.errors.filter(function (error) { return error.level === ParseErrorLevel.WARNING; });
	            var /** @type {?} */ errors = result.errors.filter(function (error) { return error.level === ParseErrorLevel.FATAL; });
	            if (warnings.length > 0) {
	                this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
	            }
	            if (errors.length > 0) {
	                var /** @type {?} */ errorString = errors.join('\n');
	                throw new SyntaxError("Template parse errors:\n" + errorString);
	            }
	            return result.templateAst;
	        };
	        /**
	         * @param {?} component
	         * @param {?} template
	         * @param {?} directives
	         * @param {?} pipes
	         * @param {?} schemas
	         * @param {?} templateUrl
	         * @return {?}
	         */
	        TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {
	            return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
	        };
	        /**
	         * @param {?} htmlAstWithErrors
	         * @param {?} component
	         * @param {?} template
	         * @param {?} directives
	         * @param {?} pipes
	         * @param {?} schemas
	         * @param {?} templateUrl
	         * @return {?}
	         */
	        TemplateParser.prototype.tryParseHtml = function (htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
	            var /** @type {?} */ result;
	            var /** @type {?} */ errors = htmlAstWithErrors.errors;
	            if (htmlAstWithErrors.rootNodes.length > 0) {
	                var /** @type {?} */ uniqDirectives = removeSummaryDuplicates(directives);
	                var /** @type {?} */ uniqPipes = removeSummaryDuplicates(pipes);
	                var /** @type {?} */ providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
	                var /** @type {?} */ interpolationConfig = void 0;
	                if (component.template && component.template.interpolation) {
	                    interpolationConfig = {
	                        start: component.template.interpolation[0],
	                        end: component.template.interpolation[1]
	                    };
	                }
	                var /** @type {?} */ bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
	                var /** @type {?} */ parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
	                result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
	                errors.push.apply(errors, providerViewContext.errors);
	            }
	            else {
	                result = [];
	            }
	            this._assertNoReferenceDuplicationOnTemplate(result, errors);
	            if (errors.length > 0) {
	                return new TemplateParseResult(result, errors);
	            }
	            if (this.transforms) {
	                this.transforms.forEach(function (transform) { result = templateVisitAll(transform, result); });
	            }
	            return new TemplateParseResult(result, errors);
	        };
	        /**
	         * @param {?} htmlAstWithErrors
	         * @param {?=} forced
	         * @return {?}
	         */
	        TemplateParser.prototype.expandHtml = function (htmlAstWithErrors, forced) {
	            if (forced === void 0) { forced = false; }
	            var /** @type {?} */ errors = htmlAstWithErrors.errors;
	            if (errors.length == 0 || forced) {
	                // Transform ICU messages to angular directives
	                var /** @type {?} */ expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
	                errors.push.apply(errors, expandedHtmlAst.errors);
	                htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
	            }
	            return htmlAstWithErrors;
	        };
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        TemplateParser.prototype.getInterpolationConfig = function (component) {
	            if (component.template) {
	                return InterpolationConfig.fromArray(component.template.interpolation);
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} result
	         * @param {?} errors
	         * @return {?}
	         */
	        TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
	            var /** @type {?} */ existingReferences = [];
	            result.filter(function (element) { return !!((element)).references; })
	                .forEach(function (element) { return ((element)).references.forEach(function (reference) {
	                var /** @type {?} */ name = reference.name;
	                if (existingReferences.indexOf(name) < 0) {
	                    existingReferences.push(name);
	                }
	                else {
	                    var /** @type {?} */ error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, ParseErrorLevel.FATAL);
	                    errors.push(error);
	                }
	            }); });
	        };
	        /** @nocollapse */
	        TemplateParser.ctorParameters = function () { return [
	            { type: Parser, },
	            { type: ElementSchemaRegistry, },
	            { type: I18NHtmlParser, },
	            { type: Console, },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [TEMPLATE_TRANSFORMS,] },] },
	        ]; };
	        TemplateParser = __decorate([
	            CompilerInjectable(), 
	            __metadata('design:paramtypes', [Parser, ElementSchemaRegistry, I18NHtmlParser, Console, Array])
	        ], TemplateParser);
	        return TemplateParser;
	    }());
	    var TemplateParseVisitor = (function () {
	        /**
	         * @param {?} providerViewContext
	         * @param {?} directives
	         * @param {?} _bindingParser
	         * @param {?} _schemaRegistry
	         * @param {?} _schemas
	         * @param {?} _targetErrors
	         */
	        function TemplateParseVisitor(providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
	            var _this = this;
	            this.providerViewContext = providerViewContext;
	            this._bindingParser = _bindingParser;
	            this._schemaRegistry = _schemaRegistry;
	            this._schemas = _schemas;
	            this._targetErrors = _targetErrors;
	            this.selectorMatcher = new SelectorMatcher();
	            this.directivesIndex = new Map();
	            this.ngContentCount = 0;
	            directives.forEach(function (directive, index) {
	                var selector = CssSelector.parse(directive.selector);
	                _this.selectorMatcher.addSelectables(selector, directive);
	                _this.directivesIndex.set(directive, index);
	            });
	        }
	        /**
	         * @param {?} expansion
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) { return null; };
	        /**
	         * @param {?} expansionCase
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return null; };
	        /**
	         * @param {?} text
	         * @param {?} parent
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitText = function (text, parent) {
	            var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	            var /** @type {?} */ expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
	            if (expr) {
	                return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);
	            }
	            else {
	                return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	            }
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {
	            return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	        };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitComment = function (comment, context) { return null; };
	        /**
	         * @param {?} element
	         * @param {?} parent
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitElement = function (element, parent) {
	            var _this = this;
	            var /** @type {?} */ nodeName = element.name;
	            var /** @type {?} */ preparsedElement = preparseElement(element);
	            if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	                preparsedElement.type === PreparsedElementType.STYLE) {
	                // Skipping <script> for security reasons
	                // Skipping <style> as we already processed them
	                // in the StyleCompiler
	                return null;
	            }
	            if (preparsedElement.type === PreparsedElementType.STYLESHEET &&
	                isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	                // Skipping stylesheets with either relative urls or package scheme as we already processed
	                // them in the StyleCompiler
	                return null;
	            }
	            var /** @type {?} */ matchableAttrs = [];
	            var /** @type {?} */ elementOrDirectiveProps = [];
	            var /** @type {?} */ elementOrDirectiveRefs = [];
	            var /** @type {?} */ elementVars = [];
	            var /** @type {?} */ events = [];
	            var /** @type {?} */ templateElementOrDirectiveProps = [];
	            var /** @type {?} */ templateMatchableAttrs = [];
	            var /** @type {?} */ templateElementVars = [];
	            var /** @type {?} */ hasInlineTemplates = false;
	            var /** @type {?} */ attrs = [];
	            var /** @type {?} */ lcElName = splitNsName(nodeName.toLowerCase())[1];
	            var /** @type {?} */ isTemplateElement = lcElName == TEMPLATE_ELEMENT;
	            element.attrs.forEach(function (attr) {
	                var /** @type {?} */ hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
	                var /** @type {?} */ templateBindingsSource;
	                var /** @type {?} */ prefixToken;
	                var /** @type {?} */ normalizedName = _this._normalizeAttributeName(attr.name);
	                if (normalizedName == TEMPLATE_ATTR) {
	                    templateBindingsSource = attr.value;
	                }
	                else if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
	                    templateBindingsSource = attr.value;
	                    prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ':';
	                }
	                var /** @type {?} */ hasTemplateBinding = isPresent(templateBindingsSource);
	                if (hasTemplateBinding) {
	                    if (hasInlineTemplates) {
	                        _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
	                    }
	                    hasInlineTemplates = true;
	                    _this._bindingParser.parseInlineTemplateBinding(prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
	                }
	                if (!hasBinding && !hasTemplateBinding) {
	                    // don't include the bindings as attributes as well in the AST
	                    attrs.push(_this.visitAttribute(attr, null));
	                    matchableAttrs.push([attr.name, attr.value]);
	                }
	            });
	            var /** @type {?} */ elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
	            var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;
	            var /** @type {?} */ references = [];
	            var /** @type {?} */ directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
	            var /** @type {?} */ elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts);
	            var /** @type {?} */ isViewRoot = parent.isTemplateElement || hasInlineTemplates;
	            var /** @type {?} */ providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
	            var /** @type {?} */ children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
	            providerContext.afterElement();
	            // Override the actual selector when the `ngProjectAs` attribute is provided
	            var /** @type {?} */ projectionSelector = isPresent(preparsedElement.projectAs) ?
	                CssSelector.parse(preparsedElement.projectAs)[0] :
	                elementCssSelector;
	            var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(projectionSelector);
	            var /** @type {?} */ parsedElement;
	            if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
	                if (element.children && !element.children.every(_isEmptyTextNode)) {
	                    this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
	                }
	                parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	            }
	            else if (isTemplateElement) {
	                this._assertAllEventsPublishedByDirectives(directiveAsts, events);
	                this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
	                parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	            }
	            else {
	                this._assertElementExists(matchElement, element);
	                this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
	                var /** @type {?} */ ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
	                parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan);
	                this._findComponentDirectives(directiveAsts)
	                    .forEach(function (componentDirectiveAst) { return _this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template); });
	                var /** @type {?} */ componentTemplate = providerContext.viewContext.component.template;
	                this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate.toSummary());
	            }
	            if (hasInlineTemplates) {
	                var /** @type {?} */ templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
	                var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;
	                var /** @type {?} */ templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
	                var /** @type {?} */ templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
	                this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
	                var /** @type {?} */ templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
	                templateProviderContext.afterElement();
	                parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
	            }
	            return parsedElement;
	        };
	        /**
	         * @param {?} inputs
	         * @param {?} outputs
	         * @param {?} template
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._validateElementAnimationInputOutputs = function (inputs, outputs, template) {
	            var _this = this;
	            var /** @type {?} */ triggerLookup = new Set();
	            template.animations.forEach(function (entry) { triggerLookup.add(entry); });
	            var /** @type {?} */ animationInputs = inputs.filter(function (input) { return input.isAnimation; });
	            animationInputs.forEach(function (input) {
	                var /** @type {?} */ name = input.name;
	                if (!triggerLookup.has(name)) {
	                    _this._reportError("Couldn't find an animation entry for \"" + name + "\"", input.sourceSpan);
	                }
	            });
	            outputs.forEach(function (output) {
	                if (output.isAnimation) {
	                    var /** @type {?} */ found = animationInputs.find(function (input) { return input.name == output.name; });
	                    if (!found) {
	                        _this._reportError("Unable to listen on (@" + output.name + "." + output.phase + ") because the animation trigger [@" + output.name + "] isn't being used on the same element", output.sourceSpan);
	                    }
	                }
	            });
	        };
	        /**
	         * @param {?} isTemplateElement
	         * @param {?} attr
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @param {?} targetEvents
	         * @param {?} targetRefs
	         * @param {?} targetVars
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
	            var /** @type {?} */ name = this._normalizeAttributeName(attr.name);
	            var /** @type {?} */ value = attr.value;
	            var /** @type {?} */ srcSpan = attr.sourceSpan;
	            var /** @type {?} */ bindParts = name.match(BIND_NAME_REGEXP);
	            var /** @type {?} */ hasBinding = false;
	            if (bindParts !== null) {
	                hasBinding = true;
	                if (isPresent(bindParts[KW_BIND_IDX])) {
	                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                }
	                else if (bindParts[KW_LET_IDX]) {
	                    if (isTemplateElement) {
	                        var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];
	                        this._parseVariable(identifier, value, srcSpan, targetVars);
	                    }
	                    else {
	                        this._reportError("\"let-\" is only supported on template elements.", srcSpan);
	                    }
	                }
	                else if (bindParts[KW_REF_IDX]) {
	                    var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];
	                    this._parseReference(identifier, value, srcSpan, targetRefs);
	                }
	                else if (bindParts[KW_ON_IDX]) {
	                    this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	                }
	                else if (bindParts[KW_BINDON_IDX]) {
	                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                    this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	                }
	                else if (bindParts[KW_AT_IDX]) {
	                    this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	                }
	                else if (bindParts[IDENT_BANANA_BOX_IDX]) {
	                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                    this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	                }
	                else if (bindParts[IDENT_PROPERTY_IDX]) {
	                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                }
	                else if (bindParts[IDENT_EVENT_IDX]) {
	                    this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	                }
	            }
	            else {
	                hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
	            }
	            if (!hasBinding) {
	                this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	            }
	            return hasBinding;
	        };
	        /**
	         * @param {?} attrName
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
	            return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
	        };
	        /**
	         * @param {?} identifier
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?} targetVars
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
	            if (identifier.indexOf('-') > -1) {
	                this._reportError("\"-\" is not allowed in variable names", sourceSpan);
	            }
	            targetVars.push(new VariableAst(identifier, value, sourceSpan));
	        };
	        /**
	         * @param {?} identifier
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?} targetRefs
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
	            if (identifier.indexOf('-') > -1) {
	                this._reportError("\"-\" is not allowed in reference names", sourceSpan);
	            }
	            targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetEvents
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	            this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
	        };
	        /**
	         * @param {?} selectorMatcher
	         * @param {?} elementCssSelector
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
	            var _this = this;
	            // Need to sort the directives so that we get consistent results throughout,
	            // as selectorMatcher uses Maps inside.
	            // Also deduplicate directives as they might match more than one time!
	            var /** @type {?} */ directives = new Array(this.directivesIndex.size);
	            // Whether any directive selector matches on the element name
	            var /** @type {?} */ matchElement = false;
	            selectorMatcher.match(elementCssSelector, function (selector, directive) {
	                directives[_this.directivesIndex.get(directive)] = directive;
	                matchElement = matchElement || selector.hasElementSelector();
	            });
	            return {
	                directives: directives.filter(function (dir) { return !!dir; }),
	                matchElement: matchElement,
	            };
	        };
	        /**
	         * @param {?} isTemplateElement
	         * @param {?} elementName
	         * @param {?} directives
	         * @param {?} props
	         * @param {?} elementOrDirectiveRefs
	         * @param {?} elementSourceSpan
	         * @param {?} targetReferences
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
	            var _this = this;
	            var /** @type {?} */ matchedReferences = new Set();
	            var /** @type {?} */ component = null;
	            var /** @type {?} */ directiveAsts = directives.map(function (directive) {
	                var /** @type {?} */ sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + identifierName(directive.type));
	                if (directive.isComponent) {
	                    component = directive;
	                }
	                var /** @type {?} */ directiveProperties = [];
	                var /** @type {?} */ hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, sourceSpan);
	                // Note: We need to check the host properties here as well,
	                // as we don't know the element name in the DirectiveWrapperCompiler yet.
	                _this._checkPropertiesInSchema(elementName, hostProperties);
	                var /** @type {?} */ hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
	                _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
	                elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	                    if ((elOrDirRef.value.length === 0 && directive.isComponent) ||
	                        (directive.exportAs == elOrDirRef.value)) {
	                        targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
	                        matchedReferences.add(elOrDirRef.name);
	                    }
	                });
	                return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
	            });
	            elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	                if (elOrDirRef.value.length > 0) {
	                    if (!matchedReferences.has(elOrDirRef.name)) {
	                        _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
	                    }
	                }
	                else if (!component) {
	                    var /** @type {?} */ refToken = null;
	                    if (isTemplateElement) {
	                        refToken = createIdentifierToken(Identifiers.TemplateRef);
	                    }
	                    targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
	                }
	            });
	            return directiveAsts;
	        };
	        /**
	         * @param {?} directiveProperties
	         * @param {?} boundProps
	         * @param {?} targetBoundDirectiveProps
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
	            if (directiveProperties) {
	                var /** @type {?} */ boundPropsByName_1 = new Map();
	                boundProps.forEach(function (boundProp) {
	                    var /** @type {?} */ prevValue = boundPropsByName_1.get(boundProp.name);
	                    if (!prevValue || prevValue.isLiteral) {
	                        // give [a]="b" a higher precedence than a="b" on the same element
	                        boundPropsByName_1.set(boundProp.name, boundProp);
	                    }
	                });
	                Object.keys(directiveProperties).forEach(function (dirProp) {
	                    var /** @type {?} */ elProp = directiveProperties[dirProp];
	                    var /** @type {?} */ boundProp = boundPropsByName_1.get(elProp);
	                    // Bindings are optional, so this binding only needs to be set up if an expression is given.
	                    if (boundProp) {
	                        targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
	                    }
	                });
	            }
	        };
	        /**
	         * @param {?} elementName
	         * @param {?} props
	         * @param {?} directives
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
	            var _this = this;
	            var /** @type {?} */ boundElementProps = [];
	            var /** @type {?} */ boundDirectivePropsIndex = new Map();
	            directives.forEach(function (directive) {
	                directive.inputs.forEach(function (prop) {
	                    boundDirectivePropsIndex.set(prop.templateName, prop);
	                });
	            });
	            props.forEach(function (prop) {
	                if (!prop.isLiteral && !boundDirectivePropsIndex.get(prop.name)) {
	                    boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
	                }
	            });
	            this._checkPropertiesInSchema(elementName, boundElementProps);
	            return boundElementProps;
	        };
	        /**
	         * @param {?} directives
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._findComponentDirectives = function (directives) {
	            return directives.filter(function (directive) { return directive.directive.isComponent; });
	        };
	        /**
	         * @param {?} directives
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
	            return this._findComponentDirectives(directives)
	                .map(function (directive) { return identifierName(directive.directive.type); });
	        };
	        /**
	         * @param {?} directives
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
	            var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);
	            if (componentTypeNames.length > 1) {
	                this._reportError("More than one component matched on this element.\n" +
	                    "Make sure that only one component's selector can match a given element.\n" +
	                    ("Conflicting components: " + componentTypeNames.join(',')), sourceSpan);
	            }
	        };
	        /**
	         * Make sure that non-angular tags conform to the schemas.
	         *
	         * Note: An element is considered an angular tag when at least one directive selector matches the
	         * tag name.
	         *
	         * @param {?} matchElement Whether any directive has matched on the tag name
	         * @param {?} element the html element
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {
	            var /** @type {?} */ elName = element.name.replace(/^:xhtml:/, '');
	            if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
	                var /** @type {?} */ errorMsg = ("'" + elName + "' is not a known element:\n") +
	                    ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") +
	                    ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.");
	                this._reportError(errorMsg, element.sourceSpan);
	            }
	        };
	        /**
	         * @param {?} directives
	         * @param {?} elementProps
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
	            var _this = this;
	            var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);
	            if (componentTypeNames.length > 0) {
	                this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
	            }
	            elementProps.forEach(function (prop) {
	                _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", sourceSpan);
	            });
	        };
	        /**
	         * @param {?} directives
	         * @param {?} events
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
	            var _this = this;
	            var /** @type {?} */ allDirectiveEvents = new Set();
	            directives.forEach(function (directive) {
	                Object.keys(directive.directive.outputs).forEach(function (k) {
	                    var /** @type {?} */ eventName = directive.directive.outputs[k];
	                    allDirectiveEvents.add(eventName);
	                });
	            });
	            events.forEach(function (event) {
	                if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
	                    _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", event.sourceSpan);
	                }
	            });
	        };
	        /**
	         * @param {?} elementName
	         * @param {?} boundProps
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._checkPropertiesInSchema = function (elementName, boundProps) {
	            var _this = this;
	            boundProps.forEach(function (boundProp) {
	                if (boundProp.type === PropertyBindingType.Property &&
	                    !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
	                    var /** @type {?} */ errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
	                    if (elementName.indexOf('-') > -1) {
	                        errorMsg +=
	                            ("\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module.") +
	                                ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.\n");
	                    }
	                    _this._reportError(errorMsg, boundProp.sourceSpan);
	                }
	            });
	        };
	        /**
	         * @param {?} message
	         * @param {?} sourceSpan
	         * @param {?=} level
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
	            if (level === void 0) { level = ParseErrorLevel.FATAL; }
	            this._targetErrors.push(new ParseError(sourceSpan, message, level));
	        };
	        return TemplateParseVisitor;
	    }());
	    var NonBindableVisitor = (function () {
	        function NonBindableVisitor() {
	        }
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitElement = function (ast, parent) {
	            var /** @type {?} */ preparsedElement = preparseElement(ast);
	            if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	                preparsedElement.type === PreparsedElementType.STYLE ||
	                preparsedElement.type === PreparsedElementType.STYLESHEET) {
	                // Skipping <script> for security reasons
	                // Skipping <style> and stylesheets as we already processed them
	                // in the StyleCompiler
	                return null;
	            }
	            var /** @type {?} */ attrNameAndValues = ast.attrs.map(function (attr) { return [attr.name, attr.value]; });
	            var /** @type {?} */ selector = createElementCssSelector(ast.name, attrNameAndValues);
	            var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(selector);
	            var /** @type {?} */ children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
	            return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
	        };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitComment = function (comment, context) { return null; };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {
	            return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	        };
	        /**
	         * @param {?} text
	         * @param {?} parent
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitText = function (text, parent) {
	            var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	            return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	        };
	        /**
	         * @param {?} expansion
	         * @param {?} context
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitExpansion = function (expansion, context) { return expansion; };
	        /**
	         * @param {?} expansionCase
	         * @param {?} context
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return expansionCase; };
	        return NonBindableVisitor;
	    }());
	    var ElementOrDirectiveRef = (function () {
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function ElementOrDirectiveRef(name, value, sourceSpan) {
	            this.name = name;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        return ElementOrDirectiveRef;
	    }());
	    /**
	     * @param {?} classAttrValue
	     * @return {?}
	     */
	    function splitClasses(classAttrValue) {
	        return classAttrValue.trim().split(/\s+/g);
	    }
	    var ElementContext = (function () {
	        /**
	         * @param {?} isTemplateElement
	         * @param {?} _ngContentIndexMatcher
	         * @param {?} _wildcardNgContentIndex
	         * @param {?} providerContext
	         */
	        function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
	            this.isTemplateElement = isTemplateElement;
	            this._ngContentIndexMatcher = _ngContentIndexMatcher;
	            this._wildcardNgContentIndex = _wildcardNgContentIndex;
	            this.providerContext = providerContext;
	        }
	        /**
	         * @param {?} isTemplateElement
	         * @param {?} directives
	         * @param {?} providerContext
	         * @return {?}
	         */
	        ElementContext.create = function (isTemplateElement, directives, providerContext) {
	            var /** @type {?} */ matcher = new SelectorMatcher();
	            var /** @type {?} */ wildcardNgContentIndex = null;
	            var /** @type {?} */ component = directives.find(function (directive) { return directive.directive.isComponent; });
	            if (component) {
	                var /** @type {?} */ ngContentSelectors = component.directive.template.ngContentSelectors;
	                for (var /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {
	                    var /** @type {?} */ selector = ngContentSelectors[i];
	                    if (selector === '*') {
	                        wildcardNgContentIndex = i;
	                    }
	                    else {
	                        matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
	                    }
	                }
	            }
	            return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
	        };
	        /**
	         * @param {?} selector
	         * @return {?}
	         */
	        ElementContext.prototype.findNgContentIndex = function (selector) {
	            var /** @type {?} */ ngContentIndices = [];
	            this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
	            ngContentIndices.sort();
	            if (isPresent(this._wildcardNgContentIndex)) {
	                ngContentIndices.push(this._wildcardNgContentIndex);
	            }
	            return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
	        };
	        return ElementContext;
	    }());
	    /**
	     * @param {?} elementName
	     * @param {?} attributes
	     * @return {?}
	     */
	    function createElementCssSelector(elementName, attributes) {
	        var /** @type {?} */ cssSelector = new CssSelector();
	        var /** @type {?} */ elNameNoNs = splitNsName(elementName)[1];
	        cssSelector.setElement(elNameNoNs);
	        for (var /** @type {?} */ i = 0; i < attributes.length; i++) {
	            var /** @type {?} */ attrName = attributes[i][0];
	            var /** @type {?} */ attrNameNoNs = splitNsName(attrName)[1];
	            var /** @type {?} */ attrValue = attributes[i][1];
	            cssSelector.addAttribute(attrNameNoNs, attrValue);
	            if (attrName.toLowerCase() == CLASS_ATTR) {
	                var /** @type {?} */ classes = splitClasses(attrValue);
	                classes.forEach(function (className) { return cssSelector.addClassName(className); });
	            }
	        }
	        return cssSelector;
	    }
	    var /** @type {?} */ EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
	    var /** @type {?} */ NON_BINDABLE_VISITOR = new NonBindableVisitor();
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    function _isEmptyTextNode(node) {
	        return node instanceof Text && node.value.trim().length == 0;
	    }
	    /**
	     * @param {?} items
	     * @return {?}
	     */
	    function removeSummaryDuplicates(items) {
	        var /** @type {?} */ map = new Map();
	        items.forEach(function (item) {
	            if (!map.get(item.type.reference)) {
	                map.set(item.type.reference, item);
	            }
	        });
	        return Array.from(map.values());
	    }

	    var CompilerConfig = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompilerConfig(_a) {
	            var _b = _a === void 0 ? {} : _a, _c = _b.renderTypes, renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c, _d = _b.defaultEncapsulation, defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d, genDebugInfo = _b.genDebugInfo, logBindingUpdate = _b.logBindingUpdate, _e = _b.useJit, useJit = _e === void 0 ? true : _e;
	            this.renderTypes = renderTypes;
	            this.defaultEncapsulation = defaultEncapsulation;
	            this._genDebugInfo = genDebugInfo;
	            this._logBindingUpdate = logBindingUpdate;
	            this.useJit = useJit;
	        }
	        Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return CompilerConfig;
	    }());
	    /**
	     * Types used for the renderer.
	     * Can be replaced to specialize the generated output to a specific renderer
	     * to help tree shaking.
	     * @abstract
	     */
	    var RenderTypes = (function () {
	        function RenderTypes() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderTypes.prototype.renderer = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderTypes.prototype.renderText = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderTypes.prototype.renderElement = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderTypes.prototype.renderComment = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderTypes.prototype.renderNode = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        RenderTypes.prototype.renderEvent = function () { };
	        return RenderTypes;
	    }());
	    var DefaultRenderTypes = (function () {
	        function DefaultRenderTypes() {
	            this.renderText = null;
	            this.renderElement = null;
	            this.renderComment = null;
	            this.renderNode = null;
	            this.renderEvent = null;
	        }
	        Object.defineProperty(DefaultRenderTypes.prototype, "renderer", {
	            /**
	             * @return {?}
	             */
	            get: function () { return createIdentifier(Identifiers.Renderer); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        return DefaultRenderTypes;
	    }());

	    var __extends$19 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     * @abstract
	     */
	    var AnimationAst = (function () {
	        function AnimationAst() {
	            this.startTime = 0;
	            this.playTime = 0;
	        }
	        /**
	         * @abstract
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationAst.prototype.visit = function (visitor, context) { };
	        return AnimationAst;
	    }());
	    /**
	     * @abstract
	     */
	    var AnimationStateAst = (function (_super) {
	        __extends$19(AnimationStateAst, _super);
	        function AnimationStateAst() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @abstract
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationStateAst.prototype.visit = function (visitor, context) { };
	        return AnimationStateAst;
	    }(AnimationAst));
	    var AnimationEntryAst = (function (_super) {
	        __extends$19(AnimationEntryAst, _super);
	        /**
	         * @param {?} name
	         * @param {?} stateDeclarations
	         * @param {?} stateTransitions
	         */
	        function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
	            _super.call(this);
	            this.name = name;
	            this.stateDeclarations = stateDeclarations;
	            this.stateTransitions = stateTransitions;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationEntryAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationEntry(this, context);
	        };
	        return AnimationEntryAst;
	    }(AnimationAst));
	    var AnimationStateDeclarationAst = (function (_super) {
	        __extends$19(AnimationStateDeclarationAst, _super);
	        /**
	         * @param {?} stateName
	         * @param {?} styles
	         */
	        function AnimationStateDeclarationAst(stateName, styles) {
	            _super.call(this);
	            this.stateName = stateName;
	            this.styles = styles;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationStateDeclarationAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationStateDeclaration(this, context);
	        };
	        return AnimationStateDeclarationAst;
	    }(AnimationStateAst));
	    var AnimationStateTransitionExpression = (function () {
	        /**
	         * @param {?} fromState
	         * @param {?} toState
	         */
	        function AnimationStateTransitionExpression(fromState, toState) {
	            this.fromState = fromState;
	            this.toState = toState;
	        }
	        return AnimationStateTransitionExpression;
	    }());
	    var AnimationStateTransitionAst = (function (_super) {
	        __extends$19(AnimationStateTransitionAst, _super);
	        /**
	         * @param {?} stateChanges
	         * @param {?} animation
	         */
	        function AnimationStateTransitionAst(stateChanges, animation) {
	            _super.call(this);
	            this.stateChanges = stateChanges;
	            this.animation = animation;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationStateTransitionAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationStateTransition(this, context);
	        };
	        return AnimationStateTransitionAst;
	    }(AnimationStateAst));
	    var AnimationStepAst = (function (_super) {
	        __extends$19(AnimationStepAst, _super);
	        /**
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         */
	        function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
	            _super.call(this);
	            this.startingStyles = startingStyles;
	            this.keyframes = keyframes;
	            this.duration = duration;
	            this.delay = delay;
	            this.easing = easing;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationStepAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationStep(this, context);
	        };
	        return AnimationStepAst;
	    }(AnimationAst));
	    var AnimationStylesAst = (function (_super) {
	        __extends$19(AnimationStylesAst, _super);
	        /**
	         * @param {?} styles
	         */
	        function AnimationStylesAst(styles) {
	            _super.call(this);
	            this.styles = styles;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationStylesAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationStyles(this, context);
	        };
	        return AnimationStylesAst;
	    }(AnimationAst));
	    var AnimationKeyframeAst = (function (_super) {
	        __extends$19(AnimationKeyframeAst, _super);
	        /**
	         * @param {?} offset
	         * @param {?} styles
	         */
	        function AnimationKeyframeAst(offset, styles) {
	            _super.call(this);
	            this.offset = offset;
	            this.styles = styles;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationKeyframeAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationKeyframe(this, context);
	        };
	        return AnimationKeyframeAst;
	    }(AnimationAst));
	    /**
	     * @abstract
	     */
	    var AnimationWithStepsAst = (function (_super) {
	        __extends$19(AnimationWithStepsAst, _super);
	        /**
	         * @param {?} steps
	         */
	        function AnimationWithStepsAst(steps) {
	            _super.call(this);
	            this.steps = steps;
	        }
	        return AnimationWithStepsAst;
	    }(AnimationAst));
	    var AnimationGroupAst = (function (_super) {
	        __extends$19(AnimationGroupAst, _super);
	        /**
	         * @param {?} steps
	         */
	        function AnimationGroupAst(steps) {
	            _super.call(this, steps);
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationGroupAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationGroup(this, context);
	        };
	        return AnimationGroupAst;
	    }(AnimationWithStepsAst));
	    var AnimationSequenceAst = (function (_super) {
	        __extends$19(AnimationSequenceAst, _super);
	        /**
	         * @param {?} steps
	         */
	        function AnimationSequenceAst(steps) {
	            _super.call(this, steps);
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationSequenceAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationSequence(this, context);
	        };
	        return AnimationSequenceAst;
	    }(AnimationWithStepsAst));

	    var StylesCollectionEntry = (function () {
	        /**
	         * @param {?} time
	         * @param {?} value
	         */
	        function StylesCollectionEntry(time, value) {
	            this.time = time;
	            this.value = value;
	        }
	        /**
	         * @param {?} time
	         * @param {?} value
	         * @return {?}
	         */
	        StylesCollectionEntry.prototype.matches = function (time, value) {
	            return time == this.time && value == this.value;
	        };
	        return StylesCollectionEntry;
	    }());
	    var StylesCollection = (function () {
	        function StylesCollection() {
	            this.styles = {};
	        }
	        /**
	         * @param {?} property
	         * @param {?} time
	         * @param {?} value
	         * @return {?}
	         */
	        StylesCollection.prototype.insertAtTime = function (property, time, value) {
	            var /** @type {?} */ tuple = new StylesCollectionEntry(time, value);
	            var /** @type {?} */ entries = this.styles[property];
	            if (!isPresent(entries)) {
	                entries = this.styles[property] = [];
	            }
	            // insert this at the right stop in the array
	            // this way we can keep it sorted
	            var /** @type {?} */ insertionIndex = 0;
	            for (var /** @type {?} */ i = entries.length - 1; i >= 0; i--) {
	                if (entries[i].time <= time) {
	                    insertionIndex = i + 1;
	                    break;
	                }
	            }
	            entries.splice(insertionIndex, 0, tuple);
	        };
	        /**
	         * @param {?} property
	         * @param {?} index
	         * @return {?}
	         */
	        StylesCollection.prototype.getByIndex = function (property, index) {
	            var /** @type {?} */ items = this.styles[property];
	            if (isPresent(items)) {
	                return index >= items.length ? null : items[index];
	            }
	            return null;
	        };
	        /**
	         * @param {?} property
	         * @param {?} time
	         * @return {?}
	         */
	        StylesCollection.prototype.indexOfAtOrBeforeTime = function (property, time) {
	            var /** @type {?} */ entries = this.styles[property];
	            if (isPresent(entries)) {
	                for (var /** @type {?} */ i = entries.length - 1; i >= 0; i--) {
	                    if (entries[i].time <= time)
	                        return i;
	                }
	            }
	            return null;
	        };
	        return StylesCollection;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$18 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$4 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var /** @type {?} */ _INITIAL_KEYFRAME = 0;
	    var /** @type {?} */ _TERMINAL_KEYFRAME = 1;
	    var /** @type {?} */ _ONE_SECOND = 1000;
	    var AnimationParseError = (function (_super) {
	        __extends$18(AnimationParseError, _super);
	        /**
	         * @param {?} message
	         */
	        function AnimationParseError(message) {
	            _super.call(this, null, message);
	        }
	        /**
	         * @return {?}
	         */
	        AnimationParseError.prototype.toString = function () { return "" + this.msg; };
	        return AnimationParseError;
	    }(ParseError));
	    var AnimationEntryParseResult = (function () {
	        /**
	         * @param {?} ast
	         * @param {?} errors
	         */
	        function AnimationEntryParseResult(ast, errors) {
	            this.ast = ast;
	            this.errors = errors;
	        }
	        return AnimationEntryParseResult;
	    }());
	    var AnimationParser = (function () {
	        /**
	         * @param {?} _schema
	         */
	        function AnimationParser(_schema) {
	            this._schema = _schema;
	        }
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        AnimationParser.prototype.parseComponent = function (component) {
	            var _this = this;
	            var /** @type {?} */ errors = [];
	            var /** @type {?} */ componentName = identifierName(component.type);
	            var /** @type {?} */ animationTriggerNames = new Set();
	            var /** @type {?} */ asts = component.template.animations.map(function (entry) {
	                var /** @type {?} */ result = _this.parseEntry(entry);
	                var /** @type {?} */ ast = result.ast;
	                var /** @type {?} */ triggerName = ast.name;
	                if (animationTriggerNames.has(triggerName)) {
	                    result.errors.push(new AnimationParseError("The animation trigger \"" + triggerName + "\" has already been registered for the " + componentName + " component"));
	                }
	                else {
	                    animationTriggerNames.add(triggerName);
	                }
	                if (result.errors.length > 0) {
	                    var /** @type {?} */ errorMessage_1 = "- Unable to parse the animation sequence for \"" + triggerName + "\" on the " + componentName + " component due to the following errors:";
	                    result.errors.forEach(function (error) { errorMessage_1 += '\n-- ' + error.msg; });
	                    errors.push(errorMessage_1);
	                }
	                return ast;
	            });
	            if (errors.length > 0) {
	                var /** @type {?} */ errorString = errors.join('\n');
	                throw new Error("Animation parse errors:\n" + errorString);
	            }
	            return asts;
	        };
	        /**
	         * @param {?} entry
	         * @return {?}
	         */
	        AnimationParser.prototype.parseEntry = function (entry) {
	            var _this = this;
	            var /** @type {?} */ errors = [];
	            var /** @type {?} */ stateStyles = {};
	            var /** @type {?} */ transitions = [];
	            var /** @type {?} */ stateDeclarationAsts = [];
	            entry.definitions.forEach(function (def) {
	                if (def instanceof CompileAnimationStateDeclarationMetadata) {
	                    _parseAnimationDeclarationStates(def, _this._schema, errors).forEach(function (ast) {
	                        stateDeclarationAsts.push(ast);
	                        stateStyles[ast.stateName] = ast.styles;
	                    });
	                }
	                else {
	                    transitions.push(/** @type {?} */ (def));
	                }
	            });
	            var /** @type {?} */ stateTransitionAsts = transitions.map(function (transDef) { return _parseAnimationStateTransition(transDef, stateStyles, _this._schema, errors); });
	            var /** @type {?} */ ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
	            return new AnimationEntryParseResult(ast, errors);
	        };
	        AnimationParser = __decorate$4([
	            CompilerInjectable(), 
	            __metadata$4('design:paramtypes', [ElementSchemaRegistry])
	        ], AnimationParser);
	        return AnimationParser;
	    }());
	    /**
	     * @param {?} stateMetadata
	     * @param {?} schema
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseAnimationDeclarationStates(stateMetadata, schema, errors) {
	        var /** @type {?} */ normalizedStyles = _normalizeStyleMetadata(stateMetadata.styles, {}, schema, errors, false);
	        var /** @type {?} */ defStyles = new AnimationStylesAst(normalizedStyles);
	        var /** @type {?} */ states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
	        return states.map(function (state) { return new AnimationStateDeclarationAst(state, defStyles); });
	    }
	    /**
	     * @param {?} transitionStateMetadata
	     * @param {?} stateStyles
	     * @param {?} schema
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, schema, errors) {
	        var /** @type {?} */ styles = new StylesCollection();
	        var /** @type {?} */ transitionExprs = [];
	        var /** @type {?} */ transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
	        transitionStates.forEach(function (expr) { transitionExprs.push.apply(transitionExprs, _parseAnimationTransitionExpr(expr, errors)); });
	        var /** @type {?} */ entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
	        var /** @type {?} */ animation = _normalizeStyleSteps(entry, stateStyles, schema, errors);
	        var /** @type {?} */ animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
	        if (errors.length == 0) {
	            _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
	        }
	        var /** @type {?} */ stepsAst = (animationAst instanceof AnimationWithStepsAst) ?
	            animationAst :
	            new AnimationSequenceAst([animationAst]);
	        return new AnimationStateTransitionAst(transitionExprs, stepsAst);
	    }
	    /**
	     * @param {?} alias
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseAnimationAlias(alias, errors) {
	        switch (alias) {
	            case ':enter':
	                return 'void => *';
	            case ':leave':
	                return '* => void';
	            default:
	                errors.push(new AnimationParseError("the transition alias value \"" + alias + "\" is not supported"));
	                return '* => *';
	        }
	    }
	    /**
	     * @param {?} eventStr
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseAnimationTransitionExpr(eventStr, errors) {
	        var /** @type {?} */ expressions = [];
	        if (eventStr[0] == ':') {
	            eventStr = _parseAnimationAlias(eventStr, errors);
	        }
	        var /** @type {?} */ match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
	        if (!isPresent(match) || match.length < 4) {
	            errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
	            return expressions;
	        }
	        var /** @type {?} */ fromState = match[1];
	        var /** @type {?} */ separator = match[2];
	        var /** @type {?} */ toState = match[3];
	        expressions.push(new AnimationStateTransitionExpression(fromState, toState));
	        var /** @type {?} */ isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
	        if (separator[0] == '<' && !isFullAnyStateExpr) {
	            expressions.push(new AnimationStateTransitionExpression(toState, fromState));
	        }
	        return expressions;
	    }
	    /**
	     * @param {?} entry
	     * @return {?}
	     */
	    function _normalizeAnimationEntry(entry) {
	        return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
	    }
	    /**
	     * @param {?} entry
	     * @param {?} stateStyles
	     * @param {?} schema
	     * @param {?} errors
	     * @param {?} permitStateReferences
	     * @return {?}
	     */
	    function _normalizeStyleMetadata(entry, stateStyles, schema, errors, permitStateReferences) {
	        var /** @type {?} */ offset = entry.offset;
	        if (offset > 1 || offset < 0) {
	            errors.push(new AnimationParseError("Offset values for animations must be between 0 and 1"));
	        }
	        var /** @type {?} */ normalizedStyles = [];
	        entry.styles.forEach(function (styleEntry) {
	            if (typeof styleEntry === 'string') {
	                if (permitStateReferences) {
	                    normalizedStyles.push.apply(normalizedStyles, _resolveStylesFromState(/** @type {?} */ (styleEntry), stateStyles, errors));
	                }
	                else {
	                    errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
	                }
	            }
	            else {
	                var /** @type {?} */ stylesObj_1 = (styleEntry);
	                var /** @type {?} */ normalizedStylesObj_1 = {};
	                Object.keys(stylesObj_1).forEach(function (propName) {
	                    var /** @type {?} */ normalizedProp = schema.normalizeAnimationStyleProperty(propName);
	                    var /** @type {?} */ normalizedOutput = schema.normalizeAnimationStyleValue(normalizedProp, propName, stylesObj_1[propName]);
	                    var /** @type {?} */ normalizationError = normalizedOutput['error'];
	                    if (normalizationError) {
	                        errors.push(new AnimationParseError(normalizationError));
	                    }
	                    normalizedStylesObj_1[normalizedProp] = normalizedOutput['value'];
	                });
	                normalizedStyles.push(normalizedStylesObj_1);
	            }
	        });
	        return normalizedStyles;
	    }
	    /**
	     * @param {?} entry
	     * @param {?} stateStyles
	     * @param {?} schema
	     * @param {?} errors
	     * @return {?}
	     */
	    function _normalizeStyleSteps(entry, stateStyles, schema, errors) {
	        var /** @type {?} */ steps = _normalizeStyleStepEntry(entry, stateStyles, schema, errors);
	        return (entry instanceof CompileAnimationGroupMetadata) ?
	            new CompileAnimationGroupMetadata(steps) :
	            new CompileAnimationSequenceMetadata(steps);
	    }
	    /**
	     * @param {?} stylesList
	     * @param {?} newItem
	     * @return {?}
	     */
	    function _mergeAnimationStyles(stylesList, newItem) {
	        if (typeof newItem === 'object' && newItem !== null && stylesList.length > 0) {
	            var /** @type {?} */ lastIndex = stylesList.length - 1;
	            var /** @type {?} */ lastItem = stylesList[lastIndex];
	            if (typeof lastItem === 'object' && lastItem !== null) {
	                stylesList[lastIndex] = StringMapWrapper.merge(/** @type {?} */ (lastItem), /** @type {?} */ (newItem));
	                return;
	            }
	        }
	        stylesList.push(newItem);
	    }
	    /**
	     * @param {?} entry
	     * @param {?} stateStyles
	     * @param {?} schema
	     * @param {?} errors
	     * @return {?}
	     */
	    function _normalizeStyleStepEntry(entry, stateStyles, schema, errors) {
	        var /** @type {?} */ steps;
	        if (entry instanceof CompileAnimationWithStepsMetadata) {
	            steps = entry.steps;
	        }
	        else {
	            return [entry];
	        }
	        var /** @type {?} */ newSteps = [];
	        var /** @type {?} */ combinedStyles;
	        steps.forEach(function (step) {
	            if (step instanceof CompileAnimationStyleMetadata) {
	                // this occurs when a style step is followed by a previous style step
	                // or when the first style step is run. We want to concatenate all subsequent
	                // style steps together into a single style step such that we have the correct
	                // starting keyframe data to pass into the animation player.
	                if (!isPresent(combinedStyles)) {
	                    combinedStyles = [];
	                }
	                _normalizeStyleMetadata(/** @type {?} */ (step), stateStyles, schema, errors, true)
	                    .forEach(function (entry) { _mergeAnimationStyles(combinedStyles, entry); });
	            }
	            else {
	                // it is important that we create a metadata entry of the combined styles
	                // before we go on an process the animate, sequence or group metadata steps.
	                // This will ensure that the AST will have the previous styles painted on
	                // screen before any further animations that use the styles take place.
	                if (isPresent(combinedStyles)) {
	                    newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
	                    combinedStyles = null;
	                }
	                if (step instanceof CompileAnimationAnimateMetadata) {
	                    // we do not recurse into CompileAnimationAnimateMetadata since
	                    // those style steps are not going to be squashed
	                    var /** @type {?} */ animateStyleValue = ((step)).styles;
	                    if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
	                        animateStyleValue.styles =
	                            _normalizeStyleMetadata(animateStyleValue, stateStyles, schema, errors, true);
	                    }
	                    else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
	                        animateStyleValue.steps.forEach(function (step) {
	                            step.styles = _normalizeStyleMetadata(step, stateStyles, schema, errors, true);
	                        });
	                    }
	                }
	                else if (step instanceof CompileAnimationWithStepsMetadata) {
	                    var /** @type {?} */ innerSteps = _normalizeStyleStepEntry(step, stateStyles, schema, errors);
	                    step = step instanceof CompileAnimationGroupMetadata ?
	                        new CompileAnimationGroupMetadata(innerSteps) :
	                        new CompileAnimationSequenceMetadata(innerSteps);
	                }
	                newSteps.push(step);
	            }
	        });
	        // this happens when only styles were animated within the sequence
	        if (isPresent(combinedStyles)) {
	            newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
	        }
	        return newSteps;
	    }
	    /**
	     * @param {?} stateName
	     * @param {?} stateStyles
	     * @param {?} errors
	     * @return {?}
	     */
	    function _resolveStylesFromState(stateName, stateStyles, errors) {
	        var /** @type {?} */ styles = [];
	        if (stateName[0] != ':') {
	            errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
	        }
	        else {
	            var /** @type {?} */ normalizedStateName = stateName.substring(1);
	            var /** @type {?} */ value = stateStyles[normalizedStateName];
	            if (!isPresent(value)) {
	                errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
	            }
	            else {
	                value.styles.forEach(function (stylesEntry) {
	                    if (typeof stylesEntry === 'object' && stylesEntry !== null) {
	                        styles.push(/** @type {?} */ (stylesEntry));
	                    }
	                });
	            }
	        }
	        return styles;
	    }
	    var _AnimationTimings = (function () {
	        /**
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         */
	        function _AnimationTimings(duration, delay, easing) {
	            this.duration = duration;
	            this.delay = delay;
	            this.easing = easing;
	        }
	        return _AnimationTimings;
	    }());
	    /**
	     * @param {?} keyframeSequence
	     * @param {?} currentTime
	     * @param {?} collectedStyles
	     * @param {?} stateStyles
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
	        var /** @type {?} */ totalEntries = keyframeSequence.steps.length;
	        var /** @type {?} */ totalOffsets = 0;
	        keyframeSequence.steps.forEach(function (step) { return totalOffsets += (isPresent(step.offset) ? 1 : 0); });
	        if (totalOffsets > 0 && totalOffsets < totalEntries) {
	            errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
	            totalOffsets = totalEntries;
	        }
	        var /** @type {?} */ limit = totalEntries - 1;
	        var /** @type {?} */ margin = totalOffsets == 0 ? (1 / limit) : 0;
	        var /** @type {?} */ rawKeyframes = [];
	        var /** @type {?} */ index = 0;
	        var /** @type {?} */ doSortKeyframes = false;
	        var /** @type {?} */ lastOffset = 0;
	        keyframeSequence.steps.forEach(function (styleMetadata) {
	            var /** @type {?} */ offset = styleMetadata.offset;
	            var /** @type {?} */ keyframeStyles = {};
	            styleMetadata.styles.forEach(function (entry) {
	                Object.keys(entry).forEach(function (prop) {
	                    if (prop != 'offset') {
	                        keyframeStyles[prop] = ((entry))[prop];
	                    }
	                });
	            });
	            if (isPresent(offset)) {
	                doSortKeyframes = doSortKeyframes || (offset < lastOffset);
	            }
	            else {
	                offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);
	            }
	            rawKeyframes.push([offset, keyframeStyles]);
	            lastOffset = offset;
	            index++;
	        });
	        if (doSortKeyframes) {
	            rawKeyframes.sort(function (a, b) { return a[0] <= b[0] ? -1 : 1; });
	        }
	        var /** @type {?} */ firstKeyframe = rawKeyframes[0];
	        if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
	            rawKeyframes.splice(0, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
	        }
	        var /** @type {?} */ firstKeyframeStyles = firstKeyframe[1];
	        limit = rawKeyframes.length - 1;
	        var /** @type {?} */ lastKeyframe = rawKeyframes[limit];
	        if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
	            rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
	            limit++;
	        }
	        var /** @type {?} */ lastKeyframeStyles = lastKeyframe[1];
	        for (var /** @type {?} */ i = 1; i <= limit; i++) {
	            var /** @type {?} */ entry = rawKeyframes[i];
	            var /** @type {?} */ styles = entry[1];
	            Object.keys(styles).forEach(function (prop) {
	                if (!isPresent(firstKeyframeStyles[prop])) {
	                    firstKeyframeStyles[prop] = FILL_STYLE_FLAG;
	                }
	            });
	        }
	        var _loop_1 = function(i) {
	            var /** @type {?} */ entry = rawKeyframes[i];
	            var /** @type {?} */ styles = entry[1];
	            Object.keys(styles).forEach(function (prop) {
	                if (!isPresent(lastKeyframeStyles[prop])) {
	                    lastKeyframeStyles[prop] = styles[prop];
	                }
	            });
	        };
	        for (var /** @type {?} */ i = limit - 1; i >= 0; i--) {
	            _loop_1(i);
	        }
	        return rawKeyframes.map(function (entry) { return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]])); });
	    }
	    /**
	     * @param {?} entry
	     * @param {?} currentTime
	     * @param {?} collectedStyles
	     * @param {?} stateStyles
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
	        var /** @type {?} */ ast;
	        var /** @type {?} */ playTime = 0;
	        var /** @type {?} */ startingTime = currentTime;
	        if (entry instanceof CompileAnimationWithStepsMetadata) {
	            var /** @type {?} */ maxDuration_1 = 0;
	            var /** @type {?} */ steps_1 = [];
	            var /** @type {?} */ isGroup_1 = entry instanceof CompileAnimationGroupMetadata;
	            var /** @type {?} */ previousStyles_1;
	            entry.steps.forEach(function (entry) {
	                // these will get picked up by the next step...
	                var /** @type {?} */ time = isGroup_1 ? startingTime : currentTime;
	                if (entry instanceof CompileAnimationStyleMetadata) {
	                    entry.styles.forEach(function (stylesEntry) {
	                        // by this point we know that we only have stringmap values
	                        var /** @type {?} */ map = (stylesEntry);
	                        Object.keys(map).forEach(function (prop) { collectedStyles.insertAtTime(prop, time, map[prop]); });
	                    });
	                    previousStyles_1 = entry.styles;
	                    return;
	                }
	                var /** @type {?} */ innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
	                if (isPresent(previousStyles_1)) {
	                    if (entry instanceof CompileAnimationWithStepsMetadata) {
	                        var /** @type {?} */ startingStyles = new AnimationStylesAst(previousStyles_1);
	                        steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
	                    }
	                    else {
	                        var /** @type {?} */ innerStep = (innerAst);
	                        (_a = innerStep.startingStyles.styles).push.apply(_a, previousStyles_1);
	                    }
	                    previousStyles_1 = null;
	                }
	                var /** @type {?} */ astDuration = innerAst.playTime;
	                currentTime += astDuration;
	                playTime += astDuration;
	                maxDuration_1 = Math.max(astDuration, maxDuration_1);
	                steps_1.push(innerAst);
	                var _a;
	            });
	            if (isPresent(previousStyles_1)) {
	                var /** @type {?} */ startingStyles = new AnimationStylesAst(previousStyles_1);
	                steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
	            }
	            if (isGroup_1) {
	                ast = new AnimationGroupAst(steps_1);
	                playTime = maxDuration_1;
	                currentTime = startingTime + playTime;
	            }
	            else {
	                ast = new AnimationSequenceAst(steps_1);
	            }
	        }
	        else if (entry instanceof CompileAnimationAnimateMetadata) {
	            var /** @type {?} */ timings = _parseTimeExpression(entry.timings, errors);
	            var /** @type {?} */ styles = entry.styles;
	            var /** @type {?} */ keyframes = void 0;
	            if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
	                keyframes =
	                    _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
	            }
	            else {
	                var /** @type {?} */ styleData = (styles);
	                var /** @type {?} */ offset = _TERMINAL_KEYFRAME;
	                var /** @type {?} */ styleAst = new AnimationStylesAst(/** @type {?} */ (styleData.styles));
	                var /** @type {?} */ keyframe = new AnimationKeyframeAst(offset, styleAst);
	                keyframes = [keyframe];
	            }
	            ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
	            playTime = timings.duration + timings.delay;
	            currentTime += playTime;
	            keyframes.forEach(function (keyframe /** TODO #9100 */) { return keyframe.styles.styles.forEach(function (entry /** TODO #9100 */) { return Object.keys(entry).forEach(function (prop) { collectedStyles.insertAtTime(prop, currentTime, entry[prop]); }); }); });
	        }
	        else {
	            // if the code reaches this stage then an error
	            // has already been populated within the _normalizeStyleSteps()
	            // operation...
	            ast = new AnimationStepAst(null, [], 0, 0, '');
	        }
	        ast.playTime = playTime;
	        ast.startTime = startingTime;
	        return ast;
	    }
	    /**
	     * @param {?} ast
	     * @param {?} collectedStyles
	     * @param {?} errors
	     * @return {?}
	     */
	    function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
	        // steps that only contain style will not be filled
	        if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {
	            var /** @type {?} */ keyframes = ast.keyframes;
	            if (keyframes.length == 1) {
	                var /** @type {?} */ endKeyframe = keyframes[0];
	                var /** @type {?} */ startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
	                ast.keyframes = [startKeyframe, endKeyframe];
	            }
	        }
	        else if (ast instanceof AnimationWithStepsAst) {
	            ast.steps.forEach(function (entry) { return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors); });
	        }
	    }
	    /**
	     * @param {?} exp
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseTimeExpression(exp, errors) {
	        var /** @type {?} */ regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
	        var /** @type {?} */ duration;
	        var /** @type {?} */ delay = 0;
	        var /** @type {?} */ easing = null;
	        if (typeof exp === 'string') {
	            var /** @type {?} */ matches = exp.match(regex);
	            if (matches === null) {
	                errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
	                return new _AnimationTimings(0, 0, null);
	            }
	            var /** @type {?} */ durationMatch = parseFloat(matches[1]);
	            var /** @type {?} */ durationUnit = matches[2];
	            if (durationUnit == 's') {
	                durationMatch *= _ONE_SECOND;
	            }
	            duration = Math.floor(durationMatch);
	            var /** @type {?} */ delayMatch = matches[3];
	            var /** @type {?} */ delayUnit = matches[4];
	            if (isPresent(delayMatch)) {
	                var /** @type {?} */ delayVal = parseFloat(delayMatch);
	                if (isPresent(delayUnit) && delayUnit == 's') {
	                    delayVal *= _ONE_SECOND;
	                }
	                delay = Math.floor(delayVal);
	            }
	            var /** @type {?} */ easingVal = matches[5];
	            if (!isBlank(easingVal)) {
	                easing = easingVal;
	            }
	        }
	        else {
	            duration = (exp);
	        }
	        return new _AnimationTimings(duration, delay, easing);
	    }
	    /**
	     * @param {?} endKeyframe
	     * @param {?} startTime
	     * @param {?} duration
	     * @param {?} collectedStyles
	     * @param {?} errors
	     * @return {?}
	     */
	    function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
	        var /** @type {?} */ values = {};
	        var /** @type {?} */ endTime = startTime + duration;
	        endKeyframe.styles.styles.forEach(function (styleData) {
	            Object.keys(styleData).forEach(function (prop) {
	                var /** @type {?} */ val = styleData[prop];
	                if (prop == 'offset')
	                    return;
	                var /** @type {?} */ resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
	                var /** @type {?} */ resultEntry /** TODO #9100 */, /** @type {?} */ nextEntry /** TODO #9100 */, /** @type {?} */ value;
	                if (isPresent(resultIndex)) {
	                    resultEntry = collectedStyles.getByIndex(prop, resultIndex);
	                    value = resultEntry.value;
	                    nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
	                }
	                else {
	                    // this is a flag that the runtime code uses to pass
	                    // in a value either from the state declaration styles
	                    // or using the AUTO_STYLE value (e.g. getComputedStyle)
	                    value = FILL_STYLE_FLAG;
	                }
	                if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
	                    errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
	                }
	                values[prop] = value;
	            });
	        });
	        return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
	    }

	    /**
	     * An interface for retrieving documents by URL that the compiler uses
	     * to load templates.
	     */
	    var ResourceLoader = (function () {
	        function ResourceLoader() {
	        }
	        /**
	         * @param {?} url
	         * @return {?}
	         */
	        ResourceLoader.prototype.get = function (url) { return null; };
	        return ResourceLoader;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$6 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    /**
	     * Create a {\@link UrlResolver} with no package prefix.
	     * @return {?}
	     */
	    function createUrlResolverWithoutPackagePrefix() {
	        return new UrlResolver();
	    }
	    /**
	     * @return {?}
	     */
	    function createOfflineCompileUrlResolver() {
	        return new UrlResolver('.');
	    }
	    /**
	     * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
	     */
	    var /** @type {?} */ DEFAULT_PACKAGE_URL_PROVIDER = {
	        provide: _angular_core.PACKAGE_ROOT_URL,
	        useValue: '/'
	    };
	    /**
	     * Used by the {\@link Compiler} when resolving HTML and CSS template URLs.
	     *
	     * This class can be overridden by the application developer to create custom behavior.
	     *
	     * See {\@link Compiler}
	     *
	     * ## Example
	     *
	     * {\@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
	     *
	     * \@security When compiling templates at runtime, you must
	     * ensure that the entire template comes from a trusted source.
	     * Attacker-controlled data introduced by a template could expose your
	     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	     */
	    var UrlResolver = (function () {
	        /**
	         * @param {?=} _packagePrefix
	         */
	        function UrlResolver(_packagePrefix) {
	            if (_packagePrefix === void 0) { _packagePrefix = null; }
	            this._packagePrefix = _packagePrefix;
	        }
	        /**
	         * Resolves the `url` given the `baseUrl`:
	         * - when the `url` is null, the `baseUrl` is returned,
	         * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	         * `baseUrl` and `url`,
	         * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	         * returned as is (ignoring the `baseUrl`)
	         * @param {?} baseUrl
	         * @param {?} url
	         * @return {?}
	         */
	        UrlResolver.prototype.resolve = function (baseUrl, url) {
	            var /** @type {?} */ resolvedUrl = url;
	            if (isPresent(baseUrl) && baseUrl.length > 0) {
	                resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
	            }
	            var /** @type {?} */ resolvedParts = _split(resolvedUrl);
	            var /** @type {?} */ prefix = this._packagePrefix;
	            if (isPresent(prefix) && isPresent(resolvedParts) &&
	                resolvedParts[_ComponentIndex.Scheme] == 'package') {
	                var /** @type {?} */ path = resolvedParts[_ComponentIndex.Path];
	                prefix = prefix.replace(/\/+$/, '');
	                path = path.replace(/^\/+/, '');
	                return prefix + "/" + path;
	            }
	            return resolvedUrl;
	        };
	        /** @nocollapse */
	        UrlResolver.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PACKAGE_ROOT_URL,] },] },
	        ]; };
	        UrlResolver = __decorate$6([
	            CompilerInjectable(), 
	            __metadata$6('design:paramtypes', [String])
	        ], UrlResolver);
	        return UrlResolver;
	    }());
	    /**
	     * Extract the scheme of a URL.
	     * @param {?} url
	     * @return {?}
	     */
	    function getUrlScheme(url) {
	        var /** @type {?} */ match = _split(url);
	        return (match && match[_ComponentIndex.Scheme]) || '';
	    }
	    /**
	     * Builds a URI string from already-encoded parts.
	     *
	     * No encoding is performed.  Any component may be omitted as either null or
	     * undefined.
	     *
	     * @param {?=} opt_scheme The scheme such as 'http'.
	     * @param {?=} opt_userInfo The user name before the '\@'.
	     * @param {?=} opt_domain The domain such as 'www.google.com', already
	     *     URI-encoded.
	     * @param {?=} opt_port The port number.
	     * @param {?=} opt_path The path, already URI-encoded.  If it is not
	     *     empty, it must begin with a slash.
	     * @param {?=} opt_queryData The URI-encoded query data.
	     * @param {?=} opt_fragment The URI-encoded fragment identifier.
	     * @return {?} The fully combined URI.
	     */
	    function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	        var /** @type {?} */ out = [];
	        if (isPresent(opt_scheme)) {
	            out.push(opt_scheme + ':');
	        }
	        if (isPresent(opt_domain)) {
	            out.push('//');
	            if (isPresent(opt_userInfo)) {
	                out.push(opt_userInfo + '@');
	            }
	            out.push(opt_domain);
	            if (isPresent(opt_port)) {
	                out.push(':' + opt_port);
	            }
	        }
	        if (isPresent(opt_path)) {
	            out.push(opt_path);
	        }
	        if (isPresent(opt_queryData)) {
	            out.push('?' + opt_queryData);
	        }
	        if (isPresent(opt_fragment)) {
	            out.push('#' + opt_fragment);
	        }
	        return out.join('');
	    }
	    /**
	     * A regular expression for breaking a URI into its component parts.
	     *
	     * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	     * As the "first-match-wins" algorithm is identical to the "greedy"
	     * disambiguation method used by POSIX regular expressions, it is natural and
	     * commonplace to use a regular expression for parsing the potential five
	     * components of a URI reference.
	     *
	     * The following line is the regular expression for breaking-down a
	     * well-formed URI reference into its components.
	     *
	     * <pre>
	     * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	     *  12            3  4          5       6  7        8 9
	     * </pre>
	     *
	     * The numbers in the second line above are only to assist readability; they
	     * indicate the reference points for each subexpression (i.e., each paired
	     * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	     * For example, matching the above expression to
	     * <pre>
	     *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	     * </pre>
	     * results in the following subexpression matches:
	     * <pre>
	     *    $1 = http:
	     *    $2 = http
	     *    $3 = //www.ics.uci.edu
	     *    $4 = www.ics.uci.edu
	     *    $5 = /pub/ietf/uri/
	     *    $6 = <undefined>
	     *    $7 = <undefined>
	     *    $8 = #Related
	     *    $9 = Related
	     * </pre>
	     * where <undefined> indicates that the component is not present, as is the
	     * case for the query component in the above example. Therefore, we can
	     * determine the value of the five components as
	     * <pre>
	     *    scheme    = $2
	     *    authority = $4
	     *    path      = $5
	     *    query     = $7
	     *    fragment  = $9
	     * </pre>
	     *
	     * The regular expression has been modified slightly to expose the
	     * userInfo, domain, and port separately from the authority.
	     * The modified version yields
	     * <pre>
	     *    $1 = http              scheme
	     *    $2 = <undefined>       userInfo -\
	     *    $3 = www.ics.uci.edu   domain     | authority
	     *    $4 = <undefined>       port     -/
	     *    $5 = /pub/ietf/uri/    path
	     *    $6 = <undefined>       query without ?
	     *    $7 = Related           fragment without #
	     * </pre>
	     * @type {!RegExp}
	     * @internal
	     */
	    var /** @type {?} */ _splitRe = new RegExp('^' +
	        '(?:' +
	        '([^:/?#.]+)' +
	        // used by other URL parts such as :,
	        // ?, /, #, and .
	        ':)?' +
	        '(?://' +
	        '(?:([^/?#]*)@)?' +
	        '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
	        // digits, dashes, dots, percent
	        // escapes, and unicode characters.
	        '(?::([0-9]+))?' +
	        ')?' +
	        '([^?#]+)?' +
	        '(?:\\?([^#]*))?' +
	        '(?:#(.*))?' +
	        '$');
	    var _ComponentIndex = {};
	    _ComponentIndex.Scheme = 1;
	    _ComponentIndex.UserInfo = 2;
	    _ComponentIndex.Domain = 3;
	    _ComponentIndex.Port = 4;
	    _ComponentIndex.Path = 5;
	    _ComponentIndex.QueryData = 6;
	    _ComponentIndex.Fragment = 7;
	    _ComponentIndex[_ComponentIndex.Scheme] = "Scheme";
	    _ComponentIndex[_ComponentIndex.UserInfo] = "UserInfo";
	    _ComponentIndex[_ComponentIndex.Domain] = "Domain";
	    _ComponentIndex[_ComponentIndex.Port] = "Port";
	    _ComponentIndex[_ComponentIndex.Path] = "Path";
	    _ComponentIndex[_ComponentIndex.QueryData] = "QueryData";
	    _ComponentIndex[_ComponentIndex.Fragment] = "Fragment";
	    /**
	     * Splits a URI into its component parts.
	     *
	     * Each component can be accessed via the component indices; for example:
	     * <pre>
	     * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	     * </pre>
	     *
	     * @param {?} uri The URI string to examine.
	     * @return {?} Each component still URI-encoded.
	     *     Each component that is present will contain the encoded value, whereas
	     *     components that are not present will be undefined or empty, depending
	     *     on the browser's regular expression implementation.  Never null, since
	     *     arbitrary strings may still look like path names.
	     */
	    function _split(uri) {
	        return uri.match(_splitRe);
	    }
	    /**
	     * Removes dot segments in given path component, as described in
	     * RFC 3986, section 5.2.4.
	     *
	     * @param {?} path A non-empty path component.
	     * @return {?} Path component with removed dot segments.
	     */
	    function _removeDotSegments(path) {
	        if (path == '/')
	            return '/';
	        var /** @type {?} */ leadingSlash = path[0] == '/' ? '/' : '';
	        var /** @type {?} */ trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	        var /** @type {?} */ segments = path.split('/');
	        var /** @type {?} */ out = [];
	        var /** @type {?} */ up = 0;
	        for (var /** @type {?} */ pos = 0; pos < segments.length; pos++) {
	            var /** @type {?} */ segment = segments[pos];
	            switch (segment) {
	                case '':
	                case '.':
	                    break;
	                case '..':
	                    if (out.length > 0) {
	                        out.pop();
	                    }
	                    else {
	                        up++;
	                    }
	                    break;
	                default:
	                    out.push(segment);
	            }
	        }
	        if (leadingSlash == '') {
	            while (up-- > 0) {
	                out.unshift('..');
	            }
	            if (out.length === 0)
	                out.push('.');
	        }
	        return leadingSlash + out.join('/') + trailingSlash;
	    }
	    /**
	     * Takes an array of the parts from split and canonicalizes the path part
	     * and then joins all the parts.
	     * @param {?} parts
	     * @return {?}
	     */
	    function _joinAndCanonicalizePath(parts) {
	        var /** @type {?} */ path = parts[_ComponentIndex.Path];
	        path = isBlank(path) ? '' : _removeDotSegments(path);
	        parts[_ComponentIndex.Path] = path;
	        return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
	    }
	    /**
	     * Resolves a URL.
	     * @param {?} base The URL acting as the base URL.
	     * @param {?} url
	     * @return {?}
	     */
	    function _resolveUrl(base, url) {
	        var /** @type {?} */ parts = _split(encodeURI(url));
	        var /** @type {?} */ baseParts = _split(base);
	        if (isPresent(parts[_ComponentIndex.Scheme])) {
	            return _joinAndCanonicalizePath(parts);
	        }
	        else {
	            parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
	        }
	        for (var /** @type {?} */ i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
	            if (isBlank(parts[i])) {
	                parts[i] = baseParts[i];
	            }
	        }
	        if (parts[_ComponentIndex.Path][0] == '/') {
	            return _joinAndCanonicalizePath(parts);
	        }
	        var /** @type {?} */ path = baseParts[_ComponentIndex.Path];
	        if (isBlank(path))
	            path = '/';
	        var /** @type {?} */ index = path.lastIndexOf('/');
	        path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
	        parts[_ComponentIndex.Path] = path;
	        return _joinAndCanonicalizePath(parts);
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$5 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var DirectiveNormalizer = (function () {
	        /**
	         * @param {?} _resourceLoader
	         * @param {?} _urlResolver
	         * @param {?} _htmlParser
	         * @param {?} _config
	         */
	        function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
	            this._resourceLoader = _resourceLoader;
	            this._urlResolver = _urlResolver;
	            this._htmlParser = _htmlParser;
	            this._config = _config;
	            this._resourceLoaderCache = new Map();
	        }
	        /**
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.clearCache = function () { this._resourceLoaderCache.clear(); };
	        /**
	         * @param {?} normalizedDirective
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {
	            var _this = this;
	            if (!normalizedDirective.isComponent) {
	                return;
	            }
	            this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
	            normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(stylesheet.moduleUrl); });
	        };
	        /**
	         * @param {?} url
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype._fetch = function (url) {
	            var /** @type {?} */ result = this._resourceLoaderCache.get(url);
	            if (!result) {
	                result = this._resourceLoader.get(url);
	                this._resourceLoaderCache.set(url, result);
	            }
	            return result;
	        };
	        /**
	         * @param {?} prenormData
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {
	            var _this = this;
	            var /** @type {?} */ normalizedTemplateSync = null;
	            var /** @type {?} */ normalizedTemplateAsync;
	            if (isPresent(prenormData.template)) {
	                normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
	                normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
	            }
	            else if (prenormData.templateUrl) {
	                normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
	            }
	            else {
	                throw new SyntaxError("No template specified for component " + stringify(prenormData.componentType));
	            }
	            if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
	                // sync case
	                return new SyncAsyncResult(normalizedTemplateSync);
	            }
	            else {
	                // async case
	                return new SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) { return _this.normalizeExternalStylesheets(normalizedTemplate); }));
	            }
	        };
	        /**
	         * @param {?} prenomData
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeTemplateSync = function (prenomData) {
	            return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
	        };
	        /**
	         * @param {?} prenomData
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeTemplateAsync = function (prenomData) {
	            var _this = this;
	            var /** @type {?} */ templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
	            return this._fetch(templateUrl)
	                .then(function (value) { return _this.normalizeLoadedTemplate(prenomData, value, templateUrl); });
	        };
	        /**
	         * @param {?} prenomData
	         * @param {?} template
	         * @param {?} templateAbsUrl
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (prenomData, template, templateAbsUrl) {
	            var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation);
	            var /** @type {?} */ rootNodesAndErrors = this._htmlParser.parse(template, stringify(prenomData.componentType), true, interpolationConfig);
	            if (rootNodesAndErrors.errors.length > 0) {
	                var /** @type {?} */ errorString = rootNodesAndErrors.errors.join('\n');
	                throw new SyntaxError("Template parse errors:\n" + errorString);
	            }
	            var /** @type {?} */ templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
	                styles: prenomData.styles,
	                styleUrls: prenomData.styleUrls,
	                moduleUrl: prenomData.moduleUrl
	            }));
	            var /** @type {?} */ visitor = new TemplatePreparseVisitor();
	            visitAll(visitor, rootNodesAndErrors.rootNodes);
	            var /** @type {?} */ templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));
	            var /** @type {?} */ encapsulation = prenomData.encapsulation;
	            if (isBlank(encapsulation)) {
	                encapsulation = this._config.defaultEncapsulation;
	            }
	            var /** @type {?} */ styles = templateMetadataStyles.styles.concat(templateStyles.styles);
	            var /** @type {?} */ styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
	            if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 &&
	                styleUrls.length === 0) {
	                encapsulation = _angular_core.ViewEncapsulation.None;
	            }
	            return new CompileTemplateMetadata({
	                encapsulation: encapsulation,
	                template: template,
	                templateUrl: templateAbsUrl, styles: styles, styleUrls: styleUrls,
	                ngContentSelectors: visitor.ngContentSelectors,
	                animations: prenomData.animations,
	                interpolation: prenomData.interpolation,
	            });
	        };
	        /**
	         * @param {?} templateMeta
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {
	            return this._loadMissingExternalStylesheets(templateMeta.styleUrls)
	                .then(function (externalStylesheets) { return new CompileTemplateMetadata({
	                encapsulation: templateMeta.encapsulation,
	                template: templateMeta.template,
	                templateUrl: templateMeta.templateUrl,
	                styles: templateMeta.styles,
	                styleUrls: templateMeta.styleUrls,
	                externalStylesheets: externalStylesheets,
	                ngContentSelectors: templateMeta.ngContentSelectors,
	                animations: templateMeta.animations,
	                interpolation: templateMeta.interpolation
	            }); });
	        };
	        /**
	         * @param {?} styleUrls
	         * @param {?=} loadedStylesheets
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {
	            var _this = this;
	            if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }
	            return Promise
	                .all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })
	                .map(function (styleUrl) { return _this._fetch(styleUrl).then(function (loadedStyle) {
	                var /** @type {?} */ stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));
	                loadedStylesheets.set(styleUrl, stylesheet);
	                return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
	            }); }))
	                .then(function (_) { return Array.from(loadedStylesheets.values()); });
	        };
	        /**
	         * @param {?} stylesheet
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {
	            var _this = this;
	            var /** @type {?} */ allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)
	                .map(function (url) { return _this._urlResolver.resolve(stylesheet.moduleUrl, url); });
	            var /** @type {?} */ allStyles = stylesheet.styles.map(function (style) {
	                var /** @type {?} */ styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
	                allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
	                return styleWithImports.style;
	            });
	            return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl });
	        };
	        DirectiveNormalizer = __decorate$5([
	            CompilerInjectable(), 
	            __metadata$5('design:paramtypes', [ResourceLoader, UrlResolver, HtmlParser, CompilerConfig])
	        ], DirectiveNormalizer);
	        return DirectiveNormalizer;
	    }());
	    var TemplatePreparseVisitor = (function () {
	        function TemplatePreparseVisitor() {
	            this.ngContentSelectors = [];
	            this.styles = [];
	            this.styleUrls = [];
	            this.ngNonBindableStackCount = 0;
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
	            var /** @type {?} */ preparsedElement = preparseElement(ast);
	            switch (preparsedElement.type) {
	                case PreparsedElementType.NG_CONTENT:
	                    if (this.ngNonBindableStackCount === 0) {
	                        this.ngContentSelectors.push(preparsedElement.selectAttr);
	                    }
	                    break;
	                case PreparsedElementType.STYLE:
	                    var /** @type {?} */ textContent_1 = '';
	                    ast.children.forEach(function (child) {
	                        if (child instanceof Text) {
	                            textContent_1 += child.value;
	                        }
	                    });
	                    this.styles.push(textContent_1);
	                    break;
	                case PreparsedElementType.STYLESHEET:
	                    this.styleUrls.push(preparsedElement.hrefAttr);
	                    break;
	                default:
	                    break;
	            }
	            if (preparsedElement.nonBindable) {
	                this.ngNonBindableStackCount++;
	            }
	            visitAll(this, ast.children);
	            if (preparsedElement.nonBindable) {
	                this.ngNonBindableStackCount--;
	            }
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) { visitAll(this, ast.cases); };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) {
	            visitAll(this, ast.expression);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
	        return TemplatePreparseVisitor;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$7 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$7 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var DirectiveResolver = (function () {
	        /**
	         * @param {?=} _reflector
	         */
	        function DirectiveResolver(_reflector) {
	            if (_reflector === void 0) { _reflector = reflector; }
	            this._reflector = _reflector;
	        }
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        DirectiveResolver.prototype.isDirective = function (type) {
	            var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	            return typeMetadata && typeMetadata.some(isDirectiveMetadata);
	        };
	        /**
	         * Return {\@link Directive} for a given `Type`.
	         * @param {?} type
	         * @param {?=} throwIfNotFound
	         * @return {?}
	         */
	        DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
	            if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	            var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	            if (typeMetadata) {
	                var /** @type {?} */ metadata = ListWrapper.findLast(typeMetadata, isDirectiveMetadata);
	                if (metadata) {
	                    var /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);
	                    return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
	                }
	            }
	            if (throwIfNotFound) {
	                throw new Error("No Directive annotation found on " + stringify(type));
	            }
	            return null;
	        };
	        /**
	         * @param {?} dm
	         * @param {?} propertyMetadata
	         * @param {?} directiveType
	         * @return {?}
	         */
	        DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
	            var /** @type {?} */ inputs = [];
	            var /** @type {?} */ outputs = [];
	            var /** @type {?} */ host = {};
	            var /** @type {?} */ queries = {};
	            Object.keys(propertyMetadata).forEach(function (propName) {
	                var /** @type {?} */ input = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Input; });
	                if (input) {
	                    if (input.bindingPropertyName) {
	                        inputs.push(propName + ": " + input.bindingPropertyName);
	                    }
	                    else {
	                        inputs.push(propName);
	                    }
	                }
	                var /** @type {?} */ output = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Output; });
	                if (output) {
	                    if (output.bindingPropertyName) {
	                        outputs.push(propName + ": " + output.bindingPropertyName);
	                    }
	                    else {
	                        outputs.push(propName);
	                    }
	                }
	                var /** @type {?} */ hostBindings = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostBinding; });
	                hostBindings.forEach(function (hostBinding) {
	                    if (hostBinding.hostPropertyName) {
	                        var /** @type {?} */ startWith = hostBinding.hostPropertyName[0];
	                        if (startWith === '(') {
	                            throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
	                        }
	                        else if (startWith === '[') {
	                            throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
	                        }
	                        host[("[" + hostBinding.hostPropertyName + "]")] = propName;
	                    }
	                    else {
	                        host[("[" + propName + "]")] = propName;
	                    }
	                });
	                var /** @type {?} */ hostListeners = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostListener; });
	                hostListeners.forEach(function (hostListener) {
	                    var /** @type {?} */ args = hostListener.args || [];
	                    host[("(" + hostListener.eventName + ")")] = propName + "(" + args.join(',') + ")";
	                });
	                var /** @type {?} */ query = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Query; });
	                if (query) {
	                    queries[propName] = query;
	                }
	            });
	            return this._merge(dm, inputs, outputs, host, queries, directiveType);
	        };
	        /**
	         * @param {?} def
	         * @return {?}
	         */
	        DirectiveResolver.prototype._extractPublicName = function (def) { return splitAtColon(def, [null, def])[1].trim(); };
	        /**
	         * @param {?} bindings
	         * @return {?}
	         */
	        DirectiveResolver.prototype._dedupeBindings = function (bindings) {
	            var /** @type {?} */ names = new Set();
	            var /** @type {?} */ reversedResult = [];
	            // go last to first to allow later entries to overwrite previous entries
	            for (var /** @type {?} */ i = bindings.length - 1; i >= 0; i--) {
	                var /** @type {?} */ binding = bindings[i];
	                var /** @type {?} */ name_1 = this._extractPublicName(binding);
	                if (!names.has(name_1)) {
	                    names.add(name_1);
	                    reversedResult.push(binding);
	                }
	            }
	            return reversedResult.reverse();
	        };
	        /**
	         * @param {?} directive
	         * @param {?} inputs
	         * @param {?} outputs
	         * @param {?} host
	         * @param {?} queries
	         * @param {?} directiveType
	         * @return {?}
	         */
	        DirectiveResolver.prototype._merge = function (directive, inputs, outputs, host, queries, directiveType) {
	            var /** @type {?} */ mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);
	            var /** @type {?} */ mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);
	            var /** @type {?} */ mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;
	            var /** @type {?} */ mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;
	            if (directive instanceof _angular_core.Component) {
	                return new _angular_core.Component({
	                    selector: directive.selector,
	                    inputs: mergedInputs,
	                    outputs: mergedOutputs,
	                    host: mergedHost,
	                    exportAs: directive.exportAs,
	                    moduleId: directive.moduleId,
	                    queries: mergedQueries,
	                    changeDetection: directive.changeDetection,
	                    providers: directive.providers,
	                    viewProviders: directive.viewProviders,
	                    entryComponents: directive.entryComponents,
	                    template: directive.template,
	                    templateUrl: directive.templateUrl,
	                    styles: directive.styles,
	                    styleUrls: directive.styleUrls,
	                    encapsulation: directive.encapsulation,
	                    animations: directive.animations,
	                    interpolation: directive.interpolation
	                });
	            }
	            else {
	                return new _angular_core.Directive({
	                    selector: directive.selector,
	                    inputs: mergedInputs,
	                    outputs: mergedOutputs,
	                    host: mergedHost,
	                    exportAs: directive.exportAs,
	                    queries: mergedQueries,
	                    providers: directive.providers
	                });
	            }
	        };
	        DirectiveResolver = __decorate$7([
	            CompilerInjectable(), 
	            __metadata$7('design:paramtypes', [ReflectorReader])
	        ], DirectiveResolver);
	        return DirectiveResolver;
	    }());
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function isDirectiveMetadata(type) {
	        return type instanceof _angular_core.Directive;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$20 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var TypeModifier = {};
	    TypeModifier.Const = 0;
	    TypeModifier[TypeModifier.Const] = "Const";
	    /**
	     * @abstract
	     */
	    var Type$1 = (function () {
	        /**
	         * @param {?=} modifiers
	         */
	        function Type(modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            this.modifiers = modifiers;
	            if (!modifiers) {
	                this.modifiers = [];
	            }
	        }
	        /**
	         * @abstract
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Type.prototype.visitType = function (visitor, context) { };
	        /**
	         * @param {?} modifier
	         * @return {?}
	         */
	        Type.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	        return Type;
	    }());
	    var BuiltinTypeName = {};
	    BuiltinTypeName.Dynamic = 0;
	    BuiltinTypeName.Bool = 1;
	    BuiltinTypeName.String = 2;
	    BuiltinTypeName.Int = 3;
	    BuiltinTypeName.Number = 4;
	    BuiltinTypeName.Function = 5;
	    BuiltinTypeName.Null = 6;
	    BuiltinTypeName[BuiltinTypeName.Dynamic] = "Dynamic";
	    BuiltinTypeName[BuiltinTypeName.Bool] = "Bool";
	    BuiltinTypeName[BuiltinTypeName.String] = "String";
	    BuiltinTypeName[BuiltinTypeName.Int] = "Int";
	    BuiltinTypeName[BuiltinTypeName.Number] = "Number";
	    BuiltinTypeName[BuiltinTypeName.Function] = "Function";
	    BuiltinTypeName[BuiltinTypeName.Null] = "Null";
	    var BuiltinType = (function (_super) {
	        __extends$20(BuiltinType, _super);
	        /**
	         * @param {?} name
	         * @param {?=} modifiers
	         */
	        function BuiltinType(name, modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.name = name;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BuiltinType.prototype.visitType = function (visitor, context) {
	            return visitor.visitBuiltintType(this, context);
	        };
	        return BuiltinType;
	    }(Type$1));
	    var ExpressionType = (function (_super) {
	        __extends$20(ExpressionType, _super);
	        /**
	         * @param {?} value
	         * @param {?=} typeParams
	         * @param {?=} modifiers
	         */
	        function ExpressionType(value, typeParams, modifiers) {
	            if (typeParams === void 0) { typeParams = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.value = value;
	            this.typeParams = typeParams;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionType.prototype.visitType = function (visitor, context) {
	            return visitor.visitExpressionType(this, context);
	        };
	        return ExpressionType;
	    }(Type$1));
	    var ArrayType = (function (_super) {
	        __extends$20(ArrayType, _super);
	        /**
	         * @param {?} of
	         * @param {?=} modifiers
	         */
	        function ArrayType(of, modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.of = of;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ArrayType.prototype.visitType = function (visitor, context) {
	            return visitor.visitArrayType(this, context);
	        };
	        return ArrayType;
	    }(Type$1));
	    var MapType = (function (_super) {
	        __extends$20(MapType, _super);
	        /**
	         * @param {?} valueType
	         * @param {?=} modifiers
	         */
	        function MapType(valueType, modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.valueType = valueType;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        MapType.prototype.visitType = function (visitor, context) { return visitor.visitMapType(this, context); };
	        return MapType;
	    }(Type$1));
	    var /** @type {?} */ DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
	    var /** @type {?} */ BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
	    var /** @type {?} */ INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
	    var /** @type {?} */ NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
	    var /** @type {?} */ STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
	    var /** @type {?} */ FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
	    var /** @type {?} */ NULL_TYPE = new BuiltinType(BuiltinTypeName.Null);
	    var BinaryOperator = {};
	    BinaryOperator.Equals = 0;
	    BinaryOperator.NotEquals = 1;
	    BinaryOperator.Identical = 2;
	    BinaryOperator.NotIdentical = 3;
	    BinaryOperator.Minus = 4;
	    BinaryOperator.Plus = 5;
	    BinaryOperator.Divide = 6;
	    BinaryOperator.Multiply = 7;
	    BinaryOperator.Modulo = 8;
	    BinaryOperator.And = 9;
	    BinaryOperator.Or = 10;
	    BinaryOperator.Lower = 11;
	    BinaryOperator.LowerEquals = 12;
	    BinaryOperator.Bigger = 13;
	    BinaryOperator.BiggerEquals = 14;
	    BinaryOperator[BinaryOperator.Equals] = "Equals";
	    BinaryOperator[BinaryOperator.NotEquals] = "NotEquals";
	    BinaryOperator[BinaryOperator.Identical] = "Identical";
	    BinaryOperator[BinaryOperator.NotIdentical] = "NotIdentical";
	    BinaryOperator[BinaryOperator.Minus] = "Minus";
	    BinaryOperator[BinaryOperator.Plus] = "Plus";
	    BinaryOperator[BinaryOperator.Divide] = "Divide";
	    BinaryOperator[BinaryOperator.Multiply] = "Multiply";
	    BinaryOperator[BinaryOperator.Modulo] = "Modulo";
	    BinaryOperator[BinaryOperator.And] = "And";
	    BinaryOperator[BinaryOperator.Or] = "Or";
	    BinaryOperator[BinaryOperator.Lower] = "Lower";
	    BinaryOperator[BinaryOperator.LowerEquals] = "LowerEquals";
	    BinaryOperator[BinaryOperator.Bigger] = "Bigger";
	    BinaryOperator[BinaryOperator.BiggerEquals] = "BiggerEquals";
	    /**
	     * @abstract
	     */
	    var Expression = (function () {
	        /**
	         * @param {?} type
	         */
	        function Expression(type) {
	            this.type = type;
	        }
	        /**
	         * @abstract
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Expression.prototype.visitExpression = function (visitor, context) { };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Expression.prototype.prop = function (name) { return new ReadPropExpr(this, name); };
	        /**
	         * @param {?} index
	         * @param {?=} type
	         * @return {?}
	         */
	        Expression.prototype.key = function (index, type) {
	            if (type === void 0) { type = null; }
	            return new ReadKeyExpr(this, index, type);
	        };
	        /**
	         * @param {?} name
	         * @param {?} params
	         * @return {?}
	         */
	        Expression.prototype.callMethod = function (name, params) {
	            return new InvokeMethodExpr(this, name, params);
	        };
	        /**
	         * @param {?} params
	         * @return {?}
	         */
	        Expression.prototype.callFn = function (params) { return new InvokeFunctionExpr(this, params); };
	        /**
	         * @param {?} params
	         * @param {?=} type
	         * @return {?}
	         */
	        Expression.prototype.instantiate = function (params, type) {
	            if (type === void 0) { type = null; }
	            return new InstantiateExpr(this, params, type);
	        };
	        /**
	         * @param {?} trueCase
	         * @param {?=} falseCase
	         * @return {?}
	         */
	        Expression.prototype.conditional = function (trueCase, falseCase) {
	            if (falseCase === void 0) { falseCase = null; }
	            return new ConditionalExpr(this, trueCase, falseCase);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.equals = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.notEquals = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.identical = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.notIdentical = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.minus = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.plus = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.divide = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.multiply = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.modulo = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.and = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.or = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.lower = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.lowerEquals = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.bigger = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.biggerEquals = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
	        };
	        /**
	         * @return {?}
	         */
	        Expression.prototype.isBlank = function () {
	            // Note: We use equals by purpose here to compare to null and undefined in JS.
	            // We use the typed null to allow strictNullChecks to narrow types.
	            return this.equals(TYPED_NULL_EXPR);
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        Expression.prototype.cast = function (type) { return new CastExpr(this, type); };
	        /**
	         * @return {?}
	         */
	        Expression.prototype.toStmt = function () { return new ExpressionStatement(this); };
	        return Expression;
	    }());
	    var BuiltinVar = {};
	    BuiltinVar.This = 0;
	    BuiltinVar.Super = 1;
	    BuiltinVar.CatchError = 2;
	    BuiltinVar.CatchStack = 3;
	    BuiltinVar[BuiltinVar.This] = "This";
	    BuiltinVar[BuiltinVar.Super] = "Super";
	    BuiltinVar[BuiltinVar.CatchError] = "CatchError";
	    BuiltinVar[BuiltinVar.CatchStack] = "CatchStack";
	    var ReadVarExpr = (function (_super) {
	        __extends$20(ReadVarExpr, _super);
	        /**
	         * @param {?} name
	         * @param {?=} type
	         */
	        function ReadVarExpr(name, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            if (typeof name === 'string') {
	                this.name = name;
	                this.builtin = null;
	            }
	            else {
	                this.name = null;
	                this.builtin = name;
	            }
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ReadVarExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitReadVarExpr(this, context);
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ReadVarExpr.prototype.set = function (value) { return new WriteVarExpr(this.name, value); };
	        return ReadVarExpr;
	    }(Expression));
	    var WriteVarExpr = (function (_super) {
	        __extends$20(WriteVarExpr, _super);
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?=} type
	         */
	        function WriteVarExpr(name, value, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type || value.type);
	            this.name = name;
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        WriteVarExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitWriteVarExpr(this, context);
	        };
	        /**
	         * @param {?=} type
	         * @param {?=} modifiers
	         * @return {?}
	         */
	        WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            return new DeclareVarStmt(this.name, this.value, type, modifiers);
	        };
	        return WriteVarExpr;
	    }(Expression));
	    var WriteKeyExpr = (function (_super) {
	        __extends$20(WriteKeyExpr, _super);
	        /**
	         * @param {?} receiver
	         * @param {?} index
	         * @param {?} value
	         * @param {?=} type
	         */
	        function WriteKeyExpr(receiver, index, value, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type || value.type);
	            this.receiver = receiver;
	            this.index = index;
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitWriteKeyExpr(this, context);
	        };
	        return WriteKeyExpr;
	    }(Expression));
	    var WritePropExpr = (function (_super) {
	        __extends$20(WritePropExpr, _super);
	        /**
	         * @param {?} receiver
	         * @param {?} name
	         * @param {?} value
	         * @param {?=} type
	         */
	        function WritePropExpr(receiver, name, value, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type || value.type);
	            this.receiver = receiver;
	            this.name = name;
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        WritePropExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitWritePropExpr(this, context);
	        };
	        return WritePropExpr;
	    }(Expression));
	    var BuiltinMethod = {};
	    BuiltinMethod.ConcatArray = 0;
	    BuiltinMethod.SubscribeObservable = 1;
	    BuiltinMethod.Bind = 2;
	    BuiltinMethod[BuiltinMethod.ConcatArray] = "ConcatArray";
	    BuiltinMethod[BuiltinMethod.SubscribeObservable] = "SubscribeObservable";
	    BuiltinMethod[BuiltinMethod.Bind] = "Bind";
	    var InvokeMethodExpr = (function (_super) {
	        __extends$20(InvokeMethodExpr, _super);
	        /**
	         * @param {?} receiver
	         * @param {?} method
	         * @param {?} args
	         * @param {?=} type
	         */
	        function InvokeMethodExpr(receiver, method, args, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.receiver = receiver;
	            this.args = args;
	            if (typeof method === 'string') {
	                this.name = method;
	                this.builtin = null;
	            }
	            else {
	                this.name = null;
	                this.builtin = method;
	            }
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitInvokeMethodExpr(this, context);
	        };
	        return InvokeMethodExpr;
	    }(Expression));
	    var InvokeFunctionExpr = (function (_super) {
	        __extends$20(InvokeFunctionExpr, _super);
	        /**
	         * @param {?} fn
	         * @param {?} args
	         * @param {?=} type
	         */
	        function InvokeFunctionExpr(fn, args, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.fn = fn;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitInvokeFunctionExpr(this, context);
	        };
	        return InvokeFunctionExpr;
	    }(Expression));
	    var InstantiateExpr = (function (_super) {
	        __extends$20(InstantiateExpr, _super);
	        /**
	         * @param {?} classExpr
	         * @param {?} args
	         * @param {?=} type
	         */
	        function InstantiateExpr(classExpr, args, type) {
	            _super.call(this, type);
	            this.classExpr = classExpr;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        InstantiateExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitInstantiateExpr(this, context);
	        };
	        return InstantiateExpr;
	    }(Expression));
	    var LiteralExpr = (function (_super) {
	        __extends$20(LiteralExpr, _super);
	        /**
	         * @param {?} value
	         * @param {?=} type
	         */
	        function LiteralExpr(value, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        LiteralExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitLiteralExpr(this, context);
	        };
	        return LiteralExpr;
	    }(Expression));
	    var ExternalExpr = (function (_super) {
	        __extends$20(ExternalExpr, _super);
	        /**
	         * @param {?} value
	         * @param {?=} type
	         * @param {?=} typeParams
	         */
	        function ExternalExpr(value, type, typeParams) {
	            if (type === void 0) { type = null; }
	            if (typeParams === void 0) { typeParams = null; }
	            _super.call(this, type);
	            this.value = value;
	            this.typeParams = typeParams;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ExternalExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitExternalExpr(this, context);
	        };
	        return ExternalExpr;
	    }(Expression));
	    var ConditionalExpr = (function (_super) {
	        __extends$20(ConditionalExpr, _super);
	        /**
	         * @param {?} condition
	         * @param {?} trueCase
	         * @param {?=} falseCase
	         * @param {?=} type
	         */
	        function ConditionalExpr(condition, trueCase, falseCase, type) {
	            if (falseCase === void 0) { falseCase = null; }
	            if (type === void 0) { type = null; }
	            _super.call(this, type || trueCase.type);
	            this.condition = condition;
	            this.falseCase = falseCase;
	            this.trueCase = trueCase;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ConditionalExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitConditionalExpr(this, context);
	        };
	        return ConditionalExpr;
	    }(Expression));
	    var NotExpr = (function (_super) {
	        __extends$20(NotExpr, _super);
	        /**
	         * @param {?} condition
	         */
	        function NotExpr(condition) {
	            _super.call(this, BOOL_TYPE);
	            this.condition = condition;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        NotExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitNotExpr(this, context);
	        };
	        return NotExpr;
	    }(Expression));
	    var CastExpr = (function (_super) {
	        __extends$20(CastExpr, _super);
	        /**
	         * @param {?} value
	         * @param {?} type
	         */
	        function CastExpr(value, type) {
	            _super.call(this, type);
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        CastExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitCastExpr(this, context);
	        };
	        return CastExpr;
	    }(Expression));
	    var FnParam = (function () {
	        /**
	         * @param {?} name
	         * @param {?=} type
	         */
	        function FnParam(name, type) {
	            if (type === void 0) { type = null; }
	            this.name = name;
	            this.type = type;
	        }
	        return FnParam;
	    }());
	    var FunctionExpr = (function (_super) {
	        __extends$20(FunctionExpr, _super);
	        /**
	         * @param {?} params
	         * @param {?} statements
	         * @param {?=} type
	         */
	        function FunctionExpr(params, statements, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.params = params;
	            this.statements = statements;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        FunctionExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitFunctionExpr(this, context);
	        };
	        /**
	         * @param {?} name
	         * @param {?=} modifiers
	         * @return {?}
	         */
	        FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
	        };
	        return FunctionExpr;
	    }(Expression));
	    var BinaryOperatorExpr = (function (_super) {
	        __extends$20(BinaryOperatorExpr, _super);
	        /**
	         * @param {?} operator
	         * @param {?} lhs
	         * @param {?} rhs
	         * @param {?=} type
	         */
	        function BinaryOperatorExpr(operator, lhs, rhs, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type || lhs.type);
	            this.operator = operator;
	            this.rhs = rhs;
	            this.lhs = lhs;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitBinaryOperatorExpr(this, context);
	        };
	        return BinaryOperatorExpr;
	    }(Expression));
	    var ReadPropExpr = (function (_super) {
	        __extends$20(ReadPropExpr, _super);
	        /**
	         * @param {?} receiver
	         * @param {?} name
	         * @param {?=} type
	         */
	        function ReadPropExpr(receiver, name, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.receiver = receiver;
	            this.name = name;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ReadPropExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitReadPropExpr(this, context);
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ReadPropExpr.prototype.set = function (value) {
	            return new WritePropExpr(this.receiver, this.name, value);
	        };
	        return ReadPropExpr;
	    }(Expression));
	    var ReadKeyExpr = (function (_super) {
	        __extends$20(ReadKeyExpr, _super);
	        /**
	         * @param {?} receiver
	         * @param {?} index
	         * @param {?=} type
	         */
	        function ReadKeyExpr(receiver, index, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.receiver = receiver;
	            this.index = index;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitReadKeyExpr(this, context);
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ReadKeyExpr.prototype.set = function (value) {
	            return new WriteKeyExpr(this.receiver, this.index, value);
	        };
	        return ReadKeyExpr;
	    }(Expression));
	    var LiteralArrayExpr = (function (_super) {
	        __extends$20(LiteralArrayExpr, _super);
	        /**
	         * @param {?} entries
	         * @param {?=} type
	         */
	        function LiteralArrayExpr(entries, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.entries = entries;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitLiteralArrayExpr(this, context);
	        };
	        return LiteralArrayExpr;
	    }(Expression));
	    var LiteralMapEntry = (function () {
	        /**
	         * @param {?} key
	         * @param {?} value
	         * @param {?=} quoted
	         */
	        function LiteralMapEntry(key, value, quoted) {
	            if (quoted === void 0) { quoted = false; }
	            this.key = key;
	            this.value = value;
	            this.quoted = quoted;
	        }
	        return LiteralMapEntry;
	    }());
	    var LiteralMapExpr = (function (_super) {
	        __extends$20(LiteralMapExpr, _super);
	        /**
	         * @param {?} entries
	         * @param {?=} type
	         */
	        function LiteralMapExpr(entries, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.entries = entries;
	            this.valueType = null;
	            if (isPresent(type)) {
	                this.valueType = type.valueType;
	            }
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitLiteralMapExpr(this, context);
	        };
	        return LiteralMapExpr;
	    }(Expression));
	    var /** @type {?} */ THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
	    var /** @type {?} */ SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
	    var /** @type {?} */ CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
	    var /** @type {?} */ CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
	    var /** @type {?} */ NULL_EXPR = new LiteralExpr(null, null);
	    var /** @type {?} */ TYPED_NULL_EXPR = new LiteralExpr(null, NULL_TYPE);
	    var StmtModifier = {};
	    StmtModifier.Final = 0;
	    StmtModifier.Private = 1;
	    StmtModifier[StmtModifier.Final] = "Final";
	    StmtModifier[StmtModifier.Private] = "Private";
	    /**
	     * @abstract
	     */
	    var Statement = (function () {
	        /**
	         * @param {?=} modifiers
	         */
	        function Statement(modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            this.modifiers = modifiers;
	            if (!modifiers) {
	                this.modifiers = [];
	            }
	        }
	        /**
	         * @abstract
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Statement.prototype.visitStatement = function (visitor, context) { };
	        /**
	         * @param {?} modifier
	         * @return {?}
	         */
	        Statement.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	        return Statement;
	    }());
	    var DeclareVarStmt = (function (_super) {
	        __extends$20(DeclareVarStmt, _super);
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?=} type
	         * @param {?=} modifiers
	         */
	        function DeclareVarStmt(name, value, type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.name = name;
	            this.value = value;
	            this.type = type || value.type;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitDeclareVarStmt(this, context);
	        };
	        return DeclareVarStmt;
	    }(Statement));
	    var DeclareFunctionStmt = (function (_super) {
	        __extends$20(DeclareFunctionStmt, _super);
	        /**
	         * @param {?} name
	         * @param {?} params
	         * @param {?} statements
	         * @param {?=} type
	         * @param {?=} modifiers
	         */
	        function DeclareFunctionStmt(name, params, statements, type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.name = name;
	            this.params = params;
	            this.statements = statements;
	            this.type = type;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitDeclareFunctionStmt(this, context);
	        };
	        return DeclareFunctionStmt;
	    }(Statement));
	    var ExpressionStatement = (function (_super) {
	        __extends$20(ExpressionStatement, _super);
	        /**
	         * @param {?} expr
	         */
	        function ExpressionStatement(expr) {
	            _super.call(this);
	            this.expr = expr;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionStatement.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitExpressionStmt(this, context);
	        };
	        return ExpressionStatement;
	    }(Statement));
	    var ReturnStatement = (function (_super) {
	        __extends$20(ReturnStatement, _super);
	        /**
	         * @param {?} value
	         */
	        function ReturnStatement(value) {
	            _super.call(this);
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ReturnStatement.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitReturnStmt(this, context);
	        };
	        return ReturnStatement;
	    }(Statement));
	    var AbstractClassPart = (function () {
	        /**
	         * @param {?=} type
	         * @param {?} modifiers
	         */
	        function AbstractClassPart(type, modifiers) {
	            if (type === void 0) { type = null; }
	            this.type = type;
	            this.modifiers = modifiers;
	            if (!modifiers) {
	                this.modifiers = [];
	            }
	        }
	        /**
	         * @param {?} modifier
	         * @return {?}
	         */
	        AbstractClassPart.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	        return AbstractClassPart;
	    }());
	    var ClassField = (function (_super) {
	        __extends$20(ClassField, _super);
	        /**
	         * @param {?} name
	         * @param {?=} type
	         * @param {?=} modifiers
	         */
	        function ClassField(name, type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, type, modifiers);
	            this.name = name;
	        }
	        return ClassField;
	    }(AbstractClassPart));
	    var ClassMethod = (function (_super) {
	        __extends$20(ClassMethod, _super);
	        /**
	         * @param {?} name
	         * @param {?} params
	         * @param {?} body
	         * @param {?=} type
	         * @param {?=} modifiers
	         */
	        function ClassMethod(name, params, body, type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, type, modifiers);
	            this.name = name;
	            this.params = params;
	            this.body = body;
	        }
	        return ClassMethod;
	    }(AbstractClassPart));
	    var ClassGetter = (function (_super) {
	        __extends$20(ClassGetter, _super);
	        /**
	         * @param {?} name
	         * @param {?} body
	         * @param {?=} type
	         * @param {?=} modifiers
	         */
	        function ClassGetter(name, body, type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, type, modifiers);
	            this.name = name;
	            this.body = body;
	        }
	        return ClassGetter;
	    }(AbstractClassPart));
	    var ClassStmt = (function (_super) {
	        __extends$20(ClassStmt, _super);
	        /**
	         * @param {?} name
	         * @param {?} parent
	         * @param {?} fields
	         * @param {?} getters
	         * @param {?} constructorMethod
	         * @param {?} methods
	         * @param {?=} modifiers
	         */
	        function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.name = name;
	            this.parent = parent;
	            this.fields = fields;
	            this.getters = getters;
	            this.constructorMethod = constructorMethod;
	            this.methods = methods;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ClassStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitDeclareClassStmt(this, context);
	        };
	        return ClassStmt;
	    }(Statement));
	    var IfStmt = (function (_super) {
	        __extends$20(IfStmt, _super);
	        /**
	         * @param {?} condition
	         * @param {?} trueCase
	         * @param {?=} falseCase
	         */
	        function IfStmt(condition, trueCase, falseCase) {
	            if (falseCase === void 0) { falseCase = []; }
	            _super.call(this);
	            this.condition = condition;
	            this.trueCase = trueCase;
	            this.falseCase = falseCase;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        IfStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitIfStmt(this, context);
	        };
	        return IfStmt;
	    }(Statement));
	    var CommentStmt = (function (_super) {
	        __extends$20(CommentStmt, _super);
	        /**
	         * @param {?} comment
	         */
	        function CommentStmt(comment) {
	            _super.call(this);
	            this.comment = comment;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        CommentStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitCommentStmt(this, context);
	        };
	        return CommentStmt;
	    }(Statement));
	    var TryCatchStmt = (function (_super) {
	        __extends$20(TryCatchStmt, _super);
	        /**
	         * @param {?} bodyStmts
	         * @param {?} catchStmts
	         */
	        function TryCatchStmt(bodyStmts, catchStmts) {
	            _super.call(this);
	            this.bodyStmts = bodyStmts;
	            this.catchStmts = catchStmts;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        TryCatchStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitTryCatchStmt(this, context);
	        };
	        return TryCatchStmt;
	    }(Statement));
	    var ThrowStmt = (function (_super) {
	        __extends$20(ThrowStmt, _super);
	        /**
	         * @param {?} error
	         */
	        function ThrowStmt(error) {
	            _super.call(this);
	            this.error = error;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ThrowStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitThrowStmt(this, context);
	        };
	        return ThrowStmt;
	    }(Statement));
	    var ExpressionTransformer = (function () {
	        function ExpressionTransformer() {
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitWriteVarExpr = function (expr, context) {
	            return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
	        };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitWriteKeyExpr = function (expr, context) {
	            return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
	        };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitWritePropExpr = function (expr, context) {
	            return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitInvokeMethodExpr = function (ast, context) {
	            var /** @type {?} */ method = ast.builtin || ast.name;
	            return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) {
	            return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitInstantiateExpr = function (ast, context) {
	            return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitExternalExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitConditionalExpr = function (ast, context) {
	            return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitNotExpr = function (ast, context) {
	            return new NotExpr(ast.condition.visitExpression(this, context));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitCastExpr = function (ast, context) {
	            return new CastExpr(ast.value.visitExpression(this, context), context);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitFunctionExpr = function (ast, context) {
	            // Don't descend into nested functions
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) {
	            return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitReadPropExpr = function (ast, context) {
	            return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitReadKeyExpr = function (ast, context) {
	            return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitLiteralArrayExpr = function (ast, context) {
	            return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitLiteralMapExpr = function (ast, context) {
	            var _this = this;
	            var /** @type {?} */ entries = ast.entries.map(function (entry) { return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted); });
	            return new LiteralMapExpr(entries);
	        };
	        /**
	         * @param {?} exprs
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitAllExpressions = function (exprs, context) {
	            var _this = this;
	            return exprs.map(function (expr) { return expr.visitExpression(_this, context); });
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitDeclareVarStmt = function (stmt, context) {
	            return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	            // Don't descend into nested functions
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitExpressionStmt = function (stmt, context) {
	            return new ExpressionStatement(stmt.expr.visitExpression(this, context));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitReturnStmt = function (stmt, context) {
	            return new ReturnStatement(stmt.value.visitExpression(this, context));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitDeclareClassStmt = function (stmt, context) {
	            // Don't descend into nested functions
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitIfStmt = function (stmt, context) {
	            return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitTryCatchStmt = function (stmt, context) {
	            return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitThrowStmt = function (stmt, context) {
	            return new ThrowStmt(stmt.error.visitExpression(this, context));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	        /**
	         * @param {?} stmts
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitAllStatements = function (stmts, context) {
	            var _this = this;
	            return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });
	        };
	        return ExpressionTransformer;
	    }());
	    var RecursiveExpressionVisitor = (function () {
	        function RecursiveExpressionVisitor() {
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function (expr, context) {
	            expr.value.visitExpression(this, context);
	            return expr;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function (expr, context) {
	            expr.receiver.visitExpression(this, context);
	            expr.index.visitExpression(this, context);
	            expr.value.visitExpression(this, context);
	            return expr;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitWritePropExpr = function (expr, context) {
	            expr.receiver.visitExpression(this, context);
	            expr.value.visitExpression(this, context);
	            return expr;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {
	            ast.receiver.visitExpression(this, context);
	            this.visitAllExpressions(ast.args, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) {
	            ast.fn.visitExpression(this, context);
	            this.visitAllExpressions(ast.args, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function (ast, context) {
	            ast.classExpr.visitExpression(this, context);
	            this.visitAllExpressions(ast.args, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitExternalExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitConditionalExpr = function (ast, context) {
	            ast.condition.visitExpression(this, context);
	            ast.trueCase.visitExpression(this, context);
	            ast.falseCase.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitNotExpr = function (ast, context) {
	            ast.condition.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitCastExpr = function (ast, context) {
	            ast.value.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitFunctionExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) {
	            ast.lhs.visitExpression(this, context);
	            ast.rhs.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitReadPropExpr = function (ast, context) {
	            ast.receiver.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function (ast, context) {
	            ast.receiver.visitExpression(this, context);
	            ast.index.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {
	            this.visitAllExpressions(ast.entries, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function (ast, context) {
	            var _this = this;
	            ast.entries.forEach(function (entry) { return entry.value.visitExpression(_this, context); });
	            return ast;
	        };
	        /**
	         * @param {?} exprs
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitAllExpressions = function (exprs, context) {
	            var _this = this;
	            exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function (stmt, context) {
	            stmt.value.visitExpression(this, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	            // Don't descend into nested functions
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitExpressionStmt = function (stmt, context) {
	            stmt.expr.visitExpression(this, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitReturnStmt = function (stmt, context) {
	            stmt.value.visitExpression(this, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
	            // Don't descend into nested functions
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitIfStmt = function (stmt, context) {
	            stmt.condition.visitExpression(this, context);
	            this.visitAllStatements(stmt.trueCase, context);
	            this.visitAllStatements(stmt.falseCase, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function (stmt, context) {
	            this.visitAllStatements(stmt.bodyStmts, context);
	            this.visitAllStatements(stmt.catchStmts, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitThrowStmt = function (stmt, context) {
	            stmt.error.visitExpression(this, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	        /**
	         * @param {?} stmts
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitAllStatements = function (stmts, context) {
	            var _this = this;
	            stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });
	        };
	        return RecursiveExpressionVisitor;
	    }());
	    /**
	     * @param {?} varName
	     * @param {?} newValue
	     * @param {?} expression
	     * @return {?}
	     */
	    function replaceVarInExpression(varName, newValue, expression) {
	        var /** @type {?} */ transformer = new _ReplaceVariableTransformer(varName, newValue);
	        return expression.visitExpression(transformer, null);
	    }
	    var _ReplaceVariableTransformer = (function (_super) {
	        __extends$20(_ReplaceVariableTransformer, _super);
	        /**
	         * @param {?} _varName
	         * @param {?} _newValue
	         */
	        function _ReplaceVariableTransformer(_varName, _newValue) {
	            _super.call(this);
	            this._varName = _varName;
	            this._newValue = _newValue;
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _ReplaceVariableTransformer.prototype.visitReadVarExpr = function (ast, context) {
	            return ast.name == this._varName ? this._newValue : ast;
	        };
	        return _ReplaceVariableTransformer;
	    }(ExpressionTransformer));
	    /**
	     * @param {?} stmts
	     * @return {?}
	     */
	    function findReadVarNames(stmts) {
	        var /** @type {?} */ finder = new _VariableFinder();
	        finder.visitAllStatements(stmts, null);
	        return finder.varNames;
	    }
	    var _VariableFinder = (function (_super) {
	        __extends$20(_VariableFinder, _super);
	        function _VariableFinder() {
	            _super.apply(this, arguments);
	            this.varNames = new Set();
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _VariableFinder.prototype.visitReadVarExpr = function (ast, context) {
	            this.varNames.add(ast.name);
	            return null;
	        };
	        return _VariableFinder;
	    }(RecursiveExpressionVisitor));
	    /**
	     * @param {?} name
	     * @param {?=} type
	     * @return {?}
	     */
	    function variable(name, type) {
	        if (type === void 0) { type = null; }
	        return new ReadVarExpr(name, type);
	    }
	    /**
	     * @param {?} id
	     * @param {?=} typeParams
	     * @return {?}
	     */
	    function importExpr(id, typeParams) {
	        if (typeParams === void 0) { typeParams = null; }
	        return new ExternalExpr(id, null, typeParams);
	    }
	    /**
	     * @param {?} id
	     * @param {?=} typeParams
	     * @param {?=} typeModifiers
	     * @return {?}
	     */
	    function importType(id, typeParams, typeModifiers) {
	        if (typeParams === void 0) { typeParams = null; }
	        if (typeModifiers === void 0) { typeModifiers = null; }
	        return isPresent(id) ? expressionType(importExpr(id), typeParams, typeModifiers) : null;
	    }
	    /**
	     * @param {?} expr
	     * @param {?=} typeParams
	     * @param {?=} typeModifiers
	     * @return {?}
	     */
	    function expressionType(expr, typeParams, typeModifiers) {
	        if (typeParams === void 0) { typeParams = null; }
	        if (typeModifiers === void 0) { typeModifiers = null; }
	        return isPresent(expr) ? new ExpressionType(expr, typeParams, typeModifiers) : null;
	    }
	    /**
	     * @param {?} values
	     * @param {?=} type
	     * @return {?}
	     */
	    function literalArr(values, type) {
	        if (type === void 0) { type = null; }
	        return new LiteralArrayExpr(values, type);
	    }
	    /**
	     * @param {?} values
	     * @param {?=} type
	     * @param {?=} quoted
	     * @return {?}
	     */
	    function literalMap(values, type, quoted) {
	        if (type === void 0) { type = null; }
	        if (quoted === void 0) { quoted = false; }
	        return new LiteralMapExpr(values.map(function (entry) { return new LiteralMapEntry(entry[0], entry[1], quoted); }), type);
	    }
	    /**
	     * @param {?} expr
	     * @return {?}
	     */
	    function not(expr) {
	        return new NotExpr(expr);
	    }
	    /**
	     * @param {?} params
	     * @param {?} body
	     * @param {?=} type
	     * @return {?}
	     */
	    function fn(params, body, type) {
	        if (type === void 0) { type = null; }
	        return new FunctionExpr(params, body, type);
	    }
	    /**
	     * @param {?} value
	     * @param {?=} type
	     * @return {?}
	     */
	    function literal(value, type) {
	        if (type === void 0) { type = null; }
	        return new LiteralExpr(value, type);
	    }

	    var CheckBindingField = (function () {
	        /**
	         * @param {?} expression
	         * @param {?} bindingId
	         */
	        function CheckBindingField(expression, bindingId) {
	            this.expression = expression;
	            this.bindingId = bindingId;
	        }
	        return CheckBindingField;
	    }());
	    /**
	     * @param {?} builder
	     * @return {?}
	     */
	    function createCheckBindingField(builder) {
	        var /** @type {?} */ bindingId = "" + builder.fields.length;
	        var /** @type {?} */ fieldExpr = createBindFieldExpr(bindingId);
	        // private is fine here as no child view will reference the cached value...
	        builder.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));
	        builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name)
	            .set(importExpr(createIdentifier(Identifiers.UNINITIALIZED)))
	            .toStmt());
	        return new CheckBindingField(fieldExpr, bindingId);
	    }
	    /**
	     * @param {?} evalResult
	     * @param {?} fieldExpr
	     * @param {?} throwOnChangeVar
	     * @param {?} actions
	     * @return {?}
	     */
	    function createCheckBindingStmt(evalResult, fieldExpr, throwOnChangeVar, actions) {
	        var /** @type {?} */ condition = importExpr(createIdentifier(Identifiers.checkBinding)).callFn([
	            throwOnChangeVar, fieldExpr, evalResult.currValExpr
	        ]);
	        if (evalResult.forceUpdate) {
	            condition = evalResult.forceUpdate.or(condition);
	        }
	        return evalResult.stmts.concat([
	            new IfStmt(condition, actions.concat([(THIS_EXPR.prop(fieldExpr.name).set(evalResult.currValExpr).toStmt())
	            ]))
	        ]);
	    }
	    /**
	     * @param {?} bindingId
	     * @return {?}
	     */
	    function createBindFieldExpr(bindingId) {
	        return THIS_EXPR.prop("_expr_" + bindingId);
	    }

	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function createDiTokenExpression(token) {
	        if (isPresent(token.value)) {
	            return literal(token.value);
	        }
	        else {
	            return importExpr(token.identifier);
	        }
	    }
	    /**
	     * @param {?} values
	     * @return {?}
	     */
	    function createInlineArray(values) {
	        if (values.length === 0) {
	            return importExpr(createIdentifier(Identifiers.EMPTY_INLINE_ARRAY));
	        }
	        var /** @type {?} */ log2 = Math.log(values.length) / Math.log(2);
	        var /** @type {?} */ index = Math.ceil(log2);
	        var /** @type {?} */ identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] :
	            Identifiers.InlineArrayDynamic;
	        var /** @type {?} */ identifier = createIdentifier(identifierSpec);
	        return importExpr(identifier).instantiate([(literal(values.length))
	        ].concat(values));
	    }
	    /**
	     * @param {?} fn
	     * @param {?} argCount
	     * @param {?} pureProxyProp
	     * @param {?} builder
	     * @return {?}
	     */
	    function createPureProxy(fn, argCount, pureProxyProp, builder) {
	        builder.fields.push(new ClassField(pureProxyProp.name, null));
	        var /** @type {?} */ pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
	        if (!pureProxyId) {
	            throw new Error("Unsupported number of argument for pure functions: " + argCount);
	        }
	        builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name)
	            .set(importExpr(createIdentifier(pureProxyId)).callFn([fn]))
	            .toStmt());
	    }
	    /**
	     * @param {?} enumType
	     * @param {?} enumValue
	     * @return {?}
	     */
	    function createEnumExpression(enumType, enumValue) {
	        var /** @type {?} */ enumName = Object.keys(enumType.runtime).find(function (propName) { return enumType.runtime[propName] === enumValue; });
	        if (!enumName) {
	            throw new Error("Unknown enum value " + enumValue + " in " + enumType.name);
	        }
	        return importExpr(createEnumIdentifier(enumType, enumName));
	    }

	    var /** @type {?} */ VAL_UNWRAPPER_VAR = variable("valUnwrapper");
	    var EventHandlerVars = (function () {
	        function EventHandlerVars() {
	        }
	        EventHandlerVars.event = variable('$event');
	        return EventHandlerVars;
	    }());
	    var ConvertPropertyBindingResult = (function () {
	        /**
	         * @param {?} stmts
	         * @param {?} currValExpr
	         * @param {?} forceUpdate
	         */
	        function ConvertPropertyBindingResult(stmts, currValExpr, forceUpdate) {
	            this.stmts = stmts;
	            this.currValExpr = currValExpr;
	            this.forceUpdate = forceUpdate;
	        }
	        return ConvertPropertyBindingResult;
	    }());
	    /**
	     * Converts the given expression AST into an executable output AST, assuming the expression is
	     * used in a property binding.
	     * @param {?} builder
	     * @param {?} nameResolver
	     * @param {?} implicitReceiver
	     * @param {?} expression
	     * @param {?} bindingId
	     * @return {?}
	     */
	    function convertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) {
	        var /** @type {?} */ currValExpr = createCurrValueExpr(bindingId);
	        var /** @type {?} */ stmts = [];
	        if (!nameResolver) {
	            nameResolver = new DefaultNameResolver();
	        }
	        var /** @type {?} */ visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, VAL_UNWRAPPER_VAR, bindingId, false);
	        var /** @type {?} */ outputExpr = expression.visit(visitor, _Mode.Expression);
	        if (!outputExpr) {
	            // e.g. an empty expression was given
	            return null;
	        }
	        if (visitor.temporaryCount) {
	            for (var /** @type {?} */ i = 0; i < visitor.temporaryCount; i++) {
	                stmts.push(temporaryDeclaration(bindingId, i));
	            }
	        }
	        if (visitor.needsValueUnwrapper) {
	            var /** @type {?} */ initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod('reset', []).toStmt();
	            stmts.push(initValueUnwrapperStmt);
	        }
	        stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));
	        if (visitor.needsValueUnwrapper) {
	            return new ConvertPropertyBindingResult(stmts, currValExpr, VAL_UNWRAPPER_VAR.prop('hasWrappedValue'));
	        }
	        else {
	            return new ConvertPropertyBindingResult(stmts, currValExpr, null);
	        }
	    }
	    var ConvertActionBindingResult = (function () {
	        /**
	         * @param {?} stmts
	         * @param {?} preventDefault
	         */
	        function ConvertActionBindingResult(stmts, preventDefault) {
	            this.stmts = stmts;
	            this.preventDefault = preventDefault;
	        }
	        return ConvertActionBindingResult;
	    }());
	    /**
	     * Converts the given expression AST into an executable output AST, assuming the expression is
	     * used in an action binding (e.g. an event handler).
	     * @param {?} builder
	     * @param {?} nameResolver
	     * @param {?} implicitReceiver
	     * @param {?} action
	     * @param {?} bindingId
	     * @return {?}
	     */
	    function convertActionBinding(builder, nameResolver, implicitReceiver, action, bindingId) {
	        if (!nameResolver) {
	            nameResolver = new DefaultNameResolver();
	        }
	        var /** @type {?} */ visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, null, bindingId, true);
	        var /** @type {?} */ actionStmts = [];
	        flattenStatements(action.visit(visitor, _Mode.Statement), actionStmts);
	        prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
	        var /** @type {?} */ lastIndex = actionStmts.length - 1;
	        var /** @type {?} */ preventDefaultVar = null;
	        if (lastIndex >= 0) {
	            var /** @type {?} */ lastStatement = actionStmts[lastIndex];
	            var /** @type {?} */ returnExpr = convertStmtIntoExpression(lastStatement);
	            if (returnExpr) {
	                // Note: We need to cast the result of the method call to dynamic,
	                // as it might be a void method!
	                preventDefaultVar = createPreventDefaultVar(bindingId);
	                actionStmts[lastIndex] =
	                    preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))
	                        .toDeclStmt(null, [StmtModifier.Final]);
	            }
	        }
	        return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
	    }
	    /**
	     * Creates variables that are shared by multiple calls to `convertActionBinding` /
	     * `convertPropertyBinding`
	     * @param {?} stmts
	     * @return {?}
	     */
	    function createSharedBindingVariablesIfNeeded(stmts) {
	        var /** @type {?} */ unwrapperStmts = [];
	        var /** @type {?} */ readVars = findReadVarNames(stmts);
	        if (readVars.has(VAL_UNWRAPPER_VAR.name)) {
	            unwrapperStmts.push(VAL_UNWRAPPER_VAR
	                .set(importExpr(createIdentifier(Identifiers.ValueUnwrapper)).instantiate([]))
	                .toDeclStmt(null, [StmtModifier.Final]));
	        }
	        return unwrapperStmts;
	    }
	    /**
	     * @param {?} bindingId
	     * @param {?} temporaryNumber
	     * @return {?}
	     */
	    function temporaryName(bindingId, temporaryNumber) {
	        return "tmp_" + bindingId + "_" + temporaryNumber;
	    }
	    /**
	     * @param {?} bindingId
	     * @param {?} temporaryNumber
	     * @return {?}
	     */
	    function temporaryDeclaration(bindingId, temporaryNumber) {
	        return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
	    }
	    /**
	     * @param {?} temporaryCount
	     * @param {?} bindingId
	     * @param {?} statements
	     * @return {?}
	     */
	    function prependTemporaryDecls(temporaryCount, bindingId, statements) {
	        for (var /** @type {?} */ i = temporaryCount - 1; i >= 0; i--) {
	            statements.unshift(temporaryDeclaration(bindingId, i));
	        }
	    }
	    var _Mode = {};
	    _Mode.Statement = 0;
	    _Mode.Expression = 1;
	    _Mode[_Mode.Statement] = "Statement";
	    _Mode[_Mode.Expression] = "Expression";
	    /**
	     * @param {?} mode
	     * @param {?} ast
	     * @return {?}
	     */
	    function ensureStatementMode(mode, ast) {
	        if (mode !== _Mode.Statement) {
	            throw new Error("Expected a statement, but saw " + ast);
	        }
	    }
	    /**
	     * @param {?} mode
	     * @param {?} ast
	     * @return {?}
	     */
	    function ensureExpressionMode(mode, ast) {
	        if (mode !== _Mode.Expression) {
	            throw new Error("Expected an expression, but saw " + ast);
	        }
	    }
	    /**
	     * @param {?} mode
	     * @param {?} expr
	     * @return {?}
	     */
	    function convertToStatementIfNeeded(mode, expr) {
	        if (mode === _Mode.Statement) {
	            return expr.toStmt();
	        }
	        else {
	            return expr;
	        }
	    }
	    var _AstToIrVisitor = (function () {
	        /**
	         * @param {?} _builder
	         * @param {?} _nameResolver
	         * @param {?} _implicitReceiver
	         * @param {?} _valueUnwrapper
	         * @param {?} bindingId
	         * @param {?} isAction
	         */
	        function _AstToIrVisitor(_builder, _nameResolver, _implicitReceiver, _valueUnwrapper, bindingId, isAction) {
	            this._builder = _builder;
	            this._nameResolver = _nameResolver;
	            this._implicitReceiver = _implicitReceiver;
	            this._valueUnwrapper = _valueUnwrapper;
	            this.bindingId = bindingId;
	            this.isAction = isAction;
	            this._nodeMap = new Map();
	            this._resultMap = new Map();
	            this._currentTemporary = 0;
	            this.needsValueUnwrapper = false;
	            this.temporaryCount = 0;
	        }
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
	            var /** @type {?} */ op;
	            switch (ast.operation) {
	                case '+':
	                    op = BinaryOperator.Plus;
	                    break;
	                case '-':
	                    op = BinaryOperator.Minus;
	                    break;
	                case '*':
	                    op = BinaryOperator.Multiply;
	                    break;
	                case '/':
	                    op = BinaryOperator.Divide;
	                    break;
	                case '%':
	                    op = BinaryOperator.Modulo;
	                    break;
	                case '&&':
	                    op = BinaryOperator.And;
	                    break;
	                case '||':
	                    op = BinaryOperator.Or;
	                    break;
	                case '==':
	                    op = BinaryOperator.Equals;
	                    break;
	                case '!=':
	                    op = BinaryOperator.NotEquals;
	                    break;
	                case '===':
	                    op = BinaryOperator.Identical;
	                    break;
	                case '!==':
	                    op = BinaryOperator.NotIdentical;
	                    break;
	                case '<':
	                    op = BinaryOperator.Lower;
	                    break;
	                case '>':
	                    op = BinaryOperator.Bigger;
	                    break;
	                case '<=':
	                    op = BinaryOperator.LowerEquals;
	                    break;
	                case '>=':
	                    op = BinaryOperator.BiggerEquals;
	                    break;
	                default:
	                    throw new Error("Unsupported operation " + ast.operation);
	            }
	            return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
	            ensureStatementMode(mode, ast);
	            return this.visitAll(ast.expressions, mode);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
	            var /** @type {?} */ value = this.visit(ast.condition, _Mode.Expression);
	            return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
	            var /** @type {?} */ input = this.visit(ast.exp, _Mode.Expression);
	            var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);
	            var /** @type {?} */ value = this._nameResolver.callPipe(ast.name, input, args);
	            if (!value) {
	                throw new Error("Illegal state: Pipe " + ast.name + " is not allowed here!");
	            }
	            this.needsValueUnwrapper = true;
	            return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
	            return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
	            ensureExpressionMode(mode, ast);
	            return this._implicitReceiver;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
	            ensureExpressionMode(mode, ast);
	            var /** @type {?} */ args = [literal(ast.expressions.length)];
	            for (var /** @type {?} */ i = 0; i < ast.strings.length - 1; i++) {
	                args.push(literal(ast.strings[i]));
	                args.push(this.visit(ast.expressions[i], _Mode.Expression));
	            }
	            args.push(literal(ast.strings[ast.strings.length - 1]));
	            return ast.expressions.length <= 9 ?
	                importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) :
	                importExpr(createIdentifier(Identifiers.interpolate)).callFn([
	                    args[0], literalArr(args.slice(1))
	                ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
	            var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	            if (leftMostSafe) {
	                return this.convertSafeAccess(ast, leftMostSafe, mode);
	            }
	            else {
	                return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
	            var /** @type {?} */ obj = this.visit(ast.obj, _Mode.Expression);
	            var /** @type {?} */ key = this.visit(ast.key, _Mode.Expression);
	            var /** @type {?} */ value = this.visit(ast.value, _Mode.Expression);
	            return convertToStatementIfNeeded(mode, obj.key(key).set(value));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
	            var /** @type {?} */ parts = this.visitAll(ast.expressions, mode);
	            var /** @type {?} */ literalArr$$ = this.isAction ? literalArr(parts) : createCachedLiteralArray(this._builder, parts);
	            return convertToStatementIfNeeded(mode, literalArr$$);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
	            var /** @type {?} */ parts = [];
	            for (var /** @type {?} */ i = 0; i < ast.keys.length; i++) {
	                parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
	            }
	            var /** @type {?} */ literalMap$$ = this.isAction ? literalMap(parts) : createCachedLiteralMap(this._builder, parts);
	            return convertToStatementIfNeeded(mode, literalMap$$);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
	            return convertToStatementIfNeeded(mode, literal(ast.value));
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype._getLocal = function (name) {
	            if (this.isAction && name == EventHandlerVars.event.name) {
	                return EventHandlerVars.event;
	            }
	            return this._nameResolver.getLocal(name);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
	            var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	            if (leftMostSafe) {
	                return this.convertSafeAccess(ast, leftMostSafe, mode);
	            }
	            else {
	                var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);
	                var /** @type {?} */ result = null;
	                var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	                if (receiver === this._implicitReceiver) {
	                    var /** @type {?} */ varExpr = this._getLocal(ast.name);
	                    if (varExpr) {
	                        result = varExpr.callFn(args);
	                    }
	                }
	                if (isBlank(result)) {
	                    result = receiver.callMethod(ast.name, args);
	                }
	                return convertToStatementIfNeeded(mode, result);
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
	            return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
	            var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	            if (leftMostSafe) {
	                return this.convertSafeAccess(ast, leftMostSafe, mode);
	            }
	            else {
	                var /** @type {?} */ result = null;
	                var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	                if (receiver === this._implicitReceiver) {
	                    result = this._getLocal(ast.name);
	                }
	                if (isBlank(result)) {
	                    result = receiver.prop(ast.name);
	                }
	                return convertToStatementIfNeeded(mode, result);
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
	            var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	            if (receiver === this._implicitReceiver) {
	                var /** @type {?} */ varExpr = this._getLocal(ast.name);
	                if (varExpr) {
	                    throw new Error('Cannot assign to a reference or variable!');
	                }
	            }
	            return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
	            return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
	            return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	        };
	        /**
	         * @param {?} asts
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
	            var _this = this;
	            return asts.map(function (ast) { return _this.visit(ast, mode); });
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
	            throw new Error('Quotes are not supported for evaluation!');
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visit = function (ast, mode) {
	            var /** @type {?} */ result = this._resultMap.get(ast);
	            if (result)
	                return result;
	            return (this._nodeMap.get(ast) || ast).visit(this, mode);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} leftMostSafe
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {
	            // If the expression contains a safe access node on the left it needs to be converted to
	            // an expression that guards the access to the member by checking the receiver for blank. As
	            // execution proceeds from left to right, the left most part of the expression must be guarded
	            // first but, because member access is left associative, the right side of the expression is at
	            // the top of the AST. The desired result requires lifting a copy of the the left part of the
	            // expression up to test it for blank before generating the unguarded version.
	            // Consider, for example the following expression: a?.b.c?.d.e
	            // This results in the ast:
	            //         .
	            //        / \
	            //       ?.   e
	            //      /  \
	            //     .    d
	            //    / \
	            //   ?.  c
	            //  /  \
	            // a    b
	            // The following tree should be generated:
	            //
	            //        /---- ? ----\
	            //       /      |      \
	            //     a   /--- ? ---\  null
	            //        /     |     \
	            //       .      .     null
	            //      / \    / \
	            //     .  c   .   e
	            //    / \    / \
	            //   a   b  ,   d
	            //         / \
	            //        .   c
	            //       / \
	            //      a   b
	            //
	            // Notice that the first guard condition is the left hand of the left most safe access node
	            // which comes in as leftMostSafe to this routine.
	            var /** @type {?} */ guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
	            var /** @type {?} */ temporary;
	            if (this.needsTemporary(leftMostSafe.receiver)) {
	                // If the expression has method calls or pipes then we need to save the result into a
	                // temporary variable to avoid calling stateful or impure code more than once.
	                temporary = this.allocateTemporary();
	                // Preserve the result in the temporary variable
	                guardedExpression = temporary.set(guardedExpression);
	                // Ensure all further references to the guarded expression refer to the temporary instead.
	                this._resultMap.set(leftMostSafe.receiver, temporary);
	            }
	            var /** @type {?} */ condition = guardedExpression.isBlank();
	            // Convert the ast to an unguarded access to the receiver's member. The map will substitute
	            // leftMostNode with its unguarded version in the call to `this.visit()`.
	            if (leftMostSafe instanceof SafeMethodCall) {
	                this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
	            }
	            else {
	                this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
	            }
	            // Recursively convert the node now without the guarded member access.
	            var /** @type {?} */ access = this.visit(ast, _Mode.Expression);
	            // Remove the mapping. This is not strictly required as the converter only traverses each node
	            // once but is safer if the conversion is changed to traverse the nodes more than once.
	            this._nodeMap.delete(leftMostSafe);
	            // If we allcoated a temporary, release it.
	            if (temporary) {
	                this.releaseTemporary(temporary);
	            }
	            // Produce the conditional
	            return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
	        };
	        /**
	         * @param {?} ast
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {
	            var _this = this;
	            var /** @type {?} */ visit = function (visitor, ast) {
	                return (_this._nodeMap.get(ast) || ast).visit(visitor);
	            };
	            return ast.visit({
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitBinary: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitChain: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitConditional: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitFunctionCall: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitImplicitReceiver: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitInterpolation: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitKeyedRead: function (ast) { return visit(this, ast.obj); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitKeyedWrite: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralArray: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralMap: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralPrimitive: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitMethodCall: function (ast) { return visit(this, ast.receiver); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPipe: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPrefixNot: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPropertyRead: function (ast) { return visit(this, ast.receiver); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPropertyWrite: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitQuote: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitSafeMethodCall: function (ast) { return visit(this, ast.receiver) || ast; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitSafePropertyRead: function (ast) {
	                    return visit(this, ast.receiver) || ast;
	                }
	            });
	        };
	        /**
	         * @param {?} ast
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.needsTemporary = function (ast) {
	            var _this = this;
	            var /** @type {?} */ visit = function (visitor, ast) {
	                return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
	            };
	            var /** @type {?} */ visitSome = function (visitor, ast) {
	                return ast.some(function (ast) { return visit(visitor, ast); });
	            };
	            return ast.visit({
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitBinary: function (ast) { return visit(this, ast.left) || visit(this, ast.right); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitChain: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitConditional: function (ast) {
	                    return visit(this, ast.condition) || visit(this, ast.trueExp) ||
	                        visit(this, ast.falseExp);
	                },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitFunctionCall: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitImplicitReceiver: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitInterpolation: function (ast) { return visitSome(this, ast.expressions); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitKeyedRead: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitKeyedWrite: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralArray: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralMap: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralPrimitive: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitMethodCall: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPipe: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPrefixNot: function (ast) { return visit(this, ast.expression); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPropertyRead: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPropertyWrite: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitQuote: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitSafeMethodCall: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitSafePropertyRead: function (ast) { return false; }
	            });
	        };
	        /**
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.allocateTemporary = function () {
	            var /** @type {?} */ tempNumber = this._currentTemporary++;
	            this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
	            return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
	        };
	        /**
	         * @param {?} temporary
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {
	            this._currentTemporary--;
	            if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
	                throw new Error("Temporary " + temporary.name + " released out of order");
	            }
	        };
	        return _AstToIrVisitor;
	    }());
	    /**
	     * @param {?} arg
	     * @param {?} output
	     * @return {?}
	     */
	    function flattenStatements(arg, output) {
	        if (Array.isArray(arg)) {
	            ((arg)).forEach(function (entry) { return flattenStatements(entry, output); });
	        }
	        else {
	            output.push(arg);
	        }
	    }
	    /**
	     * @param {?} builder
	     * @param {?} values
	     * @return {?}
	     */
	    function createCachedLiteralArray(builder, values) {
	        if (values.length === 0) {
	            return importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));
	        }
	        var /** @type {?} */ proxyExpr = THIS_EXPR.prop("_arr_" + builder.fields.length);
	        var /** @type {?} */ proxyParams = [];
	        var /** @type {?} */ proxyReturnEntries = [];
	        for (var /** @type {?} */ i = 0; i < values.length; i++) {
	            var /** @type {?} */ paramName = "p" + i;
	            proxyParams.push(new FnParam(paramName));
	            proxyReturnEntries.push(variable(paramName));
	        }
	        createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, builder);
	        return proxyExpr.callFn(values);
	    }
	    /**
	     * @param {?} builder
	     * @param {?} entries
	     * @return {?}
	     */
	    function createCachedLiteralMap(builder, entries) {
	        if (entries.length === 0) {
	            return importExpr(createIdentifier(Identifiers.EMPTY_MAP));
	        }
	        var /** @type {?} */ proxyExpr = THIS_EXPR.prop("_map_" + builder.fields.length);
	        var /** @type {?} */ proxyParams = [];
	        var /** @type {?} */ proxyReturnEntries = [];
	        var /** @type {?} */ values = [];
	        for (var /** @type {?} */ i = 0; i < entries.length; i++) {
	            var /** @type {?} */ paramName = "p" + i;
	            proxyParams.push(new FnParam(paramName));
	            proxyReturnEntries.push([entries[i][0], variable(paramName)]);
	            values.push(/** @type {?} */ (entries[i][1]));
	        }
	        createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, builder);
	        return proxyExpr.callFn(values);
	    }
	    var DefaultNameResolver = (function () {
	        function DefaultNameResolver() {
	        }
	        /**
	         * @param {?} name
	         * @param {?} input
	         * @param {?} args
	         * @return {?}
	         */
	        DefaultNameResolver.prototype.callPipe = function (name, input, args) { return null; };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        DefaultNameResolver.prototype.getLocal = function (name) { return null; };
	        return DefaultNameResolver;
	    }());
	    /**
	     * @param {?} bindingId
	     * @return {?}
	     */
	    function createCurrValueExpr(bindingId) {
	        return variable("currVal_" + bindingId); // fix syntax highlighting: `
	    }
	    /**
	     * @param {?} bindingId
	     * @return {?}
	     */
	    function createPreventDefaultVar(bindingId) {
	        return variable("pd_" + bindingId);
	    }
	    /**
	     * @param {?} stmt
	     * @return {?}
	     */
	    function convertStmtIntoExpression(stmt) {
	        if (stmt instanceof ExpressionStatement) {
	            return stmt.expr;
	        }
	        else if (stmt instanceof ReturnStatement) {
	            return stmt.value;
	        }
	        return null;
	    }

	    /**
	     * @param {?} view
	     * @param {?} boundProp
	     * @param {?} renderElement
	     * @param {?} renderValue
	     * @param {?} logBindingUpdate
	     * @param {?=} securityContextExpression
	     * @return {?}
	     */
	    function writeToRenderer(view, boundProp, renderElement, renderValue, logBindingUpdate, securityContextExpression) {
	        var /** @type {?} */ updateStmts = [];
	        var /** @type {?} */ renderer = view.prop('renderer');
	        renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression);
	        switch (boundProp.type) {
	            case PropertyBindingType.Property:
	                if (logBindingUpdate) {
	                    updateStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfo))
	                        .callFn([renderer, renderElement, literal(boundProp.name), renderValue])
	                        .toStmt());
	                }
	                updateStmts.push(renderer
	                    .callMethod('setElementProperty', [renderElement, literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case PropertyBindingType.Attribute:
	                renderValue =
	                    renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod('toString', []));
	                updateStmts.push(renderer
	                    .callMethod('setElementAttribute', [renderElement, literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case PropertyBindingType.Class:
	                updateStmts.push(renderer
	                    .callMethod('setElementClass', [renderElement, literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case PropertyBindingType.Style:
	                var /** @type {?} */ strValue = renderValue.callMethod('toString', []);
	                if (isPresent(boundProp.unit)) {
	                    strValue = strValue.plus(literal(boundProp.unit));
	                }
	                renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue);
	                updateStmts.push(renderer
	                    .callMethod('setElementStyle', [renderElement, literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case PropertyBindingType.Animation:
	                throw new Error('Illegal state: Should not come here!');
	        }
	        return updateStmts;
	    }
	    /**
	     * @param {?} view
	     * @param {?} boundProp
	     * @param {?} renderValue
	     * @param {?=} securityContextExpression
	     * @return {?}
	     */
	    function sanitizedValue(view, boundProp, renderValue, securityContextExpression) {
	        if (boundProp.securityContext === _angular_core.SecurityContext.NONE) {
	            return renderValue; // No sanitization needed.
	        }
	        if (!boundProp.needsRuntimeSecurityContext) {
	            securityContextExpression =
	                createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);
	        }
	        if (!securityContextExpression) {
	            throw new Error("internal error, no SecurityContext given " + boundProp.name);
	        }
	        var /** @type {?} */ ctx = view.prop('viewUtils').prop('sanitizer');
	        var /** @type {?} */ args = [securityContextExpression, renderValue];
	        return ctx.callMethod('sanitize', args);
	    }
	    /**
	     * @param {?} view
	     * @param {?} componentView
	     * @param {?} boundProp
	     * @param {?} boundOutputs
	     * @param {?} eventListener
	     * @param {?} renderElement
	     * @param {?} renderValue
	     * @param {?} lastRenderValue
	     * @return {?}
	     */
	    function triggerAnimation(view, componentView, boundProp, boundOutputs, eventListener, renderElement, renderValue, lastRenderValue) {
	        var /** @type {?} */ detachStmts = [];
	        var /** @type {?} */ updateStmts = [];
	        var /** @type {?} */ animationName = boundProp.name;
	        var /** @type {?} */ animationFnExpr = componentView.prop('componentType').prop('animations').key(literal(animationName));
	        // it's important to normalize the void value as `void` explicitly
	        // so that the styles data can be obtained from the stringmap
	        var /** @type {?} */ emptyStateValue = literal(EMPTY_STATE);
	        var /** @type {?} */ unitializedValue = importExpr(createIdentifier(Identifiers.UNINITIALIZED));
	        var /** @type {?} */ animationTransitionVar = variable('animationTransition_' + animationName);
	        updateStmts.push(animationTransitionVar
	            .set(animationFnExpr.callFn([
	            view, renderElement,
	            lastRenderValue.equals(unitializedValue).conditional(emptyStateValue, lastRenderValue),
	            renderValue.equals(unitializedValue).conditional(emptyStateValue, renderValue)
	        ]))
	            .toDeclStmt());
	        detachStmts.push(animationTransitionVar
	            .set(animationFnExpr.callFn([view, renderElement, lastRenderValue, emptyStateValue]))
	            .toDeclStmt());
	        var /** @type {?} */ registerStmts = [];
	        var /** @type {?} */ animationStartMethodExists = boundOutputs.find(function (event) { return event.isAnimation && event.name == animationName && event.phase == 'start'; });
	        if (animationStartMethodExists) {
	            registerStmts.push(animationTransitionVar
	                .callMethod('onStart', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'start'))])])
	                .toStmt());
	        }
	        var /** @type {?} */ animationDoneMethodExists = boundOutputs.find(function (event) { return event.isAnimation && event.name == animationName && event.phase == 'done'; });
	        if (animationDoneMethodExists) {
	            registerStmts.push(animationTransitionVar
	                .callMethod('onDone', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'done'))])])
	                .toStmt());
	        }
	        updateStmts.push.apply(updateStmts, registerStmts);
	        detachStmts.push.apply(detachStmts, registerStmts);
	        return { updateStmts: updateStmts, detachStmts: detachStmts };
	    }

	    /**
	     * Create a new class stmts based on the given data.
	     * @param {?} config
	     * @return {?}
	     */
	    function createClassStmt(config) {
	        var /** @type {?} */ parentArgs = config.parentArgs || [];
	        var /** @type {?} */ superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
	        var /** @type {?} */ builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
	        var /** @type {?} */ ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
	        return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || []);
	    }
	    /**
	     * @param {?} builders
	     * @return {?}
	     */
	    function concatClassBuilderParts(builders) {
	        return {
	            fields: (_a = []).concat.apply(_a, builders.map(function (builder) { return builder.fields || []; })),
	            methods: (_b = []).concat.apply(_b, builders.map(function (builder) { return builder.methods || []; })),
	            getters: (_c = []).concat.apply(_c, builders.map(function (builder) { return builder.getters || []; })),
	            ctorStmts: (_d = []).concat.apply(_d, builders.map(function (builder) { return builder.ctorStmts || []; })),
	        };
	        var _a, _b, _c, _d;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$8 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$8 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var DirectiveWrapperCompileResult = (function () {
	        /**
	         * @param {?} statements
	         * @param {?} dirWrapperClassVar
	         */
	        function DirectiveWrapperCompileResult(statements, dirWrapperClassVar) {
	            this.statements = statements;
	            this.dirWrapperClassVar = dirWrapperClassVar;
	        }
	        return DirectiveWrapperCompileResult;
	    }());
	    var /** @type {?} */ CONTEXT_FIELD_NAME = 'context';
	    var /** @type {?} */ CHANGES_FIELD_NAME = '_changes';
	    var /** @type {?} */ CHANGED_FIELD_NAME = '_changed';
	    var /** @type {?} */ EVENT_HANDLER_FIELD_NAME = '_eventHandler';
	    var /** @type {?} */ CURR_VALUE_VAR = variable('currValue');
	    var /** @type {?} */ THROW_ON_CHANGE_VAR = variable('throwOnChange');
	    var /** @type {?} */ FORCE_UPDATE_VAR = variable('forceUpdate');
	    var /** @type {?} */ VIEW_VAR = variable('view');
	    var /** @type {?} */ COMPONENT_VIEW_VAR = variable('componentView');
	    var /** @type {?} */ RENDER_EL_VAR = variable('el');
	    var /** @type {?} */ EVENT_NAME_VAR = variable('eventName');
	    var /** @type {?} */ RESET_CHANGES_STMT = THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt();
	    /**
	     * We generate directive wrappers to prevent code bloat when a directive is used.
	     * A directive wrapper encapsulates
	     * the dirty checking for `\@Input`, the handling of `\@HostListener` / `\@HostBinding`
	     * and calling the lifecyclehooks `ngOnInit`, `ngOnChanges`, `ngDoCheck`.
	     *
	     * So far, only `\@Input` and the lifecycle hooks have been implemented.
	     */
	    var DirectiveWrapperCompiler = (function () {
	        /**
	         * @param {?} compilerConfig
	         * @param {?} _exprParser
	         * @param {?} _schemaRegistry
	         * @param {?} _console
	         */
	        function DirectiveWrapperCompiler(compilerConfig, _exprParser, _schemaRegistry, _console) {
	            this.compilerConfig = compilerConfig;
	            this._exprParser = _exprParser;
	            this._schemaRegistry = _schemaRegistry;
	            this._console = _console;
	        }
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        DirectiveWrapperCompiler.dirWrapperClassName = function (id) {
	            return "Wrapper_" + identifierName(id);
	        };
	        /**
	         * @param {?} dirMeta
	         * @return {?}
	         */
	        DirectiveWrapperCompiler.prototype.compile = function (dirMeta) {
	            var /** @type {?} */ hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry);
	            reportParseErrors(hostParseResult.errors, this._console);
	            var /** @type {?} */ builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta);
	            Object.keys(dirMeta.inputs).forEach(function (inputFieldName) {
	                addCheckInputMethod(inputFieldName, builder);
	            });
	            addNgDoCheckMethod(builder);
	            addCheckHostMethod(hostParseResult.hostProps, hostParseResult.hostListeners, builder);
	            addHandleEventMethod(hostParseResult.hostListeners, builder);
	            addSubscribeMethod(dirMeta, builder);
	            var /** @type {?} */ classStmt = builder.build();
	            return new DirectiveWrapperCompileResult([classStmt], classStmt.name);
	        };
	        DirectiveWrapperCompiler = __decorate$8([
	            CompilerInjectable(), 
	            __metadata$8('design:paramtypes', [CompilerConfig, Parser, ElementSchemaRegistry, Console])
	        ], DirectiveWrapperCompiler);
	        return DirectiveWrapperCompiler;
	    }());
	    var DirectiveWrapperBuilder = (function () {
	        /**
	         * @param {?} compilerConfig
	         * @param {?} dirMeta
	         */
	        function DirectiveWrapperBuilder(compilerConfig, dirMeta) {
	            this.compilerConfig = compilerConfig;
	            this.dirMeta = dirMeta;
	            this.fields = [];
	            this.getters = [];
	            this.methods = [];
	            this.ctorStmts = [];
	            this.detachStmts = [];
	            this.destroyStmts = [];
	            var dirLifecycleHooks = dirMeta.type.lifecycleHooks;
	            this.genChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 ||
	                this.compilerConfig.logBindingUpdate;
	            this.ngOnChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
	            this.ngOnInit = dirLifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1;
	            this.ngDoCheck = dirLifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1;
	            this.ngOnDestroy = dirLifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1;
	            if (this.ngOnDestroy) {
	                this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnDestroy', []).toStmt());
	            }
	        }
	        /**
	         * @return {?}
	         */
	        DirectiveWrapperBuilder.prototype.build = function () {
	            var /** @type {?} */ dirDepParamNames = [];
	            for (var /** @type {?} */ i = 0; i < this.dirMeta.type.diDeps.length; i++) {
	                dirDepParamNames.push("p" + i);
	            }
	            var /** @type {?} */ methods = [
	                new ClassMethod('ngOnDetach', [
	                    new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	                    new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	                    new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	                ], this.detachStmts),
	                new ClassMethod('ngOnDestroy', [], this.destroyStmts),
	            ];
	            var /** @type {?} */ fields = [
	                new ClassField(EVENT_HANDLER_FIELD_NAME, FUNCTION_TYPE, [StmtModifier.Private]),
	                new ClassField(CONTEXT_FIELD_NAME, importType(this.dirMeta.type)),
	                new ClassField(CHANGED_FIELD_NAME, BOOL_TYPE, [StmtModifier.Private]),
	            ];
	            var /** @type {?} */ ctorStmts = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];
	            if (this.genChanges) {
	                fields.push(new ClassField(CHANGES_FIELD_NAME, new MapType(DYNAMIC_TYPE), [StmtModifier.Private]));
	                ctorStmts.push(RESET_CHANGES_STMT);
	            }
	            ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	                .set(importExpr(this.dirMeta.type)
	                .instantiate(dirDepParamNames.map(function (paramName) { return variable(paramName); })))
	                .toStmt());
	            return createClassStmt({
	                name: DirectiveWrapperCompiler.dirWrapperClassName(this.dirMeta.type),
	                ctorParams: dirDepParamNames.map(function (paramName) { return new FnParam(paramName, DYNAMIC_TYPE); }),
	                builders: [{ fields: fields, ctorStmts: ctorStmts, methods: methods }, this]
	            });
	        };
	        return DirectiveWrapperBuilder;
	    }());
	    /**
	     * @param {?} builder
	     * @return {?}
	     */
	    function addNgDoCheckMethod(builder) {
	        var /** @type {?} */ changedVar = variable('changed');
	        var /** @type {?} */ stmts = [
	            changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(),
	            THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt(),
	        ];
	        var /** @type {?} */ lifecycleStmts = [];
	        if (builder.genChanges) {
	            var /** @type {?} */ onChangesStmts = [];
	            if (builder.ngOnChanges) {
	                onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	                    .callMethod('ngOnChanges', [THIS_EXPR.prop(CHANGES_FIELD_NAME)])
	                    .toStmt());
	            }
	            if (builder.compilerConfig.logBindingUpdate) {
	                onChangesStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfoForChanges))
	                    .callFn([VIEW_VAR.prop('renderer'), RENDER_EL_VAR, THIS_EXPR.prop(CHANGES_FIELD_NAME)])
	                    .toStmt());
	            }
	            onChangesStmts.push(RESET_CHANGES_STMT);
	            lifecycleStmts.push(new IfStmt(changedVar, onChangesStmts));
	        }
	        if (builder.ngOnInit) {
	            lifecycleStmts.push(new IfStmt(VIEW_VAR.prop('numberOfChecks').identical(new LiteralExpr(0)), [THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnInit', []).toStmt()]));
	        }
	        if (builder.ngDoCheck) {
	            lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngDoCheck', []).toStmt());
	        }
	        if (lifecycleStmts.length > 0) {
	            stmts.push(new IfStmt(not(THROW_ON_CHANGE_VAR), lifecycleStmts));
	        }
	        stmts.push(new ReturnStatement(changedVar));
	        builder.methods.push(new ClassMethod('ngDoCheck', [
	            new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	            new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	            new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	        ], stmts, BOOL_TYPE));
	    }
	    /**
	     * @param {?} input
	     * @param {?} builder
	     * @return {?}
	     */
	    function addCheckInputMethod(input, builder) {
	        var /** @type {?} */ field = createCheckBindingField(builder);
	        var /** @type {?} */ onChangeStatements = [
	            THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(true)).toStmt(),
	            THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt(),
	        ];
	        if (builder.genChanges) {
	            onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME)
	                .key(literal(input))
	                .set(importExpr(createIdentifier(Identifiers.SimpleChange))
	                .instantiate([field.expression, CURR_VALUE_VAR]))
	                .toStmt());
	        }
	        var /** @type {?} */ methodBody = createCheckBindingStmt({ currValExpr: CURR_VALUE_VAR, forceUpdate: FORCE_UPDATE_VAR, stmts: [] }, field.expression, THROW_ON_CHANGE_VAR, onChangeStatements);
	        builder.methods.push(new ClassMethod("check_" + input, [
	            new FnParam(CURR_VALUE_VAR.name, DYNAMIC_TYPE),
	            new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	            new FnParam(FORCE_UPDATE_VAR.name, BOOL_TYPE),
	        ], methodBody));
	    }
	    /**
	     * @param {?} hostProps
	     * @param {?} hostEvents
	     * @param {?} builder
	     * @return {?}
	     */
	    function addCheckHostMethod(hostProps, hostEvents, builder) {
	        var /** @type {?} */ stmts = [];
	        var /** @type {?} */ methodParams = [
	            new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	            new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	            new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	            new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	        ];
	        hostProps.forEach(function (hostProp, hostPropIdx) {
	            var /** @type {?} */ field = createCheckBindingField(builder);
	            var /** @type {?} */ evalResult = convertPropertyBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId);
	            if (!evalResult) {
	                return;
	            }
	            var /** @type {?} */ securityContextExpr;
	            if (hostProp.needsRuntimeSecurityContext) {
	                securityContextExpr = variable("secCtx_" + methodParams.length);
	                methodParams.push(new FnParam(securityContextExpr.name, importType(createIdentifier(Identifiers.SecurityContext))));
	            }
	            var /** @type {?} */ checkBindingStmts;
	            if (hostProp.isAnimation) {
	                var _a = triggerAnimation(VIEW_VAR, COMPONENT_VIEW_VAR, hostProp, hostEvents, THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME)
	                    .or(importExpr(createIdentifier(Identifiers.noop))), RENDER_EL_VAR, evalResult.currValExpr, field.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts;
	                checkBindingStmts = updateStmts;
	                (_b = builder.detachStmts).push.apply(_b, detachStmts);
	            }
	            else {
	                checkBindingStmts = writeToRenderer(VIEW_VAR, hostProp, RENDER_EL_VAR, evalResult.currValExpr, builder.compilerConfig.logBindingUpdate, securityContextExpr);
	            }
	            stmts.push.apply(stmts, createCheckBindingStmt(evalResult, field.expression, THROW_ON_CHANGE_VAR, checkBindingStmts));
	            var _b;
	        });
	        builder.methods.push(new ClassMethod('checkHost', methodParams, stmts));
	    }
	    /**
	     * @param {?} hostListeners
	     * @param {?} builder
	     * @return {?}
	     */
	    function addHandleEventMethod(hostListeners, builder) {
	        var /** @type {?} */ resultVar = variable("result");
	        var /** @type {?} */ actionStmts = [resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE)];
	        hostListeners.forEach(function (hostListener, eventIdx) {
	            var /** @type {?} */ evalResult = convertActionBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostListener.handler, "sub_" + eventIdx);
	            var /** @type {?} */ trueStmts = evalResult.stmts;
	            if (evalResult.preventDefault) {
	                trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
	            }
	            // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
	            actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)), trueStmts));
	        });
	        actionStmts.push(new ReturnStatement(resultVar));
	        builder.methods.push(new ClassMethod('handleEvent', [
	            new FnParam(EVENT_NAME_VAR.name, STRING_TYPE),
	            new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)
	        ], actionStmts, BOOL_TYPE));
	    }
	    /**
	     * @param {?} dirMeta
	     * @param {?} builder
	     * @return {?}
	     */
	    function addSubscribeMethod(dirMeta, builder) {
	        var /** @type {?} */ methodParams = [
	            new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	            new FnParam(EVENT_HANDLER_FIELD_NAME, DYNAMIC_TYPE)
	        ];
	        var /** @type {?} */ stmts = [
	            THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt()
	        ];
	        Object.keys(dirMeta.outputs).forEach(function (emitterPropName, emitterIdx) {
	            var /** @type {?} */ eventName = dirMeta.outputs[emitterPropName];
	            var /** @type {?} */ paramName = "emit" + emitterIdx;
	            methodParams.push(new FnParam(paramName, BOOL_TYPE));
	            var /** @type {?} */ subscriptionFieldName = "subscription" + emitterIdx;
	            builder.fields.push(new ClassField(subscriptionFieldName, DYNAMIC_TYPE));
	            stmts.push(new IfStmt(variable(paramName), [
	                THIS_EXPR.prop(subscriptionFieldName)
	                    .set(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	                    .prop(emitterPropName)
	                    .callMethod(BuiltinMethod.SubscribeObservable, [variable(EVENT_HANDLER_FIELD_NAME)
	                        .callMethod(BuiltinMethod.Bind, [VIEW_VAR, literal(eventName)])]))
	                    .toStmt()
	            ]));
	            builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName)
	                .and(THIS_EXPR.prop(subscriptionFieldName).callMethod('unsubscribe', []))
	                .toStmt());
	        });
	        builder.methods.push(new ClassMethod('subscribe', methodParams, stmts));
	    }
	    var ParseResult = (function () {
	        /**
	         * @param {?} hostProps
	         * @param {?} hostListeners
	         * @param {?} errors
	         */
	        function ParseResult(hostProps, hostListeners, errors) {
	            this.hostProps = hostProps;
	            this.hostListeners = hostListeners;
	            this.errors = errors;
	        }
	        return ParseResult;
	    }());
	    /**
	     * @param {?} dirMeta
	     * @param {?} exprParser
	     * @param {?} schemaRegistry
	     * @return {?}
	     */
	    function parseHostBindings(dirMeta, exprParser, schemaRegistry) {
	        var /** @type {?} */ errors = [];
	        var /** @type {?} */ parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);
	        var /** @type {?} */ moduleUrl = identifierModuleUrl(dirMeta.type);
	        var /** @type {?} */ sourceFileName = moduleUrl ?
	            "in Directive " + identifierName(dirMeta.type) + " in " + moduleUrl :
	            "in Directive " + identifierName(dirMeta.type);
	        var /** @type {?} */ sourceFile = new ParseSourceFile('', sourceFileName);
	        var /** @type {?} */ sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
	        var /** @type {?} */ parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(), sourceSpan);
	        var /** @type {?} */ parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta.toSummary(), sourceSpan);
	        return new ParseResult(parsedHostProps, parsedHostListeners, errors);
	    }
	    /**
	     * @param {?} parseErrors
	     * @param {?} console
	     * @return {?}
	     */
	    function reportParseErrors(parseErrors, console) {
	        var /** @type {?} */ warnings = parseErrors.filter(function (error) { return error.level === ParseErrorLevel.WARNING; });
	        var /** @type {?} */ errors = parseErrors.filter(function (error) { return error.level === ParseErrorLevel.FATAL; });
	        if (warnings.length > 0) {
	            this._console.warn("Directive parse warnings:\n" + warnings.join('\n'));
	        }
	        if (errors.length > 0) {
	            throw new Error("Directive parse errors:\n" + errors.join('\n'));
	        }
	    }
	    var DirectiveWrapperExpressions = (function () {
	        function DirectiveWrapperExpressions() {
	        }
	        /**
	         * @param {?} dir
	         * @param {?} depsExpr
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.create = function (dir, depsExpr) {
	            return importExpr(dir).instantiate(depsExpr, importType(dir));
	        };
	        /**
	         * @param {?} dirWrapper
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.context = function (dirWrapper) {
	            return dirWrapper.prop(CONTEXT_FIELD_NAME);
	        };
	        /**
	         * @param {?} dirWrapper
	         * @param {?} view
	         * @param {?} renderElement
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.ngDoCheck = function (dirWrapper, view, renderElement, throwOnChange) {
	            return dirWrapper.callMethod('ngDoCheck', [view, renderElement, throwOnChange]);
	        };
	        /**
	         * @param {?} hostProps
	         * @param {?} dirWrapper
	         * @param {?} view
	         * @param {?} componentView
	         * @param {?} renderElement
	         * @param {?} throwOnChange
	         * @param {?} runtimeSecurityContexts
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.checkHost = function (hostProps, dirWrapper, view, componentView, renderElement, throwOnChange, runtimeSecurityContexts) {
	            if (hostProps.length) {
	                return [dirWrapper
	                        .callMethod('checkHost', [view, componentView, renderElement, throwOnChange].concat(runtimeSecurityContexts))
	                        .toStmt()];
	            }
	            else {
	                return [];
	            }
	        };
	        /**
	         * @param {?} hostProps
	         * @param {?} dirWrapper
	         * @param {?} view
	         * @param {?} componentView
	         * @param {?} renderEl
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.ngOnDetach = function (hostProps, dirWrapper, view, componentView, renderEl) {
	            if (hostProps.some(function (prop) { return prop.isAnimation; })) {
	                return [dirWrapper
	                        .callMethod('ngOnDetach', [
	                        view,
	                        componentView,
	                        renderEl,
	                    ])
	                        .toStmt()];
	            }
	            else {
	                return [];
	            }
	        };
	        /**
	         * @param {?} dir
	         * @param {?} dirWrapper
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.ngOnDestroy = function (dir, dirWrapper) {
	            if (dir.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 ||
	                Object.keys(dir.outputs).length > 0) {
	                return [dirWrapper.callMethod('ngOnDestroy', []).toStmt()];
	            }
	            else {
	                return [];
	            }
	        };
	        /**
	         * @param {?} dirMeta
	         * @param {?} hostProps
	         * @param {?} usedEvents
	         * @param {?} dirWrapper
	         * @param {?} view
	         * @param {?} eventListener
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.subscribe = function (dirMeta, hostProps, usedEvents, dirWrapper, view, eventListener) {
	            var /** @type {?} */ needsSubscribe = false;
	            var /** @type {?} */ eventFlags = [];
	            Object.keys(dirMeta.outputs).forEach(function (propName) {
	                var /** @type {?} */ eventName = dirMeta.outputs[propName];
	                var /** @type {?} */ eventUsed = usedEvents.indexOf(eventName) > -1;
	                needsSubscribe = needsSubscribe || eventUsed;
	                eventFlags.push(literal(eventUsed));
	            });
	            hostProps.forEach(function (hostProp) {
	                if (hostProp.isAnimation && usedEvents.length > 0) {
	                    needsSubscribe = true;
	                }
	            });
	            if (needsSubscribe) {
	                return [
	                    dirWrapper.callMethod('subscribe', [view, eventListener].concat(eventFlags)).toStmt()
	                ];
	            }
	            else {
	                return [];
	            }
	        };
	        /**
	         * @param {?} hostEvents
	         * @param {?} dirWrapper
	         * @param {?} eventName
	         * @param {?} event
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.handleEvent = function (hostEvents, dirWrapper, eventName, event) {
	            return dirWrapper.callMethod('handleEvent', [eventName, event]);
	        };
	        return DirectiveWrapperExpressions;
	    }());

	    /**
	     * @param {?} hook
	     * @param {?} token
	     * @return {?}
	     */
	    function hasLifecycleHook(hook, token) {
	        return reflector.hasLifecycleHook(token, getHookName(hook));
	    }
	    /**
	     * @param {?} hook
	     * @return {?}
	     */
	    function getHookName(hook) {
	        switch (hook) {
	            case LifecycleHooks.OnInit:
	                return 'ngOnInit';
	            case LifecycleHooks.OnDestroy:
	                return 'ngOnDestroy';
	            case LifecycleHooks.DoCheck:
	                return 'ngDoCheck';
	            case LifecycleHooks.OnChanges:
	                return 'ngOnChanges';
	            case LifecycleHooks.AfterContentInit:
	                return 'ngAfterContentInit';
	            case LifecycleHooks.AfterContentChecked:
	                return 'ngAfterContentChecked';
	            case LifecycleHooks.AfterViewInit:
	                return 'ngAfterViewInit';
	            case LifecycleHooks.AfterViewChecked:
	                return 'ngAfterViewChecked';
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$10 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$10 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function _isNgModuleMetadata(obj) {
	        return obj instanceof _angular_core.NgModule;
	    }
	    /**
	     * Resolves types to {\@link NgModule}.
	     */
	    var NgModuleResolver = (function () {
	        /**
	         * @param {?=} _reflector
	         */
	        function NgModuleResolver(_reflector) {
	            if (_reflector === void 0) { _reflector = reflector; }
	            this._reflector = _reflector;
	        }
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        NgModuleResolver.prototype.isNgModule = function (type) { return this._reflector.annotations(type).some(_isNgModuleMetadata); };
	        /**
	         * @param {?} type
	         * @param {?=} throwIfNotFound
	         * @return {?}
	         */
	        NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {
	            if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	            var /** @type {?} */ ngModuleMeta = ListWrapper.findLast(this._reflector.annotations(type), _isNgModuleMetadata);
	            if (ngModuleMeta) {
	                return ngModuleMeta;
	            }
	            else {
	                if (throwIfNotFound) {
	                    throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
	                }
	                return null;
	            }
	        };
	        NgModuleResolver = __decorate$10([
	            CompilerInjectable(), 
	            __metadata$10('design:paramtypes', [ReflectorReader])
	        ], NgModuleResolver);
	        return NgModuleResolver;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$11 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$11 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function _isPipeMetadata(type) {
	        return type instanceof _angular_core.Pipe;
	    }
	    /**
	     * Resolve a `Type` for {\@link Pipe}.
	     *
	     * This interface can be overridden by the application developer to create custom behavior.
	     *
	     * See {\@link Compiler}
	     */
	    var PipeResolver = (function () {
	        /**
	         * @param {?=} _reflector
	         */
	        function PipeResolver(_reflector) {
	            if (_reflector === void 0) { _reflector = reflector; }
	            this._reflector = _reflector;
	        }
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        PipeResolver.prototype.isPipe = function (type) {
	            var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	            return typeMetadata && typeMetadata.some(_isPipeMetadata);
	        };
	        /**
	         * Return {\@link Pipe} for a given `Type`.
	         * @param {?} type
	         * @param {?=} throwIfNotFound
	         * @return {?}
	         */
	        PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
	            if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	            var /** @type {?} */ metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	            if (metas) {
	                var /** @type {?} */ annotation = ListWrapper.findLast(metas, _isPipeMetadata);
	                if (annotation) {
	                    return annotation;
	                }
	            }
	            if (throwIfNotFound) {
	                throw new Error("No Pipe decorator found on " + stringify(type));
	            }
	            return null;
	        };
	        PipeResolver = __decorate$11([
	            CompilerInjectable(), 
	            __metadata$11('design:paramtypes', [ReflectorReader])
	        ], PipeResolver);
	        return PipeResolver;
	    }());

	    var __decorate$12 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$12 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var SummaryResolver = (function () {
	        function SummaryResolver() {
	        }
	        /**
	         * @param {?} reference
	         * @return {?}
	         */
	        SummaryResolver.prototype.resolveSummary = function (reference) { return null; };
	        ;
	        /**
	         * @param {?} filePath
	         * @return {?}
	         */
	        SummaryResolver.prototype.getSymbolsOf = function (filePath) { return []; };
	        SummaryResolver = __decorate$12([
	            CompilerInjectable(), 
	            __metadata$12('design:paramtypes', [])
	        ], SummaryResolver);
	        return SummaryResolver;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$21 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var __decorate$9 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$9 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var /** @type {?} */ ERROR_COLLECTOR_TOKEN = new _angular_core.OpaqueToken('ErrorCollector');
	    var CompileMetadataResolver = (function () {
	        /**
	         * @param {?} _ngModuleResolver
	         * @param {?} _directiveResolver
	         * @param {?} _pipeResolver
	         * @param {?} _summaryResolver
	         * @param {?} _schemaRegistry
	         * @param {?} _directiveNormalizer
	         * @param {?=} _reflector
	         * @param {?=} _errorCollector
	         */
	        function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _reflector, _errorCollector) {
	            if (_reflector === void 0) { _reflector = reflector; }
	            this._ngModuleResolver = _ngModuleResolver;
	            this._directiveResolver = _directiveResolver;
	            this._pipeResolver = _pipeResolver;
	            this._summaryResolver = _summaryResolver;
	            this._schemaRegistry = _schemaRegistry;
	            this._directiveNormalizer = _directiveNormalizer;
	            this._reflector = _reflector;
	            this._errorCollector = _errorCollector;
	            this._directiveCache = new Map();
	            this._summaryCache = new Map();
	            this._pipeCache = new Map();
	            this._ngModuleCache = new Map();
	            this._ngModuleOfTypes = new Map();
	        }
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.clearCacheFor = function (type) {
	            var /** @type {?} */ dirMeta = this._directiveCache.get(type);
	            this._directiveCache.delete(type);
	            this._summaryCache.delete(type);
	            this._pipeCache.delete(type);
	            this._ngModuleOfTypes.delete(type);
	            // Clear all of the NgModule as they contain transitive information!
	            this._ngModuleCache.clear();
	            if (dirMeta) {
	                this._directiveNormalizer.clearCacheFor(dirMeta);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.clearCache = function () {
	            this._directiveCache.clear();
	            this._summaryCache.clear();
	            this._pipeCache.clear();
	            this._ngModuleCache.clear();
	            this._ngModuleOfTypes.clear();
	            this._directiveNormalizer.clearCache();
	        };
	        /**
	         * @param {?} entry
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getAnimationEntryMetadata = function (entry) {
	            var _this = this;
	            var /** @type {?} */ defs = entry.definitions.map(function (def) { return _this._getAnimationStateMetadata(def); });
	            return new CompileAnimationEntryMetadata(entry.name, defs);
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getAnimationStateMetadata = function (value) {
	            if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
	                var /** @type {?} */ styles = this._getAnimationStyleMetadata(value.styles);
	                return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
	            }
	            if (value instanceof _angular_core.AnimationStateTransitionMetadata) {
	                return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this._getAnimationMetadata(value.steps));
	            }
	            return null;
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getAnimationStyleMetadata = function (value) {
	            return new CompileAnimationStyleMetadata(value.offset, value.styles);
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getAnimationMetadata = function (value) {
	            var _this = this;
	            if (value instanceof _angular_core.AnimationStyleMetadata) {
	                return this._getAnimationStyleMetadata(value);
	            }
	            if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) {
	                return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function (entry) { return _this._getAnimationStyleMetadata(entry); }));
	            }
	            if (value instanceof _angular_core.AnimationAnimateMetadata) {
	                var /** @type {?} */ animateData = (this
	                    ._getAnimationMetadata(value.styles));
	                return new CompileAnimationAnimateMetadata(value.timings, animateData);
	            }
	            if (value instanceof _angular_core.AnimationWithStepsMetadata) {
	                var /** @type {?} */ steps = value.steps.map(function (step) { return _this._getAnimationMetadata(step); });
	                if (value instanceof _angular_core.AnimationGroupMetadata) {
	                    return new CompileAnimationGroupMetadata(steps);
	                }
	                return new CompileAnimationSequenceMetadata(steps);
	            }
	            return null;
	        };
	        /**
	         * @param {?} type
	         * @param {?} kind
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._loadSummary = function (type, kind) {
	            var /** @type {?} */ typeSummary = this._summaryCache.get(type);
	            if (!typeSummary) {
	                var /** @type {?} */ summary = this._summaryResolver.resolveSummary(type);
	                typeSummary = summary ? summary.type : null;
	                this._summaryCache.set(type, typeSummary);
	            }
	            return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;
	        };
	        /**
	         * @param {?} directiveType
	         * @param {?} isSync
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._loadDirectiveMetadata = function (directiveType, isSync) {
	            var _this = this;
	            if (this._directiveCache.has(directiveType)) {
	                return;
	            }
	            directiveType = _angular_core.resolveForwardRef(directiveType);
	            var _a = this.getNonNormalizedDirectiveMetadata(directiveType), annotation = _a.annotation, metadata = _a.metadata;
	            var /** @type {?} */ createDirectiveMetadata = function (templateMetadata) {
	                var /** @type {?} */ normalizedDirMeta = new CompileDirectiveMetadata({
	                    type: metadata.type,
	                    isComponent: metadata.isComponent,
	                    selector: metadata.selector,
	                    exportAs: metadata.exportAs,
	                    changeDetection: metadata.changeDetection,
	                    inputs: metadata.inputs,
	                    outputs: metadata.outputs,
	                    hostListeners: metadata.hostListeners,
	                    hostProperties: metadata.hostProperties,
	                    hostAttributes: metadata.hostAttributes,
	                    providers: metadata.providers,
	                    viewProviders: metadata.viewProviders,
	                    queries: metadata.queries,
	                    viewQueries: metadata.viewQueries,
	                    entryComponents: metadata.entryComponents,
	                    template: templateMetadata
	                });
	                _this._directiveCache.set(directiveType, normalizedDirMeta);
	                _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());
	                return normalizedDirMeta;
	            };
	            if (metadata.isComponent) {
	                var /** @type {?} */ templateMeta = this._directiveNormalizer.normalizeTemplate({
	                    componentType: directiveType,
	                    moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation),
	                    encapsulation: metadata.template.encapsulation,
	                    template: metadata.template.template,
	                    templateUrl: metadata.template.templateUrl,
	                    styles: metadata.template.styles,
	                    styleUrls: metadata.template.styleUrls,
	                    animations: metadata.template.animations,
	                    interpolation: metadata.template.interpolation
	                });
	                if (templateMeta.syncResult) {
	                    createDirectiveMetadata(templateMeta.syncResult);
	                    return null;
	                }
	                else {
	                    if (isSync) {
	                        this._reportError(new ComponentStillLoadingError(directiveType), directiveType);
	                        return null;
	                    }
	                    return templateMeta.asyncResult.then(createDirectiveMetadata);
	                }
	            }
	            else {
	                // directive
	                createDirectiveMetadata(null);
	                return null;
	            }
	        };
	        /**
	         * @param {?} directiveType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {
	            var _this = this;
	            directiveType = _angular_core.resolveForwardRef(directiveType);
	            var /** @type {?} */ dirMeta = this._directiveResolver.resolve(directiveType);
	            if (!dirMeta) {
	                return null;
	            }
	            var /** @type {?} */ nonNormalizedTemplateMetadata;
	            if (dirMeta instanceof _angular_core.Component) {
	                // component
	                assertArrayOfStrings('styles', dirMeta.styles);
	                assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
	                assertInterpolationSymbols('interpolation', dirMeta.interpolation);
	                var /** @type {?} */ animations = dirMeta.animations ?
	                    dirMeta.animations.map(function (e) { return _this.getAnimationEntryMetadata(e); }) :
	                    null;
	                nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
	                    encapsulation: dirMeta.encapsulation,
	                    template: dirMeta.template,
	                    templateUrl: dirMeta.templateUrl,
	                    styles: dirMeta.styles,
	                    styleUrls: dirMeta.styleUrls,
	                    animations: animations,
	                    interpolation: dirMeta.interpolation
	                });
	            }
	            var /** @type {?} */ changeDetectionStrategy = null;
	            var /** @type {?} */ viewProviders = [];
	            var /** @type {?} */ entryComponentMetadata = [];
	            var /** @type {?} */ selector = dirMeta.selector;
	            if (dirMeta instanceof _angular_core.Component) {
	                // Component
	                changeDetectionStrategy = dirMeta.changeDetection;
	                if (dirMeta.viewProviders) {
	                    viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringifyType(directiveType) + "\"", [], directiveType);
	                }
	                if (dirMeta.entryComponents) {
	                    entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents)
	                        .map(function (type) { return _this._getIdentifierMetadata(type); })
	                        .concat(entryComponentMetadata);
	                }
	                if (!selector) {
	                    selector = this._schemaRegistry.getDefaultComponentElementName();
	                }
	            }
	            else {
	                // Directive
	                if (!selector) {
	                    this._reportError(new SyntaxError("Directive " + stringifyType(directiveType) + " has no selector, please add it!"), directiveType);
	                    selector = 'error';
	                }
	            }
	            var /** @type {?} */ providers = [];
	            if (isPresent(dirMeta.providers)) {
	                providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringifyType(directiveType) + "\"", [], directiveType);
	            }
	            var /** @type {?} */ queries = [];
	            var /** @type {?} */ viewQueries = [];
	            if (isPresent(dirMeta.queries)) {
	                queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
	                viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
	            }
	            var /** @type {?} */ metadata = CompileDirectiveMetadata.create({
	                selector: selector,
	                exportAs: dirMeta.exportAs,
	                isComponent: !!nonNormalizedTemplateMetadata,
	                type: this._getTypeMetadata(directiveType),
	                template: nonNormalizedTemplateMetadata,
	                changeDetection: changeDetectionStrategy,
	                inputs: dirMeta.inputs,
	                outputs: dirMeta.outputs,
	                host: dirMeta.host,
	                providers: providers,
	                viewProviders: viewProviders,
	                queries: queries,
	                viewQueries: viewQueries,
	                entryComponents: entryComponentMetadata
	            });
	            return { metadata: metadata, annotation: dirMeta };
	        };
	        /**
	         * Gets the metadata for the given directive.
	         * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
	         * @param {?} directiveType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
	            var /** @type {?} */ dirMeta = this._directiveCache.get(directiveType);
	            if (!dirMeta) {
	                this._reportError(new SyntaxError("Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive " + stringifyType(directiveType) + "."), directiveType);
	            }
	            return dirMeta;
	        };
	        /**
	         * @param {?} dirType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {
	            var /** @type {?} */ dirSummary = (this._loadSummary(dirType, CompileSummaryKind.Directive));
	            if (!dirSummary) {
	                this._reportError(new SyntaxError("Illegal state: Could not load the summary for directive " + stringifyType(dirType) + "."), dirType);
	            }
	            return dirSummary;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.isDirective = function (type) { return this._directiveResolver.isDirective(type); };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.isPipe = function (type) { return this._pipeResolver.isPipe(type); };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getNgModuleSummary = function (moduleType) {
	            var /** @type {?} */ moduleSummary = (this._loadSummary(moduleType, CompileSummaryKind.NgModule));
	            if (!moduleSummary) {
	                var /** @type {?} */ moduleMeta = this.getNgModuleMetadata(moduleType, false);
	                moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;
	                if (moduleSummary) {
	                    this._summaryCache.set(moduleType, moduleSummary);
	                }
	            }
	            return moduleSummary;
	        };
	        /**
	         * Loads the declared directives and pipes of an NgModule.
	         * @param {?} moduleType
	         * @param {?} isSync
	         * @param {?=} throwIfNotFound
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function (moduleType, isSync, throwIfNotFound) {
	            var _this = this;
	            if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	            var /** @type {?} */ ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);
	            var /** @type {?} */ loading = [];
	            if (ngModule) {
	                ngModule.declaredDirectives.forEach(function (id) {
	                    var /** @type {?} */ promise = _this._loadDirectiveMetadata(id.reference, isSync);
	                    if (promise) {
	                        loading.push(promise);
	                    }
	                });
	                ngModule.declaredPipes.forEach(function (id) { return _this._loadPipeMetadata(id.reference); });
	            }
	            return Promise.all(loading);
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?=} throwIfNotFound
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound) {
	            var _this = this;
	            if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	            moduleType = _angular_core.resolveForwardRef(moduleType);
	            var /** @type {?} */ compileMeta = this._ngModuleCache.get(moduleType);
	            if (compileMeta) {
	                return compileMeta;
	            }
	            var /** @type {?} */ meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
	            if (!meta) {
	                return null;
	            }
	            var /** @type {?} */ declaredDirectives = [];
	            var /** @type {?} */ exportedNonModuleIdentifiers = [];
	            var /** @type {?} */ declaredPipes = [];
	            var /** @type {?} */ importedModules = [];
	            var /** @type {?} */ exportedModules = [];
	            var /** @type {?} */ providers = [];
	            var /** @type {?} */ entryComponents = [];
	            var /** @type {?} */ bootstrapComponents = [];
	            var /** @type {?} */ schemas = [];
	            if (meta.imports) {
	                flattenAndDedupeArray(meta.imports).forEach(function (importedType) {
	                    var /** @type {?} */ importedModuleType;
	                    if (isValidType(importedType)) {
	                        importedModuleType = importedType;
	                    }
	                    else if (importedType && importedType.ngModule) {
	                        var /** @type {?} */ moduleWithProviders = importedType;
	                        importedModuleType = moduleWithProviders.ngModule;
	                        if (moduleWithProviders.providers) {
	                            providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringifyType(importedModuleType) + "'", [], importedType));
	                        }
	                    }
	                    if (importedModuleType) {
	                        var /** @type {?} */ importedModuleSummary = _this.getNgModuleSummary(importedModuleType);
	                        if (!importedModuleSummary) {
	                            _this._reportError(new SyntaxError("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                            return;
	                        }
	                        importedModules.push(importedModuleSummary);
	                    }
	                    else {
	                        _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                        return;
	                    }
	                });
	            }
	            if (meta.exports) {
	                flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {
	                    if (!isValidType(exportedType)) {
	                        _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(exportedType) + "' exported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                        return;
	                    }
	                    var /** @type {?} */ exportedModuleSummary = _this.getNgModuleSummary(exportedType);
	                    if (exportedModuleSummary) {
	                        exportedModules.push(exportedModuleSummary);
	                    }
	                    else {
	                        exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));
	                    }
	                });
	            }
	            // Note: This will be modified later, so we rely on
	            // getting a new instance every time!
	            var /** @type {?} */ transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
	            if (meta.declarations) {
	                flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {
	                    if (!isValidType(declaredType)) {
	                        _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                        return;
	                    }
	                    var /** @type {?} */ declaredIdentifier = _this._getIdentifierMetadata(declaredType);
	                    if (_this._directiveResolver.isDirective(declaredType)) {
	                        transitiveModule.addDirective(declaredIdentifier);
	                        declaredDirectives.push(declaredIdentifier);
	                        _this._addTypeToModule(declaredType, moduleType);
	                    }
	                    else if (_this._pipeResolver.isPipe(declaredType)) {
	                        transitiveModule.addPipe(declaredIdentifier);
	                        transitiveModule.pipes.push(declaredIdentifier);
	                        declaredPipes.push(declaredIdentifier);
	                        _this._addTypeToModule(declaredType, moduleType);
	                    }
	                    else {
	                        _this._reportError(new SyntaxError("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                        return;
	                    }
	                });
	            }
	            var /** @type {?} */ exportedDirectives = [];
	            var /** @type {?} */ exportedPipes = [];
	            exportedNonModuleIdentifiers.forEach(function (exportedId) {
	                if (transitiveModule.directivesSet.has(exportedId.reference)) {
	                    exportedDirectives.push(exportedId);
	                    transitiveModule.addExportedDirective(exportedId);
	                }
	                else if (transitiveModule.pipesSet.has(exportedId.reference)) {
	                    exportedPipes.push(exportedId);
	                    transitiveModule.addExportedPipe(exportedId);
	                }
	                else {
	                    _this._reportError(new SyntaxError("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringifyType(exportedId.reference) + " from " + stringifyType(moduleType) + " as it was neither declared nor imported!"), moduleType);
	                }
	            });
	            // The providers of the module have to go last
	            // so that they overwrite any other provider we already added.
	            if (meta.providers) {
	                providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringifyType(moduleType) + "'", [], moduleType));
	            }
	            if (meta.entryComponents) {
	                entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents)
	                    .map(function (type) { return _this._getIdentifierMetadata(type); }));
	            }
	            if (meta.bootstrap) {
	                flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {
	                    if (!isValidType(type)) {
	                        _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(type) + "' used in the bootstrap property of module '" + stringifyType(moduleType) + "'"), moduleType);
	                        return;
	                    }
	                    bootstrapComponents.push(_this._getIdentifierMetadata(type));
	                });
	            }
	            entryComponents.push.apply(entryComponents, bootstrapComponents);
	            if (meta.schemas) {
	                schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));
	            }
	            compileMeta = new CompileNgModuleMetadata({
	                type: this._getTypeMetadata(moduleType),
	                providers: providers,
	                entryComponents: entryComponents,
	                bootstrapComponents: bootstrapComponents,
	                schemas: schemas,
	                declaredDirectives: declaredDirectives,
	                exportedDirectives: exportedDirectives,
	                declaredPipes: declaredPipes,
	                exportedPipes: exportedPipes,
	                importedModules: importedModules,
	                exportedModules: exportedModules,
	                transitiveModule: transitiveModule,
	                id: meta.id,
	            });
	            entryComponents.forEach(function (id) { return transitiveModule.addEntryComponent(id); });
	            providers.forEach(function (provider) { return transitiveModule.addProvider(provider, compileMeta.type); });
	            transitiveModule.addModule(compileMeta.type);
	            this._ngModuleCache.set(moduleType, compileMeta);
	            return compileMeta;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {
	            if (this._directiveResolver.isDirective(type)) {
	                return 'directive';
	            }
	            if (this._pipeResolver.isPipe(type)) {
	                return 'pipe';
	            }
	            if (this._ngModuleResolver.isNgModule(type)) {
	                return 'module';
	            }
	            if (((type)).provide) {
	                return 'provider';
	            }
	            return 'value';
	        };
	        /**
	         * @param {?} type
	         * @param {?} moduleType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {
	            var /** @type {?} */ oldModule = this._ngModuleOfTypes.get(type);
	            if (oldModule && oldModule !== moduleType) {
	                this._reportError(new SyntaxError(("Type " + stringifyType(type) + " is part of the declarations of 2 modules: " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + "! ") +
	                    ("Please consider moving " + stringifyType(type) + " to a higher module that imports " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ". ") +
	                    ("You can also create a new NgModule that exports and includes " + stringifyType(type) + " then import that NgModule in " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ".")), moduleType);
	            }
	            this._ngModuleOfTypes.set(type, moduleType);
	        };
	        /**
	         * @param {?} importedModules
	         * @param {?} exportedModules
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {
	            // collect `providers` / `entryComponents` from all imported and all exported modules
	            var /** @type {?} */ result = new TransitiveCompileNgModuleMetadata();
	            var /** @type {?} */ modulesByToken = new Map();
	            importedModules.concat(exportedModules).forEach(function (modSummary) {
	                modSummary.modules.forEach(function (mod) { return result.addModule(mod); });
	                modSummary.entryComponents.forEach(function (comp) { return result.addEntryComponent(comp); });
	                var /** @type {?} */ addedTokens = new Set();
	                modSummary.providers.forEach(function (entry) {
	                    var /** @type {?} */ tokenRef = tokenReference(entry.provider.token);
	                    var /** @type {?} */ prevModules = modulesByToken.get(tokenRef);
	                    if (!prevModules) {
	                        prevModules = new Set();
	                        modulesByToken.set(tokenRef, prevModules);
	                    }
	                    var /** @type {?} */ moduleRef = entry.module.reference;
	                    // Note: the providers of one module may still contain multiple providers
	                    // per token (e.g. for multi providers), and we need to preserve these.
	                    if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {
	                        prevModules.add(moduleRef);
	                        addedTokens.add(tokenRef);
	                        result.addProvider(entry.provider, entry.module);
	                    }
	                });
	            });
	            exportedModules.forEach(function (modSummary) {
	                modSummary.exportedDirectives.forEach(function (id) { return result.addExportedDirective(id); });
	                modSummary.exportedPipes.forEach(function (id) { return result.addExportedPipe(id); });
	            });
	            importedModules.forEach(function (modSummary) {
	                modSummary.exportedDirectives.forEach(function (id) { return result.addDirective(id); });
	                modSummary.exportedPipes.forEach(function (id) { return result.addPipe(id); });
	            });
	            return result;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getIdentifierMetadata = function (type) {
	            type = _angular_core.resolveForwardRef(type);
	            return { reference: type };
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.isInjectable = function (type) {
	            var /** @type {?} */ annotations = this._reflector.annotations(type);
	            // Note: We need an exact check here as @Component / @Directive / ... inherit
	            // from @CompilerInjectable!
	            return annotations.some(function (ann) { return ann.constructor === _angular_core.Injectable; });
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getInjectableSummary = function (type) {
	            return { summaryKind: CompileSummaryKind.Injectable, type: this._getTypeMetadata(type) };
	        };
	        /**
	         * @param {?} type
	         * @param {?=} dependencies
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getInjectableMetadata = function (type, dependencies) {
	            if (dependencies === void 0) { dependencies = null; }
	            var /** @type {?} */ typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);
	            if (typeSummary) {
	                return typeSummary.type;
	            }
	            return this._getTypeMetadata(type, dependencies);
	        };
	        /**
	         * @param {?} type
	         * @param {?=} dependencies
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getTypeMetadata = function (type, dependencies) {
	            if (dependencies === void 0) { dependencies = null; }
	            var /** @type {?} */ identifier = this._getIdentifierMetadata(type);
	            return {
	                reference: identifier.reference,
	                diDeps: this._getDependenciesMetadata(identifier.reference, dependencies),
	                lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(hook, identifier.reference); }),
	            };
	        };
	        /**
	         * @param {?} factory
	         * @param {?=} dependencies
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, dependencies) {
	            if (dependencies === void 0) { dependencies = null; }
	            factory = _angular_core.resolveForwardRef(factory);
	            return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };
	        };
	        /**
	         * Gets the metadata for the given pipe.
	         * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
	         * @param {?} pipeType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
	            var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);
	            if (!pipeMeta) {
	                this._reportError(new SyntaxError("Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe " + stringifyType(pipeType) + "."), pipeType);
	            }
	            return pipeMeta;
	        };
	        /**
	         * @param {?} pipeType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {
	            var /** @type {?} */ pipeSummary = (this._loadSummary(pipeType, CompileSummaryKind.Pipe));
	            if (!pipeSummary) {
	                this._reportError(new SyntaxError("Illegal state: Could not load the summary for pipe " + stringifyType(pipeType) + "."), pipeType);
	            }
	            return pipeSummary;
	        };
	        /**
	         * @param {?} pipeType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {
	            var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);
	            if (!pipeMeta) {
	                pipeMeta = this._loadPipeMetadata(pipeType);
	            }
	            return pipeMeta;
	        };
	        /**
	         * @param {?} pipeType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {
	            pipeType = _angular_core.resolveForwardRef(pipeType);
	            var /** @type {?} */ pipeAnnotation = this._pipeResolver.resolve(pipeType);
	            var /** @type {?} */ pipeMeta = new CompilePipeMetadata({
	                type: this._getTypeMetadata(pipeType),
	                name: pipeAnnotation.name,
	                pure: pipeAnnotation.pure
	            });
	            this._pipeCache.set(pipeType, pipeMeta);
	            this._summaryCache.set(pipeType, pipeMeta.toSummary());
	            return pipeMeta;
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} dependencies
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies) {
	            var _this = this;
	            var /** @type {?} */ hasUnknownDeps = false;
	            var /** @type {?} */ params = dependencies || this._reflector.parameters(typeOrFunc) || [];
	            var /** @type {?} */ dependenciesMetadata = params.map(function (param) {
	                var /** @type {?} */ isAttribute = false;
	                var /** @type {?} */ isHost = false;
	                var /** @type {?} */ isSelf = false;
	                var /** @type {?} */ isSkipSelf = false;
	                var /** @type {?} */ isOptional = false;
	                var /** @type {?} */ token = null;
	                if (Array.isArray(param)) {
	                    param.forEach(function (paramEntry) {
	                        if (paramEntry instanceof _angular_core.Host) {
	                            isHost = true;
	                        }
	                        else if (paramEntry instanceof _angular_core.Self) {
	                            isSelf = true;
	                        }
	                        else if (paramEntry instanceof _angular_core.SkipSelf) {
	                            isSkipSelf = true;
	                        }
	                        else if (paramEntry instanceof _angular_core.Optional) {
	                            isOptional = true;
	                        }
	                        else if (paramEntry instanceof _angular_core.Attribute) {
	                            isAttribute = true;
	                            token = paramEntry.attributeName;
	                        }
	                        else if (paramEntry instanceof _angular_core.Inject) {
	                            token = paramEntry.token;
	                        }
	                        else if (isValidType(paramEntry) && isBlank(token)) {
	                            token = paramEntry;
	                        }
	                    });
	                }
	                else {
	                    token = param;
	                }
	                if (isBlank(token)) {
	                    hasUnknownDeps = true;
	                    return null;
	                }
	                return {
	                    isAttribute: isAttribute,
	                    isHost: isHost,
	                    isSelf: isSelf,
	                    isSkipSelf: isSkipSelf,
	                    isOptional: isOptional,
	                    token: _this._getTokenMetadata(token)
	                };
	            });
	            if (hasUnknownDeps) {
	                var /** @type {?} */ depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringifyType(dep.token) : '?'; }).join(', ');
	                this._reportError(new SyntaxError("Can't resolve all parameters for " + stringifyType(typeOrFunc) + ": (" + depsTokens + ")."), typeOrFunc);
	            }
	            return dependenciesMetadata;
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getTokenMetadata = function (token) {
	            token = _angular_core.resolveForwardRef(token);
	            var /** @type {?} */ compileToken;
	            if (typeof token === 'string') {
	                compileToken = { value: token };
	            }
	            else {
	                compileToken = { identifier: { reference: token } };
	            }
	            return compileToken;
	        };
	        /**
	         * @param {?} providers
	         * @param {?} targetEntryComponents
	         * @param {?=} debugInfo
	         * @param {?=} compileProviders
	         * @param {?=} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo, compileProviders, type) {
	            var _this = this;
	            if (compileProviders === void 0) { compileProviders = []; }
	            providers.forEach(function (provider, providerIdx) {
	                if (Array.isArray(provider)) {
	                    _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);
	                }
	                else {
	                    provider = _angular_core.resolveForwardRef(provider);
	                    var /** @type {?} */ providerMeta = void 0;
	                    if (provider && typeof provider == 'object' && provider.hasOwnProperty('provide')) {
	                        providerMeta = new ProviderMeta(provider.provide, provider);
	                    }
	                    else if (isValidType(provider)) {
	                        providerMeta = new ProviderMeta(provider, { useClass: provider });
	                    }
	                    else {
	                        var /** @type {?} */ providersInfo = ((providers.reduce(function (soFar, seenProvider, seenProviderIdx) {
	                            if (seenProviderIdx < providerIdx) {
	                                soFar.push("" + stringifyType(seenProvider));
	                            }
	                            else if (seenProviderIdx == providerIdx) {
	                                soFar.push("?" + stringifyType(seenProvider) + "?");
	                            }
	                            else if (seenProviderIdx == providerIdx + 1) {
	                                soFar.push('...');
	                            }
	                            return soFar;
	                        }, [])))
	                            .join(', ');
	                        _this._reportError(new SyntaxError("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]"), type);
	                    }
	                    if (providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {
	                        targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type));
	                    }
	                    else {
	                        compileProviders.push(_this.getProviderMetadata(providerMeta));
	                    }
	                }
	            });
	            return compileProviders;
	        };
	        /**
	         * @param {?} provider
	         * @param {?=} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider, type) {
	            var _this = this;
	            var /** @type {?} */ components = [];
	            var /** @type {?} */ collectedIdentifiers = [];
	            if (provider.useFactory || provider.useExisting || provider.useClass) {
	                this._reportError(new SyntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!"), type);
	                return [];
	            }
	            if (!provider.multi) {
	                this._reportError(new SyntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!"), type);
	                return [];
	            }
	            extractIdentifiers(provider.useValue, collectedIdentifiers);
	            collectedIdentifiers.forEach(function (identifier) {
	                if (_this._directiveResolver.isDirective(identifier.reference) ||
	                    _this._loadSummary(identifier.reference, CompileSummaryKind.Directive)) {
	                    components.push(identifier);
	                }
	            });
	            return components;
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
	            var /** @type {?} */ compileDeps;
	            var /** @type {?} */ compileTypeMetadata = null;
	            var /** @type {?} */ compileFactoryMetadata = null;
	            var /** @type {?} */ token = this._getTokenMetadata(provider.token);
	            if (provider.useClass) {
	                compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies);
	                compileDeps = compileTypeMetadata.diDeps;
	                if (provider.token === provider.useClass) {
	                    // use the compileTypeMetadata as it contains information about lifecycleHooks...
	                    token = { identifier: compileTypeMetadata };
	                }
	            }
	            else if (provider.useFactory) {
	                compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);
	                compileDeps = compileFactoryMetadata.diDeps;
	            }
	            return {
	                token: token,
	                useClass: compileTypeMetadata,
	                useValue: provider.useValue,
	                useFactory: compileFactoryMetadata,
	                useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,
	                deps: compileDeps,
	                multi: provider.multi
	            };
	        };
	        /**
	         * @param {?} queries
	         * @param {?} isViewQuery
	         * @param {?} directiveType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {
	            var _this = this;
	            var /** @type {?} */ res = [];
	            Object.keys(queries).forEach(function (propertyName) {
	                var /** @type {?} */ query = queries[propertyName];
	                if (query.isViewQuery === isViewQuery) {
	                    res.push(_this._getQueryMetadata(query, propertyName, directiveType));
	                }
	            });
	            return res;
	        };
	        /**
	         * @param {?} selector
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._queryVarBindings = function (selector) { return selector.split(/\s*,\s*/); };
	        /**
	         * @param {?} q
	         * @param {?} propertyName
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {
	            var _this = this;
	            var /** @type {?} */ selectors;
	            if (typeof q.selector === 'string') {
	                selectors =
	                    this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName); });
	            }
	            else {
	                if (!q.selector) {
	                    this._reportError(new SyntaxError("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringifyType(typeOrFunc) + "\" since the query selector wasn't defined."), typeOrFunc);
	                }
	                selectors = [this._getTokenMetadata(q.selector)];
	            }
	            return {
	                selectors: selectors,
	                first: q.first,
	                descendants: q.descendants, propertyName: propertyName,
	                read: q.read ? this._getTokenMetadata(q.read) : null
	            };
	        };
	        /**
	         * @param {?} error
	         * @param {?=} type
	         * @param {?=} otherType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._reportError = function (error, type, otherType) {
	            if (this._errorCollector) {
	                this._errorCollector(error, type);
	                if (otherType) {
	                    this._errorCollector(error, otherType);
	                }
	            }
	            else {
	                throw error;
	            }
	        };
	        /** @nocollapse */
	        CompileMetadataResolver.ctorParameters = function () { return [
	            { type: NgModuleResolver, },
	            { type: DirectiveResolver, },
	            { type: PipeResolver, },
	            { type: SummaryResolver, },
	            { type: ElementSchemaRegistry, },
	            { type: DirectiveNormalizer, },
	            { type: ReflectorReader, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ERROR_COLLECTOR_TOKEN,] },] },
	        ]; };
	        CompileMetadataResolver = __decorate$9([
	            CompilerInjectable(), 
	            __metadata$9('design:paramtypes', [NgModuleResolver, DirectiveResolver, PipeResolver, SummaryResolver, ElementSchemaRegistry, DirectiveNormalizer, ReflectorReader, Function])
	        ], CompileMetadataResolver);
	        return CompileMetadataResolver;
	    }());
	    /**
	     * @param {?} tree
	     * @param {?=} out
	     * @return {?}
	     */
	    function flattenArray(tree, out) {
	        if (out === void 0) { out = []; }
	        if (tree) {
	            for (var /** @type {?} */ i = 0; i < tree.length; i++) {
	                var /** @type {?} */ item = _angular_core.resolveForwardRef(tree[i]);
	                if (Array.isArray(item)) {
	                    flattenArray(item, out);
	                }
	                else {
	                    out.push(item);
	                }
	            }
	        }
	        return out;
	    }
	    /**
	     * @param {?} array
	     * @return {?}
	     */
	    function dedupeArray(array) {
	        if (array) {
	            return Array.from(new Set(array));
	        }
	        return [];
	    }
	    /**
	     * @param {?} tree
	     * @return {?}
	     */
	    function flattenAndDedupeArray(tree) {
	        return dedupeArray(flattenArray(tree));
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    function isValidType(value) {
	        return (value instanceof StaticSymbol) || (value instanceof _angular_core.Type);
	    }
	    /**
	     * @param {?} reflector
	     * @param {?} type
	     * @param {?} cmpMetadata
	     * @return {?}
	     */
	    function componentModuleUrl(reflector, type, cmpMetadata) {
	        if (type instanceof StaticSymbol) {
	            return type.filePath;
	        }
	        var /** @type {?} */ moduleId = cmpMetadata.moduleId;
	        if (typeof moduleId === 'string') {
	            var /** @type {?} */ scheme = getUrlScheme(moduleId);
	            return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
	        }
	        else if (moduleId !== null && moduleId !== void 0) {
	            throw new SyntaxError(("moduleId should be a string in \"" + stringifyType(type) + "\". See https://goo.gl/wIDDiL for more information.\n") +
	                "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
	        }
	        return reflector.importUri(type);
	    }
	    /**
	     * @param {?} value
	     * @param {?} targetIdentifiers
	     * @return {?}
	     */
	    function extractIdentifiers(value, targetIdentifiers) {
	        visitValue(value, new _CompileValueConverter(), targetIdentifiers);
	    }
	    var _CompileValueConverter = (function (_super) {
	        __extends$21(_CompileValueConverter, _super);
	        function _CompileValueConverter() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} value
	         * @param {?} targetIdentifiers
	         * @return {?}
	         */
	        _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {
	            targetIdentifiers.push({ reference: value });
	        };
	        return _CompileValueConverter;
	    }(ValueTransformer));
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function stringifyType(type) {
	        if (type instanceof StaticSymbol) {
	            return type.name + " in " + type.filePath;
	        }
	        else {
	            return stringify(type);
	        }
	    }

	    var /** @type {?} */ QUOTED_KEYS = '$quoted$';
	    /**
	     * @param {?} value
	     * @param {?=} type
	     * @return {?}
	     */
	    function convertValueToOutputAst(value, type) {
	        if (type === void 0) { type = null; }
	        return visitValue(value, new _ValueOutputAstTransformer(), type);
	    }
	    var _ValueOutputAstTransformer = (function () {
	        function _ValueOutputAstTransformer() {
	        }
	        /**
	         * @param {?} arr
	         * @param {?} type
	         * @return {?}
	         */
	        _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
	            var _this = this;
	            return literalArr(arr.map(function (value) { return visitValue(value, _this, null); }), type);
	        };
	        /**
	         * @param {?} map
	         * @param {?} type
	         * @return {?}
	         */
	        _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
	            var _this = this;
	            var /** @type {?} */ entries = [];
	            var /** @type {?} */ quotedSet = new Set(map && map[QUOTED_KEYS]);
	            Object.keys(map).forEach(function (key) {
	                entries.push(new LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));
	            });
	            return new LiteralMapExpr(entries, type);
	        };
	        /**
	         * @param {?} value
	         * @param {?} type
	         * @return {?}
	         */
	        _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) { return literal(value, type); };
	        /**
	         * @param {?} value
	         * @param {?} type
	         * @return {?}
	         */
	        _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
	            if (value instanceof Expression) {
	                return value;
	            }
	            else {
	                return importExpr({ reference: value });
	            }
	        };
	        return _ValueOutputAstTransformer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$13 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$13 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var ComponentFactoryDependency = (function () {
	        /**
	         * @param {?} comp
	         * @param {?} placeholder
	         */
	        function ComponentFactoryDependency(comp, placeholder) {
	            this.comp = comp;
	            this.placeholder = placeholder;
	        }
	        return ComponentFactoryDependency;
	    }());
	    var NgModuleCompileResult = (function () {
	        /**
	         * @param {?} statements
	         * @param {?} ngModuleFactoryVar
	         * @param {?} dependencies
	         */
	        function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
	            this.statements = statements;
	            this.ngModuleFactoryVar = ngModuleFactoryVar;
	            this.dependencies = dependencies;
	        }
	        return NgModuleCompileResult;
	    }());
	    var NgModuleCompiler = (function () {
	        function NgModuleCompiler() {
	        }
	        /**
	         * @param {?} ngModuleMeta
	         * @param {?} extraProviders
	         * @return {?}
	         */
	        NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {
	            var /** @type {?} */ moduleUrl = identifierModuleUrl(ngModuleMeta.type);
	            var /** @type {?} */ sourceFileName = isPresent(moduleUrl) ?
	                "in NgModule " + identifierName(ngModuleMeta.type) + " in " + moduleUrl :
	                "in NgModule " + identifierName(ngModuleMeta.type);
	            var /** @type {?} */ sourceFile = new ParseSourceFile('', sourceFileName);
	            var /** @type {?} */ sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
	            var /** @type {?} */ deps = [];
	            var /** @type {?} */ bootstrapComponentFactories = [];
	            var /** @type {?} */ entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {
	                var /** @type {?} */ id = { reference: null };
	                if (ngModuleMeta.bootstrapComponents.some(function (id) { return id.reference === entryComponent.reference; })) {
	                    bootstrapComponentFactories.push(id);
	                }
	                deps.push(new ComponentFactoryDependency(entryComponent, id));
	                return id;
	            });
	            var /** @type {?} */ builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
	            var /** @type {?} */ providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
	            providerParser.parse().forEach(function (provider) { return builder.addProvider(provider); });
	            var /** @type {?} */ injectorClass = builder.build();
	            var /** @type {?} */ ngModuleFactoryVar = identifierName(ngModuleMeta.type) + "NgFactory";
	            var /** @type {?} */ ngModuleFactoryStmt = variable(ngModuleFactoryVar)
	                .set(importExpr(createIdentifier(Identifiers.NgModuleFactory))
	                .instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(createIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const])))
	                .toDeclStmt(null, [StmtModifier.Final]);
	            var /** @type {?} */ stmts = [injectorClass, ngModuleFactoryStmt];
	            if (ngModuleMeta.id) {
	                var /** @type {?} */ registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn))
	                    .callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)])
	                    .toStmt();
	                stmts.push(registerFactoryStmt);
	            }
	            return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
	        };
	        NgModuleCompiler = __decorate$13([
	            CompilerInjectable(), 
	            __metadata$13('design:paramtypes', [])
	        ], NgModuleCompiler);
	        return NgModuleCompiler;
	    }());
	    var _InjectorBuilder = (function () {
	        /**
	         * @param {?} _ngModuleMeta
	         * @param {?} _entryComponentFactories
	         * @param {?} _bootstrapComponentFactories
	         * @param {?} _sourceSpan
	         */
	        function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
	            this._ngModuleMeta = _ngModuleMeta;
	            this._entryComponentFactories = _entryComponentFactories;
	            this._bootstrapComponentFactories = _bootstrapComponentFactories;
	            this._sourceSpan = _sourceSpan;
	            this.fields = [];
	            this.getters = [];
	            this.methods = [];
	            this.ctorStmts = [];
	            this._tokens = [];
	            this._instances = new Map();
	            this._createStmts = [];
	            this._destroyStmts = [];
	        }
	        /**
	         * @param {?} resolvedProvider
	         * @return {?}
	         */
	        _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
	            var _this = this;
	            var /** @type {?} */ providerValueExpressions = resolvedProvider.providers.map(function (provider) { return _this._getProviderValue(provider); });
	            var /** @type {?} */ propName = "_" + tokenName(resolvedProvider.token) + "_" + this._instances.size;
	            var /** @type {?} */ instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
	            if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	                this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
	            }
	            this._tokens.push(resolvedProvider.token);
	            this._instances.set(tokenReference(resolvedProvider.token), instance);
	        };
	        /**
	         * @return {?}
	         */
	        _InjectorBuilder.prototype.build = function () {
	            var _this = this;
	            var /** @type {?} */ getMethodStmts = this._tokens.map(function (token) {
	                var /** @type {?} */ providerExpr = _this._instances.get(tokenReference(token));
	                return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
	            });
	            var /** @type {?} */ methods = [
	                new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)),
	                new ClassMethod('getInternal', [
	                    new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE),
	                    new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)
	                ], getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]), DYNAMIC_TYPE),
	                new ClassMethod('destroyInternal', [], this._destroyStmts),
	            ];
	            var /** @type {?} */ parentArgs = [
	                variable(InjectorProps.parent.name),
	                literalArr(this._entryComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); })),
	                literalArr(this._bootstrapComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); }))
	            ];
	            var /** @type {?} */ injClassName = identifierName(this._ngModuleMeta.type) + "Injector";
	            return createClassStmt({
	                name: injClassName,
	                ctorParams: [new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector)))],
	                parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]),
	                parentArgs: parentArgs,
	                builders: [{ methods: methods }, this]
	            });
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        _InjectorBuilder.prototype._getProviderValue = function (provider) {
	            var _this = this;
	            var /** @type {?} */ result;
	            if (isPresent(provider.useExisting)) {
	                result = this._getDependency({ token: provider.useExisting });
	            }
	            else if (isPresent(provider.useFactory)) {
	                var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	                result = importExpr(provider.useFactory).callFn(depsExpr);
	            }
	            else if (isPresent(provider.useClass)) {
	                var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	                result =
	                    importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
	            }
	            else {
	                result = convertValueToOutputAst(provider.useValue);
	            }
	            return result;
	        };
	        /**
	         * @param {?} propName
	         * @param {?} provider
	         * @param {?} providerValueExpressions
	         * @param {?} isMulti
	         * @param {?} isEager
	         * @return {?}
	         */
	        _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {
	            var /** @type {?} */ resolvedProviderValueExpr;
	            var /** @type {?} */ type;
	            if (isMulti) {
	                resolvedProviderValueExpr = literalArr(providerValueExpressions);
	                type = new ArrayType(DYNAMIC_TYPE);
	            }
	            else {
	                resolvedProviderValueExpr = providerValueExpressions[0];
	                type = providerValueExpressions[0].type;
	            }
	            if (!type) {
	                type = DYNAMIC_TYPE;
	            }
	            if (isEager) {
	                this.fields.push(new ClassField(propName, type));
	                this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	            }
	            else {
	                var /** @type {?} */ internalField = "_" + propName;
	                this.fields.push(new ClassField(internalField, type));
	                // Note: Equals is important for JS so that it also checks the undefined case!
	                var /** @type {?} */ getterStmts = [
	                    new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]),
	                    new ReturnStatement(THIS_EXPR.prop(internalField))
	                ];
	                this.getters.push(new ClassGetter(propName, getterStmts, type));
	            }
	            return THIS_EXPR.prop(propName);
	        };
	        /**
	         * @param {?} dep
	         * @return {?}
	         */
	        _InjectorBuilder.prototype._getDependency = function (dep) {
	            var /** @type {?} */ result = null;
	            if (dep.isValue) {
	                result = literal(dep.value);
	            }
	            if (!dep.isSkipSelf) {
	                if (dep.token &&
	                    (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||
	                        tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver))) {
	                    result = THIS_EXPR;
	                }
	                if (!result) {
	                    result = this._instances.get(tokenReference(dep.token));
	                }
	            }
	            if (!result) {
	                var /** @type {?} */ args = [createDiTokenExpression(dep.token)];
	                if (dep.isOptional) {
	                    args.push(NULL_EXPR);
	                }
	                result = InjectorProps.parent.callMethod('get', args);
	            }
	            return result;
	        };
	        return _InjectorBuilder;
	    }());
	    var InjectorProps = (function () {
	        function InjectorProps() {
	        }
	        InjectorProps.parent = THIS_EXPR.prop('parent');
	        return InjectorProps;
	    }());
	    var InjectMethodVars = (function () {
	        function InjectMethodVars() {
	        }
	        InjectMethodVars.token = variable('token');
	        InjectMethodVars.notFoundResult = variable('notFoundResult');
	        return InjectMethodVars;
	    }());

	    var /** @type {?} */ _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
	    var /** @type {?} */ _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
	    var /** @type {?} */ CATCH_ERROR_VAR$1 = variable('error');
	    var /** @type {?} */ CATCH_STACK_VAR$1 = variable('stack');
	    var _EmittedLine = (function () {
	        /**
	         * @param {?} indent
	         */
	        function _EmittedLine(indent) {
	            this.indent = indent;
	            this.parts = [];
	        }
	        return _EmittedLine;
	    }());
	    var EmitterVisitorContext = (function () {
	        /**
	         * @param {?} _exportedVars
	         * @param {?} _indent
	         */
	        function EmitterVisitorContext(_exportedVars, _indent) {
	            this._exportedVars = _exportedVars;
	            this._indent = _indent;
	            this._classes = [];
	            this._lines = [new _EmittedLine(_indent)];
	        }
	        /**
	         * @param {?} exportedVars
	         * @return {?}
	         */
	        EmitterVisitorContext.createRoot = function (exportedVars) {
	            return new EmitterVisitorContext(exportedVars, 0);
	        };
	        Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._lines[this._lines.length - 1]; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} varName
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.isExportedVar = function (varName) { return this._exportedVars.indexOf(varName) !== -1; };
	        /**
	         * @param {?=} lastPart
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.println = function (lastPart) {
	            if (lastPart === void 0) { lastPart = ''; }
	            this.print(lastPart, true);
	        };
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.lineIsEmpty = function () { return this._currentLine.parts.length === 0; };
	        /**
	         * @param {?} part
	         * @param {?=} newLine
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.print = function (part, newLine) {
	            if (newLine === void 0) { newLine = false; }
	            if (part.length > 0) {
	                this._currentLine.parts.push(part);
	            }
	            if (newLine) {
	                this._lines.push(new _EmittedLine(this._indent));
	            }
	        };
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
	            if (this.lineIsEmpty()) {
	                this._lines.pop();
	            }
	        };
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.incIndent = function () {
	            this._indent++;
	            this._currentLine.indent = this._indent;
	        };
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.decIndent = function () {
	            this._indent--;
	            this._currentLine.indent = this._indent;
	        };
	        /**
	         * @param {?} clazz
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.pushClass = function (clazz) { this._classes.push(clazz); };
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.popClass = function () { return this._classes.pop(); };
	        Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.toSource = function () {
	            var /** @type {?} */ lines = this._lines;
	            if (lines[lines.length - 1].parts.length === 0) {
	                lines = lines.slice(0, lines.length - 1);
	            }
	            return lines
	                .map(function (line) {
	                if (line.parts.length > 0) {
	                    return _createIndent(line.indent) + line.parts.join('');
	                }
	                else {
	                    return '';
	                }
	            })
	                .join('\n');
	        };
	        return EmitterVisitorContext;
	    }());
	    /**
	     * @abstract
	     */
	    var AbstractEmitterVisitor = (function () {
	        /**
	         * @param {?} _escapeDollarInStrings
	         */
	        function AbstractEmitterVisitor(_escapeDollarInStrings) {
	            this._escapeDollarInStrings = _escapeDollarInStrings;
	        }
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
	            stmt.expr.visitExpression(this, ctx);
	            ctx.println(';');
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
	            ctx.print("return ");
	            stmt.value.visitExpression(this, ctx);
	            ctx.println(';');
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitCastExpr = function (ast, context) { };
	        /**
	         * @abstract
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) { };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
	            ctx.print("if (");
	            stmt.condition.visitExpression(this, ctx);
	            ctx.print(") {");
	            var /** @type {?} */ hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
	            if (stmt.trueCase.length <= 1 && !hasElseCase) {
	                ctx.print(" ");
	                this.visitAllStatements(stmt.trueCase, ctx);
	                ctx.removeEmptyLastLine();
	                ctx.print(" ");
	            }
	            else {
	                ctx.println();
	                ctx.incIndent();
	                this.visitAllStatements(stmt.trueCase, ctx);
	                ctx.decIndent();
	                if (hasElseCase) {
	                    ctx.println("} else {");
	                    ctx.incIndent();
	                    this.visitAllStatements(stmt.falseCase, ctx);
	                    ctx.decIndent();
	                }
	            }
	            ctx.println("}");
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) { };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
	            ctx.print("throw ");
	            stmt.error.visitExpression(this, ctx);
	            ctx.println(";");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
	            var /** @type {?} */ lines = stmt.comment.split('\n');
	            lines.forEach(function (line) { ctx.println("// " + line); });
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) { };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
	            var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	            if (!lineWasEmpty) {
	                ctx.print('(');
	            }
	            ctx.print(expr.name + " = ");
	            expr.value.visitExpression(this, ctx);
	            if (!lineWasEmpty) {
	                ctx.print(')');
	            }
	            return null;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
	            var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	            if (!lineWasEmpty) {
	                ctx.print('(');
	            }
	            expr.receiver.visitExpression(this, ctx);
	            ctx.print("[");
	            expr.index.visitExpression(this, ctx);
	            ctx.print("] = ");
	            expr.value.visitExpression(this, ctx);
	            if (!lineWasEmpty) {
	                ctx.print(')');
	            }
	            return null;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
	            var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	            if (!lineWasEmpty) {
	                ctx.print('(');
	            }
	            expr.receiver.visitExpression(this, ctx);
	            ctx.print("." + expr.name + " = ");
	            expr.value.visitExpression(this, ctx);
	            if (!lineWasEmpty) {
	                ctx.print(')');
	            }
	            return null;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	            expr.receiver.visitExpression(this, ctx);
	            var /** @type {?} */ name = expr.name;
	            if (isPresent(expr.builtin)) {
	                name = this.getBuiltinMethodName(expr.builtin);
	                if (isBlank(name)) {
	                    // some builtins just mean to skip the call.
	                    return null;
	                }
	            }
	            ctx.print("." + name + "(");
	            this.visitAllExpressions(expr.args, ctx, ",");
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} method
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.getBuiltinMethodName = function (method) { };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	            expr.fn.visitExpression(this, ctx);
	            ctx.print("(");
	            this.visitAllExpressions(expr.args, ctx, ',');
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	            var /** @type {?} */ varName = ast.name;
	            if (isPresent(ast.builtin)) {
	                switch (ast.builtin) {
	                    case BuiltinVar.Super:
	                        varName = 'super';
	                        break;
	                    case BuiltinVar.This:
	                        varName = 'this';
	                        break;
	                    case BuiltinVar.CatchError:
	                        varName = CATCH_ERROR_VAR$1.name;
	                        break;
	                    case BuiltinVar.CatchStack:
	                        varName = CATCH_STACK_VAR$1.name;
	                        break;
	                    default:
	                        throw new Error("Unknown builtin variable " + ast.builtin);
	                }
	            }
	            ctx.print(varName);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	            ctx.print("new ");
	            ast.classExpr.visitExpression(this, ctx);
	            ctx.print("(");
	            this.visitAllExpressions(ast.args, ctx, ',');
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	            var /** @type {?} */ value = ast.value;
	            if (typeof value === 'string') {
	                ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));
	            }
	            else {
	                ctx.print("" + value);
	            }
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) { };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
	            ctx.print("(");
	            ast.condition.visitExpression(this, ctx);
	            ctx.print('? ');
	            ast.trueCase.visitExpression(this, ctx);
	            ctx.print(': ');
	            ast.falseCase.visitExpression(this, ctx);
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
	            ctx.print('!');
	            ast.condition.visitExpression(this, ctx);
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) { };
	        /**
	         * @abstract
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	            var /** @type {?} */ opStr;
	            switch (ast.operator) {
	                case BinaryOperator.Equals:
	                    opStr = '==';
	                    break;
	                case BinaryOperator.Identical:
	                    opStr = '===';
	                    break;
	                case BinaryOperator.NotEquals:
	                    opStr = '!=';
	                    break;
	                case BinaryOperator.NotIdentical:
	                    opStr = '!==';
	                    break;
	                case BinaryOperator.And:
	                    opStr = '&&';
	                    break;
	                case BinaryOperator.Or:
	                    opStr = '||';
	                    break;
	                case BinaryOperator.Plus:
	                    opStr = '+';
	                    break;
	                case BinaryOperator.Minus:
	                    opStr = '-';
	                    break;
	                case BinaryOperator.Divide:
	                    opStr = '/';
	                    break;
	                case BinaryOperator.Multiply:
	                    opStr = '*';
	                    break;
	                case BinaryOperator.Modulo:
	                    opStr = '%';
	                    break;
	                case BinaryOperator.Lower:
	                    opStr = '<';
	                    break;
	                case BinaryOperator.LowerEquals:
	                    opStr = '<=';
	                    break;
	                case BinaryOperator.Bigger:
	                    opStr = '>';
	                    break;
	                case BinaryOperator.BiggerEquals:
	                    opStr = '>=';
	                    break;
	                default:
	                    throw new Error("Unknown operator " + ast.operator);
	            }
	            ctx.print("(");
	            ast.lhs.visitExpression(this, ctx);
	            ctx.print(" " + opStr + " ");
	            ast.rhs.visitExpression(this, ctx);
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
	            ast.receiver.visitExpression(this, ctx);
	            ctx.print(".");
	            ctx.print(ast.name);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
	            ast.receiver.visitExpression(this, ctx);
	            ctx.print("[");
	            ast.index.visitExpression(this, ctx);
	            ctx.print("]");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	            var /** @type {?} */ useNewLine = ast.entries.length > 1;
	            ctx.print("[", useNewLine);
	            ctx.incIndent();
	            this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
	            ctx.decIndent();
	            ctx.print("]", useNewLine);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
	            var _this = this;
	            var /** @type {?} */ useNewLine = ast.entries.length > 1;
	            ctx.print("{", useNewLine);
	            ctx.incIndent();
	            this.visitAllObjects(function (entry) {
	                ctx.print(escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + ": ");
	                entry.value.visitExpression(_this, ctx);
	            }, ast.entries, ctx, ',', useNewLine);
	            ctx.decIndent();
	            ctx.print("}", useNewLine);
	            return null;
	        };
	        /**
	         * @param {?} expressions
	         * @param {?} ctx
	         * @param {?} separator
	         * @param {?=} newLine
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {
	            var _this = this;
	            if (newLine === void 0) { newLine = false; }
	            this.visitAllObjects(function (expr) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator, newLine);
	        };
	        /**
	         * @param {?} handler
	         * @param {?} expressions
	         * @param {?} ctx
	         * @param {?} separator
	         * @param {?=} newLine
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {
	            if (newLine === void 0) { newLine = false; }
	            for (var /** @type {?} */ i = 0; i < expressions.length; i++) {
	                if (i > 0) {
	                    ctx.print(separator, newLine);
	                }
	                handler(expressions[i]);
	            }
	            if (newLine) {
	                ctx.println();
	            }
	        };
	        /**
	         * @param {?} statements
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
	            var _this = this;
	            statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });
	        };
	        return AbstractEmitterVisitor;
	    }());
	    /**
	     * @param {?} input
	     * @param {?} escapeDollar
	     * @param {?=} alwaysQuote
	     * @return {?}
	     */
	    function escapeIdentifier(input, escapeDollar, alwaysQuote) {
	        if (alwaysQuote === void 0) { alwaysQuote = true; }
	        if (isBlank(input)) {
	            return null;
	        }
	        var /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {
	            var match = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                match[_i - 0] = arguments[_i];
	            }
	            if (match[0] == '$') {
	                return escapeDollar ? '\\$' : '$';
	            }
	            else if (match[0] == '\n') {
	                return '\\n';
	            }
	            else if (match[0] == '\r') {
	                return '\\r';
	            }
	            else {
	                return "\\" + match[0];
	            }
	        });
	        var /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
	        return requiresQuotes ? "'" + body + "'" : body;
	    }
	    /**
	     * @param {?} count
	     * @return {?}
	     */
	    function _createIndent(count) {
	        var /** @type {?} */ res = '';
	        for (var /** @type {?} */ i = 0; i < count; i++) {
	            res += '  ';
	        }
	        return res;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$22 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _debugModuleUrl = '/debug/lib';
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    function debugOutputAstAsTypeScript(ast) {
	        var /** @type {?} */ converter = new _TsEmitterVisitor(_debugModuleUrl);
	        var /** @type {?} */ ctx = EmitterVisitorContext.createRoot([]);
	        var /** @type {?} */ asts = Array.isArray(ast) ? ast : [ast];
	        asts.forEach(function (ast) {
	            if (ast instanceof Statement) {
	                ast.visitStatement(converter, ctx);
	            }
	            else if (ast instanceof Expression) {
	                ast.visitExpression(converter, ctx);
	            }
	            else if (ast instanceof Type$1) {
	                ast.visitType(converter, ctx);
	            }
	            else {
	                throw new Error("Don't know how to print debug info for " + ast);
	            }
	        });
	        return ctx.toSource();
	    }
	    var TypeScriptEmitter = (function () {
	        /**
	         * @param {?} _importGenerator
	         */
	        function TypeScriptEmitter(_importGenerator) {
	            this._importGenerator = _importGenerator;
	        }
	        /**
	         * @param {?} moduleUrl
	         * @param {?} stmts
	         * @param {?} exportedVars
	         * @return {?}
	         */
	        TypeScriptEmitter.prototype.emitStatements = function (moduleUrl, stmts, exportedVars) {
	            var _this = this;
	            var /** @type {?} */ converter = new _TsEmitterVisitor(moduleUrl);
	            var /** @type {?} */ ctx = EmitterVisitorContext.createRoot(exportedVars);
	            converter.visitAllStatements(stmts, ctx);
	            var /** @type {?} */ srcParts = [];
	            converter.importsWithPrefixes.forEach(function (prefix, importedModuleUrl) {
	                // Note: can't write the real word for import as it screws up system.js auto detection...
	                srcParts.push("imp" +
	                    ("ort * as " + prefix + " from '" + _this._importGenerator.fileNameToModuleName(importedModuleUrl, moduleUrl) + "';"));
	            });
	            srcParts.push(ctx.toSource());
	            return srcParts.join('\n');
	        };
	        return TypeScriptEmitter;
	    }());
	    var _TsEmitterVisitor = (function (_super) {
	        __extends$22(_TsEmitterVisitor, _super);
	        /**
	         * @param {?} _moduleUrl
	         */
	        function _TsEmitterVisitor(_moduleUrl) {
	            _super.call(this, false);
	            this._moduleUrl = _moduleUrl;
	            this.importsWithPrefixes = new Map();
	        }
	        /**
	         * @param {?} t
	         * @param {?} ctx
	         * @param {?=} defaultType
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
	            if (defaultType === void 0) { defaultType = 'any'; }
	            if (isPresent(t)) {
	                t.visitType(this, ctx);
	            }
	            else {
	                ctx.print(defaultType);
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	            var /** @type {?} */ value = ast.value;
	            if (isBlank(value) && ast.type != NULL_TYPE) {
	                ctx.print("(" + value + " as any)");
	                return null;
	            }
	            return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	            if (ast.entries.length === 0) {
	                ctx.print('(');
	            }
	            var /** @type {?} */ result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
	            if (ast.entries.length === 0) {
	                ctx.print(' as any[])');
	            }
	            return result;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	            this._visitIdentifier(ast.value, ast.typeParams, ctx);
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	            if (ctx.isExportedVar(stmt.name)) {
	                ctx.print("export ");
	            }
	            if (stmt.hasModifier(StmtModifier.Final)) {
	                ctx.print("const");
	            }
	            else {
	                ctx.print("var");
	            }
	            ctx.print(" " + stmt.name + ":");
	            this.visitType(stmt.type, ctx);
	            ctx.print(" = ");
	            stmt.value.visitExpression(this, ctx);
	            ctx.println(";");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	            ctx.print("(<");
	            ast.type.visitType(this, ctx);
	            ctx.print(">");
	            ast.value.visitExpression(this, ctx);
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	            var _this = this;
	            ctx.pushClass(stmt);
	            if (ctx.isExportedVar(stmt.name)) {
	                ctx.print("export ");
	            }
	            ctx.print("class " + stmt.name);
	            if (isPresent(stmt.parent)) {
	                ctx.print(" extends ");
	                stmt.parent.visitExpression(this, ctx);
	            }
	            ctx.println(" {");
	            ctx.incIndent();
	            stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });
	            if (isPresent(stmt.constructorMethod)) {
	                this._visitClassConstructor(stmt, ctx);
	            }
	            stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });
	            stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });
	            ctx.decIndent();
	            ctx.println("}");
	            ctx.popClass();
	            return null;
	        };
	        /**
	         * @param {?} field
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
	            if (field.hasModifier(StmtModifier.Private)) {
	                // comment out as a workaround for #10967
	                ctx.print("/*private*/ ");
	            }
	            ctx.print(field.name);
	            ctx.print(':');
	            this.visitType(field.type, ctx);
	            ctx.println(";");
	        };
	        /**
	         * @param {?} getter
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
	            if (getter.hasModifier(StmtModifier.Private)) {
	                ctx.print("private ");
	            }
	            ctx.print("get " + getter.name + "()");
	            ctx.print(':');
	            this.visitType(getter.type, ctx);
	            ctx.println(" {");
	            ctx.incIndent();
	            this.visitAllStatements(getter.body, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	            ctx.print("constructor(");
	            this._visitParams(stmt.constructorMethod.params, ctx);
	            ctx.println(") {");
	            ctx.incIndent();
	            this.visitAllStatements(stmt.constructorMethod.body, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	        };
	        /**
	         * @param {?} method
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
	            if (method.hasModifier(StmtModifier.Private)) {
	                ctx.print("private ");
	            }
	            ctx.print(method.name + "(");
	            this._visitParams(method.params, ctx);
	            ctx.print("):");
	            this.visitType(method.type, ctx, 'void');
	            ctx.println(" {");
	            ctx.incIndent();
	            this.visitAllStatements(method.body, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	            ctx.print("(");
	            this._visitParams(ast.params, ctx);
	            ctx.print("):");
	            this.visitType(ast.type, ctx, 'void');
	            ctx.println(" => {");
	            ctx.incIndent();
	            this.visitAllStatements(ast.statements, ctx);
	            ctx.decIndent();
	            ctx.print("}");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	            if (ctx.isExportedVar(stmt.name)) {
	                ctx.print("export ");
	            }
	            ctx.print("function " + stmt.name + "(");
	            this._visitParams(stmt.params, ctx);
	            ctx.print("):");
	            this.visitType(stmt.type, ctx, 'void');
	            ctx.println(" {");
	            ctx.incIndent();
	            this.visitAllStatements(stmt.statements, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	            ctx.println("try {");
	            ctx.incIndent();
	            this.visitAllStatements(stmt.bodyStmts, ctx);
	            ctx.decIndent();
	            ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	            ctx.incIndent();
	            var /** @type {?} */ catchStmts = [(CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
	                    StmtModifier.Final
	                ]))].concat(stmt.catchStmts);
	            this.visitAllStatements(catchStmts, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	            return null;
	        };
	        /**
	         * @param {?} type
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
	            var /** @type {?} */ typeStr;
	            switch (type.name) {
	                case BuiltinTypeName.Bool:
	                    typeStr = 'boolean';
	                    break;
	                case BuiltinTypeName.Dynamic:
	                    typeStr = 'any';
	                    break;
	                case BuiltinTypeName.Function:
	                    typeStr = 'Function';
	                    break;
	                case BuiltinTypeName.Number:
	                    typeStr = 'number';
	                    break;
	                case BuiltinTypeName.Int:
	                    typeStr = 'number';
	                    break;
	                case BuiltinTypeName.String:
	                    typeStr = 'string';
	                    break;
	                default:
	                    throw new Error("Unsupported builtin type " + type.name);
	            }
	            ctx.print(typeStr);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitExpressionType = function (ast, ctx) {
	            var _this = this;
	            ast.value.visitExpression(this, ctx);
	            if (isPresent(ast.typeParams) && ast.typeParams.length > 0) {
	                ctx.print("<");
	                this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, ast.typeParams, ctx, ',');
	                ctx.print(">");
	            }
	            return null;
	        };
	        /**
	         * @param {?} type
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
	            this.visitType(type.of, ctx);
	            ctx.print("[]");
	            return null;
	        };
	        /**
	         * @param {?} type
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
	            ctx.print("{[key: string]:");
	            this.visitType(type.valueType, ctx);
	            ctx.print("}");
	            return null;
	        };
	        /**
	         * @param {?} method
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	            var /** @type {?} */ name;
	            switch (method) {
	                case BuiltinMethod.ConcatArray:
	                    name = 'concat';
	                    break;
	                case BuiltinMethod.SubscribeObservable:
	                    name = 'subscribe';
	                    break;
	                case BuiltinMethod.Bind:
	                    name = 'bind';
	                    break;
	                default:
	                    throw new Error("Unknown builtin method: " + method);
	            }
	            return name;
	        };
	        /**
	         * @param {?} params
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	            var _this = this;
	            this.visitAllObjects(function (param) {
	                ctx.print(param.name);
	                ctx.print(':');
	                _this.visitType(param.type, ctx);
	            }, params, ctx, ',');
	        };
	        /**
	         * @param {?} value
	         * @param {?} typeParams
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
	            var _this = this;
	            var /** @type {?} */ name = identifierName(value);
	            var /** @type {?} */ moduleUrl = identifierModuleUrl(value);
	            if (isBlank(name)) {
	                throw new Error("Internal error: unknown identifier " + value);
	            }
	            if (isPresent(moduleUrl) && moduleUrl != this._moduleUrl) {
	                var /** @type {?} */ prefix = this.importsWithPrefixes.get(moduleUrl);
	                if (isBlank(prefix)) {
	                    prefix = "import" + this.importsWithPrefixes.size;
	                    this.importsWithPrefixes.set(moduleUrl, prefix);
	                }
	                ctx.print(prefix + ".");
	            }
	            if (value.reference && value.reference.members && value.reference.members.length) {
	                ctx.print(value.reference.name);
	                ctx.print('.');
	                ctx.print(value.reference.members.join('.'));
	            }
	            else {
	                ctx.print(name);
	            }
	            if (isPresent(typeParams) && typeParams.length > 0) {
	                ctx.print("<");
	                this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, typeParams, ctx, ',');
	                ctx.print(">");
	            }
	        };
	        return _TsEmitterVisitor;
	    }(AbstractEmitterVisitor));

	    // =================================================================================================
	    // =================================================================================================
	    // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	    // =================================================================================================
	    // =================================================================================================
	    //
	    //        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
	    //                               Reach out to mprobst for details.
	    //
	    // =================================================================================================
	    /** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */
	    var /** @type {?} */ SECURITY_SCHEMA = {};
	    /**
	     * @param {?} ctx
	     * @param {?} specs
	     * @return {?}
	     */
	    function registerContext(ctx, specs) {
	        for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
	            var spec = specs_1[_i];
	            SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
	        }
	    }
	    // Case is insignificant below, all element and attribute names are lower-cased for lookup.
	    registerContext(_angular_core.SecurityContext.HTML, [
	        'iframe|srcdoc',
	        '*|innerHTML',
	        '*|outerHTML',
	    ]);
	    registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);
	    // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
	    registerContext(_angular_core.SecurityContext.URL, [
	        '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',
	        'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',
	        'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',
	        'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',
	    ]);
	    registerContext(_angular_core.SecurityContext.RESOURCE_URL, [
	        'applet|code',
	        'applet|codebase',
	        'base|href',
	        'embed|src',
	        'frame|src',
	        'head|profile',
	        'html|manifest',
	        'iframe|src',
	        'link|href',
	        'media|src',
	        'object|codebase',
	        'object|data',
	        'script|src',
	    ]);

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$23 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var __decorate$14 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$14 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var /** @type {?} */ BOOLEAN = 'boolean';
	    var /** @type {?} */ NUMBER = 'number';
	    var /** @type {?} */ STRING = 'string';
	    var /** @type {?} */ OBJECT = 'object';
	    /**
	     * This array represents the DOM schema. It encodes inheritance, properties, and events.
	     *
	     * ## Overview
	     *
	     * Each line represents one kind of element. The `element_inheritance` and properties are joined
	     * using `element_inheritance|properties` syntax.
	     *
	     * ## Element Inheritance
	     *
	     * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
	     * Here the individual elements are separated by `,` (commas). Every element in the list
	     * has identical properties.
	     *
	     * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
	     * specified then `""` (blank) element is assumed.
	     *
	     * NOTE: The blank element inherits from root `[Element]` element, the super element of all
	     * elements.
	     *
	     * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
	     *
	     * ## Properties
	     *
	     * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
	     * by a special character designating its type:
	     *
	     * - (no prefix): property is a string.
	     * - `*`: property represents an event.
	     * - `!`: property is a boolean.
	     * - `#`: property is a number.
	     * - `%`: property is an object.
	     *
	     * ## Query
	     *
	     * The class creates an internal squas representation which allows to easily answer the query of
	     * if a given property exist on a given element.
	     *
	     * NOTE: We don't yet support querying for types or events.
	     * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
	     *       see dom_element_schema_registry_spec.ts
	     */
	    // =================================================================================================
	    // =================================================================================================
	    // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	    // =================================================================================================
	    // =================================================================================================
	    //
	    //                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
	    //
	    // Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
	    // dom_security_schema.ts. Reach out to mprobst & rjamet for details.
	    //
	    // =================================================================================================
	    var /** @type {?} */ SCHEMA = [
	        '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',
	        '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	        'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	        'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',
	        ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',
	        ':svg:graphics^:svg:|',
	        ':svg:animation^:svg:|*begin,*end,*repeat',
	        ':svg:geometry^:svg:|',
	        ':svg:componentTransferFunction^:svg:|',
	        ':svg:gradient^:svg:|',
	        ':svg:textContent^:svg:graphics|',
	        ':svg:textPositioning^:svg:textContent|',
	        'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',
	        'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',
	        'audio^media|',
	        'br^[HTMLElement]|clear',
	        'base^[HTMLElement]|href,target',
	        'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',
	        'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',
	        'canvas^[HTMLElement]|#height,#width',
	        'content^[HTMLElement]|select',
	        'dl^[HTMLElement]|!compact',
	        'datalist^[HTMLElement]|',
	        'details^[HTMLElement]|!open',
	        'dialog^[HTMLElement]|!open,returnValue',
	        'dir^[HTMLElement]|!compact',
	        'div^[HTMLElement]|align',
	        'embed^[HTMLElement]|align,height,name,src,type,width',
	        'fieldset^[HTMLElement]|!disabled,name',
	        'font^[HTMLElement]|color,face,size',
	        'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',
	        'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',
	        'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',
	        'hr^[HTMLElement]|align,color,!noShade,size,width',
	        'head^[HTMLElement]|',
	        'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',
	        'html^[HTMLElement]|version',
	        'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',
	        'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',
	        'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',
	        'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name',
	        'li^[HTMLElement]|type,#value',
	        'label^[HTMLElement]|htmlFor',
	        'legend^[HTMLElement]|align',
	        'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',
	        'map^[HTMLElement]|name',
	        'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',
	        'menu^[HTMLElement]|!compact',
	        'meta^[HTMLElement]|content,httpEquiv,name,scheme',
	        'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',
	        'ins,del^[HTMLElement]|cite,dateTime',
	        'ol^[HTMLElement]|!compact,!reversed,#start,type',
	        'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',
	        'optgroup^[HTMLElement]|!disabled,label',
	        'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',
	        'output^[HTMLElement]|defaultValue,%htmlFor,name,value',
	        'p^[HTMLElement]|align',
	        'param^[HTMLElement]|name,type,value,valueType',
	        'picture^[HTMLElement]|',
	        'pre^[HTMLElement]|#width',
	        'progress^[HTMLElement]|#max,#value',
	        'q,blockquote,cite^[HTMLElement]|',
	        'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',
	        'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',
	        'shadow^[HTMLElement]|',
	        'source^[HTMLElement]|media,sizes,src,srcset,type',
	        'span^[HTMLElement]|',
	        'style^[HTMLElement]|!disabled,media,type',
	        'caption^[HTMLElement]|align',
	        'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',
	        'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',
	        'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',
	        'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',
	        'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',
	        'template^[HTMLElement]|',
	        'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',
	        'title^[HTMLElement]|text',
	        'track^[HTMLElement]|!default,kind,label,src,srclang',
	        'ul^[HTMLElement]|!compact,type',
	        'unknown^[HTMLElement]|',
	        'video^media|#height,poster,#width',
	        ':svg:a^:svg:graphics|',
	        ':svg:animate^:svg:animation|',
	        ':svg:animateMotion^:svg:animation|',
	        ':svg:animateTransform^:svg:animation|',
	        ':svg:circle^:svg:geometry|',
	        ':svg:clipPath^:svg:graphics|',
	        ':svg:cursor^:svg:|',
	        ':svg:defs^:svg:graphics|',
	        ':svg:desc^:svg:|',
	        ':svg:discard^:svg:|',
	        ':svg:ellipse^:svg:geometry|',
	        ':svg:feBlend^:svg:|',
	        ':svg:feColorMatrix^:svg:|',
	        ':svg:feComponentTransfer^:svg:|',
	        ':svg:feComposite^:svg:|',
	        ':svg:feConvolveMatrix^:svg:|',
	        ':svg:feDiffuseLighting^:svg:|',
	        ':svg:feDisplacementMap^:svg:|',
	        ':svg:feDistantLight^:svg:|',
	        ':svg:feDropShadow^:svg:|',
	        ':svg:feFlood^:svg:|',
	        ':svg:feFuncA^:svg:componentTransferFunction|',
	        ':svg:feFuncB^:svg:componentTransferFunction|',
	        ':svg:feFuncG^:svg:componentTransferFunction|',
	        ':svg:feFuncR^:svg:componentTransferFunction|',
	        ':svg:feGaussianBlur^:svg:|',
	        ':svg:feImage^:svg:|',
	        ':svg:feMerge^:svg:|',
	        ':svg:feMergeNode^:svg:|',
	        ':svg:feMorphology^:svg:|',
	        ':svg:feOffset^:svg:|',
	        ':svg:fePointLight^:svg:|',
	        ':svg:feSpecularLighting^:svg:|',
	        ':svg:feSpotLight^:svg:|',
	        ':svg:feTile^:svg:|',
	        ':svg:feTurbulence^:svg:|',
	        ':svg:filter^:svg:|',
	        ':svg:foreignObject^:svg:graphics|',
	        ':svg:g^:svg:graphics|',
	        ':svg:image^:svg:graphics|',
	        ':svg:line^:svg:geometry|',
	        ':svg:linearGradient^:svg:gradient|',
	        ':svg:mpath^:svg:|',
	        ':svg:marker^:svg:|',
	        ':svg:mask^:svg:|',
	        ':svg:metadata^:svg:|',
	        ':svg:path^:svg:geometry|',
	        ':svg:pattern^:svg:|',
	        ':svg:polygon^:svg:geometry|',
	        ':svg:polyline^:svg:geometry|',
	        ':svg:radialGradient^:svg:gradient|',
	        ':svg:rect^:svg:geometry|',
	        ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',
	        ':svg:script^:svg:|type',
	        ':svg:set^:svg:animation|',
	        ':svg:stop^:svg:|',
	        ':svg:style^:svg:|!disabled,media,title,type',
	        ':svg:switch^:svg:graphics|',
	        ':svg:symbol^:svg:|',
	        ':svg:tspan^:svg:textPositioning|',
	        ':svg:text^:svg:textPositioning|',
	        ':svg:textPath^:svg:textContent|',
	        ':svg:title^:svg:|',
	        ':svg:use^:svg:graphics|',
	        ':svg:view^:svg:|#zoomAndPan',
	        'data^[HTMLElement]|value',
	        'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',
	        'summary^[HTMLElement]|',
	        'time^[HTMLElement]|dateTime',
	    ];
	    var /** @type {?} */ _ATTR_TO_PROP = {
	        'class': 'className',
	        'for': 'htmlFor',
	        'formaction': 'formAction',
	        'innerHtml': 'innerHTML',
	        'readonly': 'readOnly',
	        'tabindex': 'tabIndex',
	    };
	    var DomElementSchemaRegistry = (function (_super) {
	        __extends$23(DomElementSchemaRegistry, _super);
	        function DomElementSchemaRegistry() {
	            var _this = this;
	            _super.call(this);
	            this._schema = {};
	            SCHEMA.forEach(function (encodedType) {
	                var type = {};
	                var _a = encodedType.split('|'), strType = _a[0], strProperties = _a[1];
	                var properties = strProperties.split(',');
	                var _b = strType.split('^'), typeNames = _b[0], superName = _b[1];
	                typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });
	                var superType = superName && _this._schema[superName.toLowerCase()];
	                if (superType) {
	                    Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop]; });
	                }
	                properties.forEach(function (property) {
	                    if (property.length > 0) {
	                        switch (property[0]) {
	                            case '*':
	                                // We don't yet support events.
	                                // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
	                                // will
	                                // almost certainly introduce bad XSS vulnerabilities.
	                                // type[property.substring(1)] = EVENT;
	                                break;
	                            case '!':
	                                type[property.substring(1)] = BOOLEAN;
	                                break;
	                            case '#':
	                                type[property.substring(1)] = NUMBER;
	                                break;
	                            case '%':
	                                type[property.substring(1)] = OBJECT;
	                                break;
	                            default:
	                                type[property] = STRING;
	                        }
	                    }
	                });
	            });
	        }
	        /**
	         * @param {?} tagName
	         * @param {?} propName
	         * @param {?} schemaMetas
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {
	            if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	                return true;
	            }
	            if (tagName.indexOf('-') > -1) {
	                if (tagName === 'ng-container' || tagName === 'ng-content') {
	                    return false;
	                }
	                if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                    // Can't tell now as we don't know which properties a custom element will get
	                    // once it is instantiated
	                    return true;
	                }
	            }
	            var /** @type {?} */ elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
	            return !!elementProperties[propName];
	        };
	        /**
	         * @param {?} tagName
	         * @param {?} schemaMetas
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {
	            if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	                return true;
	            }
	            if (tagName.indexOf('-') > -1) {
	                if (tagName === 'ng-container' || tagName === 'ng-content') {
	                    return true;
	                }
	                if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                    // Allow any custom elements
	                    return true;
	                }
	            }
	            return !!this._schema[tagName.toLowerCase()];
	        };
	        /**
	         * securityContext returns the security context for the given property on the given DOM tag.
	         *
	         * Tag and property name are statically known and cannot change at runtime, i.e. it is not
	         * possible to bind a value into a changing attribute or tag name.
	         *
	         * The filtering is white list based. All attributes in the schema above are assumed to have the
	         * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
	         * attack vectors are assigned their appropriate context.
	         * @param {?} tagName
	         * @param {?} propName
	         * @param {?} isAttribute
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName, isAttribute) {
	            if (isAttribute) {
	                // NB: For security purposes, use the mapped property name, not the attribute name.
	                propName = this.getMappedPropName(propName);
	            }
	            // Make sure comparisons are case insensitive, so that case differences between attribute and
	            // property names do not have a security impact.
	            tagName = tagName.toLowerCase();
	            propName = propName.toLowerCase();
	            var /** @type {?} */ ctx = SECURITY_SCHEMA[tagName + '|' + propName];
	            if (ctx) {
	                return ctx;
	            }
	            ctx = SECURITY_SCHEMA['*|' + propName];
	            return ctx ? ctx : _angular_core.SecurityContext.NONE;
	        };
	        /**
	         * @param {?} propName
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return _ATTR_TO_PROP[propName] || propName; };
	        /**
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.validateProperty = function (name) {
	            if (name.toLowerCase().startsWith('on')) {
	                var /** @type {?} */ msg = ("Binding to event property '" + name + "' is disallowed for security reasons, ") +
	                    ("please use (" + name.slice(2) + ")=...") +
	                    ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") +
	                    " current module.";
	                return { error: true, msg: msg };
	            }
	            else {
	                return { error: false };
	            }
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.validateAttribute = function (name) {
	            if (name.toLowerCase().startsWith('on')) {
	                var /** @type {?} */ msg = ("Binding to event attribute '" + name + "' is disallowed for security reasons, ") +
	                    ("please use (" + name.slice(2) + ")=...");
	                return { error: true, msg: msg };
	            }
	            else {
	                return { error: false };
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this._schema); };
	        /**
	         * @param {?} propName
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {
	            return dashCaseToCamelCase(propName);
	        };
	        /**
	         * @param {?} camelCaseProp
	         * @param {?} userProvidedProp
	         * @param {?} val
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {
	            var /** @type {?} */ unit = '';
	            var /** @type {?} */ strVal = val.toString().trim();
	            var /** @type {?} */ errorMsg = null;
	            if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
	                if (typeof val === 'number') {
	                    unit = 'px';
	                }
	                else {
	                    var /** @type {?} */ valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
	                    if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
	                        errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
	                    }
	                }
	            }
	            return { error: errorMsg, value: strVal + unit };
	        };
	        DomElementSchemaRegistry = __decorate$14([
	            CompilerInjectable(), 
	            __metadata$14('design:paramtypes', [])
	        ], DomElementSchemaRegistry);
	        return DomElementSchemaRegistry;
	    }(ElementSchemaRegistry));
	    /**
	     * @param {?} prop
	     * @return {?}
	     */
	    function _isPixelDimensionStyle(prop) {
	        switch (prop) {
	            case 'width':
	            case 'height':
	            case 'minWidth':
	            case 'minHeight':
	            case 'maxWidth':
	            case 'maxHeight':
	            case 'left':
	            case 'top':
	            case 'bottom':
	            case 'right':
	            case 'fontSize':
	            case 'outlineWidth':
	            case 'outlineOffset':
	            case 'paddingTop':
	            case 'paddingLeft':
	            case 'paddingBottom':
	            case 'paddingRight':
	            case 'marginTop':
	            case 'marginLeft':
	            case 'marginBottom':
	            case 'marginRight':
	            case 'borderRadius':
	            case 'borderWidth':
	            case 'borderTopWidth':
	            case 'borderLeftWidth':
	            case 'borderRightWidth':
	            case 'borderBottomWidth':
	            case 'textIndent':
	                return true;
	            default:
	                return false;
	        }
	    }

	    var ShadowCss = (function () {
	        function ShadowCss() {
	            this.strictStyling = true;
	        }
	        /**
	         * @param {?} cssText
	         * @param {?} selector
	         * @param {?=} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	            if (hostSelector === void 0) { hostSelector = ''; }
	            var /** @type {?} */ sourceMappingUrl = extractSourceMappingUrl(cssText);
	            cssText = stripComments(cssText);
	            cssText = this._insertDirectives(cssText);
	            return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._insertDirectives = function (cssText) {
	            cssText = this._insertPolyfillDirectivesInCssText(cssText);
	            return this._insertPolyfillRulesInCssText(cssText);
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	            // Difference with webcomponents.js: does not handle comments
	            return cssText.replace(_cssContentNextSelectorRe, function () {
	                var m = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    m[_i - 0] = arguments[_i];
	                }
	                return m[2] + '{';
	            });
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	            // Difference with webcomponents.js: does not handle comments
	            return cssText.replace(_cssContentRuleRe, function () {
	                var m = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    m[_i - 0] = arguments[_i];
	                }
	                var /** @type {?} */ rule = m[0].replace(m[1], '').replace(m[2], '');
	                return m[4] + rule;
	            });
	        };
	        /**
	         * @param {?} cssText
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	            var /** @type {?} */ unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
	            // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
	            cssText = this._insertPolyfillHostInCssText(cssText);
	            cssText = this._convertColonHost(cssText);
	            cssText = this._convertColonHostContext(cssText);
	            cssText = this._convertShadowDOMSelectors(cssText);
	            if (scopeSelector) {
	                cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
	            }
	            cssText = cssText + '\n' + unscopedRules;
	            return cssText.trim();
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	            // Difference with webcomponents.js: does not handle comments
	            var /** @type {?} */ r = '';
	            var /** @type {?} */ m;
	            _cssContentUnscopedRuleRe.lastIndex = 0;
	            while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
	                var /** @type {?} */ rule = m[0].replace(m[2], '').replace(m[1], m[4]);
	                r += rule + '\n\n';
	            }
	            return r;
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._convertColonHost = function (cssText) {
	            return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._convertColonHostContext = function (cssText) {
	            return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	        };
	        /**
	         * @param {?} cssText
	         * @param {?} regExp
	         * @param {?} partReplacer
	         * @return {?}
	         */
	        ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	            // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule
	            return cssText.replace(regExp, function () {
	                var m = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    m[_i - 0] = arguments[_i];
	                }
	                if (m[2]) {
	                    var /** @type {?} */ parts = m[2].split(',');
	                    var /** @type {?} */ r = [];
	                    for (var /** @type {?} */ i = 0; i < parts.length; i++) {
	                        var /** @type {?} */ p = parts[i].trim();
	                        if (!p)
	                            break;
	                        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                    }
	                    return r.join(',');
	                }
	                else {
	                    return _polyfillHostNoCombinator + m[3];
	                }
	            });
	        };
	        /**
	         * @param {?} host
	         * @param {?} part
	         * @param {?} suffix
	         * @return {?}
	         */
	        ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	            if (part.indexOf(_polyfillHost) > -1) {
	                return this._colonHostPartReplacer(host, part, suffix);
	            }
	            else {
	                return host + part + suffix + ', ' + part + ' ' + host + suffix;
	            }
	        };
	        /**
	         * @param {?} host
	         * @param {?} part
	         * @param {?} suffix
	         * @return {?}
	         */
	        ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	            return host + part.replace(_polyfillHost, '') + suffix;
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	            return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);
	        };
	        /**
	         * @param {?} cssText
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
	            var _this = this;
	            return processRules(cssText, function (rule) {
	                var /** @type {?} */ selector = rule.selector;
	                var /** @type {?} */ content = rule.content;
	                if (rule.selector[0] != '@') {
	                    selector =
	                        _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
	                }
	                else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||
	                    rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
	                    content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
	                }
	                return new CssRule(selector, content);
	            });
	        };
	        /**
	         * @param {?} selector
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @param {?} strict
	         * @return {?}
	         */
	        ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	            var _this = this;
	            return selector.split(',')
	                .map(function (part) { return part.trim().split(_shadowDeepSelectors); })
	                .map(function (deepParts) {
	                var shallowPart = deepParts[0], otherParts = deepParts.slice(1);
	                var /** @type {?} */ applyScope = function (shallowPart) {
	                    if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
	                        return strict ?
	                            _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :
	                            _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
	                    }
	                    else {
	                        return shallowPart;
	                    }
	                };
	                return [applyScope(shallowPart)].concat(otherParts).join(' ');
	            })
	                .join(', ');
	        };
	        /**
	         * @param {?} selector
	         * @param {?} scopeSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	            var /** @type {?} */ re = this._makeScopeMatcher(scopeSelector);
	            return !re.test(selector);
	        };
	        /**
	         * @param {?} scopeSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	            var /** @type {?} */ lre = /\[/g;
	            var /** @type {?} */ rre = /\]/g;
	            scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
	            return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	        };
	        /**
	         * @param {?} selector
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	            // Difference from webcomponents.js: scopeSelector could not be an array
	            return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	        };
	        /**
	         * @param {?} selector
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	            // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
	            _polyfillHostRe.lastIndex = 0;
	            if (_polyfillHostRe.test(selector)) {
	                var /** @type {?} */ replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	                return selector
	                    .replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
	                    return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
	                        return before + replaceBy_1 + colon + after;
	                    });
	                })
	                    .replace(_polyfillHostRe, replaceBy_1 + ' ');
	            }
	            return scopeSelector + ' ' + selector;
	        };
	        /**
	         * @param {?} selector
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {
	            var _this = this;
	            var /** @type {?} */ isRe = /\[is=([^\]]*)\]/g;
	            scopeSelector = scopeSelector.replace(isRe, function (_) {
	                var parts = [];
	                for (var _i = 1; _i < arguments.length; _i++) {
	                    parts[_i - 1] = arguments[_i];
	                }
	                return parts[0];
	            });
	            var /** @type {?} */ attrName = '[' + scopeSelector + ']';
	            var /** @type {?} */ _scopeSelectorPart = function (p) {
	                var /** @type {?} */ scopedP = p.trim();
	                if (!scopedP) {
	                    return '';
	                }
	                if (p.indexOf(_polyfillHostNoCombinator) > -1) {
	                    scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
	                }
	                else {
	                    // remove :host since it should be unnecessary
	                    var /** @type {?} */ t = p.replace(_polyfillHostRe, '');
	                    if (t.length > 0) {
	                        var /** @type {?} */ matches = t.match(/([^:]*)(:*)(.*)/);
	                        if (matches) {
	                            scopedP = matches[1] + attrName + matches[2] + matches[3];
	                        }
	                    }
	                }
	                return scopedP;
	            };
	            var /** @type {?} */ safeContent = new SafeSelector(selector);
	            selector = safeContent.content();
	            var /** @type {?} */ scopedSelector = '';
	            var /** @type {?} */ startIndex = 0;
	            var /** @type {?} */ res;
	            var /** @type {?} */ sep = /( |>|\+|~(?!=))\s*/g;
	            var /** @type {?} */ scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
	            while ((res = sep.exec(selector)) !== null) {
	                var /** @type {?} */ separator = res[1];
	                var /** @type {?} */ part = selector.slice(startIndex, res.index).trim();
	                // if a selector appears before :host-context it should not be shimmed as it
	                // matches on ancestor elements and not on elements in the host's shadow
	                var /** @type {?} */ scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
	                scopedSelector += scopedPart + " " + separator + " ";
	                startIndex = sep.lastIndex;
	            }
	            scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
	            // replace the placeholders with their original values
	            return safeContent.restore(scopedSelector);
	        };
	        /**
	         * @param {?} selector
	         * @return {?}
	         */
	        ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	            return selector.replace(_colonHostContextRe, _polyfillHostContext)
	                .replace(_colonHostRe, _polyfillHost);
	        };
	        return ShadowCss;
	    }());
	    var SafeSelector = (function () {
	        /**
	         * @param {?} selector
	         */
	        function SafeSelector(selector) {
	            var _this = this;
	            this.placeholders = [];
	            this.index = 0;
	            // Replaces attribute selectors with placeholders.
	            // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
	            selector = selector.replace(/(\[[^\]]*\])/g, function (_, keep) {
	                var replaceBy = "__ph-" + _this.index + "__";
	                _this.placeholders.push(keep);
	                _this.index++;
	                return replaceBy;
	            });
	            // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
	            // WS and "+" would otherwise be interpreted as selector separators.
	            this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
	                var replaceBy = "__ph-" + _this.index + "__";
	                _this.placeholders.push(exp);
	                _this.index++;
	                return pseudo + replaceBy;
	            });
	        }
	        ;
	        /**
	         * @param {?} content
	         * @return {?}
	         */
	        SafeSelector.prototype.restore = function (content) {
	            var _this = this;
	            return content.replace(/__ph-(\d+)__/g, function (ph, index) { return _this.placeholders[+index]; });
	        };
	        /**
	         * @return {?}
	         */
	        SafeSelector.prototype.content = function () { return this._content; };
	        return SafeSelector;
	    }());
	    var /** @type {?} */ _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
	    var /** @type {?} */ _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	    var /** @type {?} */ _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	    var /** @type {?} */ _polyfillHost = '-shadowcsshost';
	    // note: :host-context pre-processed to -shadowcsshostcontext.
	    var /** @type {?} */ _polyfillHostContext = '-shadowcsscontext';
	    var /** @type {?} */ _parenSuffix = ')(?:\\((' +
	        '(?:\\([^)(]*\\)|[^)(]*)+?' +
	        ')\\))?([^,{]*)';
	    var /** @type {?} */ _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
	    var /** @type {?} */ _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
	    var /** @type {?} */ _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	    var /** @type {?} */ _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
	    var /** @type {?} */ _shadowDOMSelectorsRe = [
	        /::shadow/g,
	        /::content/g,
	        // Deprecated selectors
	        /\/shadow-deep\//g,
	        /\/shadow\//g,
	    ];
	    var /** @type {?} */ _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
	    var /** @type {?} */ _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	    var /** @type {?} */ _polyfillHostRe = /-shadowcsshost/gim;
	    var /** @type {?} */ _colonHostRe = /:host/gim;
	    var /** @type {?} */ _colonHostContextRe = /:host-context/gim;
	    var /** @type {?} */ _commentRe = /\/\*\s*[\s\S]*?\*\//g;
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function stripComments(input) {
	        return input.replace(_commentRe, '');
	    }
	    // all comments except inline source mapping
	    var /** @type {?} */ _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function extractSourceMappingUrl(input) {
	        var /** @type {?} */ matcher = input.match(_sourceMappingUrlRe);
	        return matcher ? matcher[0] : '';
	    }
	    var /** @type {?} */ _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
	    var /** @type {?} */ _curlyRe = /([{}])/g;
	    var /** @type {?} */ OPEN_CURLY = '{';
	    var /** @type {?} */ CLOSE_CURLY = '}';
	    var /** @type {?} */ BLOCK_PLACEHOLDER = '%BLOCK%';
	    var CssRule = (function () {
	        /**
	         * @param {?} selector
	         * @param {?} content
	         */
	        function CssRule(selector, content) {
	            this.selector = selector;
	            this.content = content;
	        }
	        return CssRule;
	    }());
	    /**
	     * @param {?} input
	     * @param {?} ruleCallback
	     * @return {?}
	     */
	    function processRules(input, ruleCallback) {
	        var /** @type {?} */ inputWithEscapedBlocks = escapeBlocks(input);
	        var /** @type {?} */ nextBlockIndex = 0;
	        return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i - 0] = arguments[_i];
	            }
	            var /** @type {?} */ selector = m[2];
	            var /** @type {?} */ content = '';
	            var /** @type {?} */ suffix = m[4];
	            var /** @type {?} */ contentPrefix = '';
	            if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
	                content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
	                suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
	                contentPrefix = '{';
	            }
	            var /** @type {?} */ rule = ruleCallback(new CssRule(selector, content));
	            return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
	        });
	    }
	    var StringWithEscapedBlocks = (function () {
	        /**
	         * @param {?} escapedString
	         * @param {?} blocks
	         */
	        function StringWithEscapedBlocks(escapedString, blocks) {
	            this.escapedString = escapedString;
	            this.blocks = blocks;
	        }
	        return StringWithEscapedBlocks;
	    }());
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function escapeBlocks(input) {
	        var /** @type {?} */ inputParts = input.split(_curlyRe);
	        var /** @type {?} */ resultParts = [];
	        var /** @type {?} */ escapedBlocks = [];
	        var /** @type {?} */ bracketCount = 0;
	        var /** @type {?} */ currentBlockParts = [];
	        for (var /** @type {?} */ partIndex = 0; partIndex < inputParts.length; partIndex++) {
	            var /** @type {?} */ part = inputParts[partIndex];
	            if (part == CLOSE_CURLY) {
	                bracketCount--;
	            }
	            if (bracketCount > 0) {
	                currentBlockParts.push(part);
	            }
	            else {
	                if (currentBlockParts.length > 0) {
	                    escapedBlocks.push(currentBlockParts.join(''));
	                    resultParts.push(BLOCK_PLACEHOLDER);
	                    currentBlockParts = [];
	                }
	                resultParts.push(part);
	            }
	            if (part == OPEN_CURLY) {
	                bracketCount++;
	            }
	        }
	        if (currentBlockParts.length > 0) {
	            escapedBlocks.push(currentBlockParts.join(''));
	            resultParts.push(BLOCK_PLACEHOLDER);
	        }
	        return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$15 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$15 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var /** @type {?} */ COMPONENT_VARIABLE = '%COMP%';
	    var /** @type {?} */ HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	    var /** @type {?} */ CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	    var StylesCompileDependency = (function () {
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} isShimmed
	         * @param {?} valuePlaceholder
	         */
	        function StylesCompileDependency(name, moduleUrl, isShimmed, valuePlaceholder) {
	            this.name = name;
	            this.moduleUrl = moduleUrl;
	            this.isShimmed = isShimmed;
	            this.valuePlaceholder = valuePlaceholder;
	        }
	        return StylesCompileDependency;
	    }());
	    var StylesCompileResult = (function () {
	        /**
	         * @param {?} componentStylesheet
	         * @param {?} externalStylesheets
	         */
	        function StylesCompileResult(componentStylesheet, externalStylesheets) {
	            this.componentStylesheet = componentStylesheet;
	            this.externalStylesheets = externalStylesheets;
	        }
	        return StylesCompileResult;
	    }());
	    var CompiledStylesheet = (function () {
	        /**
	         * @param {?} statements
	         * @param {?} stylesVar
	         * @param {?} dependencies
	         * @param {?} isShimmed
	         * @param {?} meta
	         */
	        function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
	            this.statements = statements;
	            this.stylesVar = stylesVar;
	            this.dependencies = dependencies;
	            this.isShimmed = isShimmed;
	            this.meta = meta;
	        }
	        return CompiledStylesheet;
	    }());
	    var StyleCompiler = (function () {
	        /**
	         * @param {?} _urlResolver
	         */
	        function StyleCompiler(_urlResolver) {
	            this._urlResolver = _urlResolver;
	            this._shadowCss = new ShadowCss();
	        }
	        /**
	         * @param {?} comp
	         * @return {?}
	         */
	        StyleCompiler.prototype.compileComponent = function (comp) {
	            var _this = this;
	            var /** @type {?} */ externalStylesheets = [];
	            var /** @type {?} */ componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
	                styles: comp.template.styles,
	                styleUrls: comp.template.styleUrls,
	                moduleUrl: identifierModuleUrl(comp.type)
	            }), true);
	            comp.template.externalStylesheets.forEach(function (stylesheetMeta) {
	                var /** @type {?} */ compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
	                externalStylesheets.push(compiledStylesheet);
	            });
	            return new StylesCompileResult(componentStylesheet, externalStylesheets);
	        };
	        /**
	         * @param {?} comp
	         * @param {?} stylesheet
	         * @param {?} isComponentStylesheet
	         * @return {?}
	         */
	        StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {
	            var _this = this;
	            var /** @type {?} */ shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
	            var /** @type {?} */ styleExpressions = stylesheet.styles.map(function (plainStyle) { return literal(_this._shimIfNeeded(plainStyle, shim)); });
	            var /** @type {?} */ dependencies = [];
	            for (var /** @type {?} */ i = 0; i < stylesheet.styleUrls.length; i++) {
	                var /** @type {?} */ identifier = { reference: null };
	                dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier));
	                styleExpressions.push(new ExternalExpr(identifier));
	            }
	            // styles variable contains plain strings and arrays of other styles arrays (recursive),
	            // so we set its type to dynamic.
	            var /** @type {?} */ stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
	            var /** @type {?} */ stmt = variable(stylesVar)
	                .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))
	                .toDeclStmt(null, [StmtModifier.Final]);
	            return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
	        };
	        /**
	         * @param {?} style
	         * @param {?} shim
	         * @return {?}
	         */
	        StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
	            return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
	        };
	        StyleCompiler = __decorate$15([
	            CompilerInjectable(), 
	            __metadata$15('design:paramtypes', [UrlResolver])
	        ], StyleCompiler);
	        return StyleCompiler;
	    }());
	    /**
	     * @param {?} component
	     * @return {?}
	     */
	    function getStylesVarName(component) {
	        var /** @type {?} */ result = "styles";
	        if (component) {
	            result += "_" + identifierName(component.type);
	        }
	        return result;
	    }

	    var _DebugState = (function () {
	        /**
	         * @param {?} nodeIndex
	         * @param {?} sourceAst
	         */
	        function _DebugState(nodeIndex, sourceAst) {
	            this.nodeIndex = nodeIndex;
	            this.sourceAst = sourceAst;
	        }
	        return _DebugState;
	    }());
	    var /** @type {?} */ NULL_DEBUG_STATE = new _DebugState(null, null);
	    var CompileMethod = (function () {
	        /**
	         * @param {?} _view
	         */
	        function CompileMethod(_view) {
	            this._view = _view;
	            this._newState = NULL_DEBUG_STATE;
	            this._currState = NULL_DEBUG_STATE;
	            this._bodyStatements = [];
	            this._debugEnabled = this._view.genConfig.genDebugInfo;
	        }
	        /**
	         * @return {?}
	         */
	        CompileMethod.prototype._updateDebugContextIfNeeded = function () {
	            if (this._newState.nodeIndex !== this._currState.nodeIndex ||
	                this._newState.sourceAst !== this._currState.sourceAst) {
	                var /** @type {?} */ expr = this._updateDebugContext(this._newState);
	                if (expr) {
	                    this._bodyStatements.push(expr.toStmt());
	                }
	            }
	        };
	        /**
	         * @param {?} newState
	         * @return {?}
	         */
	        CompileMethod.prototype._updateDebugContext = function (newState) {
	            this._currState = this._newState = newState;
	            if (this._debugEnabled) {
	                var /** @type {?} */ sourceLocation = newState.sourceAst ? newState.sourceAst.sourceSpan.start : null;
	                return THIS_EXPR.callMethod('debug', [
	                    literal(newState.nodeIndex),
	                    sourceLocation ? literal(sourceLocation.line) : NULL_EXPR,
	                    sourceLocation ? literal(sourceLocation.col) : NULL_EXPR
	                ]);
	            }
	            else {
	                return null;
	            }
	        };
	        /**
	         * @param {?} nodeIndex
	         * @param {?} templateAst
	         * @return {?}
	         */
	        CompileMethod.prototype.resetDebugInfoExpr = function (nodeIndex, templateAst) {
	            var /** @type {?} */ res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
	            return res || NULL_EXPR;
	        };
	        /**
	         * @param {?} nodeIndex
	         * @param {?} templateAst
	         * @return {?}
	         */
	        CompileMethod.prototype.resetDebugInfo = function (nodeIndex, templateAst) {
	            this._newState = new _DebugState(nodeIndex, templateAst);
	        };
	        /**
	         * @param {...?} stmts
	         * @return {?}
	         */
	        CompileMethod.prototype.push = function () {
	            var stmts = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                stmts[_i - 0] = arguments[_i];
	            }
	            this.addStmts(stmts);
	        };
	        /**
	         * @param {?} stmt
	         * @return {?}
	         */
	        CompileMethod.prototype.addStmt = function (stmt) {
	            this._updateDebugContextIfNeeded();
	            this._bodyStatements.push(stmt);
	        };
	        /**
	         * @param {?} stmts
	         * @return {?}
	         */
	        CompileMethod.prototype.addStmts = function (stmts) {
	            this._updateDebugContextIfNeeded();
	            (_a = this._bodyStatements).push.apply(_a, stmts);
	            var _a;
	        };
	        /**
	         * @return {?}
	         */
	        CompileMethod.prototype.finish = function () { return this._bodyStatements; };
	        /**
	         * @return {?}
	         */
	        CompileMethod.prototype.isEmpty = function () { return this._bodyStatements.length === 0; };
	        return CompileMethod;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$25 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @param {?} property
	     * @param {?} callingView
	     * @param {?} definedView
	     * @return {?}
	     */
	    function getPropertyInView(property, callingView, definedView) {
	        if (callingView === definedView) {
	            return property;
	        }
	        else {
	            var /** @type {?} */ viewProp = THIS_EXPR;
	            var /** @type {?} */ currView = callingView;
	            while (currView !== definedView && currView.declarationElement.view) {
	                currView = currView.declarationElement.view;
	                viewProp = viewProp.prop('parentView');
	            }
	            if (currView !== definedView) {
	                throw new Error("Internal error: Could not calculate a property in a parent view: " + property);
	            }
	            return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null);
	        }
	    }
	    var _ReplaceViewTransformer = (function (_super) {
	        __extends$25(_ReplaceViewTransformer, _super);
	        /**
	         * @param {?} _viewExpr
	         * @param {?} _view
	         */
	        function _ReplaceViewTransformer(_viewExpr, _view) {
	            _super.call(this);
	            this._viewExpr = _viewExpr;
	            this._view = _view;
	        }
	        /**
	         * @param {?} expr
	         * @return {?}
	         */
	        _ReplaceViewTransformer.prototype._isThis = function (expr) {
	            return expr instanceof ReadVarExpr && expr.builtin === BuiltinVar.This;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _ReplaceViewTransformer.prototype.visitReadVarExpr = function (ast, context) {
	            return this._isThis(ast) ? this._viewExpr : ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _ReplaceViewTransformer.prototype.visitReadPropExpr = function (ast, context) {
	            if (this._isThis(ast.receiver)) {
	                // Note: Don't cast for members of the AppView base class...
	                if (this._view.fields.some(function (field) { return field.name == ast.name; }) ||
	                    this._view.getters.some(function (field) { return field.name == ast.name; })) {
	                    return this._viewExpr.cast(this._view.classType).prop(ast.name);
	                }
	            }
	            return _super.prototype.visitReadPropExpr.call(this, ast, context);
	        };
	        return _ReplaceViewTransformer;
	    }(ExpressionTransformer));
	    /**
	     * @param {?} view
	     * @param {?} token
	     * @param {?} optional
	     * @return {?}
	     */
	    function injectFromViewParentInjector(view, token, optional) {
	        var /** @type {?} */ viewExpr;
	        if (view.viewType === ViewType.HOST) {
	            viewExpr = THIS_EXPR;
	        }
	        else {
	            viewExpr = THIS_EXPR.prop('parentView');
	        }
	        var /** @type {?} */ args = [createDiTokenExpression(token), THIS_EXPR.prop('parentIndex')];
	        if (optional) {
	            args.push(NULL_EXPR);
	        }
	        return viewExpr.callMethod('injectorGet', args);
	    }
	    /**
	     * @param {?} component
	     * @param {?} embeddedTemplateIndex
	     * @return {?}
	     */
	    function getViewClassName(component, embeddedTemplateIndex) {
	        return "View_" + identifierName(component.type) + embeddedTemplateIndex;
	    }
	    /**
	     * @param {?} elementIndex
	     * @return {?}
	     */
	    function getHandleEventMethodName(elementIndex) {
	        return "handleEvent_" + elementIndex;
	    }

	    var ViewQueryValues = (function () {
	        /**
	         * @param {?} view
	         * @param {?} values
	         */
	        function ViewQueryValues(view, values) {
	            this.view = view;
	            this.values = values;
	        }
	        return ViewQueryValues;
	    }());
	    var CompileQuery = (function () {
	        /**
	         * @param {?} meta
	         * @param {?} queryList
	         * @param {?} ownerDirectiveExpression
	         * @param {?} view
	         */
	        function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
	            this.meta = meta;
	            this.queryList = queryList;
	            this.ownerDirectiveExpression = ownerDirectiveExpression;
	            this.view = view;
	            this._values = new ViewQueryValues(view, []);
	        }
	        /**
	         * @param {?} value
	         * @param {?} view
	         * @return {?}
	         */
	        CompileQuery.prototype.addValue = function (value, view) {
	            var /** @type {?} */ currentView = view;
	            var /** @type {?} */ elPath = [];
	            while (currentView && currentView !== this.view) {
	                var /** @type {?} */ parentEl = currentView.declarationElement;
	                elPath.unshift(parentEl);
	                currentView = parentEl.view;
	            }
	            var /** @type {?} */ queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
	            var /** @type {?} */ viewValues = this._values;
	            elPath.forEach(function (el) {
	                var /** @type {?} */ last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
	                if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
	                    viewValues = last;
	                }
	                else {
	                    var /** @type {?} */ newViewValues = new ViewQueryValues(el.embeddedView, []);
	                    viewValues.values.push(newViewValues);
	                    viewValues = newViewValues;
	                }
	            });
	            viewValues.values.push(value);
	            if (elPath.length > 0) {
	                view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
	            }
	        };
	        /**
	         * @return {?}
	         */
	        CompileQuery.prototype._isStatic = function () {
	            return !this._values.values.some(function (value) { return value instanceof ViewQueryValues; });
	        };
	        /**
	         * @param {?} targetStaticMethod
	         * @param {?} targetDynamicMethod
	         * @return {?}
	         */
	        CompileQuery.prototype.generateStatements = function (targetStaticMethod, targetDynamicMethod) {
	            var /** @type {?} */ values = createQueryValues(this._values);
	            var /** @type {?} */ updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];
	            if (this.ownerDirectiveExpression) {
	                var /** @type {?} */ valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
	                updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
	            }
	            if (!this.meta.first) {
	                updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
	            }
	            if (this.meta.first && this._isStatic()) {
	                // for queries that don't change and the user asked for a single element,
	                // set it immediately. That is e.g. needed for querying for ViewContainerRefs, ...
	                // we don't do this for QueryLists for now as this would break the timing when
	                // we call QueryList listeners...
	                targetStaticMethod.addStmts(updateStmts);
	            }
	            else {
	                targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));
	            }
	        };
	        return CompileQuery;
	    }());
	    /**
	     * @param {?} viewValues
	     * @return {?}
	     */
	    function createQueryValues(viewValues) {
	        return ListWrapper.flatten(viewValues.values.map(function (entry) {
	            if (entry instanceof ViewQueryValues) {
	                return mapNestedViews(entry.view.declarationElement.viewContainer, entry.view, createQueryValues(entry));
	            }
	            else {
	                return (entry);
	            }
	        }));
	    }
	    /**
	     * @param {?} viewContainer
	     * @param {?} view
	     * @param {?} expressions
	     * @return {?}
	     */
	    function mapNestedViews(viewContainer, view, expressions) {
	        var /** @type {?} */ adjustedExpressions = expressions.map(function (expr) { return replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr); });
	        return viewContainer.callMethod('mapNestedViews', [
	            variable(view.className),
	            fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)
	        ]);
	    }
	    /**
	     * @param {?} propertyName
	     * @param {?} compileView
	     * @return {?}
	     */
	    function createQueryList(propertyName, compileView) {
	        compileView.fields.push(new ClassField(propertyName, importType(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));
	        var /** @type {?} */ expr = THIS_EXPR.prop(propertyName);
	        compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName)
	            .set(importExpr(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE]).instantiate([]))
	            .toStmt());
	        return expr;
	    }
	    /**
	     * @param {?} map
	     * @param {?} query
	     * @return {?}
	     */
	    function addQueryToTokenMap(map, query) {
	        query.meta.selectors.forEach(function (selector) {
	            var /** @type {?} */ entry = map.get(tokenReference(selector));
	            if (!entry) {
	                entry = [];
	                map.set(tokenReference(selector), entry);
	            }
	            entry.push(query);
	        });
	    }

	    var ViewTypeEnum = (function () {
	        function ViewTypeEnum() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ViewTypeEnum.fromValue = function (value) {
	            return createEnumExpression(Identifiers.ViewType, value);
	        };
	        return ViewTypeEnum;
	    }());
	    var ViewEncapsulationEnum = (function () {
	        function ViewEncapsulationEnum() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ViewEncapsulationEnum.fromValue = function (value) {
	            return createEnumExpression(Identifiers.ViewEncapsulation, value);
	        };
	        return ViewEncapsulationEnum;
	    }());
	    var ChangeDetectorStatusEnum = (function () {
	        function ChangeDetectorStatusEnum() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ChangeDetectorStatusEnum.fromValue = function (value) {
	            return createEnumExpression(Identifiers.ChangeDetectorStatus, value);
	        };
	        return ChangeDetectorStatusEnum;
	    }());
	    var ViewConstructorVars = (function () {
	        function ViewConstructorVars() {
	        }
	        ViewConstructorVars.viewUtils = variable('viewUtils');
	        ViewConstructorVars.parentView = variable('parentView');
	        ViewConstructorVars.parentIndex = variable('parentIndex');
	        ViewConstructorVars.parentElement = variable('parentElement');
	        return ViewConstructorVars;
	    }());
	    var ViewProperties = (function () {
	        function ViewProperties() {
	        }
	        ViewProperties.renderer = THIS_EXPR.prop('renderer');
	        ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');
	        return ViewProperties;
	    }());
	    var InjectMethodVars$1 = (function () {
	        function InjectMethodVars() {
	        }
	        InjectMethodVars.token = variable('token');
	        InjectMethodVars.requestNodeIndex = variable('requestNodeIndex');
	        InjectMethodVars.notFoundResult = variable('notFoundResult');
	        return InjectMethodVars;
	    }());
	    var DetectChangesVars = (function () {
	        function DetectChangesVars() {
	        }
	        DetectChangesVars.throwOnChange = variable("throwOnChange");
	        DetectChangesVars.changes = variable("changes");
	        DetectChangesVars.changed = variable("changed");
	        return DetectChangesVars;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var ViewClassDependency = (function () {
	        /**
	         * @param {?} comp
	         * @param {?} name
	         * @param {?} placeholder
	         */
	        function ViewClassDependency(comp, name, placeholder) {
	            this.comp = comp;
	            this.name = name;
	            this.placeholder = placeholder;
	        }
	        return ViewClassDependency;
	    }());
	    var ComponentFactoryDependency$1 = (function () {
	        /**
	         * @param {?} comp
	         * @param {?} placeholder
	         */
	        function ComponentFactoryDependency(comp, placeholder) {
	            this.comp = comp;
	            this.placeholder = placeholder;
	        }
	        return ComponentFactoryDependency;
	    }());
	    var DirectiveWrapperDependency = (function () {
	        /**
	         * @param {?} dir
	         * @param {?} name
	         * @param {?} placeholder
	         */
	        function DirectiveWrapperDependency(dir, name, placeholder) {
	            this.dir = dir;
	            this.name = name;
	            this.placeholder = placeholder;
	        }
	        return DirectiveWrapperDependency;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$24 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var CompileNode = (function () {
	        /**
	         * @param {?} parent
	         * @param {?} view
	         * @param {?} nodeIndex
	         * @param {?} renderNode
	         * @param {?} sourceAst
	         */
	        function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
	            this.parent = parent;
	            this.view = view;
	            this.nodeIndex = nodeIndex;
	            this.renderNode = renderNode;
	            this.sourceAst = sourceAst;
	        }
	        /**
	         * @return {?}
	         */
	        CompileNode.prototype.isNull = function () { return !this.renderNode; };
	        /**
	         * @return {?}
	         */
	        CompileNode.prototype.isRootElement = function () { return this.view != this.parent.view; };
	        return CompileNode;
	    }());
	    var CompileElement = (function (_super) {
	        __extends$24(CompileElement, _super);
	        /**
	         * @param {?} parent
	         * @param {?} view
	         * @param {?} nodeIndex
	         * @param {?} renderNode
	         * @param {?} sourceAst
	         * @param {?} component
	         * @param {?} _directives
	         * @param {?} _resolvedProvidersArray
	         * @param {?} hasViewContainer
	         * @param {?} hasEmbeddedView
	         * @param {?} references
	         */
	        function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
	            var _this = this;
	            _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
	            this.component = component;
	            this._directives = _directives;
	            this._resolvedProvidersArray = _resolvedProvidersArray;
	            this.hasViewContainer = hasViewContainer;
	            this.hasEmbeddedView = hasEmbeddedView;
	            this.compViewExpr = null;
	            this.instances = new Map();
	            this.directiveWrapperInstance = new Map();
	            this._queryCount = 0;
	            this._queries = new Map();
	            this.contentNodesByNgContentIndex = null;
	            this.referenceTokens = {};
	            references.forEach(function (ref) { return _this.referenceTokens[ref.name] = ref.value; });
	            this.elementRef =
	                importExpr(createIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);
	            this.instances.set(resolveIdentifier(Identifiers.ElementRef), this.elementRef);
	            this.instances.set(resolveIdentifier(Identifiers.Injector), THIS_EXPR.callMethod('injector', [literal(this.nodeIndex)]));
	            this.instances.set(resolveIdentifier(Identifiers.Renderer), THIS_EXPR.prop('renderer'));
	            if (this.hasViewContainer || this.hasEmbeddedView) {
	                this._createViewContainer();
	            }
	            if (this.component) {
	                this._createComponentFactoryResolver();
	            }
	        }
	        /**
	         * @return {?}
	         */
	        CompileElement.createNull = function () {
	            return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype._createViewContainer = function () {
	            var /** @type {?} */ fieldName = "_vc_" + this.nodeIndex;
	            var /** @type {?} */ parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
	            // private is fine here as no child view will reference a ViewContainer
	            this.view.fields.push(new ClassField(fieldName, importType(createIdentifier(Identifiers.ViewContainer)), [StmtModifier.Private]));
	            var /** @type {?} */ statement = THIS_EXPR.prop(fieldName)
	                .set(importExpr(createIdentifier(Identifiers.ViewContainer)).instantiate([
	                literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode
	            ]))
	                .toStmt();
	            this.view.createMethod.addStmt(statement);
	            this.viewContainer = THIS_EXPR.prop(fieldName);
	            this.instances.set(resolveIdentifier(Identifiers.ViewContainer), this.viewContainer);
	            this.view.viewContainers.push(this.viewContainer);
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype._createComponentFactoryResolver = function () {
	            var _this = this;
	            var /** @type {?} */ entryComponents = this.component.entryComponents.map(function (entryComponent) {
	                var /** @type {?} */ id = { reference: null };
	                _this.view.targetDependencies.push(new ComponentFactoryDependency$1(entryComponent, id));
	                return id;
	            });
	            if (!entryComponents || entryComponents.length === 0) {
	                return;
	            }
	            var /** @type {?} */ createComponentFactoryResolverExpr = importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([
	                literalArr(entryComponents.map(function (entryComponent) { return importExpr(entryComponent); })),
	                injectFromViewParentInjector(this.view, createIdentifierToken(Identifiers.ComponentFactoryResolver), false)
	            ]);
	            var /** @type {?} */ provider = {
	                token: createIdentifierToken(Identifiers.ComponentFactoryResolver),
	                useValue: createComponentFactoryResolverExpr
	            };
	            // Add ComponentFactoryResolver as first provider as it does not have deps on other providers
	            // ProviderAstType.PrivateService as only the component and its view can see it,
	            // but nobody else
	            this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
	        };
	        /**
	         * @param {?} compViewExpr
	         * @return {?}
	         */
	        CompileElement.prototype.setComponentView = function (compViewExpr) {
	            this.compViewExpr = compViewExpr;
	            this.contentNodesByNgContentIndex =
	                new Array(this.component.template.ngContentSelectors.length);
	            for (var /** @type {?} */ i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
	                this.contentNodesByNgContentIndex[i] = [];
	            }
	        };
	        /**
	         * @param {?} embeddedView
	         * @return {?}
	         */
	        CompileElement.prototype.setEmbeddedView = function (embeddedView) {
	            this.embeddedView = embeddedView;
	            if (isPresent(embeddedView)) {
	                var /** @type {?} */ createTemplateRefExpr = importExpr(createIdentifier(Identifiers.TemplateRef_)).instantiate([
	                    THIS_EXPR, literal(this.nodeIndex), this.renderNode
	                ]);
	                var /** @type {?} */ provider = {
	                    token: createIdentifierToken(Identifiers.TemplateRef),
	                    useValue: createTemplateRefExpr
	                };
	                // Add TemplateRef as first provider as it does not have deps on other providers
	                this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
	            }
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype.beforeChildren = function () {
	            var _this = this;
	            if (this.hasViewContainer) {
	                this.instances.set(resolveIdentifier(Identifiers.ViewContainerRef), this.viewContainer.prop('vcRef'));
	            }
	            this._resolvedProviders = new Map();
	            this._resolvedProvidersArray.forEach(function (provider) { return _this._resolvedProviders.set(tokenReference(provider.token), provider); });
	            // create all the provider instances, some in the view constructor,
	            // some as getters. We rely on the fact that they are already sorted topologically.
	            Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
	                var /** @type {?} */ isDirectiveWrapper = resolvedProvider.providerType === ProviderAstType.Component ||
	                    resolvedProvider.providerType === ProviderAstType.Directive;
	                var /** @type {?} */ providerValueExpressions = resolvedProvider.providers.map(function (provider) {
	                    if (provider.useExisting) {
	                        return _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting });
	                    }
	                    else if (provider.useFactory) {
	                        var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                        var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                        return importExpr(provider.useFactory).callFn(depsExpr);
	                    }
	                    else if (provider.useClass) {
	                        var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                        var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                        if (isDirectiveWrapper) {
	                            var /** @type {?} */ directiveWrapperIdentifier = { reference: null };
	                            _this.view.targetDependencies.push(new DirectiveWrapperDependency(provider.useClass, DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass), directiveWrapperIdentifier));
	                            return DirectiveWrapperExpressions.create(directiveWrapperIdentifier, depsExpr);
	                        }
	                        else {
	                            return importExpr(provider.useClass)
	                                .instantiate(depsExpr, importType(provider.useClass));
	                        }
	                    }
	                    else {
	                        return convertValueToOutputAst(provider.useValue);
	                    }
	                });
	                var /** @type {?} */ propName = "_" + tokenName(resolvedProvider.token) + "_" + _this.nodeIndex + "_" + _this.instances.size;
	                var /** @type {?} */ instance = createProviderProperty(propName, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
	                if (isDirectiveWrapper) {
	                    _this.directiveWrapperInstance.set(tokenReference(resolvedProvider.token), instance);
	                    _this.instances.set(tokenReference(resolvedProvider.token), DirectiveWrapperExpressions.context(instance));
	                }
	                else {
	                    _this.instances.set(tokenReference(resolvedProvider.token), instance);
	                }
	            });
	            var _loop_1 = function(i) {
	                var /** @type {?} */ directive = this_1._directives[i];
	                var /** @type {?} */ directiveInstance = this_1.instances.get(tokenReference(identifierToken(directive.type)));
	                directive.queries.forEach(function (queryMeta) { _this._addQuery(queryMeta, directiveInstance); });
	            };
	            var this_1 = this;
	            for (var /** @type {?} */ i = 0; i < this._directives.length; i++) {
	                _loop_1(i);
	            }
	            Object.keys(this.referenceTokens).forEach(function (varName) {
	                var /** @type {?} */ token = _this.referenceTokens[varName];
	                var /** @type {?} */ varValue;
	                if (token) {
	                    varValue = _this.instances.get(tokenReference(token));
	                }
	                else {
	                    varValue = _this.renderNode;
	                }
	                _this.view.locals.set(varName, varValue);
	            });
	        };
	        /**
	         * @param {?} childNodeCount
	         * @return {?}
	         */
	        CompileElement.prototype.afterChildren = function (childNodeCount) {
	            var _this = this;
	            Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
	                // Note: afterChildren is called after recursing into children.
	                // This is good so that an injector match in an element that is closer to a requesting element
	                // matches first.
	                var /** @type {?} */ providerExpr = _this.instances.get(tokenReference(resolvedProvider.token));
	                // Note: view providers are only visible on the injector of that element.
	                // This is not fully correct as the rules during codegen don't allow a directive
	                // to get hold of a view provdier on the same element. We still do this semantic
	                // as it simplifies our model to having only one runtime injector per element.
	                var /** @type {?} */ providerChildNodeCount = resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount;
	                _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
	            });
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype.finish = function () {
	            var _this = this;
	            Array.from(this._queries.values())
	                .forEach(function (queries) { return queries.forEach(function (q) { return q.generateStatements(_this.view.createMethod, _this.view.updateContentQueriesMethod); }); });
	        };
	        /**
	         * @param {?} ngContentIndex
	         * @param {?} nodeExpr
	         * @return {?}
	         */
	        CompileElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {
	            this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype.getComponent = function () {
	            return isPresent(this.component) ?
	                this.instances.get(tokenReference(identifierToken(this.component.type))) :
	                null;
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype.getProviderTokens = function () {
	            return Array.from(this._resolvedProviders.values()).map(function (provider) { return provider.token; });
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        CompileElement.prototype.getQueriesFor = function (token) {
	            var /** @type {?} */ result = [];
	            var /** @type {?} */ currentEl = this;
	            var /** @type {?} */ distance = 0;
	            var /** @type {?} */ queries;
	            while (!currentEl.isNull()) {
	                queries = currentEl._queries.get(tokenReference(token));
	                if (isPresent(queries)) {
	                    result.push.apply(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));
	                }
	                if (currentEl._directives.length > 0) {
	                    distance++;
	                }
	                currentEl = currentEl.parent;
	            }
	            queries = this.view.componentView.viewQueries.get(tokenReference(token));
	            if (isPresent(queries)) {
	                result.push.apply(result, queries);
	            }
	            return result;
	        };
	        /**
	         * @param {?} queryMeta
	         * @param {?} directiveInstance
	         * @return {?}
	         */
	        CompileElement.prototype._addQuery = function (queryMeta, directiveInstance) {
	            var /** @type {?} */ propName = "_query_" + tokenName(queryMeta.selectors[0]) + "_" + this.nodeIndex + "_" + this._queryCount++;
	            var /** @type {?} */ queryList = createQueryList(propName, this.view);
	            var /** @type {?} */ query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
	            addQueryToTokenMap(this._queries, query);
	            return query;
	        };
	        /**
	         * @param {?} requestingProviderType
	         * @param {?} dep
	         * @return {?}
	         */
	        CompileElement.prototype._getLocalDependency = function (requestingProviderType, dep) {
	            var /** @type {?} */ result = null;
	            if (isPresent(dep.token)) {
	                // access builtins with special visibility
	                if (!result) {
	                    if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {
	                        if (requestingProviderType === ProviderAstType.Component) {
	                            return this.compViewExpr.prop('ref');
	                        }
	                        else {
	                            return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);
	                        }
	                    }
	                }
	                // access regular providers on the element
	                if (!result) {
	                    var /** @type {?} */ resolvedProvider = this._resolvedProviders.get(tokenReference(dep.token));
	                    // don't allow directives / public services to access private services.
	                    // only components and private services can access private services.
	                    if (resolvedProvider && (requestingProviderType === ProviderAstType.Directive ||
	                        requestingProviderType === ProviderAstType.PublicService) &&
	                        resolvedProvider.providerType === ProviderAstType.PrivateService) {
	                        return null;
	                    }
	                    result = this.instances.get(tokenReference(dep.token));
	                }
	            }
	            return result;
	        };
	        /**
	         * @param {?} requestingProviderType
	         * @param {?} dep
	         * @return {?}
	         */
	        CompileElement.prototype._getDependency = function (requestingProviderType, dep) {
	            var /** @type {?} */ currElement = this;
	            var /** @type {?} */ result = null;
	            if (dep.isValue) {
	                result = literal(dep.value);
	            }
	            if (!result && !dep.isSkipSelf) {
	                result = this._getLocalDependency(requestingProviderType, dep);
	            }
	            // check parent elements
	            while (!result && !currElement.parent.isNull()) {
	                currElement = currElement.parent;
	                result = currElement._getLocalDependency(ProviderAstType.PublicService, { token: dep.token });
	            }
	            if (!result) {
	                result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);
	            }
	            if (!result) {
	                result = NULL_EXPR;
	            }
	            return getPropertyInView(result, this.view, currElement.view);
	        };
	        return CompileElement;
	    }(CompileNode));
	    /**
	     * @param {?} nodeIndex
	     * @param {?} childNodeCount
	     * @param {?} provider
	     * @param {?} providerExpr
	     * @return {?}
	     */
	    function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
	        var /** @type {?} */ indexCondition;
	        if (childNodeCount > 0) {
	            indexCondition = literal(nodeIndex)
	                .lowerEquals(InjectMethodVars$1.requestNodeIndex)
	                .and(InjectMethodVars$1.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));
	        }
	        else {
	            indexCondition = literal(nodeIndex).identical(InjectMethodVars$1.requestNodeIndex);
	        }
	        return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
	    }
	    /**
	     * @param {?} propName
	     * @param {?} providerValueExpressions
	     * @param {?} isMulti
	     * @param {?} isEager
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function createProviderProperty(propName, providerValueExpressions, isMulti, isEager, compileElement) {
	        var /** @type {?} */ view = compileElement.view;
	        var /** @type {?} */ resolvedProviderValueExpr;
	        var /** @type {?} */ type;
	        if (isMulti) {
	            resolvedProviderValueExpr = literalArr(providerValueExpressions);
	            type = new ArrayType(DYNAMIC_TYPE);
	        }
	        else {
	            resolvedProviderValueExpr = providerValueExpressions[0];
	            type = providerValueExpressions[0].type;
	        }
	        if (!type) {
	            type = DYNAMIC_TYPE;
	        }
	        if (isEager) {
	            view.fields.push(new ClassField(propName, type));
	            view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	        }
	        else {
	            var /** @type {?} */ internalField = "_" + propName;
	            view.fields.push(new ClassField(internalField, type));
	            var /** @type {?} */ getter = new CompileMethod(view);
	            getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	            // Note: Equals is important for JS so that it also checks the undefined case!
	            getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
	            getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));
	            view.getters.push(new ClassGetter(propName, getter.finish(), type));
	        }
	        return THIS_EXPR.prop(propName);
	    }

	    var CompilePipe = (function () {
	        /**
	         * @param {?} view
	         * @param {?} meta
	         */
	        function CompilePipe(view, meta) {
	            var _this = this;
	            this.view = view;
	            this.meta = meta;
	            this._purePipeProxyCount = 0;
	            this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
	            var deps = this.meta.type.diDeps.map(function (diDep) {
	                if (tokenReference(diDep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {
	                    return getPropertyInView(THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
	                }
	                return injectFromViewParentInjector(view, diDep.token, false);
	            });
	            this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));
	            this.view.createMethod.resetDebugInfo(null, null);
	            this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name)
	                .set(importExpr(this.meta.type).instantiate(deps))
	                .toStmt());
	        }
	        /**
	         * @param {?} view
	         * @param {?} name
	         * @param {?} args
	         * @return {?}
	         */
	        CompilePipe.call = function (view, name, args) {
	            var /** @type {?} */ compView = view.componentView;
	            var /** @type {?} */ meta = _findPipeMeta(compView, name);
	            var /** @type {?} */ pipe;
	            if (meta.pure) {
	                // pure pipes live on the component view
	                pipe = compView.purePipes.get(name);
	                if (!pipe) {
	                    pipe = new CompilePipe(compView, meta);
	                    compView.purePipes.set(name, pipe);
	                    compView.pipes.push(pipe);
	                }
	            }
	            else {
	                // Non pure pipes live on the view that called it
	                pipe = new CompilePipe(view, meta);
	                view.pipes.push(pipe);
	            }
	            return pipe._call(view, args);
	        };
	        Object.defineProperty(CompilePipe.prototype, "pure", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.meta.pure; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} callingView
	         * @param {?} args
	         * @return {?}
	         */
	        CompilePipe.prototype._call = function (callingView, args) {
	            if (this.meta.pure) {
	                // PurePipeProxies live on the view that called them.
	                var /** @type {?} */ purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
	                var /** @type {?} */ pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
	                createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform')
	                    .callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, { fields: callingView.fields, ctorStmts: callingView.createMethod });
	                return importExpr(createIdentifier(Identifiers.castByValue))
	                    .callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')])
	                    .callFn(args);
	            }
	            else {
	                return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
	            }
	        };
	        return CompilePipe;
	    }());
	    /**
	     * @param {?} view
	     * @param {?} name
	     * @return {?}
	     */
	    function _findPipeMeta(view, name) {
	        var /** @type {?} */ pipeMeta = null;
	        for (var /** @type {?} */ i = view.pipeMetas.length - 1; i >= 0; i--) {
	            var /** @type {?} */ localPipeMeta = view.pipeMetas[i];
	            if (localPipeMeta.name == name) {
	                pipeMeta = localPipeMeta;
	                break;
	            }
	        }
	        if (!pipeMeta) {
	            throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
	        }
	        return pipeMeta;
	    }

	    var CompileViewRootNodeType = {};
	    CompileViewRootNodeType.Node = 0;
	    CompileViewRootNodeType.ViewContainer = 1;
	    CompileViewRootNodeType.NgContent = 2;
	    CompileViewRootNodeType[CompileViewRootNodeType.Node] = "Node";
	    CompileViewRootNodeType[CompileViewRootNodeType.ViewContainer] = "ViewContainer";
	    CompileViewRootNodeType[CompileViewRootNodeType.NgContent] = "NgContent";
	    var CompileViewRootNode = (function () {
	        /**
	         * @param {?} type
	         * @param {?} expr
	         * @param {?=} ngContentIndex
	         */
	        function CompileViewRootNode(type, expr, ngContentIndex) {
	            this.type = type;
	            this.expr = expr;
	            this.ngContentIndex = ngContentIndex;
	        }
	        return CompileViewRootNode;
	    }());
	    var CompileView = (function () {
	        /**
	         * @param {?} component
	         * @param {?} genConfig
	         * @param {?} pipeMetas
	         * @param {?} styles
	         * @param {?} animations
	         * @param {?} viewIndex
	         * @param {?} declarationElement
	         * @param {?} templateVariableBindings
	         * @param {?} targetDependencies
	         */
	        function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings, targetDependencies) {
	            var _this = this;
	            this.component = component;
	            this.genConfig = genConfig;
	            this.pipeMetas = pipeMetas;
	            this.styles = styles;
	            this.animations = animations;
	            this.viewIndex = viewIndex;
	            this.declarationElement = declarationElement;
	            this.templateVariableBindings = templateVariableBindings;
	            this.targetDependencies = targetDependencies;
	            this.viewChildren = [];
	            this.nodes = [];
	            this.rootNodes = [];
	            this.lastRenderNode = NULL_EXPR;
	            this.viewContainers = [];
	            this.methods = [];
	            this.ctorStmts = [];
	            this.fields = [];
	            this.getters = [];
	            this.disposables = [];
	            this.purePipes = new Map();
	            this.pipes = [];
	            this.locals = new Map();
	            this.literalArrayCount = 0;
	            this.literalMapCount = 0;
	            this.pipeCount = 0;
	            this.createMethod = new CompileMethod(this);
	            this.animationBindingsMethod = new CompileMethod(this);
	            this.injectorGetMethod = new CompileMethod(this);
	            this.updateContentQueriesMethod = new CompileMethod(this);
	            this.dirtyParentQueriesMethod = new CompileMethod(this);
	            this.updateViewQueriesMethod = new CompileMethod(this);
	            this.detectChangesInInputsMethod = new CompileMethod(this);
	            this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
	            this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
	            this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
	            this.destroyMethod = new CompileMethod(this);
	            this.detachMethod = new CompileMethod(this);
	            this.viewType = getViewType(component, viewIndex);
	            this.className = getViewClassName(component, viewIndex);
	            this.classType = expressionType(variable(this.className));
	            this.classExpr = variable(this.className);
	            if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
	                this.componentView = this;
	            }
	            else {
	                this.componentView = this.declarationElement.view.componentView;
	            }
	            this.componentContext =
	                getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);
	            var viewQueries = new Map();
	            if (this.viewType === ViewType.COMPONENT) {
	                var directiveInstance_1 = THIS_EXPR.prop('context');
	                this.component.viewQueries.forEach(function (queryMeta, queryIndex) {
	                    var propName = "_viewQuery_" + tokenName(queryMeta.selectors[0]) + "_" + queryIndex;
	                    var queryList = createQueryList(propName, _this);
	                    var query = new CompileQuery(queryMeta, queryList, directiveInstance_1, _this);
	                    addQueryToTokenMap(viewQueries, query);
	                });
	            }
	            this.viewQueries = viewQueries;
	            templateVariableBindings.forEach(function (entry) { _this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0])); });
	            if (!this.declarationElement.isNull()) {
	                this.declarationElement.setEmbeddedView(this);
	            }
	        }
	        /**
	         * @param {?} name
	         * @param {?} input
	         * @param {?} args
	         * @return {?}
	         */
	        CompileView.prototype.callPipe = function (name, input, args) {
	            return CompilePipe.call(this, name, [input].concat(args));
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        CompileView.prototype.getLocal = function (name) {
	            if (name == EventHandlerVars.event.name) {
	                return EventHandlerVars.event;
	            }
	            var /** @type {?} */ currView = this;
	            var /** @type {?} */ result = currView.locals.get(name);
	            while (!result && isPresent(currView.declarationElement.view)) {
	                currView = currView.declarationElement.view;
	                result = currView.locals.get(name);
	            }
	            if (isPresent(result)) {
	                return getPropertyInView(result, this, currView);
	            }
	            else {
	                return null;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        CompileView.prototype.finish = function () {
	            var _this = this;
	            Array.from(this.viewQueries.values())
	                .forEach(function (queries) { return queries.forEach(function (q) { return q.generateStatements(_this.createMethod, _this.updateViewQueriesMethod); }); });
	        };
	        return CompileView;
	    }());
	    /**
	     * @param {?} component
	     * @param {?} embeddedTemplateIndex
	     * @return {?}
	     */
	    function getViewType(component, embeddedTemplateIndex) {
	        if (embeddedTemplateIndex > 0) {
	            return ViewType.EMBEDDED;
	        }
	        if (component.isHost) {
	            return ViewType.HOST;
	        }
	        return ViewType.COMPONENT;
	    }

	    /**
	     * @param {?} boundEvents
	     * @param {?} directives
	     * @param {?} compileElement
	     * @param {?} bindToRenderer
	     * @return {?}
	     */
	    function bindOutputs(boundEvents, directives, compileElement, bindToRenderer) {
	        var /** @type {?} */ usedEvents = collectEvents(boundEvents, directives);
	        if (!usedEvents.size) {
	            return false;
	        }
	        if (bindToRenderer) {
	            subscribeToRenderEvents(usedEvents, compileElement);
	        }
	        subscribeToDirectiveEvents(usedEvents, directives, compileElement);
	        generateHandleEventMethod(boundEvents, directives, compileElement);
	        return true;
	    }
	    /**
	     * @param {?} boundEvents
	     * @param {?} directives
	     * @return {?}
	     */
	    function collectEvents(boundEvents, directives) {
	        var /** @type {?} */ usedEvents = new Map();
	        boundEvents.forEach(function (event) { usedEvents.set(event.fullName, event); });
	        directives.forEach(function (dirAst) {
	            dirAst.hostEvents.forEach(function (event) { usedEvents.set(event.fullName, event); });
	        });
	        return usedEvents;
	    }
	    /**
	     * @param {?} usedEvents
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function subscribeToRenderEvents(usedEvents, compileElement) {
	        var /** @type {?} */ eventAndTargetExprs = [];
	        usedEvents.forEach(function (event) {
	            if (!event.phase) {
	                eventAndTargetExprs.push(literal(event.name), literal(event.target));
	            }
	        });
	        if (eventAndTargetExprs.length) {
	            var /** @type {?} */ disposableVar = variable("disposable_" + compileElement.view.disposables.length);
	            compileElement.view.disposables.push(disposableVar);
	            compileElement.view.createMethod.addStmt(disposableVar
	                .set(importExpr(createIdentifier(Identifiers.subscribeToRenderElement)).callFn([
	                THIS_EXPR, compileElement.renderNode, createInlineArray(eventAndTargetExprs),
	                handleEventExpr(compileElement)
	            ]))
	                .toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
	        }
	    }
	    /**
	     * @param {?} usedEvents
	     * @param {?} directives
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function subscribeToDirectiveEvents(usedEvents, directives, compileElement) {
	        var /** @type {?} */ usedEventNames = Array.from(usedEvents.keys());
	        directives.forEach(function (dirAst) {
	            var /** @type {?} */ dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
	            compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive, dirAst.hostProperties, usedEventNames, dirWrapper, THIS_EXPR, handleEventExpr(compileElement)));
	        });
	    }
	    /**
	     * @param {?} boundEvents
	     * @param {?} directives
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function generateHandleEventMethod(boundEvents, directives, compileElement) {
	        var /** @type {?} */ hasComponentHostListener = directives.some(function (dirAst) { return dirAst.hostEvents.some(function (event) { return dirAst.directive.isComponent; }); });
	        var /** @type {?} */ markPathToRootStart = hasComponentHostListener ? compileElement.compViewExpr : THIS_EXPR;
	        var /** @type {?} */ handleEventStmts = new CompileMethod(compileElement.view);
	        handleEventStmts.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	        handleEventStmts.push(markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt());
	        var /** @type {?} */ eventNameVar = variable('eventName');
	        var /** @type {?} */ resultVar = variable('result');
	        handleEventStmts.push(resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE));
	        directives.forEach(function (dirAst, dirIdx) {
	            var /** @type {?} */ dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
	            if (dirAst.hostEvents.length > 0) {
	                handleEventStmts.push(resultVar
	                    .set(DirectiveWrapperExpressions
	                    .handleEvent(dirAst.hostEvents, dirWrapper, eventNameVar, EventHandlerVars.event)
	                    .and(resultVar))
	                    .toStmt());
	            }
	        });
	        boundEvents.forEach(function (renderEvent, renderEventIdx) {
	            var /** @type {?} */ evalResult = convertActionBinding(compileElement.view, compileElement.view, compileElement.view.componentContext, renderEvent.handler, "sub_" + renderEventIdx);
	            var /** @type {?} */ trueStmts = evalResult.stmts;
	            if (evalResult.preventDefault) {
	                trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
	            }
	            // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
	            handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)), trueStmts));
	        });
	        handleEventStmts.push(new ReturnStatement(resultVar));
	        compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex), [
	            new FnParam(eventNameVar.name, STRING_TYPE),
	            new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)
	        ], handleEventStmts.finish(), BOOL_TYPE));
	    }
	    /**
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function handleEventExpr(compileElement) {
	        var /** @type {?} */ handleEventMethodName = getHandleEventMethodName(compileElement.nodeIndex);
	        return THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(handleEventMethodName)]);
	    }

	    var /** @type {?} */ STATE_IS_NEVER_CHECKED = THIS_EXPR.prop('numberOfChecks').identical(new LiteralExpr(0));
	    var /** @type {?} */ NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange);
	    /**
	     * @param {?} directiveMeta
	     * @param {?} directiveInstance
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	        var /** @type {?} */ view = compileElement.view;
	        var /** @type {?} */ lifecycleHooks = directiveMeta.type.lifecycleHooks;
	        var /** @type {?} */ afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
	        afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	        if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
	            afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
	        }
	        if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
	            afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
	        }
	    }
	    /**
	     * @param {?} directiveMeta
	     * @param {?} directiveInstance
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	        var /** @type {?} */ view = compileElement.view;
	        var /** @type {?} */ lifecycleHooks = directiveMeta.type.lifecycleHooks;
	        var /** @type {?} */ afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
	        afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	        if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
	            afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
	        }
	        if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
	            afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
	        }
	    }
	    /**
	     * @param {?} dir
	     * @param {?} directiveWrapperIntance
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindDirectiveWrapperLifecycleCallbacks(dir, directiveWrapperIntance, compileElement) {
	        compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive, directiveWrapperIntance));
	        compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties, directiveWrapperIntance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode));
	    }
	    /**
	     * @param {?} provider
	     * @param {?} providerInstance
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
	        var /** @type {?} */ onDestroyMethod = compileElement.view.destroyMethod;
	        onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	        if (provider.providerType !== ProviderAstType.Directive &&
	            provider.providerType !== ProviderAstType.Component &&
	            provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	            onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
	        }
	    }
	    /**
	     * @param {?} pipeMeta
	     * @param {?} pipeInstance
	     * @param {?} view
	     * @return {?}
	     */
	    function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
	        var /** @type {?} */ onDestroyMethod = view.destroyMethod;
	        if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	            onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
	        }
	    }

	    /**
	     * @param {?} boundText
	     * @param {?} compileNode
	     * @param {?} view
	     * @return {?}
	     */
	    function bindRenderText(boundText, compileNode, view) {
	        var /** @type {?} */ valueField = createCheckBindingField(view);
	        var /** @type {?} */ evalResult = convertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId);
	        if (!evalResult) {
	            return null;
	        }
	        view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
	        view.detectChangesRenderPropertiesMethod.addStmts(createCheckBindingStmt(evalResult, valueField.expression, DetectChangesVars.throwOnChange, [THIS_EXPR.prop('renderer')
	                .callMethod('setText', [compileNode.renderNode, evalResult.currValExpr])
	                .toStmt()]));
	    }
	    /**
	     * @param {?} boundProps
	     * @param {?} boundOutputs
	     * @param {?} hasEvents
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindRenderInputs(boundProps, boundOutputs, hasEvents, compileElement) {
	        var /** @type {?} */ view = compileElement.view;
	        var /** @type {?} */ renderNode = compileElement.renderNode;
	        boundProps.forEach(function (boundProp) {
	            var /** @type {?} */ bindingField = createCheckBindingField(view);
	            view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
	            var /** @type {?} */ evalResult = convertPropertyBinding(view, view, compileElement.view.componentContext, boundProp.value, bindingField.bindingId);
	            if (!evalResult) {
	                return;
	            }
	            var /** @type {?} */ checkBindingStmts = [];
	            var /** @type {?} */ compileMethod = view.detectChangesRenderPropertiesMethod;
	            switch (boundProp.type) {
	                case PropertyBindingType.Property:
	                case PropertyBindingType.Attribute:
	                case PropertyBindingType.Class:
	                case PropertyBindingType.Style:
	                    checkBindingStmts.push.apply(checkBindingStmts, writeToRenderer(THIS_EXPR, boundProp, renderNode, evalResult.currValExpr, view.genConfig.logBindingUpdate));
	                    break;
	                case PropertyBindingType.Animation:
	                    compileMethod = view.animationBindingsMethod;
	                    var _a = triggerAnimation(THIS_EXPR, THIS_EXPR, boundProp, boundOutputs, (hasEvents ? THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)) :
	                        importExpr(createIdentifier(Identifiers.noop)))
	                        .callMethod(BuiltinMethod.Bind, [THIS_EXPR]), compileElement.renderNode, evalResult.currValExpr, bindingField.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts;
	                    checkBindingStmts.push.apply(checkBindingStmts, updateStmts);
	                    view.detachMethod.addStmts(detachStmts);
	                    break;
	            }
	            compileMethod.addStmts(createCheckBindingStmt(evalResult, bindingField.expression, DetectChangesVars.throwOnChange, checkBindingStmts));
	        });
	    }
	    /**
	     * @param {?} directiveAst
	     * @param {?} directiveWrapperInstance
	     * @param {?} compileElement
	     * @param {?} elementName
	     * @param {?} schemaRegistry
	     * @return {?}
	     */
	    function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, elementName, schemaRegistry) {
	        // We need to provide the SecurityContext for properties that could need sanitization.
	        var /** @type {?} */ runtimeSecurityCtxExprs = directiveAst.hostProperties.filter(function (boundProp) { return boundProp.needsRuntimeSecurityContext; })
	            .map(function (boundProp) {
	            var /** @type {?} */ ctx;
	            switch (boundProp.type) {
	                case PropertyBindingType.Property:
	                    ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);
	                    break;
	                case PropertyBindingType.Attribute:
	                    ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);
	                    break;
	                default:
	                    throw new Error("Illegal state: Only property / attribute bindings can have an unknown security context! Binding " + boundProp.name);
	            }
	            return createEnumExpression(Identifiers.SecurityContext, ctx);
	        });
	        compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties, directiveWrapperInstance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange, runtimeSecurityCtxExprs));
	    }
	    /**
	     * @param {?} directiveAst
	     * @param {?} directiveWrapperInstance
	     * @param {?} dirIndex
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) {
	        var /** @type {?} */ view = compileElement.view;
	        var /** @type {?} */ detectChangesInInputsMethod = view.detectChangesInInputsMethod;
	        detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	        directiveAst.inputs.forEach(function (input, inputIdx) {
	            // Note: We can't use `fields.length` here, as we are not adding a field!
	            var /** @type {?} */ bindingId = compileElement.nodeIndex + "_" + dirIndex + "_" + inputIdx;
	            detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
	            var /** @type {?} */ evalResult = convertPropertyBinding(view, view, view.componentContext, input.value, bindingId);
	            if (!evalResult) {
	                return;
	            }
	            detectChangesInInputsMethod.addStmts(evalResult.stmts);
	            detectChangesInInputsMethod.addStmt(directiveWrapperInstance
	                .callMethod("check_" + input.directiveName, [
	                evalResult.currValExpr, DetectChangesVars.throwOnChange,
	                evalResult.forceUpdate || literal(false)
	            ])
	                .toStmt());
	        });
	        var /** @type {?} */ isOnPushComp = directiveAst.directive.isComponent &&
	            !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
	        var /** @type {?} */ directiveDetectChangesExpr = DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance, THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange);
	        var /** @type {?} */ directiveDetectChangesStmt = isOnPushComp ?
	            new IfStmt(directiveDetectChangesExpr, [compileElement.compViewExpr.callMethod('markAsCheckOnce', []).toStmt()]) :
	            directiveDetectChangesExpr.toStmt();
	        detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);
	    }

	    /**
	     * @param {?} ce
	     * @return {?}
	     */
	    function bindQueryValues(ce) {
	        var /** @type {?} */ queriesWithReads = [];
	        ce.getProviderTokens().forEach(function (token) {
	            var /** @type {?} */ queriesForProvider = ce.getQueriesFor(token);
	            queriesWithReads.push.apply(queriesWithReads, queriesForProvider.map(function (query) { return new _QueryWithRead(query, token); }));
	        });
	        Object.keys(ce.referenceTokens).forEach(function (varName) {
	            var /** @type {?} */ varToken = { value: varName };
	            queriesWithReads.push.apply(queriesWithReads, ce.getQueriesFor(varToken).map(function (query) { return new _QueryWithRead(query, varToken); }));
	        });
	        queriesWithReads.forEach(function (queryWithRead) {
	            var /** @type {?} */ value;
	            if (queryWithRead.read.identifier) {
	                // query for an identifier
	                value = ce.instances.get(tokenReference(queryWithRead.read));
	            }
	            else {
	                // query for a reference
	                var /** @type {?} */ token = ce.referenceTokens[queryWithRead.read.value];
	                if (token) {
	                    value = ce.instances.get(tokenReference(token));
	                }
	                else {
	                    value = ce.elementRef;
	                }
	            }
	            if (value) {
	                queryWithRead.query.addValue(value, ce.view);
	            }
	        });
	    }
	    var _QueryWithRead = (function () {
	        /**
	         * @param {?} query
	         * @param {?} match
	         */
	        function _QueryWithRead(query, match) {
	            this.query = query;
	            this.read = query.meta.read || match;
	        }
	        return _QueryWithRead;
	    }());

	    /**
	     * @param {?} view
	     * @param {?} parsedTemplate
	     * @param {?} schemaRegistry
	     * @return {?}
	     */
	    function bindView(view, parsedTemplate, schemaRegistry) {
	        var /** @type {?} */ visitor = new ViewBinderVisitor(view, schemaRegistry);
	        templateVisitAll(visitor, parsedTemplate);
	        view.pipes.forEach(function (pipe) { bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view); });
	    }
	    var ViewBinderVisitor = (function () {
	        /**
	         * @param {?} view
	         * @param {?} _schemaRegistry
	         */
	        function ViewBinderVisitor(view, _schemaRegistry) {
	            this.view = view;
	            this._schemaRegistry = _schemaRegistry;
	            this._nodeIndex = 0;
	        }
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitBoundText = function (ast, parent) {
	            var /** @type {?} */ node = this.view.nodes[this._nodeIndex++];
	            bindRenderText(ast, node, this.view);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitText = function (ast, parent) {
	            this._nodeIndex++;
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitNgContent = function (ast, parent) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitElement = function (ast, parent) {
	            var _this = this;
	            var /** @type {?} */ compileElement = (this.view.nodes[this._nodeIndex++]);
	            bindQueryValues(compileElement);
	            var /** @type {?} */ hasEvents = bindOutputs(ast.outputs, ast.directives, compileElement, true);
	            bindRenderInputs(ast.inputs, ast.outputs, hasEvents, compileElement);
	            ast.directives.forEach(function (directiveAst, dirIndex) {
	                var /** @type {?} */ directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	                bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
	                bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, ast.name, _this._schemaRegistry);
	            });
	            templateVisitAll(this, ast.children, compileElement);
	            // afterContent and afterView lifecycles need to be called bottom up
	            // so that children are notified before parents
	            ast.directives.forEach(function (directiveAst) {
	                var /** @type {?} */ directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
	                var /** @type {?} */ directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	                bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	                bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	                bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
	            });
	            ast.providers.forEach(function (providerAst) {
	                var /** @type {?} */ providerInstance = compileElement.instances.get(tokenReference(providerAst.token));
	                bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
	            });
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	            var /** @type {?} */ compileElement = (this.view.nodes[this._nodeIndex++]);
	            bindQueryValues(compileElement);
	            bindOutputs(ast.outputs, ast.directives, compileElement, false);
	            ast.directives.forEach(function (directiveAst, dirIndex) {
	                var /** @type {?} */ directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
	                var /** @type {?} */ directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	                bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
	                bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	                bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	                bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
	            });
	            ast.providers.forEach(function (providerAst) {
	                var /** @type {?} */ providerInstance = compileElement.instances.get(tokenReference(providerAst.token));
	                bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
	            });
	            bindView(compileElement.embeddedView, ast.children, this._schemaRegistry);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} eventTargetAndNames
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	        return ViewBinderVisitor;
	    }());

	    var /** @type {?} */ IMPLICIT_TEMPLATE_VAR = '\$implicit';
	    var /** @type {?} */ CLASS_ATTR$1 = 'class';
	    var /** @type {?} */ STYLE_ATTR = 'style';
	    var /** @type {?} */ NG_CONTAINER_TAG = 'ng-container';
	    var /** @type {?} */ parentRenderNodeVar = variable('parentRenderNode');
	    var /** @type {?} */ rootSelectorVar = variable('rootSelector');
	    /**
	     * @param {?} view
	     * @param {?} template
	     * @param {?} targetDependencies
	     * @return {?}
	     */
	    function buildView(view, template, targetDependencies) {
	        var /** @type {?} */ builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
	        var /** @type {?} */ parentEl = view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent;
	        templateVisitAll(builderVisitor, template, parentEl);
	        if (view.viewType === ViewType.EMBEDDED || view.viewType === ViewType.HOST) {
	            view.lastRenderNode = builderVisitor.getOrCreateLastRenderNode();
	        }
	        return builderVisitor.nestedViewCount;
	    }
	    /**
	     * @param {?} view
	     * @param {?} targetStatements
	     * @return {?}
	     */
	    function finishView(view, targetStatements) {
	        view.nodes.forEach(function (node) {
	            if (node instanceof CompileElement) {
	                node.finish();
	                if (node.hasEmbeddedView) {
	                    finishView(node.embeddedView, targetStatements);
	                }
	            }
	        });
	        view.finish();
	        createViewTopLevelStmts(view, targetStatements);
	    }
	    var ViewBuilderVisitor = (function () {
	        /**
	         * @param {?} view
	         * @param {?} targetDependencies
	         */
	        function ViewBuilderVisitor(view, targetDependencies) {
	            this.view = view;
	            this.targetDependencies = targetDependencies;
	            this.nestedViewCount = 0;
	        }
	        /**
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype._isRootNode = function (parent) { return parent.view !== this.view; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype._addRootNodeAndProject = function (node) {
	            var /** @type {?} */ projectedNode = _getOuterContainerOrSelf(node);
	            var /** @type {?} */ parent = projectedNode.parent;
	            var /** @type {?} */ ngContentIndex = ((projectedNode.sourceAst)).ngContentIndex;
	            var /** @type {?} */ viewContainer = (node instanceof CompileElement && node.hasViewContainer) ? node.viewContainer : null;
	            if (this._isRootNode(parent)) {
	                if (this.view.viewType !== ViewType.COMPONENT) {
	                    this.view.rootNodes.push(new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
	                }
	            }
	            else if (isPresent(parent.component) && isPresent(ngContentIndex)) {
	                parent.addContentNode(ngContentIndex, new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
	            }
	        };
	        /**
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype._getParentRenderNode = function (parent) {
	            parent = _getOuterContainerParentOrSelf(parent);
	            if (this._isRootNode(parent)) {
	                if (this.view.viewType === ViewType.COMPONENT) {
	                    return parentRenderNodeVar;
	                }
	                else {
	                    // root node of an embedded/host view
	                    return NULL_EXPR;
	                }
	            }
	            else {
	                return isPresent(parent.component) &&
	                    parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ?
	                    NULL_EXPR :
	                    parent.renderNode;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.getOrCreateLastRenderNode = function () {
	            var /** @type {?} */ view = this.view;
	            if (view.rootNodes.length === 0 ||
	                view.rootNodes[view.rootNodes.length - 1].type !== CompileViewRootNodeType.Node) {
	                var /** @type {?} */ fieldName = "_el_" + view.nodes.length;
	                view.fields.push(new ClassField(fieldName, importType(view.genConfig.renderTypes.renderElement)));
	                view.createMethod.addStmt(THIS_EXPR.prop(fieldName)
	                    .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [NULL_EXPR, NULL_EXPR]))
	                    .toStmt());
	                view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node, THIS_EXPR.prop(fieldName)));
	            }
	            return view.rootNodes[view.rootNodes.length - 1].expr;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {
	            return this._visitText(ast, '', parent);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitText = function (ast, parent) {
	            return this._visitText(ast, ast.value, parent);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} value
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype._visitText = function (ast, value, parent) {
	            var /** @type {?} */ fieldName = "_text_" + this.view.nodes.length;
	            this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
	            var /** @type {?} */ renderNode = THIS_EXPR.prop(fieldName);
	            var /** @type {?} */ compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
	            var /** @type {?} */ createRenderNode = THIS_EXPR.prop(fieldName)
	                .set(ViewProperties.renderer.callMethod('createText', [
	                this._getParentRenderNode(parent), literal(value),
	                this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)
	            ]))
	                .toStmt();
	            this.view.nodes.push(compileNode);
	            this.view.createMethod.addStmt(createRenderNode);
	            this._addRootNodeAndProject(compileNode);
	            return renderNode;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {
	            // the projected nodes originate from a different view, so we don't
	            // have debug information for them...
	            this.view.createMethod.resetDebugInfo(null, ast);
	            var /** @type {?} */ parentRenderNode = this._getParentRenderNode(parent);
	            if (parentRenderNode !== NULL_EXPR) {
	                this.view.createMethod.addStmt(THIS_EXPR.callMethod('projectNodes', [parentRenderNode, literal(ast.index)])
	                    .toStmt());
	            }
	            else if (this._isRootNode(parent)) {
	                if (this.view.viewType !== ViewType.COMPONENT) {
	                    // store root nodes only for embedded/host views
	                    this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
	                }
	            }
	            else {
	                if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {
	                    parent.addContentNode(ast.ngContentIndex, new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {
	            var /** @type {?} */ nodeIndex = this.view.nodes.length;
	            var /** @type {?} */ createRenderNodeExpr;
	            var /** @type {?} */ debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
	            var /** @type {?} */ directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	            var /** @type {?} */ component = directives.find(function (directive) { return directive.isComponent; });
	            if (ast.name === NG_CONTAINER_TAG) {
	                createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
	            }
	            else {
	                var /** @type {?} */ htmlAttrs = _readHtmlAttrs(ast.attrs);
	                var /** @type {?} */ attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(function (v) { return literal(v); }));
	                if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
	                    createRenderNodeExpr =
	                        importExpr(createIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([
	                            ViewProperties.renderer, literal(ast.name), attrNameAndValues, rootSelectorVar,
	                            debugContextExpr
	                        ]);
	                }
	                else {
	                    createRenderNodeExpr =
	                        importExpr(createIdentifier(Identifiers.createRenderElement)).callFn([
	                            ViewProperties.renderer, this._getParentRenderNode(parent), literal(ast.name),
	                            attrNameAndValues, debugContextExpr
	                        ]);
	                }
	            }
	            var /** @type {?} */ fieldName = "_el_" + nodeIndex;
	            this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));
	            this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
	            var /** @type {?} */ renderNode = THIS_EXPR.prop(fieldName);
	            var /** @type {?} */ compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);
	            this.view.nodes.push(compileElement);
	            var /** @type {?} */ compViewExpr = null;
	            if (isPresent(component)) {
	                var /** @type {?} */ nestedComponentIdentifier = { reference: null };
	                this.targetDependencies.push(new ViewClassDependency(component.type, getViewClassName(component, 0), nestedComponentIdentifier));
	                compViewExpr = THIS_EXPR.prop("compView_" + nodeIndex); // fix highlighting: `
	                this.view.fields.push(new ClassField(compViewExpr.name, importType(createIdentifier(Identifiers.AppView), [importType(component.type)])));
	                this.view.viewChildren.push(compViewExpr);
	                compileElement.setComponentView(compViewExpr);
	                this.view.createMethod.addStmt(compViewExpr
	                    .set(importExpr(nestedComponentIdentifier).instantiate([
	                    ViewProperties.viewUtils, THIS_EXPR, literal(nodeIndex), renderNode
	                ]))
	                    .toStmt());
	            }
	            compileElement.beforeChildren();
	            this._addRootNodeAndProject(compileElement);
	            templateVisitAll(this, ast.children, compileElement);
	            compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
	            if (isPresent(compViewExpr)) {
	                this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent()]).toStmt());
	            }
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	            var /** @type {?} */ nodeIndex = this.view.nodes.length;
	            var /** @type {?} */ fieldName = "_anchor_" + nodeIndex;
	            this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));
	            this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName)
	                .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [
	                this._getParentRenderNode(parent),
	                this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)
	            ]))
	                .toStmt());
	            var /** @type {?} */ renderNode = THIS_EXPR.prop(fieldName);
	            var /** @type {?} */ templateVariableBindings = ast.variables.map(function (varAst) { return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name]; });
	            var /** @type {?} */ directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	            var /** @type {?} */ compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);
	            this.view.nodes.push(compileElement);
	            this.nestedViewCount++;
	            var /** @type {?} */ embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings, this.targetDependencies);
	            this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
	            compileElement.beforeChildren();
	            this._addRootNodeAndProject(compileElement);
	            compileElement.afterChildren(0);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} eventTargetAndNames
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	        return ViewBuilderVisitor;
	    }());
	    /**
	     * Walks up the nodes while the direct parent is a container.
	     *
	     * Returns the outer container or the node itself when it is not a direct child of a container.
	     *
	     * \@internal
	     * @param {?} node
	     * @return {?}
	     */
	    function _getOuterContainerOrSelf(node) {
	        var /** @type {?} */ view = node.view;
	        while (_isNgContainer(node.parent, view)) {
	            node = node.parent;
	        }
	        return node;
	    }
	    /**
	     * Walks up the nodes while they are container and returns the first parent which is not.
	     *
	     * Returns the parent of the outer container or the node itself when it is not a container.
	     *
	     * \@internal
	     * @param {?} el
	     * @return {?}
	     */
	    function _getOuterContainerParentOrSelf(el) {
	        var /** @type {?} */ view = el.view;
	        while (_isNgContainer(el, view)) {
	            el = el.parent;
	        }
	        return el;
	    }
	    /**
	     * @param {?} node
	     * @param {?} view
	     * @return {?}
	     */
	    function _isNgContainer(node, view) {
	        return !node.isNull() && ((node.sourceAst)).name === NG_CONTAINER_TAG &&
	            node.view === view;
	    }
	    /**
	     * @param {?} declaredHtmlAttrs
	     * @param {?} directives
	     * @return {?}
	     */
	    function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
	        var /** @type {?} */ mapResult = {};
	        Object.keys(declaredHtmlAttrs).forEach(function (key) { mapResult[key] = declaredHtmlAttrs[key]; });
	        directives.forEach(function (directiveMeta) {
	            Object.keys(directiveMeta.hostAttributes).forEach(function (name) {
	                var /** @type {?} */ value = directiveMeta.hostAttributes[name];
	                var /** @type {?} */ prevValue = mapResult[name];
	                mapResult[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
	            });
	        });
	        var /** @type {?} */ arrResult = [];
	        // Note: We need to sort to get a defined output order
	        // for tests and for caching generated artifacts...
	        Object.keys(mapResult).sort().forEach(function (attrName) { arrResult.push(attrName, mapResult[attrName]); });
	        return arrResult;
	    }
	    /**
	     * @param {?} attrs
	     * @return {?}
	     */
	    function _readHtmlAttrs(attrs) {
	        var /** @type {?} */ htmlAttrs = {};
	        attrs.forEach(function (ast) { htmlAttrs[ast.name] = ast.value; });
	        return htmlAttrs;
	    }
	    /**
	     * @param {?} attrName
	     * @param {?} attrValue1
	     * @param {?} attrValue2
	     * @return {?}
	     */
	    function mergeAttributeValue(attrName, attrValue1, attrValue2) {
	        if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
	            return attrValue1 + " " + attrValue2;
	        }
	        else {
	            return attrValue2;
	        }
	    }
	    /**
	     * @param {?} view
	     * @param {?} targetStatements
	     * @return {?}
	     */
	    function createViewTopLevelStmts(view, targetStatements) {
	        var /** @type {?} */ nodeDebugInfosVar = NULL_EXPR;
	        if (view.genConfig.genDebugInfo) {
	            nodeDebugInfosVar = variable("nodeDebugInfos_" + identifierName(view.component.type) + view.viewIndex); // fix
	            // highlighting:
	            // `
	            targetStatements.push(((nodeDebugInfosVar))
	                .set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(importType(createIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const])))
	                .toDeclStmt(null, [StmtModifier.Final]));
	        }
	        var /** @type {?} */ renderCompTypeVar = variable("renderType_" + identifierName(view.component.type)); // fix highlighting: `
	        if (view.viewIndex === 0) {
	            var /** @type {?} */ templateUrlInfo = void 0;
	            if (view.component.template.templateUrl == identifierModuleUrl(view.component.type)) {
	                templateUrlInfo =
	                    identifierModuleUrl(view.component.type) + " class " + identifierName(view.component.type) + " - inline template";
	            }
	            else {
	                templateUrlInfo = view.component.template.templateUrl;
	            }
	            targetStatements.push(renderCompTypeVar
	                .set(importExpr(createIdentifier(Identifiers.createRenderComponentType)).callFn([
	                view.genConfig.genDebugInfo ? literal(templateUrlInfo) : literal(''),
	                literal(view.component.template.ngContentSelectors.length),
	                ViewEncapsulationEnum.fromValue(view.component.template.encapsulation),
	                view.styles,
	                literalMap(view.animations.map(function (entry) { return [entry.name, entry.fnExp]; }), null, true),
	            ]))
	                .toDeclStmt(importType(createIdentifier(Identifiers.RenderComponentType))));
	        }
	        var /** @type {?} */ viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
	        targetStatements.push(viewClass);
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    function createStaticNodeDebugInfo(node) {
	        var /** @type {?} */ compileElement = node instanceof CompileElement ? node : null;
	        var /** @type {?} */ providerTokens = [];
	        var /** @type {?} */ componentToken = NULL_EXPR;
	        var /** @type {?} */ varTokenEntries = [];
	        if (isPresent(compileElement)) {
	            providerTokens =
	                compileElement.getProviderTokens().map(function (token) { return createDiTokenExpression(token); });
	            if (isPresent(compileElement.component)) {
	                componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
	            }
	            Object.keys(compileElement.referenceTokens).forEach(function (varName) {
	                var /** @type {?} */ token = compileElement.referenceTokens[varName];
	                varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);
	            });
	        }
	        return importExpr(createIdentifier(Identifiers.StaticNodeDebugInfo))
	            .instantiate([
	            literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])),
	            componentToken,
	            literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))
	        ], importType(createIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));
	    }
	    /**
	     * @param {?} view
	     * @param {?} renderCompTypeVar
	     * @param {?} nodeDebugInfosVar
	     * @return {?}
	     */
	    function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
	        var /** @type {?} */ viewConstructorArgs = [
	            new FnParam(ViewConstructorVars.viewUtils.name, importType(createIdentifier(Identifiers.ViewUtils))),
	            new FnParam(ViewConstructorVars.parentView.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	            new FnParam(ViewConstructorVars.parentIndex.name, NUMBER_TYPE),
	            new FnParam(ViewConstructorVars.parentElement.name, DYNAMIC_TYPE)
	        ];
	        var /** @type {?} */ superConstructorArgs = [
	            variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType),
	            ViewConstructorVars.viewUtils, ViewConstructorVars.parentView, ViewConstructorVars.parentIndex,
	            ViewConstructorVars.parentElement,
	            ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))
	        ];
	        if (view.genConfig.genDebugInfo) {
	            superConstructorArgs.push(nodeDebugInfosVar);
	        }
	        if (view.viewType === ViewType.EMBEDDED) {
	            viewConstructorArgs.push(new FnParam('declaredViewContainer', importType(createIdentifier(Identifiers.ViewContainer))));
	            superConstructorArgs.push(variable('declaredViewContainer'));
	        }
	        var /** @type {?} */ viewMethods = [
	            new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(createIdentifier(Identifiers.ComponentRef), [DYNAMIC_TYPE])),
	            new ClassMethod('injectorGetInternal', [
	                new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE),
	                // Note: Can't use o.INT_TYPE here as the method in AppView uses number
	                new FnParam(InjectMethodVars$1.requestNodeIndex.name, NUMBER_TYPE),
	                new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)
	            ], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars$1.notFoundResult), DYNAMIC_TYPE),
	            new ClassMethod('detectChangesInternal', [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)),
	            new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()),
	            new ClassMethod('destroyInternal', [], generateDestroyMethod(view)),
	            new ClassMethod('detachInternal', [], view.detachMethod.finish()),
	            generateVisitRootNodesMethod(view), generateVisitProjectableNodesMethod(view),
	            generateCreateEmbeddedViewsMethod(view)
	        ].filter(function (method) { return method.body.length > 0; });
	        var /** @type {?} */ superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
	        var /** @type {?} */ viewClass = createClassStmt({
	            name: view.className,
	            parent: importExpr(createIdentifier(superClass), [getContextType(view)]),
	            parentArgs: superConstructorArgs,
	            ctorParams: viewConstructorArgs,
	            builders: [{ methods: viewMethods }, view]
	        });
	        return viewClass;
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateDestroyMethod(view) {
	        var /** @type {?} */ stmts = [];
	        view.viewContainers.forEach(function (viewContainer) {
	            stmts.push(viewContainer.callMethod('destroyNestedViews', []).toStmt());
	        });
	        view.viewChildren.forEach(function (viewChild) { stmts.push(viewChild.callMethod('destroy', []).toStmt()); });
	        stmts.push.apply(stmts, view.destroyMethod.finish());
	        return stmts;
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateCreateMethod(view) {
	        var /** @type {?} */ parentRenderNodeExpr = NULL_EXPR;
	        var /** @type {?} */ parentRenderNodeStmts = [];
	        if (view.viewType === ViewType.COMPONENT) {
	            parentRenderNodeExpr =
	                ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('parentElement')]);
	            parentRenderNodeStmts =
	                [parentRenderNodeVar.set(parentRenderNodeExpr)
	                        .toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];
	        }
	        var /** @type {?} */ resultExpr;
	        if (view.viewType === ViewType.HOST) {
	            var /** @type {?} */ hostEl = (view.nodes[0]);
	            resultExpr =
	                importExpr(createIdentifier(Identifiers.ComponentRef_), [DYNAMIC_TYPE]).instantiate([
	                    literal(hostEl.nodeIndex), THIS_EXPR, hostEl.renderNode, hostEl.getComponent()
	                ]);
	        }
	        else {
	            resultExpr = NULL_EXPR;
	        }
	        var /** @type {?} */ allNodesExpr = ViewProperties.renderer.cast(DYNAMIC_TYPE)
	            .prop('directRenderer')
	            .conditional(NULL_EXPR, literalArr(view.nodes.map(function (node) { return node.renderNode; })));
	        return parentRenderNodeStmts.concat(view.createMethod.finish(), [
	            THIS_EXPR
	                .callMethod('init', [
	                view.lastRenderNode,
	                allNodesExpr,
	                view.disposables.length ? literalArr(view.disposables) : NULL_EXPR,
	            ])
	                .toStmt(),
	            new ReturnStatement(resultExpr)
	        ]);
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateDetectChangesMethod(view) {
	        var /** @type {?} */ stmts = [];
	        if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() &&
	            view.updateContentQueriesMethod.isEmpty() &&
	            view.afterContentLifecycleCallbacksMethod.isEmpty() &&
	            view.detectChangesRenderPropertiesMethod.isEmpty() &&
	            view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty() &&
	            view.viewContainers.length === 0 && view.viewChildren.length === 0) {
	            return stmts;
	        }
	        stmts.push.apply(stmts, view.animationBindingsMethod.finish());
	        stmts.push.apply(stmts, view.detectChangesInInputsMethod.finish());
	        view.viewContainers.forEach(function (viewContainer) {
	            stmts.push(viewContainer.callMethod('detectChangesInNestedViews', [DetectChangesVars.throwOnChange])
	                .toStmt());
	        });
	        var /** @type {?} */ afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
	        if (afterContentStmts.length > 0) {
	            stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts));
	        }
	        stmts.push.apply(stmts, view.detectChangesRenderPropertiesMethod.finish());
	        view.viewChildren.forEach(function (viewChild) {
	            stmts.push(viewChild.callMethod('internalDetectChanges', [DetectChangesVars.throwOnChange]).toStmt());
	        });
	        var /** @type {?} */ afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
	        if (afterViewStmts.length > 0) {
	            stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
	        }
	        var /** @type {?} */ varStmts = [];
	        var /** @type {?} */ readVars = findReadVarNames(stmts);
	        if (readVars.has(DetectChangesVars.changed.name)) {
	            varStmts.push(DetectChangesVars.changed.set(literal(true)).toDeclStmt(BOOL_TYPE));
	        }
	        if (readVars.has(DetectChangesVars.changes.name)) {
	            varStmts.push(DetectChangesVars.changes.set(NULL_EXPR)
	                .toDeclStmt(new MapType(importType(createIdentifier(Identifiers.SimpleChange)))));
	        }
	        varStmts.push.apply(varStmts, createSharedBindingVariablesIfNeeded(stmts));
	        return varStmts.concat(stmts);
	    }
	    /**
	     * @param {?} statements
	     * @param {?} value
	     * @return {?}
	     */
	    function addReturnValuefNotEmpty(statements, value) {
	        if (statements.length > 0) {
	            return statements.concat([new ReturnStatement(value)]);
	        }
	        else {
	            return statements;
	        }
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function getContextType(view) {
	        if (view.viewType === ViewType.COMPONENT) {
	            return importType(view.component.type);
	        }
	        return DYNAMIC_TYPE;
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function getChangeDetectionMode(view) {
	        var /** @type {?} */ mode;
	        if (view.viewType === ViewType.COMPONENT) {
	            mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ?
	                ChangeDetectorStatus.CheckAlways :
	                ChangeDetectorStatus.CheckOnce;
	        }
	        else {
	            mode = ChangeDetectorStatus.CheckAlways;
	        }
	        return mode;
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateVisitRootNodesMethod(view) {
	        var /** @type {?} */ cbVar = variable('cb');
	        var /** @type {?} */ ctxVar = variable('ctx');
	        var /** @type {?} */ stmts = generateVisitNodesStmts(view.rootNodes, cbVar, ctxVar);
	        return new ClassMethod('visitRootNodesInternal', [new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateVisitProjectableNodesMethod(view) {
	        var /** @type {?} */ nodeIndexVar = variable('nodeIndex');
	        var /** @type {?} */ ngContentIndexVar = variable('ngContentIndex');
	        var /** @type {?} */ cbVar = variable('cb');
	        var /** @type {?} */ ctxVar = variable('ctx');
	        var /** @type {?} */ stmts = [];
	        view.nodes.forEach(function (node) {
	            if (node instanceof CompileElement && node.component) {
	                node.contentNodesByNgContentIndex.forEach(function (projectedNodes, ngContentIndex) {
	                    stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex))
	                        .and(ngContentIndexVar.equals(literal(ngContentIndex))), generateVisitNodesStmts(projectedNodes, cbVar, ctxVar)));
	                });
	            }
	        });
	        return new ClassMethod('visitProjectableNodesInternal', [
	            new FnParam(nodeIndexVar.name, NUMBER_TYPE),
	            new FnParam(ngContentIndexVar.name, NUMBER_TYPE),
	            new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)
	        ], stmts);
	    }
	    /**
	     * @param {?} nodes
	     * @param {?} cb
	     * @param {?} ctx
	     * @return {?}
	     */
	    function generateVisitNodesStmts(nodes, cb, ctx) {
	        var /** @type {?} */ stmts = [];
	        nodes.forEach(function (node) {
	            switch (node.type) {
	                case CompileViewRootNodeType.Node:
	                    stmts.push(cb.callFn([node.expr, ctx]).toStmt());
	                    break;
	                case CompileViewRootNodeType.ViewContainer:
	                    stmts.push(cb.callFn([node.expr.prop('nativeElement'), ctx]).toStmt());
	                    stmts.push(node.expr.callMethod('visitNestedViewRootNodes', [cb, ctx]).toStmt());
	                    break;
	                case CompileViewRootNodeType.NgContent:
	                    stmts.push(THIS_EXPR.callMethod('visitProjectedNodes', [literal(node.ngContentIndex), cb, ctx])
	                        .toStmt());
	                    break;
	            }
	        });
	        return stmts;
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateCreateEmbeddedViewsMethod(view) {
	        var /** @type {?} */ nodeIndexVar = variable('nodeIndex');
	        var /** @type {?} */ stmts = [];
	        view.nodes.forEach(function (node) {
	            if (node instanceof CompileElement) {
	                if (node.embeddedView) {
	                    stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)), [new ReturnStatement(node.embeddedView.classExpr.instantiate([
	                            ViewProperties.viewUtils, THIS_EXPR, literal(node.nodeIndex), node.renderNode,
	                            node.viewContainer
	                        ]))]));
	                }
	            }
	        });
	        if (stmts.length > 0) {
	            stmts.push(new ReturnStatement(NULL_EXPR));
	        }
	        return new ClassMethod('createEmbeddedViewInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE)], stmts, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE]));
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$16 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$16 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var ViewCompileResult = (function () {
	        /**
	         * @param {?} statements
	         * @param {?} viewClassVar
	         * @param {?} dependencies
	         */
	        function ViewCompileResult(statements, viewClassVar, dependencies) {
	            this.statements = statements;
	            this.viewClassVar = viewClassVar;
	            this.dependencies = dependencies;
	        }
	        return ViewCompileResult;
	    }());
	    var ViewCompiler = (function () {
	        /**
	         * @param {?} _genConfig
	         * @param {?} _schemaRegistry
	         */
	        function ViewCompiler(_genConfig, _schemaRegistry) {
	            this._genConfig = _genConfig;
	            this._schemaRegistry = _schemaRegistry;
	        }
	        /**
	         * @param {?} component
	         * @param {?} template
	         * @param {?} styles
	         * @param {?} pipes
	         * @param {?} compiledAnimations
	         * @return {?}
	         */
	        ViewCompiler.prototype.compileComponent = function (component, template, styles, pipes, compiledAnimations) {
	            var /** @type {?} */ dependencies = [];
	            var /** @type {?} */ view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), [], dependencies);
	            var /** @type {?} */ statements = [];
	            buildView(view, template, dependencies);
	            // Need to separate binding from creation to be able to refer to
	            // variables that have been declared after usage.
	            bindView(view, template, this._schemaRegistry);
	            finishView(view, statements);
	            return new ViewCompileResult(statements, view.classExpr.name, dependencies);
	        };
	        ViewCompiler = __decorate$16([
	            CompilerInjectable(), 
	            __metadata$16('design:paramtypes', [CompilerConfig, ElementSchemaRegistry])
	        ], ViewCompiler);
	        return ViewCompiler;
	    }());

	    var AnimationEntryCompileResult = (function () {
	        /**
	         * @param {?} name
	         * @param {?} statements
	         * @param {?} fnExp
	         */
	        function AnimationEntryCompileResult(name, statements, fnExp) {
	            this.name = name;
	            this.statements = statements;
	            this.fnExp = fnExp;
	        }
	        return AnimationEntryCompileResult;
	    }());
	    var AnimationCompiler = (function () {
	        function AnimationCompiler() {
	        }
	        /**
	         * @param {?} factoryNamePrefix
	         * @param {?} parsedAnimations
	         * @return {?}
	         */
	        AnimationCompiler.prototype.compile = function (factoryNamePrefix, parsedAnimations) {
	            return parsedAnimations.map(function (entry) {
	                var /** @type {?} */ factoryName = factoryNamePrefix + "_" + entry.name;
	                var /** @type {?} */ visitor = new _AnimationBuilder(entry.name, factoryName);
	                return visitor.build(entry);
	            });
	        };
	        return AnimationCompiler;
	    }());
	    var /** @type {?} */ _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');
	    var /** @type {?} */ _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');
	    var /** @type {?} */ _ANIMATION_FACTORY_VIEW_VAR = variable('view');
	    var /** @type {?} */ _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop('animationContext');
	    var /** @type {?} */ _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
	    var /** @type {?} */ _ANIMATION_CURRENT_STATE_VAR = variable('currentState');
	    var /** @type {?} */ _ANIMATION_NEXT_STATE_VAR = variable('nextState');
	    var /** @type {?} */ _ANIMATION_PLAYER_VAR = variable('player');
	    var /** @type {?} */ _ANIMATION_TIME_VAR = variable('totalTime');
	    var /** @type {?} */ _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');
	    var /** @type {?} */ _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');
	    var /** @type {?} */ _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');
	    var /** @type {?} */ _PREVIOUS_ANIMATION_PLAYERS = variable('previousPlayers');
	    var /** @type {?} */ _EMPTY_MAP = literalMap([]);
	    var /** @type {?} */ _EMPTY_ARRAY = literalArr([]);
	    var _AnimationBuilder = (function () {
	        /**
	         * @param {?} animationName
	         * @param {?} factoryName
	         */
	        function _AnimationBuilder(animationName, factoryName) {
	            this.animationName = animationName;
	            this._fnVarName = factoryName + '_factory';
	            this._statesMapVarName = factoryName + '_states';
	            this._statesMapVar = variable(this._statesMapVarName);
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationStyles = function (ast, context) {
	            var /** @type {?} */ stylesArr = [];
	            if (context.isExpectingFirstStyleStep) {
	                stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
	                context.isExpectingFirstStyleStep = false;
	            }
	            ast.styles.forEach(function (entry) {
	                var /** @type {?} */ entries = Object.keys(entry).map(function (key) { return [key, literal(entry[key])]; });
	                stylesArr.push(literalMap(entries, null, true));
	            });
	            return importExpr(createIdentifier(Identifiers.AnimationStyles)).instantiate([
	                importExpr(createIdentifier(Identifiers.collectAndResolveStyles)).callFn([
	                    _ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)
	                ])
	            ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationKeyframe = function (ast, context) {
	            return importExpr(createIdentifier(Identifiers.AnimationKeyframe)).instantiate([
	                literal(ast.offset), ast.styles.visit(this, context)
	            ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationStep = function (ast, context) {
	            var _this = this;
	            if (context.endStateAnimateStep === ast) {
	                return this._visitEndStateAnimation(ast, context);
	            }
	            var /** @type {?} */ startingStylesExpr = ast.startingStyles.visit(this, context);
	            var /** @type {?} */ keyframeExpressions = ast.keyframes.map(function (keyframeEntry) { return keyframeEntry.visit(_this, context); });
	            return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);
	        };
	        /**
	         * \@internal
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype._visitEndStateAnimation = function (ast, context) {
	            var _this = this;
	            var /** @type {?} */ startingStylesExpr = ast.startingStyles.visit(this, context);
	            var /** @type {?} */ keyframeExpressions = ast.keyframes.map(function (keyframe) { return keyframe.visit(_this, context); });
	            var /** @type {?} */ keyframesExpr = importExpr(createIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([
	                _ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR,
	                literalArr(keyframeExpressions)
	            ]);
	            return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
	        };
	        /**
	         * \@internal
	         * @param {?} ast
	         * @param {?} startingStylesExpr
	         * @param {?} keyframesExpr
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype._callAnimateMethod = function (ast, startingStylesExpr, keyframesExpr, context) {
	            var /** @type {?} */ previousStylesValue = _EMPTY_ARRAY;
	            if (context.isExpectingFirstAnimateStep) {
	                previousStylesValue = _PREVIOUS_ANIMATION_PLAYERS;
	                context.isExpectingFirstAnimateStep = false;
	            }
	            context.totalTransitionTime += ast.duration + ast.delay;
	            return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [
	                _ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration),
	                literal(ast.delay), literal(ast.easing), previousStylesValue
	            ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationSequence = function (ast, context) {
	            var _this = this;
	            var /** @type {?} */ playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	            return importExpr(createIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([
	                literalArr(playerExprs)
	            ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationGroup = function (ast, context) {
	            var _this = this;
	            var /** @type {?} */ playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	            return importExpr(createIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([
	                literalArr(playerExprs)
	            ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationStateDeclaration = function (ast, context) {
	            var /** @type {?} */ flatStyles = {};
	            _getStylesArray(ast).forEach(function (entry) { Object.keys(entry).forEach(function (key) { flatStyles[key] = entry[key]; }); });
	            context.stateMap.registerState(ast.stateName, flatStyles);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationStateTransition = function (ast, context) {
	            var /** @type {?} */ steps = ast.animation.steps;
	            var /** @type {?} */ lastStep = steps[steps.length - 1];
	            if (_isEndStateAnimateStep(lastStep)) {
	                context.endStateAnimateStep = (lastStep);
	            }
	            context.totalTransitionTime = 0;
	            context.isExpectingFirstStyleStep = true;
	            context.isExpectingFirstAnimateStep = true;
	            var /** @type {?} */ stateChangePreconditions = [];
	            ast.stateChanges.forEach(function (stateChange) {
	                stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState)
	                    .and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
	                if (stateChange.fromState != ANY_STATE) {
	                    context.stateMap.registerState(stateChange.fromState);
	                }
	                if (stateChange.toState != ANY_STATE) {
	                    context.stateMap.registerState(stateChange.toState);
	                }
	            });
	            var /** @type {?} */ animationPlayerExpr = ast.animation.visit(this, context);
	            var /** @type {?} */ reducedStateChangesPrecondition = stateChangePreconditions.reduce(function (a, b) { return a.or(b); });
	            var /** @type {?} */ precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
	            var /** @type {?} */ animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
	            var /** @type {?} */ totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();
	            return new IfStmt(precondition, [animationStmt, totalTimeStmt]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationEntry = function (ast, context) {
	            var _this = this;
	            // visit each of the declarations first to build the context state map
	            ast.stateDeclarations.forEach(function (def) { return def.visit(_this, context); });
	            // this should always be defined even if the user overrides it
	            context.stateMap.registerState(DEFAULT_STATE, {});
	            var /** @type {?} */ statements = [];
	            statements.push(_PREVIOUS_ANIMATION_PLAYERS
	                .set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('getAnimationPlayers', [
	                _ANIMATION_FACTORY_ELEMENT_VAR,
	                _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_STATE))
	                    .conditional(NULL_EXPR, literal(this.animationName))
	            ]))
	                .toDeclStmt());
	            statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt());
	            statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());
	            statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());
	            statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE)))
	                .toDeclStmt());
	            statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR))
	                .toDeclStmt());
	            statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	            statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR))
	                .toDeclStmt());
	            statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	            var /** @type {?} */ RENDER_STYLES_FN = importExpr(createIdentifier(Identifiers.renderStyles));
	            ast.stateTransitions.forEach(function (transAst) { return statements.push(transAst.visit(_this, context)); });
	            // this check ensures that the animation factory always returns a player
	            // so that the onDone callback can be used for tracking
	            statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR
	                    .set(importExpr(createIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([]))
	                    .toStmt()]));
	            // once complete we want to apply the styles on the element
	            // since the destination state's values should persist once
	            // the animation sequence has completed.
	            statements.push(_ANIMATION_PLAYER_VAR
	                .callMethod('onDone', [fn([], [
	                    _ANIMATION_PLAYER_VAR.callMethod('destroy', []).toStmt(),
	                    RENDER_STYLES_FN
	                        .callFn([
	                        _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	                        importExpr(createIdentifier(Identifiers.prepareFinalAnimationStyles))
	                            .callFn([
	                            _ANIMATION_START_STATE_STYLES_VAR,
	                            _ANIMATION_END_STATE_STYLES_VAR
	                        ])
	                    ])
	                        .toStmt()
	                ])])
	                .toStmt());
	            statements.push(importExpr(createIdentifier(Identifiers.AnimationSequencePlayer))
	                .instantiate([_PREVIOUS_ANIMATION_PLAYERS])
	                .callMethod('destroy', [])
	                .toStmt());
	            // before we start any animation we want to clear out the starting
	            // styles from the element's style property (since they were placed
	            // there at the end of the last animation
	            statements.push(RENDER_STYLES_FN
	                .callFn([
	                _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	                importExpr(createIdentifier(Identifiers.clearStyles))
	                    .callFn([_ANIMATION_START_STATE_STYLES_VAR])
	            ])
	                .toStmt());
	            statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT
	                .callMethod('queueAnimation', [
	                _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),
	                _ANIMATION_PLAYER_VAR
	            ])
	                .toStmt());
	            statements.push(new ReturnStatement(importExpr(createIdentifier(Identifiers.AnimationTransition)).instantiate([
	                _ANIMATION_PLAYER_VAR, _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR,
	                _ANIMATION_TIME_VAR
	            ])));
	            return fn([
	                new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	                new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE),
	                new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE),
	                new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)
	            ], statements, importType(createIdentifier(Identifiers.AnimationTransition)));
	        };
	        /**
	         * @param {?} ast
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.build = function (ast) {
	            var /** @type {?} */ context = new _AnimationBuilderContext();
	            var /** @type {?} */ fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
	            var /** @type {?} */ fnVariable = variable(this._fnVarName);
	            var /** @type {?} */ lookupMap = [];
	            Object.keys(context.stateMap.states).forEach(function (stateName) {
	                var /** @type {?} */ value = context.stateMap.states[stateName];
	                var /** @type {?} */ variableValue = _EMPTY_MAP;
	                if (isPresent(value)) {
	                    var /** @type {?} */ styleMap_1 = [];
	                    Object.keys(value).forEach(function (key) { styleMap_1.push([key, literal(value[key])]); });
	                    variableValue = literalMap(styleMap_1, null, true);
	                }
	                lookupMap.push([stateName, variableValue]);
	            });
	            var /** @type {?} */ compiledStatesMapStmt = this._statesMapVar.set(literalMap(lookupMap, null, true)).toDeclStmt();
	            var /** @type {?} */ statements = [compiledStatesMapStmt, fnStatement];
	            return new AnimationEntryCompileResult(this.animationName, statements, fnVariable);
	        };
	        return _AnimationBuilder;
	    }());
	    var _AnimationBuilderContext = (function () {
	        function _AnimationBuilderContext() {
	            this.stateMap = new _AnimationBuilderStateMap();
	            this.endStateAnimateStep = null;
	            this.isExpectingFirstStyleStep = false;
	            this.isExpectingFirstAnimateStep = false;
	            this.totalTransitionTime = 0;
	        }
	        return _AnimationBuilderContext;
	    }());
	    var _AnimationBuilderStateMap = (function () {
	        function _AnimationBuilderStateMap() {
	            this._states = {};
	        }
	        Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._states; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} name
	         * @param {?=} value
	         * @return {?}
	         */
	        _AnimationBuilderStateMap.prototype.registerState = function (name, value) {
	            if (value === void 0) { value = null; }
	            var /** @type {?} */ existingEntry = this._states[name];
	            if (!existingEntry) {
	                this._states[name] = value;
	            }
	        };
	        return _AnimationBuilderStateMap;
	    }());
	    /**
	     * @param {?} value
	     * @param {?} animationState
	     * @return {?}
	     */
	    function _compareToAnimationStateExpr(value, animationState) {
	        var /** @type {?} */ emptyStateLiteral = literal(EMPTY_STATE);
	        switch (animationState) {
	            case EMPTY_STATE:
	                return value.equals(emptyStateLiteral);
	            case ANY_STATE:
	                return literal(true);
	            default:
	                return value.equals(literal(animationState));
	        }
	    }
	    /**
	     * @param {?} step
	     * @return {?}
	     */
	    function _isEndStateAnimateStep(step) {
	        // the final animation step is characterized by having only TWO
	        // keyframe values and it must have zero styles for both keyframes
	        if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
	            var /** @type {?} */ styles1 = _getStylesArray(step.keyframes[0])[0];
	            var /** @type {?} */ styles2 = _getStylesArray(step.keyframes[1])[0];
	            return Object.keys(styles1).length === 0 && Object.keys(styles2).length === 0;
	        }
	        return false;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function _getStylesArray(obj) {
	        return obj.styles.styles;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var GeneratedFile = (function () {
	        /**
	         * @param {?} srcFileUrl
	         * @param {?} genFileUrl
	         * @param {?} source
	         */
	        function GeneratedFile(srcFileUrl, genFileUrl, source) {
	            this.srcFileUrl = srcFileUrl;
	            this.genFileUrl = genFileUrl;
	            this.source = source;
	        }
	        return GeneratedFile;
	    }());

	    var __extends$26 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
	    /**
	     * @param {?} host
	     * @param {?} summaryResolver
	     * @param {?} symbolResolver
	     * @param {?} symbols
	     * @param {?} types
	     * @return {?}
	     */
	    function serializeSummaries(host, summaryResolver, symbolResolver, symbols, types) {
	        var /** @type {?} */ serializer = new Serializer$1(host);
	        // for symbols, we use everything except for the class metadata itself
	        // (we keep the statics though), as the class metadata is contained in the
	        // CompileTypeSummary.
	        symbols.forEach(function (resolvedSymbol) { return serializer.addOrMergeSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata }); });
	        // Add summaries that are referenced by the given symbols (transitively)
	        // Note: the serializer.symbols array might be growing while
	        // we execute the loop!
	        for (var /** @type {?} */ processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {
	            var /** @type {?} */ symbol = serializer.symbols[processedIndex];
	            if (!host.isSourceFile(symbol.filePath)) {
	                var /** @type {?} */ summary = summaryResolver.resolveSummary(symbol);
	                if (!summary) {
	                    // some symbols might originate from a plain typescript library
	                    // that just exported .d.ts and .metadata.json files, i.e. where no summary
	                    // files were created.
	                    var /** @type {?} */ resolvedSymbol = symbolResolver.resolveSymbol(symbol);
	                    if (resolvedSymbol) {
	                        summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };
	                    }
	                }
	                if (summary) {
	                    serializer.addOrMergeSummary(summary);
	                }
	            }
	        }
	        // Add type summaries.
	        // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,
	        // as the type summaries already contain the transitive data that they require
	        // (in a minimal way).
	        types.forEach(function (typeSummary) {
	            serializer.addOrMergeSummary({ symbol: typeSummary.type.reference, metadata: { __symbolic: 'class' }, type: typeSummary });
	            if (typeSummary.summaryKind === CompileSummaryKind.NgModule) {
	                var /** @type {?} */ ngModuleSummary = (typeSummary);
	                ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) {
	                    var /** @type {?} */ symbol = id.reference;
	                    if (!host.isSourceFile(symbol.filePath)) {
	                        serializer.addOrMergeSummary(summaryResolver.resolveSummary(symbol));
	                    }
	                });
	            }
	        });
	        return serializer.serialize();
	    }
	    /**
	     * @param {?} symbolCache
	     * @param {?} json
	     * @return {?}
	     */
	    function deserializeSummaries(symbolCache, json) {
	        var /** @type {?} */ deserializer = new Deserializer(symbolCache);
	        return deserializer.deserialize(json);
	    }
	    /**
	     * @param {?} fileName
	     * @return {?}
	     */
	    function summaryFileName(fileName) {
	        var /** @type {?} */ fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');
	        return fileNameWithoutSuffix + ".ngsummary.json";
	    }
	    var Serializer$1 = (function (_super) {
	        __extends$26(Serializer, _super);
	        /**
	         * @param {?} host
	         */
	        function Serializer(host) {
	            _super.call(this);
	            this.host = host;
	            this.symbols = [];
	            this.indexBySymbol = new Map();
	            this.processedSummaryBySymbol = new Map();
	            this.processedSummaries = [];
	        }
	        /**
	         * @param {?} summary
	         * @return {?}
	         */
	        Serializer.prototype.addOrMergeSummary = function (summary) {
	            var /** @type {?} */ symbolMeta = summary.metadata;
	            if (symbolMeta && symbolMeta.__symbolic === 'class') {
	                // For classes, we only keep their statics, but not the metadata
	                // of the class itself as that has been captured already via other summaries
	                // (e.g. DirectiveSummary, ...).
	                symbolMeta = { __symbolic: 'class', statics: symbolMeta.statics };
	            }
	            var /** @type {?} */ processedSummary = this.processedSummaryBySymbol.get(summary.symbol);
	            if (!processedSummary) {
	                processedSummary = this.processValue({ symbol: summary.symbol });
	                this.processedSummaries.push(processedSummary);
	                this.processedSummaryBySymbol.set(summary.symbol, processedSummary);
	            }
	            // Note: == by purpose to compare with undefined!
	            if (processedSummary.metadata == null && symbolMeta != null) {
	                processedSummary.metadata = this.processValue(symbolMeta);
	            }
	            // Note: == by purpose to compare with undefined!
	            if (processedSummary.type == null && summary.type != null) {
	                processedSummary.type = this.processValue(summary.type);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        Serializer.prototype.serialize = function () {
	            var _this = this;
	            return JSON.stringify({
	                summaries: this.processedSummaries,
	                symbols: this.symbols.map(function (symbol, index) {
	                    return {
	                        __symbol: index,
	                        name: symbol.name,
	                        // We convert the source filenames tinto output filenames,
	                        // as the generated summary file will be used when teh current
	                        // compilation unit is used as a library
	                        filePath: _this.host.getOutputFileName(symbol.filePath)
	                    };
	                })
	            });
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        Serializer.prototype.processValue = function (value) { return visitValue(value, this, null); };
	        /**
	         * @param {?} value
	         * @param {?} context
	         * @return {?}
	         */
	        Serializer.prototype.visitOther = function (value, context) {
	            if (value instanceof StaticSymbol) {
	                var /** @type {?} */ index = this.indexBySymbol.get(value);
	                // Note: == by purpose to compare with undefined!
	                if (index == null) {
	                    index = this.indexBySymbol.size;
	                    this.indexBySymbol.set(value, index);
	                    this.symbols.push(value);
	                }
	                return { __symbol: index };
	            }
	        };
	        return Serializer;
	    }(ValueTransformer));
	    var Deserializer = (function (_super) {
	        __extends$26(Deserializer, _super);
	        /**
	         * @param {?} symbolCache
	         */
	        function Deserializer(symbolCache) {
	            _super.call(this);
	            this.symbolCache = symbolCache;
	        }
	        /**
	         * @param {?} json
	         * @return {?}
	         */
	        Deserializer.prototype.deserialize = function (json) {
	            var _this = this;
	            var /** @type {?} */ data = JSON.parse(json);
	            this.symbols = data.symbols.map(function (serializedSymbol) { return _this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name); });
	            return visitValue(data.summaries, this, null);
	        };
	        /**
	         * @param {?} map
	         * @param {?} context
	         * @return {?}
	         */
	        Deserializer.prototype.visitStringMap = function (map, context) {
	            if ('__symbol' in map) {
	                return this.symbols[map['__symbol']];
	            }
	            else {
	                return _super.prototype.visitStringMap.call(this, map, context);
	            }
	        };
	        return Deserializer;
	    }(ValueTransformer));

	    var AotCompiler = (function () {
	        /**
	         * @param {?} _host
	         * @param {?} _metadataResolver
	         * @param {?} _templateParser
	         * @param {?} _styleCompiler
	         * @param {?} _viewCompiler
	         * @param {?} _dirWrapperCompiler
	         * @param {?} _ngModuleCompiler
	         * @param {?} _outputEmitter
	         * @param {?} _summaryResolver
	         * @param {?} _localeId
	         * @param {?} _translationFormat
	         * @param {?} _animationParser
	         * @param {?} _symbolResolver
	         */
	        function AotCompiler(_host, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _animationParser, _symbolResolver) {
	            this._host = _host;
	            this._metadataResolver = _metadataResolver;
	            this._templateParser = _templateParser;
	            this._styleCompiler = _styleCompiler;
	            this._viewCompiler = _viewCompiler;
	            this._dirWrapperCompiler = _dirWrapperCompiler;
	            this._ngModuleCompiler = _ngModuleCompiler;
	            this._outputEmitter = _outputEmitter;
	            this._summaryResolver = _summaryResolver;
	            this._localeId = _localeId;
	            this._translationFormat = _translationFormat;
	            this._animationParser = _animationParser;
	            this._symbolResolver = _symbolResolver;
	            this._animationCompiler = new AnimationCompiler();
	        }
	        /**
	         * @return {?}
	         */
	        AotCompiler.prototype.clearCache = function () { this._metadataResolver.clearCache(); };
	        /**
	         * @param {?} rootFiles
	         * @return {?}
	         */
	        AotCompiler.prototype.compileAll = function (rootFiles) {
	            var _this = this;
	            var /** @type {?} */ programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host);
	            var _a = analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver), ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files, ngModules = _a.ngModules;
	            return Promise
	                .all(ngModules.map(function (ngModule) { return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))
	                .then(function () {
	                var /** @type {?} */ sourceModules = files.map(function (file) { return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables); });
	                return ListWrapper.flatten(sourceModules);
	            });
	        };
	        /**
	         * @param {?} srcFileUrl
	         * @param {?} ngModuleByPipeOrDirective
	         * @param {?} directives
	         * @param {?} pipes
	         * @param {?} ngModules
	         * @param {?} injectables
	         * @return {?}
	         */
	        AotCompiler.prototype._compileSrcFile = function (srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {
	            var _this = this;
	            var /** @type {?} */ fileSuffix = _splitTypescriptSuffix(srcFileUrl)[1];
	            var /** @type {?} */ statements = [];
	            var /** @type {?} */ exportedVars = [];
	            var /** @type {?} */ generatedFiles = [];
	            generatedFiles.push(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables));
	            // compile all ng modules
	            exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) { return _this._compileModule(ngModuleType, statements); }));
	            // compile directive wrappers
	            exportedVars.push.apply(exportedVars, directives.map(function (directiveType) { return _this._compileDirectiveWrapper(directiveType, statements); }));
	            // compile components
	            directives.forEach(function (dirType) {
	                var /** @type {?} */ compMeta = _this._metadataResolver.getDirectiveMetadata(/** @type {?} */ (dirType));
	                if (!compMeta.isComponent) {
	                    return Promise.resolve(null);
	                }
	                var /** @type {?} */ ngModule = ngModuleByPipeOrDirective.get(dirType);
	                if (!ngModule) {
	                    throw new Error("Internal Error: cannot determine the module for component " + identifierName(compMeta.type) + "!");
	                }
	                _assertComponent(compMeta);
	                // compile styles
	                var /** @type {?} */ stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
	                stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {
	                    generatedFiles.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
	                });
	                // compile components
	                exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements));
	            });
	            if (statements.length > 0) {
	                var /** @type {?} */ srcModule = this._codegenSourceModule(srcFileUrl, _ngfactoryModuleUrl(srcFileUrl), statements, exportedVars);
	                generatedFiles.unshift(srcModule);
	            }
	            return generatedFiles;
	        };
	        /**
	         * @param {?} srcFileUrl
	         * @param {?} directives
	         * @param {?} pipes
	         * @param {?} ngModules
	         * @param {?} injectables
	         * @return {?}
	         */
	        AotCompiler.prototype._createSummary = function (srcFileUrl, directives, pipes, ngModules, injectables) {
	            var _this = this;
	            var /** @type {?} */ symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl)
	                .map(function (symbol) { return _this._symbolResolver.resolveSymbol(symbol); });
	            var /** @type {?} */ typeSummaries = ngModules.map(function (ref) { return _this._metadataResolver.getNgModuleSummary(ref); }).concat(directives.map(function (ref) { return _this._metadataResolver.getDirectiveSummary(ref); }), pipes.map(function (ref) { return _this._metadataResolver.getPipeSummary(ref); }), injectables.map(function (ref) { return _this._metadataResolver.getInjectableSummary(ref); }));
	            var /** @type {?} */ json = serializeSummaries(this._host, this._summaryResolver, this._symbolResolver, symbolSummaries, typeSummaries);
	            return new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json);
	        };
	        /**
	         * @param {?} ngModuleType
	         * @param {?} targetStatements
	         * @return {?}
	         */
	        AotCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {
	            var _this = this;
	            var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
	            var /** @type {?} */ providers = [];
	            if (this._localeId) {
	                providers.push({
	                    token: createIdentifierToken(Identifiers.LOCALE_ID),
	                    useValue: this._localeId,
	                });
	            }
	            if (this._translationFormat) {
	                providers.push({
	                    token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
	                    useValue: this._translationFormat
	                });
	            }
	            var /** @type {?} */ appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
	            appCompileResult.dependencies.forEach(function (dep) {
	                dep.placeholder.reference = _this._symbolResolver.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(dep.comp)), _componentFactoryName(dep.comp));
	            });
	            targetStatements.push.apply(targetStatements, appCompileResult.statements);
	            return appCompileResult.ngModuleFactoryVar;
	        };
	        /**
	         * @param {?} directiveType
	         * @param {?} targetStatements
	         * @return {?}
	         */
	        AotCompiler.prototype._compileDirectiveWrapper = function (directiveType, targetStatements) {
	            var /** @type {?} */ dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);
	            var /** @type {?} */ dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);
	            targetStatements.push.apply(targetStatements, dirCompileResult.statements);
	            return dirCompileResult.dirWrapperClassVar;
	        };
	        /**
	         * @param {?} compMeta
	         * @param {?} ngModule
	         * @param {?} fileSuffix
	         * @param {?} targetStatements
	         * @return {?}
	         */
	        AotCompiler.prototype._compileComponentFactory = function (compMeta, ngModule, fileSuffix, targetStatements) {
	            var /** @type {?} */ hostMeta = createHostComponentMeta(this._symbolResolver.getStaticSymbol(identifierModuleUrl(compMeta.type), identifierName(compMeta.type) + "_Host"), compMeta);
	            var /** @type {?} */ hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements);
	            var /** @type {?} */ compFactoryVar = _componentFactoryName(compMeta.type);
	            targetStatements.push(variable(compFactoryVar)
	                .set(importExpr(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)])
	                .instantiate([
	                literal(compMeta.selector),
	                variable(hostViewFactoryVar),
	                importExpr(compMeta.type),
	            ], importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const])))
	                .toDeclStmt(null, [StmtModifier.Final]));
	            return compFactoryVar;
	        };
	        /**
	         * @param {?} compMeta
	         * @param {?} ngModule
	         * @param {?} directiveIdentifiers
	         * @param {?} componentStyles
	         * @param {?} fileSuffix
	         * @param {?} targetStatements
	         * @return {?}
	         */
	        AotCompiler.prototype._compileComponent = function (compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
	            var _this = this;
	            var /** @type {?} */ parsedAnimations = this._animationParser.parseComponent(compMeta);
	            var /** @type {?} */ directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	            var /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	            var /** @type {?} */ parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, identifierName(compMeta.type));
	            var /** @type {?} */ stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
	            var /** @type {?} */ compiledAnimations = this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations);
	            var /** @type {?} */ viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes, compiledAnimations);
	            if (componentStyles) {
	                targetStatements.push.apply(targetStatements, _resolveStyleStatements(this._symbolResolver, componentStyles, fileSuffix));
	            }
	            compiledAnimations.forEach(function (entry) { return targetStatements.push.apply(targetStatements, entry.statements); });
	            targetStatements.push.apply(targetStatements, _resolveViewStatements(this._symbolResolver, viewResult));
	            return viewResult.viewClassVar;
	        };
	        /**
	         * @param {?} fileUrl
	         * @param {?} stylesCompileResult
	         * @param {?} fileSuffix
	         * @return {?}
	         */
	        AotCompiler.prototype._codgenStyles = function (fileUrl, stylesCompileResult, fileSuffix) {
	            _resolveStyleStatements(this._symbolResolver, stylesCompileResult, fileSuffix);
	            return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
	        };
	        /**
	         * @param {?} srcFileUrl
	         * @param {?} genFileUrl
	         * @param {?} statements
	         * @param {?} exportedVars
	         * @return {?}
	         */
	        AotCompiler.prototype._codegenSourceModule = function (srcFileUrl, genFileUrl, statements, exportedVars) {
	            return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(genFileUrl, statements, exportedVars));
	        };
	        return AotCompiler;
	    }());
	    /**
	     * @param {?} reflector
	     * @param {?} compileResult
	     * @return {?}
	     */
	    function _resolveViewStatements(reflector, compileResult) {
	        compileResult.dependencies.forEach(function (dep) {
	            if (dep instanceof ViewClassDependency) {
	                var /** @type {?} */ vfd = (dep);
	                vfd.placeholder.reference =
	                    reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(vfd.comp)), dep.name);
	            }
	            else if (dep instanceof ComponentFactoryDependency$1) {
	                var /** @type {?} */ cfd = (dep);
	                cfd.placeholder.reference = reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(cfd.comp)), _componentFactoryName(cfd.comp));
	            }
	            else if (dep instanceof DirectiveWrapperDependency) {
	                var /** @type {?} */ dwd = (dep);
	                dwd.placeholder.reference =
	                    reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(dwd.dir)), dwd.name);
	            }
	        });
	        return compileResult.statements;
	    }
	    /**
	     * @param {?} reflector
	     * @param {?} compileResult
	     * @param {?} fileSuffix
	     * @return {?}
	     */
	    function _resolveStyleStatements(reflector, compileResult, fileSuffix) {
	        compileResult.dependencies.forEach(function (dep) {
	            dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);
	        });
	        return compileResult.statements;
	    }
	    /**
	     * @param {?} dirUrl
	     * @return {?}
	     */
	    function _ngfactoryModuleUrl(dirUrl) {
	        var /** @type {?} */ urlWithSuffix = _splitTypescriptSuffix(dirUrl);
	        return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
	    }
	    /**
	     * @param {?} comp
	     * @return {?}
	     */
	    function _componentFactoryName(comp) {
	        return identifierName(comp) + "NgFactory";
	    }
	    /**
	     * @param {?} stylesheetUrl
	     * @param {?} shim
	     * @param {?} suffix
	     * @return {?}
	     */
	    function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
	        return "" + stylesheetUrl + (shim ? '.shim' : '') + ".ngstyle" + suffix;
	    }
	    /**
	     * @param {?} meta
	     * @return {?}
	     */
	    function _assertComponent(meta) {
	        if (!meta.isComponent) {
	            throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
	        }
	    }
	    /**
	     * @param {?} path
	     * @return {?}
	     */
	    function _splitTypescriptSuffix(path) {
	        if (path.endsWith('.d.ts')) {
	            return [path.slice(0, -5), '.ts'];
	        }
	        var /** @type {?} */ lastDot = path.lastIndexOf('.');
	        if (lastDot !== -1) {
	            return [path.substring(0, lastDot), path.substring(lastDot)];
	        }
	        return [path, ''];
	    }
	    /**
	     * @param {?} programStaticSymbols
	     * @param {?} host
	     * @param {?} metadataResolver
	     * @return {?}
	     */
	    function analyzeNgModules(programStaticSymbols, host, metadataResolver) {
	        var _a = _createNgModules(programStaticSymbols, host, metadataResolver), ngModules = _a.ngModules, symbolsMissingModule = _a.symbolsMissingModule;
	        return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver);
	    }
	    /**
	     * @param {?} programStaticSymbols
	     * @param {?} host
	     * @param {?} metadataResolver
	     * @return {?}
	     */
	    function analyzeAndValidateNgModules(programStaticSymbols, host, metadataResolver) {
	        var /** @type {?} */ result = analyzeNgModules(programStaticSymbols, host, metadataResolver);
	        if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
	            var /** @type {?} */ messages = result.symbolsMissingModule.map(function (s) { return ("Cannot determine the module for class " + s.name + " in " + s.filePath + "!"); });
	            throw new Error(messages.join('\n'));
	        }
	        return result;
	    }
	    /**
	     * @param {?} programSymbols
	     * @param {?} ngModuleMetas
	     * @param {?} symbolsMissingModule
	     * @param {?} metadataResolver
	     * @return {?}
	     */
	    function _analyzeNgModules(programSymbols, ngModuleMetas, symbolsMissingModule, metadataResolver) {
	        var /** @type {?} */ moduleMetasByRef = new Map();
	        ngModuleMetas.forEach(function (ngModule) { return moduleMetasByRef.set(ngModule.type.reference, ngModule); });
	        var /** @type {?} */ ngModuleByPipeOrDirective = new Map();
	        var /** @type {?} */ ngModulesByFile = new Map();
	        var /** @type {?} */ ngDirectivesByFile = new Map();
	        var /** @type {?} */ ngPipesByFile = new Map();
	        var /** @type {?} */ ngInjectablesByFile = new Map();
	        var /** @type {?} */ filePaths = new Set();
	        // Make sure we produce an analyzed file for each input file
	        programSymbols.forEach(function (symbol) {
	            var /** @type {?} */ filePath = symbol.filePath;
	            filePaths.add(filePath);
	            if (metadataResolver.isInjectable(symbol)) {
	                ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol));
	            }
	        });
	        // Looping over all modules to construct:
	        // - a map from file to modules `ngModulesByFile`,
	        // - a map from file to directives `ngDirectivesByFile`,
	        // - a map from file to pipes `ngPipesByFile`,
	        // - a map from directive/pipe to module `ngModuleByPipeOrDirective`.
	        ngModuleMetas.forEach(function (ngModuleMeta) {
	            var /** @type {?} */ srcFileUrl = ngModuleMeta.type.reference.filePath;
	            filePaths.add(srcFileUrl);
	            ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
	            ngModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                var /** @type {?} */ fileUrl = dirIdentifier.reference.filePath;
	                filePaths.add(fileUrl);
	                ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
	                ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
	            });
	            ngModuleMeta.declaredPipes.forEach(function (pipeIdentifier) {
	                var /** @type {?} */ fileUrl = pipeIdentifier.reference.filePath;
	                filePaths.add(fileUrl);
	                ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference));
	                ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
	            });
	        });
	        var /** @type {?} */ files = [];
	        filePaths.forEach(function (srcUrl) {
	            var /** @type {?} */ directives = ngDirectivesByFile.get(srcUrl) || [];
	            var /** @type {?} */ pipes = ngPipesByFile.get(srcUrl) || [];
	            var /** @type {?} */ ngModules = ngModulesByFile.get(srcUrl) || [];
	            var /** @type {?} */ injectables = ngInjectablesByFile.get(srcUrl) || [];
	            files.push({ srcUrl: srcUrl, directives: directives, pipes: pipes, ngModules: ngModules, injectables: injectables });
	        });
	        return {
	            // map directive/pipe to module
	            ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
	            // list modules and directives for every source file
	            files: files,
	            ngModules: ngModuleMetas, symbolsMissingModule: symbolsMissingModule
	        };
	    }
	    /**
	     * @param {?} staticSymbolResolver
	     * @param {?} files
	     * @param {?} host
	     * @return {?}
	     */
	    function extractProgramSymbols(staticSymbolResolver, files, host) {
	        var /** @type {?} */ staticSymbols = [];
	        files.filter(function (fileName) { return host.isSourceFile(fileName); }).forEach(function (sourceFile) {
	            staticSymbolResolver.getSymbolsOf(sourceFile).forEach(function (symbol) {
	                var /** @type {?} */ resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);
	                var /** @type {?} */ symbolMeta = resolvedSymbol.metadata;
	                if (symbolMeta) {
	                    if (symbolMeta.__symbolic != 'error') {
	                        // Ignore symbols that are only included to record error information.
	                        staticSymbols.push(resolvedSymbol.symbol);
	                    }
	                }
	            });
	        });
	        return staticSymbols;
	    }
	    /**
	     * @param {?} programStaticSymbols
	     * @param {?} host
	     * @param {?} metadataResolver
	     * @return {?}
	     */
	    function _createNgModules(programStaticSymbols, host, metadataResolver) {
	        var /** @type {?} */ ngModules = new Map();
	        var /** @type {?} */ programPipesAndDirectives = [];
	        var /** @type {?} */ ngModulePipesAndDirective = new Set();
	        var /** @type {?} */ addNgModule = function (staticSymbol) {
	            if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) {
	                return false;
	            }
	            var /** @type {?} */ ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);
	            if (ngModule) {
	                ngModules.set(ngModule.type.reference, ngModule);
	                ngModule.declaredDirectives.forEach(function (dir) { return ngModulePipesAndDirective.add(dir.reference); });
	                ngModule.declaredPipes.forEach(function (pipe) { return ngModulePipesAndDirective.add(pipe.reference); });
	                // For every input module add the list of transitively included modules
	                ngModule.transitiveModule.modules.forEach(function (modMeta) { return addNgModule(modMeta.reference); });
	            }
	            return !!ngModule;
	        };
	        programStaticSymbols.forEach(function (staticSymbol) {
	            if (!addNgModule(staticSymbol) &&
	                (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
	                programPipesAndDirectives.push(staticSymbol);
	            }
	        });
	        // Throw an error if any of the program pipe or directives is not declared by a module
	        var /** @type {?} */ symbolsMissingModule = programPipesAndDirectives.filter(function (s) { return !ngModulePipesAndDirective.has(s); });
	        return { ngModules: Array.from(ngModules.values()), symbolsMissingModule: symbolsMissingModule };
	    }

	    var StaticAndDynamicReflectionCapabilities = (function () {
	        /**
	         * @param {?} staticDelegate
	         */
	        function StaticAndDynamicReflectionCapabilities(staticDelegate) {
	            this.staticDelegate = staticDelegate;
	            this.dynamicDelegate = new ReflectionCapabilities();
	        }
	        /**
	         * @param {?} staticDelegate
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.install = function (staticDelegate) {
	            reflector.updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));
	        };
	        /**
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.factory = function (type) { return this.dynamicDelegate.factory(type); };
	        /**
	         * @param {?} type
	         * @param {?} lcProperty
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	            return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) :
	                this.dynamicDelegate.hasLifecycleHook(type, lcProperty);
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.parameters = function (type) {
	            return isStaticType(type) ? this.staticDelegate.parameters(type) :
	                this.dynamicDelegate.parameters(type);
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.annotations = function (type) {
	            return isStaticType(type) ? this.staticDelegate.annotations(type) :
	                this.dynamicDelegate.annotations(type);
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	            return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) :
	                this.dynamicDelegate.propMetadata(typeOrFunc);
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.getter = function (name) { return this.dynamicDelegate.getter(name); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.setter = function (name) { return this.dynamicDelegate.setter(name); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.method = function (name) { return this.dynamicDelegate.method(name); };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.importUri = function (type) { return this.staticDelegate.importUri(type); };
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} runtime
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
	            return this.staticDelegate.resolveIdentifier(name, moduleUrl);
	        };
	        /**
	         * @param {?} enumIdentifier
	         * @param {?} name
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) {
	            if (isStaticType(enumIdentifier)) {
	                return this.staticDelegate.resolveEnum(enumIdentifier, name);
	            }
	            else {
	                return null;
	            }
	        };
	        return StaticAndDynamicReflectionCapabilities;
	    }());
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function isStaticType(type) {
	        return typeof type === 'object' && type.name && type.filePath;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$27 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ ANGULAR_IMPORT_LOCATIONS = {
	        coreDecorators: '@angular/core/src/metadata',
	        diDecorators: '@angular/core/src/di/metadata',
	        diMetadata: '@angular/core/src/di/metadata',
	        diOpaqueToken: '@angular/core/src/di/opaque_token',
	        animationMetadata: '@angular/core/src/animation/metadata',
	        provider: '@angular/core/src/di/provider'
	    };
	    var /** @type {?} */ HIDDEN_KEY = /^\$.*\$$/;
	    /**
	     * A static reflector implements enough of the Reflector API that is necessary to compile
	     * templates statically.
	     */
	    var StaticReflector = (function () {
	        /**
	         * @param {?} symbolResolver
	         * @param {?=} knownMetadataClasses
	         * @param {?=} knownMetadataFunctions
	         * @param {?=} errorRecorder
	         */
	        function StaticReflector(symbolResolver, knownMetadataClasses, knownMetadataFunctions, errorRecorder) {
	            var _this = this;
	            if (knownMetadataClasses === void 0) { knownMetadataClasses = []; }
	            if (knownMetadataFunctions === void 0) { knownMetadataFunctions = []; }
	            this.symbolResolver = symbolResolver;
	            this.errorRecorder = errorRecorder;
	            this.annotationCache = new Map();
	            this.propertyCache = new Map();
	            this.parameterCache = new Map();
	            this.methodCache = new Map();
	            this.conversionMap = new Map();
	            this.initializeConversionMap();
	            knownMetadataClasses.forEach(function (kc) { return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor); });
	            knownMetadataFunctions.forEach(function (kf) { return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn); });
	        }
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        StaticReflector.prototype.importUri = function (typeOrFunc) {
	            var /** @type {?} */ staticSymbol = this.findSymbolDeclaration(typeOrFunc);
	            return staticSymbol ? staticSymbol.filePath : null;
	        };
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @return {?}
	         */
	        StaticReflector.prototype.resolveIdentifier = function (name, moduleUrl) {
	            return this.findDeclaration(moduleUrl, name);
	        };
	        /**
	         * @param {?} moduleUrl
	         * @param {?} name
	         * @param {?=} containingFile
	         * @return {?}
	         */
	        StaticReflector.prototype.findDeclaration = function (moduleUrl, name, containingFile) {
	            return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));
	        };
	        /**
	         * @param {?} symbol
	         * @return {?}
	         */
	        StaticReflector.prototype.findSymbolDeclaration = function (symbol) {
	            var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);
	            if (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
	                return this.findSymbolDeclaration(resolvedSymbol.metadata);
	            }
	            else {
	                return symbol;
	            }
	        };
	        /**
	         * @param {?} enumIdentifier
	         * @param {?} name
	         * @return {?}
	         */
	        StaticReflector.prototype.resolveEnum = function (enumIdentifier, name) {
	            var /** @type {?} */ staticSymbol = enumIdentifier;
	            return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, [name]);
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticReflector.prototype.annotations = function (type) {
	            var /** @type {?} */ annotations = this.annotationCache.get(type);
	            if (!annotations) {
	                annotations = [];
	                var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	                if (classMetadata['extends']) {
	                    var /** @type {?} */ parentAnnotations = this.annotations(this.simplify(type, classMetadata['extends']));
	                    annotations.push.apply(annotations, parentAnnotations);
	                }
	                if (classMetadata['decorators']) {
	                    var /** @type {?} */ ownAnnotations = this.simplify(type, classMetadata['decorators']);
	                    annotations.push.apply(annotations, ownAnnotations);
	                }
	                this.annotationCache.set(type, annotations.filter(function (ann) { return !!ann; }));
	            }
	            return annotations;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticReflector.prototype.propMetadata = function (type) {
	            var _this = this;
	            var /** @type {?} */ propMetadata = this.propertyCache.get(type);
	            if (!propMetadata) {
	                var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	                propMetadata = {};
	                if (classMetadata['extends']) {
	                    var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(this.simplify(type, classMetadata['extends']));
	                    Object.keys(parentPropMetadata_1).forEach(function (parentProp) {
	                        propMetadata[parentProp] = parentPropMetadata_1[parentProp];
	                    });
	                }
	                var /** @type {?} */ members_1 = classMetadata['members'] || {};
	                Object.keys(members_1).forEach(function (propName) {
	                    var /** @type {?} */ propData = members_1[propName];
	                    var /** @type {?} */ prop = ((propData))
	                        .find(function (a) { return a['__symbolic'] == 'property' || a['__symbolic'] == 'method'; });
	                    var /** @type {?} */ decorators = [];
	                    if (propMetadata[propName]) {
	                        decorators.push.apply(decorators, propMetadata[propName]);
	                    }
	                    propMetadata[propName] = decorators;
	                    if (prop && prop['decorators']) {
	                        decorators.push.apply(decorators, _this.simplify(type, prop['decorators']));
	                    }
	                });
	                this.propertyCache.set(type, propMetadata);
	            }
	            return propMetadata;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticReflector.prototype.parameters = function (type) {
	            if (!(type instanceof StaticSymbol)) {
	                this.reportError(new Error("parameters received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
	                return [];
	            }
	            try {
	                var /** @type {?} */ parameters_1 = this.parameterCache.get(type);
	                if (!parameters_1) {
	                    var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	                    var /** @type {?} */ members = classMetadata ? classMetadata['members'] : null;
	                    var /** @type {?} */ ctorData = members ? members['__ctor__'] : null;
	                    if (ctorData) {
	                        var /** @type {?} */ ctor = ((ctorData)).find(function (a) { return a['__symbolic'] == 'constructor'; });
	                        var /** @type {?} */ parameterTypes = (this.simplify(type, ctor['parameters'] || []));
	                        var /** @type {?} */ parameterDecorators_1 = (this.simplify(type, ctor['parameterDecorators'] || []));
	                        parameters_1 = [];
	                        parameterTypes.forEach(function (paramType, index) {
	                            var /** @type {?} */ nestedResult = [];
	                            if (paramType) {
	                                nestedResult.push(paramType);
	                            }
	                            var /** @type {?} */ decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null;
	                            if (decorators) {
	                                nestedResult.push.apply(nestedResult, decorators);
	                            }
	                            parameters_1.push(nestedResult);
	                        });
	                    }
	                    else if (classMetadata['extends']) {
	                        parameters_1 = this.parameters(this.simplify(type, classMetadata['extends']));
	                    }
	                    if (!parameters_1) {
	                        parameters_1 = [];
	                    }
	                    this.parameterCache.set(type, parameters_1);
	                }
	                return parameters_1;
	            }
	            catch (e) {
	                console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticReflector.prototype._methodNames = function (type) {
	            var /** @type {?} */ methodNames = this.methodCache.get(type);
	            if (!methodNames) {
	                var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	                methodNames = {};
	                if (classMetadata['extends']) {
	                    var /** @type {?} */ parentMethodNames_1 = this._methodNames(this.simplify(type, classMetadata['extends']));
	                    Object.keys(parentMethodNames_1).forEach(function (parentProp) {
	                        methodNames[parentProp] = parentMethodNames_1[parentProp];
	                    });
	                }
	                var /** @type {?} */ members_2 = classMetadata['members'] || {};
	                Object.keys(members_2).forEach(function (propName) {
	                    var /** @type {?} */ propData = members_2[propName];
	                    var /** @type {?} */ isMethod = ((propData)).some(function (a) { return a['__symbolic'] == 'method'; });
	                    methodNames[propName] = methodNames[propName] || isMethod;
	                });
	                this.methodCache.set(type, methodNames);
	            }
	            return methodNames;
	        };
	        /**
	         * @param {?} type
	         * @param {?} lcProperty
	         * @return {?}
	         */
	        StaticReflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	            if (!(type instanceof StaticSymbol)) {
	                this.reportError(new Error("hasLifecycleHook received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
	            }
	            try {
	                return !!this._methodNames(type)[lcProperty];
	            }
	            catch (e) {
	                console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} type
	         * @param {?} ctor
	         * @return {?}
	         */
	        StaticReflector.prototype._registerDecoratorOrConstructor = function (type, ctor) {
	            this.conversionMap.set(type, function (context, args) { return new (ctor.bind.apply(ctor, [void 0].concat(args)))(); });
	        };
	        /**
	         * @param {?} type
	         * @param {?} fn
	         * @return {?}
	         */
	        StaticReflector.prototype._registerFunction = function (type, fn) {
	            this.conversionMap.set(type, function (context, args) { return fn.apply(undefined, args); });
	        };
	        /**
	         * @return {?}
	         */
	        StaticReflector.prototype.initializeConversionMap = function () {
	            var coreDecorators = ANGULAR_IMPORT_LOCATIONS.coreDecorators, diDecorators = ANGULAR_IMPORT_LOCATIONS.diDecorators, diMetadata = ANGULAR_IMPORT_LOCATIONS.diMetadata, diOpaqueToken = ANGULAR_IMPORT_LOCATIONS.diOpaqueToken, animationMetadata = ANGULAR_IMPORT_LOCATIONS.animationMetadata, provider = ANGULAR_IMPORT_LOCATIONS.provider;
	            this.opaqueToken = this.findDeclaration(diOpaqueToken, 'OpaqueToken');
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Host'), _angular_core.Host);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Injectable'), _angular_core.Injectable);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Self'), _angular_core.Self);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'SkipSelf'), _angular_core.SkipSelf);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Inject'), _angular_core.Inject);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Optional'), _angular_core.Optional);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Attribute'), _angular_core.Attribute);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ContentChild'), _angular_core.ContentChild);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ContentChildren'), _angular_core.ContentChildren);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ViewChild'), _angular_core.ViewChild);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ViewChildren'), _angular_core.ViewChildren);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Input'), _angular_core.Input);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Output'), _angular_core.Output);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Pipe'), _angular_core.Pipe);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'HostBinding'), _angular_core.HostBinding);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'HostListener'), _angular_core.HostListener);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Directive'), _angular_core.Directive);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Component'), _angular_core.Component);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'NgModule'), _angular_core.NgModule);
	            // Note: Some metadata classes can be used directly with Provider.deps.
	            this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Host'), _angular_core.Host);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Self'), _angular_core.Self);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'SkipSelf'), _angular_core.SkipSelf);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Optional'), _angular_core.Optional);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'trigger'), _angular_core.trigger);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'state'), _angular_core.state);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'transition'), _angular_core.transition);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'style'), _angular_core.style);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'animate'), _angular_core.animate);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'keyframes'), _angular_core.keyframes);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'sequence'), _angular_core.sequence);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'group'), _angular_core.group);
	        };
	        /**
	         * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
	         * All types passed to the StaticResolver should be pseudo-types returned by this method.
	         *
	         * @param {?} declarationFile the absolute path of the file where the symbol is declared
	         * @param {?} name the name of the type.
	         * @param {?=} members
	         * @return {?}
	         */
	        StaticReflector.prototype.getStaticSymbol = function (declarationFile, name, members) {
	            return this.symbolResolver.getStaticSymbol(declarationFile, name, members);
	        };
	        /**
	         * @param {?} error
	         * @param {?} context
	         * @param {?=} path
	         * @return {?}
	         */
	        StaticReflector.prototype.reportError = function (error, context, path) {
	            if (this.errorRecorder) {
	                this.errorRecorder(error, (context && context.filePath) || path);
	            }
	            else {
	                throw error;
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} context
	         * @param {?} value
	         * @return {?}
	         */
	        StaticReflector.prototype.simplify = function (context, value) {
	            var _this = this;
	            var /** @type {?} */ self = this;
	            var /** @type {?} */ scope = BindingScope.empty;
	            var /** @type {?} */ calling = new Map();
	            /**
	             * @param {?} context
	             * @param {?} value
	             * @param {?} depth
	             * @return {?}
	             */
	            function simplifyInContext(context, value, depth) {
	                /**
	                 * @param {?} staticSymbol
	                 * @return {?}
	                 */
	                function resolveReferenceValue(staticSymbol) {
	                    var /** @type {?} */ resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);
	                    return resolvedSymbol ? resolvedSymbol.metadata : null;
	                }
	                /**
	                 * @param {?} functionSymbol
	                 * @param {?} targetFunction
	                 * @param {?} args
	                 * @return {?}
	                 */
	                function simplifyCall(functionSymbol, targetFunction, args) {
	                    if (targetFunction && targetFunction['__symbolic'] == 'function') {
	                        if (calling.get(functionSymbol)) {
	                            throw new Error('Recursion not supported');
	                        }
	                        calling.set(functionSymbol, true);
	                        try {
	                            var /** @type {?} */ value_1 = targetFunction['value'];
	                            if (value_1 && (depth != 0 || value_1.__symbolic != 'error')) {
	                                var /** @type {?} */ parameters = targetFunction['parameters'];
	                                var /** @type {?} */ defaults = targetFunction.defaults;
	                                args = args.map(function (arg) { return simplifyInContext(context, arg, depth + 1); });
	                                if (defaults && defaults.length > args.length) {
	                                    args.push.apply(args, defaults.slice(args.length).map(function (value) { return simplify(value); }));
	                                }
	                                var /** @type {?} */ functionScope = BindingScope.build();
	                                for (var /** @type {?} */ i = 0; i < parameters.length; i++) {
	                                    functionScope.define(parameters[i], args[i]);
	                                }
	                                var /** @type {?} */ oldScope = scope;
	                                var /** @type {?} */ result_1;
	                                try {
	                                    scope = functionScope.done();
	                                    result_1 = simplifyInContext(functionSymbol, value_1, depth + 1);
	                                }
	                                finally {
	                                    scope = oldScope;
	                                }
	                                return result_1;
	                            }
	                        }
	                        finally {
	                            calling.delete(functionSymbol);
	                        }
	                    }
	                    if (depth === 0) {
	                        // If depth is 0 we are evaluating the top level expression that is describing element
	                        // decorator. In this case, it is a decorator we don't understand, such as a custom
	                        // non-angular decorator, and we should just ignore it.
	                        return { __symbolic: 'ignore' };
	                    }
	                    return simplify({ __symbolic: 'error', message: 'Function call not supported', context: functionSymbol });
	                }
	                /**
	                 * @param {?} expression
	                 * @return {?}
	                 */
	                function simplify(expression) {
	                    if (isPrimitive$1(expression)) {
	                        return expression;
	                    }
	                    if (expression instanceof Array) {
	                        var /** @type {?} */ result_2 = [];
	                        for (var _i = 0, _a = ((expression)); _i < _a.length; _i++) {
	                            var item = _a[_i];
	                            // Check for a spread expression
	                            if (item && item.__symbolic === 'spread') {
	                                var /** @type {?} */ spreadArray = simplify(item.expression);
	                                if (Array.isArray(spreadArray)) {
	                                    for (var _b = 0, spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) {
	                                        var spreadItem = spreadArray_1[_b];
	                                        result_2.push(spreadItem);
	                                    }
	                                    continue;
	                                }
	                            }
	                            var /** @type {?} */ value_2 = simplify(item);
	                            if (shouldIgnore(value_2)) {
	                                continue;
	                            }
	                            result_2.push(value_2);
	                        }
	                        return result_2;
	                    }
	                    if (expression instanceof StaticSymbol) {
	                        // Stop simplification at builtin symbols
	                        if (expression === self.opaqueToken || self.conversionMap.has(expression)) {
	                            return expression;
	                        }
	                        else {
	                            var /** @type {?} */ staticSymbol = expression;
	                            var /** @type {?} */ declarationValue = resolveReferenceValue(staticSymbol);
	                            if (declarationValue) {
	                                return simplifyInContext(staticSymbol, declarationValue, depth + 1);
	                            }
	                            else {
	                                return staticSymbol;
	                            }
	                        }
	                    }
	                    if (expression) {
	                        if (expression['__symbolic']) {
	                            var /** @type {?} */ staticSymbol = void 0;
	                            switch (expression['__symbolic']) {
	                                case 'binop':
	                                    var /** @type {?} */ left = simplify(expression['left']);
	                                    if (shouldIgnore(left))
	                                        return left;
	                                    var /** @type {?} */ right = simplify(expression['right']);
	                                    if (shouldIgnore(right))
	                                        return right;
	                                    switch (expression['operator']) {
	                                        case '&&':
	                                            return left && right;
	                                        case '||':
	                                            return left || right;
	                                        case '|':
	                                            return left | right;
	                                        case '^':
	                                            return left ^ right;
	                                        case '&':
	                                            return left & right;
	                                        case '==':
	                                            return left == right;
	                                        case '!=':
	                                            return left != right;
	                                        case '===':
	                                            return left === right;
	                                        case '!==':
	                                            return left !== right;
	                                        case '<':
	                                            return left < right;
	                                        case '>':
	                                            return left > right;
	                                        case '<=':
	                                            return left <= right;
	                                        case '>=':
	                                            return left >= right;
	                                        case '<<':
	                                            return left << right;
	                                        case '>>':
	                                            return left >> right;
	                                        case '+':
	                                            return left + right;
	                                        case '-':
	                                            return left - right;
	                                        case '*':
	                                            return left * right;
	                                        case '/':
	                                            return left / right;
	                                        case '%':
	                                            return left % right;
	                                    }
	                                    return null;
	                                case 'if':
	                                    var /** @type {?} */ condition = simplify(expression['condition']);
	                                    return condition ? simplify(expression['thenExpression']) :
	                                        simplify(expression['elseExpression']);
	                                case 'pre':
	                                    var /** @type {?} */ operand = simplify(expression['operand']);
	                                    if (shouldIgnore(operand))
	                                        return operand;
	                                    switch (expression['operator']) {
	                                        case '+':
	                                            return operand;
	                                        case '-':
	                                            return -operand;
	                                        case '!':
	                                            return !operand;
	                                        case '~':
	                                            return ~operand;
	                                    }
	                                    return null;
	                                case 'index':
	                                    var /** @type {?} */ indexTarget = simplify(expression['expression']);
	                                    var /** @type {?} */ index = simplify(expression['index']);
	                                    if (indexTarget && isPrimitive$1(index))
	                                        return indexTarget[index];
	                                    return null;
	                                case 'select':
	                                    var /** @type {?} */ member = expression['member'];
	                                    var /** @type {?} */ selectContext = context;
	                                    var /** @type {?} */ selectTarget = simplify(expression['expression']);
	                                    if (selectTarget instanceof StaticSymbol) {
	                                        var /** @type {?} */ members = selectTarget.members.concat(member);
	                                        selectContext =
	                                            self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);
	                                        var /** @type {?} */ declarationValue = resolveReferenceValue(selectContext);
	                                        if (declarationValue) {
	                                            return simplifyInContext(selectContext, declarationValue, depth + 1);
	                                        }
	                                        else {
	                                            return selectContext;
	                                        }
	                                    }
	                                    if (selectTarget && isPrimitive$1(member))
	                                        return simplifyInContext(selectContext, selectTarget[member], depth + 1);
	                                    return null;
	                                case 'reference':
	                                    // Note: This only has to deal with variable references,
	                                    // as symbol references have been converted into StaticSymbols already
	                                    // in the StaticSymbolResolver!
	                                    var /** @type {?} */ name_1 = expression['name'];
	                                    var /** @type {?} */ localValue = scope.resolve(name_1);
	                                    if (localValue != BindingScope.missing) {
	                                        return localValue;
	                                    }
	                                    break;
	                                case 'class':
	                                    return context;
	                                case 'function':
	                                    return context;
	                                case 'new':
	                                case 'call':
	                                    // Determine if the function is a built-in conversion
	                                    staticSymbol = simplifyInContext(context, expression['expression'], depth + 1);
	                                    if (staticSymbol instanceof StaticSymbol) {
	                                        if (staticSymbol === self.opaqueToken) {
	                                            // if somebody calls new OpaqueToken, don't create an OpaqueToken,
	                                            // but rather return the symbol to which the OpaqueToken is assigned to.
	                                            return context;
	                                        }
	                                        var /** @type {?} */ argExpressions = expression['arguments'] || [];
	                                        var /** @type {?} */ converter = self.conversionMap.get(staticSymbol);
	                                        if (converter) {
	                                            var /** @type {?} */ args = argExpressions.map(function (arg) { return simplifyInContext(context, arg, depth + 1); });
	                                            return converter(context, args);
	                                        }
	                                        else {
	                                            // Determine if the function is one we can simplify.
	                                            var /** @type {?} */ targetFunction = resolveReferenceValue(staticSymbol);
	                                            return simplifyCall(staticSymbol, targetFunction, argExpressions);
	                                        }
	                                    }
	                                    break;
	                                case 'error':
	                                    var /** @type {?} */ message = produceErrorMessage(expression);
	                                    if (expression['line']) {
	                                        message =
	                                            message + " (position " + (expression['line'] + 1) + ":" + (expression['character'] + 1) + " in the original .ts file)";
	                                        throw positionalError(message, context.filePath, expression['line'], expression['character']);
	                                    }
	                                    throw new Error(message);
	                            }
	                            return null;
	                        }
	                        return mapStringMap(expression, function (value, name) { return simplify(value); });
	                    }
	                    return null;
	                }
	                try {
	                    return simplify(value);
	                }
	                catch (e) {
	                    var /** @type {?} */ members = context.members.length ? "." + context.members.join('.') : '';
	                    var /** @type {?} */ message = e.message + ", resolving symbol " + context.name + members + " in " + context.filePath;
	                    if (e.fileName) {
	                        throw positionalError(message, e.fileName, e.line, e.column);
	                    }
	                    throw new SyntaxError(message);
	                }
	            }
	            var /** @type {?} */ recordedSimplifyInContext = function (context, value, depth) {
	                try {
	                    return simplifyInContext(context, value, depth);
	                }
	                catch (e) {
	                    _this.reportError(e, context);
	                }
	            };
	            var /** @type {?} */ result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) :
	                simplifyInContext(context, value, 0);
	            if (shouldIgnore(result)) {
	                return undefined;
	            }
	            return result;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticReflector.prototype.getTypeMetadata = function (type) {
	            var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(type);
	            return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :
	                { __symbolic: 'class' };
	        };
	        return StaticReflector;
	    }());
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    function expandedMessage(error) {
	        switch (error.message) {
	            case 'Reference to non-exported class':
	                if (error.context && error.context.className) {
	                    return "Reference to a non-exported class " + error.context.className + ". Consider exporting the class";
	                }
	                break;
	            case 'Variable not initialized':
	                return 'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';
	            case 'Destructuring not supported':
	                return 'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';
	            case 'Could not resolve type':
	                if (error.context && error.context.typeName) {
	                    return "Could not resolve type " + error.context.typeName;
	                }
	                break;
	            case 'Function call not supported':
	                var /** @type {?} */ prefix = error.context && error.context.name ? "Calling function '" + error.context.name + "', f" : 'F';
	                return prefix +
	                    'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';
	            case 'Reference to a local symbol':
	                if (error.context && error.context.name) {
	                    return "Reference to a local (non-exported) symbol '" + error.context.name + "'. Consider exporting the symbol";
	                }
	                break;
	        }
	        return error.message;
	    }
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    function produceErrorMessage(error) {
	        return "Error encountered resolving symbol values statically. " + expandedMessage(error);
	    }
	    /**
	     * @param {?} input
	     * @param {?} transform
	     * @return {?}
	     */
	    function mapStringMap(input, transform) {
	        if (!input)
	            return {};
	        var /** @type {?} */ result = {};
	        Object.keys(input).forEach(function (key) {
	            var /** @type {?} */ value = transform(input[key], key);
	            if (!shouldIgnore(value)) {
	                if (HIDDEN_KEY.test(key)) {
	                    Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });
	                }
	                else {
	                    result[key] = value;
	                }
	            }
	        });
	        return result;
	    }
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isPrimitive$1(o) {
	        return o === null || (typeof o !== 'function' && typeof o !== 'object');
	    }
	    /**
	     * @abstract
	     */
	    var BindingScope = (function () {
	        function BindingScope() {
	        }
	        /**
	         * @abstract
	         * @param {?} name
	         * @return {?}
	         */
	        BindingScope.prototype.resolve = function (name) { };
	        /**
	         * @return {?}
	         */
	        BindingScope.build = function () {
	            var /** @type {?} */ current = new Map();
	            return {
	                define: function (name, value) {
	                    current.set(name, value);
	                    return this;
	                },
	                done: function () {
	                    return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;
	                }
	            };
	        };
	        BindingScope.missing = {};
	        BindingScope.empty = { resolve: function (name) { return BindingScope.missing; } };
	        return BindingScope;
	    }());
	    var PopulatedScope = (function (_super) {
	        __extends$27(PopulatedScope, _super);
	        /**
	         * @param {?} bindings
	         */
	        function PopulatedScope(bindings) {
	            _super.call(this);
	            this.bindings = bindings;
	        }
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        PopulatedScope.prototype.resolve = function (name) {
	            return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;
	        };
	        return PopulatedScope;
	    }(BindingScope));
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    function shouldIgnore(value) {
	        return value && value.__symbolic == 'ignore';
	    }
	    /**
	     * @param {?} message
	     * @param {?} fileName
	     * @param {?} line
	     * @param {?} column
	     * @return {?}
	     */
	    function positionalError(message, fileName, line, column) {
	        var /** @type {?} */ result = new Error(message);
	        ((result)).fileName = fileName;
	        ((result)).line = line;
	        ((result)).column = column;
	        return result;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$28 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ResolvedStaticSymbol = (function () {
	        /**
	         * @param {?} symbol
	         * @param {?} metadata
	         */
	        function ResolvedStaticSymbol(symbol, metadata) {
	            this.symbol = symbol;
	            this.metadata = metadata;
	        }
	        return ResolvedStaticSymbol;
	    }());
	    var /** @type {?} */ SUPPORTED_SCHEMA_VERSION = 3;
	    /**
	     * This class is responsible for loading metadata per symbol,
	     * and normalizing references between symbols.
	     */
	    var StaticSymbolResolver = (function () {
	        /**
	         * @param {?} host
	         * @param {?} staticSymbolCache
	         * @param {?} summaryResolver
	         * @param {?=} errorRecorder
	         */
	        function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {
	            this.host = host;
	            this.staticSymbolCache = staticSymbolCache;
	            this.summaryResolver = summaryResolver;
	            this.errorRecorder = errorRecorder;
	            this.metadataCache = new Map();
	            this.resolvedSymbols = new Map();
	            this.resolvedFilePaths = new Set();
	        }
	        /**
	         * @param {?} staticSymbol
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.resolveSymbol = function (staticSymbol) {
	            if (staticSymbol.members.length > 0) {
	                return this._resolveSymbolMembers(staticSymbol);
	            }
	            var /** @type {?} */ result = this._resolveSymbolFromSummary(staticSymbol);
	            if (!result) {
	                // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
	                // have summaries, only .d.ts files. So we always need to check both, the summary
	                // and metadata.
	                this._createSymbolsOf(staticSymbol.filePath);
	                result = this.resolvedSymbols.get(staticSymbol);
	            }
	            return result;
	        };
	        /**
	         * @param {?} staticSymbol
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype._resolveSymbolMembers = function (staticSymbol) {
	            var /** @type {?} */ members = staticSymbol.members;
	            var /** @type {?} */ baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));
	            if (!baseResolvedSymbol) {
	                return null;
	            }
	            var /** @type {?} */ baseMetadata = baseResolvedSymbol.metadata;
	            if (baseMetadata instanceof StaticSymbol) {
	                return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));
	            }
	            else if (baseMetadata && baseMetadata.__symbolic === 'class') {
	                if (baseMetadata.statics && members.length === 1) {
	                    return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);
	                }
	            }
	            else {
	                var /** @type {?} */ value = baseMetadata;
	                for (var /** @type {?} */ i = 0; i < members.length && value; i++) {
	                    value = value[members[i]];
	                }
	                return new ResolvedStaticSymbol(staticSymbol, value);
	            }
	            return null;
	        };
	        /**
	         * @param {?} staticSymbol
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype._resolveSymbolFromSummary = function (staticSymbol) {
	            var /** @type {?} */ summary = this.summaryResolver.resolveSummary(staticSymbol);
	            return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;
	        };
	        /**
	         * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
	         * All types passed to the StaticResolver should be pseudo-types returned by this method.
	         *
	         * @param {?} declarationFile the absolute path of the file where the symbol is declared
	         * @param {?} name the name of the type.
	         * @param {?=} members
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.getStaticSymbol = function (declarationFile, name, members) {
	            return this.staticSymbolCache.get(declarationFile, name, members);
	        };
	        /**
	         * @param {?} filePath
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.getSymbolsOf = function (filePath) {
	            // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
	            // have summaries, only .d.ts files. So we always need to check both, the summary
	            // and metadata.
	            var /** @type {?} */ symbols = new Set(this.summaryResolver.getSymbolsOf(filePath));
	            this._createSymbolsOf(filePath);
	            this.resolvedSymbols.forEach(function (resolvedSymbol) {
	                if (resolvedSymbol.symbol.filePath === filePath) {
	                    symbols.add(resolvedSymbol.symbol);
	                }
	            });
	            return Array.from(symbols);
	        };
	        /**
	         * @param {?} filePath
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype._createSymbolsOf = function (filePath) {
	            var _this = this;
	            if (this.resolvedFilePaths.has(filePath)) {
	                return;
	            }
	            this.resolvedFilePaths.add(filePath);
	            var /** @type {?} */ resolvedSymbols = [];
	            var /** @type {?} */ metadata = this.getModuleMetadata(filePath);
	            if (metadata['metadata']) {
	                // handle direct declarations of the symbol
	                Object.keys(metadata['metadata']).forEach(function (symbolName) {
	                    var /** @type {?} */ symbolMeta = metadata['metadata'][symbolName];
	                    resolvedSymbols.push(_this.createResolvedSymbol(_this.getStaticSymbol(filePath, symbolName), symbolMeta));
	                });
	            }
	            // handle the symbols in one of the re-export location
	            if (metadata['exports']) {
	                var _loop_1 = function(moduleExport) {
	                    // handle the symbols in the list of explicitly re-exported symbols.
	                    if (moduleExport.export) {
	                        moduleExport.export.forEach(function (exportSymbol) {
	                            var /** @type {?} */ symbolName;
	                            if (typeof exportSymbol === 'string') {
	                                symbolName = exportSymbol;
	                            }
	                            else {
	                                symbolName = exportSymbol.as;
	                            }
	                            var /** @type {?} */ symName = symbolName;
	                            if (typeof exportSymbol !== 'string') {
	                                symName = exportSymbol.name;
	                            }
	                            var /** @type {?} */ resolvedModule = _this.resolveModule(moduleExport.from, filePath);
	                            if (resolvedModule) {
	                                var /** @type {?} */ targetSymbol = _this.getStaticSymbol(resolvedModule, symName);
	                                var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, symbolName);
	                                resolvedSymbols.push(new ResolvedStaticSymbol(sourceSymbol, targetSymbol));
	                            }
	                        });
	                    }
	                    else {
	                        // handle the symbols via export * directives.
	                        var /** @type {?} */ resolvedModule = this_1.resolveModule(moduleExport.from, filePath);
	                        if (resolvedModule) {
	                            var /** @type {?} */ nestedExports = this_1.getSymbolsOf(resolvedModule);
	                            nestedExports.forEach(function (targetSymbol) {
	                                var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, targetSymbol.name);
	                                resolvedSymbols.push(new ResolvedStaticSymbol(sourceSymbol, targetSymbol));
	                            });
	                        }
	                    }
	                };
	                var this_1 = this;
	                for (var _i = 0, _a = metadata['exports']; _i < _a.length; _i++) {
	                    var moduleExport = _a[_i];
	                    _loop_1(moduleExport);
	                }
	            }
	            resolvedSymbols.forEach(function (resolvedSymbol) { return _this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol); });
	        };
	        /**
	         * @param {?} sourceSymbol
	         * @param {?} metadata
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.createResolvedSymbol = function (sourceSymbol, metadata) {
	            var /** @type {?} */ self = this;
	            var ReferenceTransformer = (function (_super) {
	                __extends$28(ReferenceTransformer, _super);
	                function ReferenceTransformer() {
	                    _super.apply(this, arguments);
	                }
	                /**
	                 * @param {?} map
	                 * @param {?} functionParams
	                 * @return {?}
	                 */
	                ReferenceTransformer.prototype.visitStringMap = function (map, functionParams) {
	                    var /** @type {?} */ symbolic = map['__symbolic'];
	                    if (symbolic === 'function') {
	                        var /** @type {?} */ oldLen = functionParams.length;
	                        functionParams.push.apply(functionParams, (map['parameters'] || []));
	                        var /** @type {?} */ result = _super.prototype.visitStringMap.call(this, map, functionParams);
	                        functionParams.length = oldLen;
	                        return result;
	                    }
	                    else if (symbolic === 'reference') {
	                        var /** @type {?} */ module_1 = map['module'];
	                        var /** @type {?} */ name_1 = map['name'];
	                        if (!name_1) {
	                            return null;
	                        }
	                        var /** @type {?} */ filePath = void 0;
	                        if (module_1) {
	                            filePath = self.resolveModule(module_1, sourceSymbol.filePath);
	                            if (!filePath) {
	                                return {
	                                    __symbolic: 'error',
	                                    message: "Could not resolve " + module_1 + " relative to " + sourceSymbol.filePath + "."
	                                };
	                            }
	                        }
	                        else {
	                            var /** @type {?} */ isFunctionParam = functionParams.indexOf(name_1) >= 0;
	                            if (!isFunctionParam) {
	                                filePath = sourceSymbol.filePath;
	                            }
	                        }
	                        if (filePath) {
	                            return self.getStaticSymbol(filePath, name_1);
	                        }
	                        else {
	                            // reference to a function parameter
	                            return { __symbolic: 'reference', name: name_1 };
	                        }
	                    }
	                    else {
	                        return _super.prototype.visitStringMap.call(this, map, functionParams);
	                    }
	                };
	                return ReferenceTransformer;
	            }(ValueTransformer));
	            var /** @type {?} */ transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);
	            return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);
	        };
	        /**
	         * @param {?} error
	         * @param {?} context
	         * @param {?=} path
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.reportError = function (error, context, path) {
	            if (this.errorRecorder) {
	                this.errorRecorder(error, (context && context.filePath) || path);
	            }
	            else {
	                throw error;
	            }
	        };
	        /**
	         * @param {?} module an absolute path to a module file.
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.getModuleMetadata = function (module) {
	            var /** @type {?} */ moduleMetadata = this.metadataCache.get(module);
	            if (!moduleMetadata) {
	                var /** @type {?} */ moduleMetadatas = this.host.getMetadataFor(module);
	                if (moduleMetadatas) {
	                    var /** @type {?} */ maxVersion_1 = -1;
	                    moduleMetadatas.forEach(function (md) {
	                        if (md['version'] > maxVersion_1) {
	                            maxVersion_1 = md['version'];
	                            moduleMetadata = md;
	                        }
	                    });
	                }
	                if (!moduleMetadata) {
	                    moduleMetadata =
	                        { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };
	                }
	                if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {
	                    var /** @type {?} */ errorMessage = moduleMetadata['version'] == 2 ?
	                        "Unsupported metadata version " + moduleMetadata['version'] + " for module " + module + ". This module should be compiled with a newer version of ngc" :
	                        "Metadata version mismatch for module " + module + ", found version " + moduleMetadata['version'] + ", expected " + SUPPORTED_SCHEMA_VERSION;
	                    this.reportError(new Error(errorMessage), null);
	                }
	                this.metadataCache.set(module, moduleMetadata);
	            }
	            return moduleMetadata;
	        };
	        /**
	         * @param {?} module
	         * @param {?} symbolName
	         * @param {?=} containingFile
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.getSymbolByModule = function (module, symbolName, containingFile) {
	            var /** @type {?} */ filePath = this.resolveModule(module, containingFile);
	            if (!filePath) {
	                this.reportError(new Error("Could not resolve module " + module + (containingFile ? " relative to $ {\n            containingFile\n          } " : '')), null);
	                return this.getStaticSymbol("ERROR:" + module, symbolName);
	            }
	            return this.getStaticSymbol(filePath, symbolName);
	        };
	        /**
	         * @param {?} module
	         * @param {?} containingFile
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.resolveModule = function (module, containingFile) {
	            try {
	                return this.host.moduleNameToFileName(module, containingFile);
	            }
	            catch (e) {
	                console.error("Could not resolve module '" + module + "' relative to file " + containingFile);
	                this.reportError(new e, null, containingFile);
	            }
	        };
	        return StaticSymbolResolver;
	    }());

	    var AotSummaryResolver = (function () {
	        /**
	         * @param {?} host
	         * @param {?} staticSymbolCache
	         */
	        function AotSummaryResolver(host, staticSymbolCache) {
	            this.host = host;
	            this.staticSymbolCache = staticSymbolCache;
	            this.summaryCache = new Map();
	            this.loadedFilePaths = new Set();
	        }
	        /**
	         * @param {?} symbol
	         * @return {?}
	         */
	        AotSummaryResolver.prototype._assertNoMembers = function (symbol) {
	            if (symbol.members.length) {
	                throw new Error("Internal state: StaticSymbols in summaries can't have members! " + JSON.stringify(symbol));
	            }
	        };
	        /**
	         * @param {?} staticSymbol
	         * @return {?}
	         */
	        AotSummaryResolver.prototype.resolveSummary = function (staticSymbol) {
	            this._assertNoMembers(staticSymbol);
	            var /** @type {?} */ summary = this.summaryCache.get(staticSymbol);
	            if (!summary) {
	                this._loadSummaryFile(staticSymbol.filePath);
	                summary = this.summaryCache.get(staticSymbol);
	            }
	            return summary;
	        };
	        /**
	         * @param {?} filePath
	         * @return {?}
	         */
	        AotSummaryResolver.prototype.getSymbolsOf = function (filePath) {
	            this._loadSummaryFile(filePath);
	            return Array.from(this.summaryCache.keys()).filter(function (symbol) { return symbol.filePath === filePath; });
	        };
	        /**
	         * @param {?} filePath
	         * @return {?}
	         */
	        AotSummaryResolver.prototype._loadSummaryFile = function (filePath) {
	            var _this = this;
	            if (this.loadedFilePaths.has(filePath)) {
	                return;
	            }
	            this.loadedFilePaths.add(filePath);
	            if (!this.host.isSourceFile(filePath)) {
	                var /** @type {?} */ summaryFilePath = summaryFileName(filePath);
	                var /** @type {?} */ json = void 0;
	                try {
	                    json = this.host.loadSummary(summaryFilePath);
	                }
	                catch (e) {
	                    console.error("Error loading summary file " + summaryFilePath);
	                    throw e;
	                }
	                if (json) {
	                    var /** @type {?} */ readSummaries = deserializeSummaries(this.staticSymbolCache, json);
	                    readSummaries.forEach(function (summary) { _this.summaryCache.set(summary.symbol, summary); });
	                }
	            }
	        };
	        return AotSummaryResolver;
	    }());

	    /**
	     * Creates a new AotCompiler based on options and a host.
	     * @param {?} compilerHost
	     * @param {?} options
	     * @return {?}
	     */
	    function createAotCompiler(compilerHost, options) {
	        var /** @type {?} */ translations = options.translations || '';
	        var /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();
	        var /** @type {?} */ symbolCache = new StaticSymbolCache();
	        var /** @type {?} */ summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);
	        var /** @type {?} */ symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);
	        var /** @type {?} */ staticReflector = new StaticReflector(symbolResolver);
	        StaticAndDynamicReflectionCapabilities.install(staticReflector);
	        var /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat);
	        var /** @type {?} */ config = new CompilerConfig({
	            genDebugInfo: options.debug === true,
	            defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
	            logBindingUpdate: false,
	            useJit: false
	        });
	        var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return compilerHost.loadResource(url); } }, urlResolver, htmlParser, config);
	        var /** @type {?} */ expressionParser = new Parser(new Lexer());
	        var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();
	        var /** @type {?} */ console = new Console();
	        var /** @type {?} */ tmplParser = new TemplateParser(expressionParser, elementSchemaRegistry, htmlParser, console, []);
	        var /** @type {?} */ resolver = new CompileMetadataResolver(new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, staticReflector);
	        // TODO(vicb): do not pass options.i18nFormat here
	        var /** @type {?} */ compiler = new AotCompiler(compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver), new ViewCompiler(config, elementSchemaRegistry), new DirectiveWrapperCompiler(config, expressionParser, elementSchemaRegistry, console), new NgModuleCompiler(), new TypeScriptEmitter(compilerHost), summaryResolver, options.locale, options.i18nFormat, new AnimationParser(elementSchemaRegistry), symbolResolver);
	        return { compiler: compiler, reflector: staticReflector };
	    }

	    /**
	     * @param {?} statements
	     * @param {?} resultVar
	     * @return {?}
	     */
	    function interpretStatements(statements, resultVar) {
	        var /** @type {?} */ stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]);
	        var /** @type {?} */ ctx = new _ExecutionContext(null, null, null, new Map());
	        var /** @type {?} */ visitor = new StatementInterpreter();
	        var /** @type {?} */ result = visitor.visitAllStatements(stmtsWithReturn, ctx);
	        return isPresent(result) ? result.value : null;
	    }
	    /**
	     * @param {?} varNames
	     * @param {?} varValues
	     * @param {?} statements
	     * @param {?} ctx
	     * @param {?} visitor
	     * @return {?}
	     */
	    function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
	        var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();
	        for (var /** @type {?} */ i = 0; i < varNames.length; i++) {
	            childCtx.vars.set(varNames[i], varValues[i]);
	        }
	        var /** @type {?} */ result = visitor.visitAllStatements(statements, childCtx);
	        return isPresent(result) ? result.value : null;
	    }
	    var _ExecutionContext = (function () {
	        /**
	         * @param {?} parent
	         * @param {?} instance
	         * @param {?} className
	         * @param {?} vars
	         */
	        function _ExecutionContext(parent, instance, className, vars) {
	            this.parent = parent;
	            this.instance = instance;
	            this.className = className;
	            this.vars = vars;
	        }
	        /**
	         * @return {?}
	         */
	        _ExecutionContext.prototype.createChildWihtLocalVars = function () {
	            return new _ExecutionContext(this, this.instance, this.className, new Map());
	        };
	        return _ExecutionContext;
	    }());
	    var ReturnValue = (function () {
	        /**
	         * @param {?} value
	         */
	        function ReturnValue(value) {
	            this.value = value;
	        }
	        return ReturnValue;
	    }());
	    /**
	     * @param {?} _classStmt
	     * @param {?} _ctx
	     * @param {?} _visitor
	     * @return {?}
	     */
	    function createDynamicClass(_classStmt, _ctx, _visitor) {
	        var /** @type {?} */ propertyDescriptors = {};
	        _classStmt.getters.forEach(function (getter) {
	            // Note: use `function` instead of arrow function to capture `this`
	            propertyDescriptors[getter.name] = {
	                configurable: false,
	                get: function () {
	                    var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                    return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
	                }
	            };
	        });
	        _classStmt.methods.forEach(function (method) {
	            var /** @type {?} */ paramNames = method.params.map(function (param) { return param.name; });
	            // Note: use `function` instead of arrow function to capture `this`
	            propertyDescriptors[method.name] = {
	                writable: false,
	                configurable: false,
	                value: function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i - 0] = arguments[_i];
	                    }
	                    var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                    return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
	                }
	            };
	        });
	        var /** @type {?} */ ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });
	        // Note: use `function` instead of arrow function to capture `this`
	        var /** @type {?} */ ctor = function () {
	            var _this = this;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	            _classStmt.fields.forEach(function (field) { _this[field.name] = undefined; });
	            _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
	        };
	        var /** @type {?} */ superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
	        ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
	        return ctor;
	    }
	    var StatementInterpreter = (function () {
	        function StatementInterpreter() {
	        }
	        /**
	         * @param {?} ast
	         * @return {?}
	         */
	        StatementInterpreter.prototype.debugAst = function (ast) { return debugOutputAstAsTypeScript(ast); };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	            ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
	            return null;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
	            var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	            var /** @type {?} */ currCtx = ctx;
	            while (currCtx != null) {
	                if (currCtx.vars.has(expr.name)) {
	                    currCtx.vars.set(expr.name, value);
	                    return value;
	                }
	                currCtx = currCtx.parent;
	            }
	            throw new Error("Not declared variable " + expr.name);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
	            var /** @type {?} */ varName = ast.name;
	            if (isPresent(ast.builtin)) {
	                switch (ast.builtin) {
	                    case BuiltinVar.Super:
	                        return ctx.instance.__proto__;
	                    case BuiltinVar.This:
	                        return ctx.instance;
	                    case BuiltinVar.CatchError:
	                        varName = CATCH_ERROR_VAR$2;
	                        break;
	                    case BuiltinVar.CatchStack:
	                        varName = CATCH_STACK_VAR$2;
	                        break;
	                    default:
	                        throw new Error("Unknown builtin variable " + ast.builtin);
	                }
	            }
	            var /** @type {?} */ currCtx = ctx;
	            while (currCtx != null) {
	                if (currCtx.vars.has(varName)) {
	                    return currCtx.vars.get(varName);
	                }
	                currCtx = currCtx.parent;
	            }
	            throw new Error("Not declared variable " + varName);
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
	            var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	            var /** @type {?} */ index = expr.index.visitExpression(this, ctx);
	            var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	            receiver[index] = value;
	            return value;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
	            var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	            var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	            receiver[expr.name] = value;
	            return value;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	            var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	            var /** @type {?} */ args = this.visitAllExpressions(expr.args, ctx);
	            var /** @type {?} */ result;
	            if (isPresent(expr.builtin)) {
	                switch (expr.builtin) {
	                    case BuiltinMethod.ConcatArray:
	                        result = receiver.concat.apply(receiver, args);
	                        break;
	                    case BuiltinMethod.SubscribeObservable:
	                        result = receiver.subscribe({ next: args[0] });
	                        break;
	                    case BuiltinMethod.Bind:
	                        result = receiver.bind.apply(receiver, args);
	                        break;
	                    default:
	                        throw new Error("Unknown builtin method " + expr.builtin);
	                }
	            }
	            else {
	                result = receiver[expr.name].apply(receiver, args);
	            }
	            return result;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
	            var /** @type {?} */ args = this.visitAllExpressions(stmt.args, ctx);
	            var /** @type {?} */ fnExpr = stmt.fn;
	            if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	                ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
	                return null;
	            }
	            else {
	                var /** @type {?} */ fn = stmt.fn.visitExpression(this, ctx);
	                return fn.apply(null, args);
	            }
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
	            return new ReturnValue(stmt.value.visitExpression(this, ctx));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	            var /** @type {?} */ clazz = createDynamicClass(stmt, ctx, this);
	            ctx.vars.set(stmt.name, clazz);
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
	            return stmt.expr.visitExpression(this, ctx);
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
	            var /** @type {?} */ condition = stmt.condition.visitExpression(this, ctx);
	            if (condition) {
	                return this.visitAllStatements(stmt.trueCase, ctx);
	            }
	            else if (isPresent(stmt.falseCase)) {
	                return this.visitAllStatements(stmt.falseCase, ctx);
	            }
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
	            try {
	                return this.visitAllStatements(stmt.bodyStmts, ctx);
	            }
	            catch (e) {
	                var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();
	                childCtx.vars.set(CATCH_ERROR_VAR$2, e);
	                childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);
	                return this.visitAllStatements(stmt.catchStmts, childCtx);
	            }
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
	            throw stmt.error.visitExpression(this, ctx);
	        };
	        /**
	         * @param {?} stmt
	         * @param {?=} context
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
	            var /** @type {?} */ args = this.visitAllExpressions(ast.args, ctx);
	            var /** @type {?} */ clazz = ast.classExpr.visitExpression(this, ctx);
	            return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) { return ast.value; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {
	            return ast.value.reference;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
	            if (ast.condition.visitExpression(this, ctx)) {
	                return ast.trueCase.visitExpression(this, ctx);
	            }
	            else if (isPresent(ast.falseCase)) {
	                return ast.falseCase.visitExpression(this, ctx);
	            }
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
	            return !ast.condition.visitExpression(this, ctx);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
	            return ast.value.visitExpression(this, ctx);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
	            var /** @type {?} */ paramNames = ast.params.map(function (param) { return param.name; });
	            return _declareFn(paramNames, ast.statements, ctx, this);
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	            var /** @type {?} */ paramNames = stmt.params.map(function (param) { return param.name; });
	            ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	            var _this = this;
	            var /** @type {?} */ lhs = function () { return ast.lhs.visitExpression(_this, ctx); };
	            var /** @type {?} */ rhs = function () { return ast.rhs.visitExpression(_this, ctx); };
	            switch (ast.operator) {
	                case BinaryOperator.Equals:
	                    return lhs() == rhs();
	                case BinaryOperator.Identical:
	                    return lhs() === rhs();
	                case BinaryOperator.NotEquals:
	                    return lhs() != rhs();
	                case BinaryOperator.NotIdentical:
	                    return lhs() !== rhs();
	                case BinaryOperator.And:
	                    return lhs() && rhs();
	                case BinaryOperator.Or:
	                    return lhs() || rhs();
	                case BinaryOperator.Plus:
	                    return lhs() + rhs();
	                case BinaryOperator.Minus:
	                    return lhs() - rhs();
	                case BinaryOperator.Divide:
	                    return lhs() / rhs();
	                case BinaryOperator.Multiply:
	                    return lhs() * rhs();
	                case BinaryOperator.Modulo:
	                    return lhs() % rhs();
	                case BinaryOperator.Lower:
	                    return lhs() < rhs();
	                case BinaryOperator.LowerEquals:
	                    return lhs() <= rhs();
	                case BinaryOperator.Bigger:
	                    return lhs() > rhs();
	                case BinaryOperator.BiggerEquals:
	                    return lhs() >= rhs();
	                default:
	                    throw new Error("Unknown operator " + ast.operator);
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
	            var /** @type {?} */ result;
	            var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);
	            result = receiver[ast.name];
	            return result;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
	            var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);
	            var /** @type {?} */ prop = ast.index.visitExpression(this, ctx);
	            return receiver[prop];
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	            return this.visitAllExpressions(ast.entries, ctx);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
	            var _this = this;
	            var /** @type {?} */ result = {};
	            ast.entries.forEach(function (entry) { return ((result))[entry.key] = entry.value.visitExpression(_this, ctx); });
	            return result;
	        };
	        /**
	         * @param {?} expressions
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
	            var _this = this;
	            return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });
	        };
	        /**
	         * @param {?} statements
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
	            for (var /** @type {?} */ i = 0; i < statements.length; i++) {
	                var /** @type {?} */ stmt = statements[i];
	                var /** @type {?} */ val = stmt.visitStatement(this, ctx);
	                if (val instanceof ReturnValue) {
	                    return val;
	                }
	            }
	            return null;
	        };
	        return StatementInterpreter;
	    }());
	    /**
	     * @param {?} varNames
	     * @param {?} statements
	     * @param {?} ctx
	     * @param {?} visitor
	     * @return {?}
	     */
	    function _declareFn(varNames, statements, ctx, visitor) {
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
	        };
	    }
	    var /** @type {?} */ CATCH_ERROR_VAR$2 = 'error';
	    var /** @type {?} */ CATCH_STACK_VAR$2 = 'stack';

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$30 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @abstract
	     */
	    var AbstractJsEmitterVisitor = (function (_super) {
	        __extends$30(AbstractJsEmitterVisitor, _super);
	        function AbstractJsEmitterVisitor() {
	            _super.call(this, false);
	        }
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	            var _this = this;
	            ctx.pushClass(stmt);
	            this._visitClassConstructor(stmt, ctx);
	            if (isPresent(stmt.parent)) {
	                ctx.print(stmt.name + ".prototype = Object.create(");
	                stmt.parent.visitExpression(this, ctx);
	                ctx.println(".prototype);");
	            }
	            stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });
	            stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });
	            ctx.popClass();
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	            ctx.print("function " + stmt.name + "(");
	            if (isPresent(stmt.constructorMethod)) {
	                this._visitParams(stmt.constructorMethod.params, ctx);
	            }
	            ctx.println(") {");
	            ctx.incIndent();
	            if (isPresent(stmt.constructorMethod)) {
	                if (stmt.constructorMethod.body.length > 0) {
	                    ctx.println("var self = this;");
	                    this.visitAllStatements(stmt.constructorMethod.body, ctx);
	                }
	            }
	            ctx.decIndent();
	            ctx.println("}");
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} getter
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
	            ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
	            ctx.incIndent();
	            if (getter.body.length > 0) {
	                ctx.println("var self = this;");
	                this.visitAllStatements(getter.body, ctx);
	            }
	            ctx.decIndent();
	            ctx.println("}});");
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} method
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
	            ctx.print(stmt.name + ".prototype." + method.name + " = function(");
	            this._visitParams(method.params, ctx);
	            ctx.println(") {");
	            ctx.incIndent();
	            if (method.body.length > 0) {
	                ctx.println("var self = this;");
	                this.visitAllStatements(method.body, ctx);
	            }
	            ctx.decIndent();
	            ctx.println("};");
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	            if (ast.builtin === BuiltinVar.This) {
	                ctx.print('self');
	            }
	            else if (ast.builtin === BuiltinVar.Super) {
	                throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
	            }
	            else {
	                _super.prototype.visitReadVarExpr.call(this, ast, ctx);
	            }
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	            ctx.print("var " + stmt.name + " = ");
	            stmt.value.visitExpression(this, ctx);
	            ctx.println(";");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	            ast.value.visitExpression(this, ctx);
	            return null;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	            var /** @type {?} */ fnExpr = expr.fn;
	            if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	                ctx.currentClass.parent.visitExpression(this, ctx);
	                ctx.print(".call(this");
	                if (expr.args.length > 0) {
	                    ctx.print(", ");
	                    this.visitAllExpressions(expr.args, ctx, ',');
	                }
	                ctx.print(")");
	            }
	            else {
	                _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
	            }
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	            ctx.print("function(");
	            this._visitParams(ast.params, ctx);
	            ctx.println(") {");
	            ctx.incIndent();
	            this.visitAllStatements(ast.statements, ctx);
	            ctx.decIndent();
	            ctx.print("}");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	            ctx.print("function " + stmt.name + "(");
	            this._visitParams(stmt.params, ctx);
	            ctx.println(") {");
	            ctx.incIndent();
	            this.visitAllStatements(stmt.statements, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	            ctx.println("try {");
	            ctx.incIndent();
	            this.visitAllStatements(stmt.bodyStmts, ctx);
	            ctx.decIndent();
	            ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	            ctx.incIndent();
	            var /** @type {?} */ catchStmts = [(CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
	                    StmtModifier.Final
	                ]))].concat(stmt.catchStmts);
	            this.visitAllStatements(catchStmts, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	            return null;
	        };
	        /**
	         * @param {?} params
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	            this.visitAllObjects(function (param) { return ctx.print(param.name); }, params, ctx, ',');
	        };
	        /**
	         * @param {?} method
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	            var /** @type {?} */ name;
	            switch (method) {
	                case BuiltinMethod.ConcatArray:
	                    name = 'concat';
	                    break;
	                case BuiltinMethod.SubscribeObservable:
	                    name = 'subscribe';
	                    break;
	                case BuiltinMethod.Bind:
	                    name = 'bind';
	                    break;
	                default:
	                    throw new Error("Unknown builtin method: " + method);
	            }
	            return name;
	        };
	        return AbstractJsEmitterVisitor;
	    }(AbstractEmitterVisitor));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$29 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @param {?} sourceUrl
	     * @param {?} expr
	     * @param {?} declarations
	     * @param {?} vars
	     * @return {?}
	     */
	    function evalExpression(sourceUrl, expr, declarations, vars) {
	        var /** @type {?} */ fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
	        var /** @type {?} */ fnArgNames = [];
	        var /** @type {?} */ fnArgValues = [];
	        for (var argName in vars) {
	            fnArgNames.push(argName);
	            fnArgValues.push(vars[argName]);
	        }
	        return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
	    }
	    /**
	     * @param {?} sourceUrl
	     * @param {?} statements
	     * @param {?} resultVar
	     * @return {?}
	     */
	    function jitStatements(sourceUrl, statements, resultVar) {
	        var /** @type {?} */ converter = new JitEmitterVisitor();
	        var /** @type {?} */ ctx = EmitterVisitorContext.createRoot([resultVar]);
	        converter.visitAllStatements(statements, ctx);
	        return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
	    }
	    var JitEmitterVisitor = (function (_super) {
	        __extends$29(JitEmitterVisitor, _super);
	        function JitEmitterVisitor() {
	            _super.apply(this, arguments);
	            this._evalArgNames = [];
	            this._evalArgValues = [];
	        }
	        /**
	         * @return {?}
	         */
	        JitEmitterVisitor.prototype.getArgs = function () {
	            var /** @type {?} */ result = {};
	            for (var /** @type {?} */ i = 0; i < this._evalArgNames.length; i++) {
	                result[this._evalArgNames[i]] = this._evalArgValues[i];
	            }
	            return result;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	            var /** @type {?} */ value = ast.value.reference;
	            var /** @type {?} */ id = this._evalArgValues.indexOf(value);
	            if (id === -1) {
	                id = this._evalArgValues.length;
	                this._evalArgValues.push(value);
	                var /** @type {?} */ name_1 = identifierName(ast.value) || 'val';
	                this._evalArgNames.push("jit_" + name_1 + id);
	            }
	            ctx.print(this._evalArgNames[id]);
	            return null;
	        };
	        return JitEmitterVisitor;
	    }(AbstractJsEmitterVisitor));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$17 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$17 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    /**
	     * An internal module of the Angular compiler that begins with component types,
	     * extracts templates, and eventually produces a compiled version of the component
	     * ready for linking into an application.
	     *
	     * \@security When compiling templates at runtime, you must ensure that the entire template comes
	     * from a trusted source. Attacker-controlled data introduced by a template could expose your
	     * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).
	     */
	    var JitCompiler = (function () {
	        /**
	         * @param {?} _injector
	         * @param {?} _metadataResolver
	         * @param {?} _templateParser
	         * @param {?} _styleCompiler
	         * @param {?} _viewCompiler
	         * @param {?} _ngModuleCompiler
	         * @param {?} _directiveWrapperCompiler
	         * @param {?} _compilerConfig
	         * @param {?} _animationParser
	         */
	        function JitCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig, _animationParser) {
	            this._injector = _injector;
	            this._metadataResolver = _metadataResolver;
	            this._templateParser = _templateParser;
	            this._styleCompiler = _styleCompiler;
	            this._viewCompiler = _viewCompiler;
	            this._ngModuleCompiler = _ngModuleCompiler;
	            this._directiveWrapperCompiler = _directiveWrapperCompiler;
	            this._compilerConfig = _compilerConfig;
	            this._animationParser = _animationParser;
	            this._compiledTemplateCache = new Map();
	            this._compiledHostTemplateCache = new Map();
	            this._compiledDirectiveWrapperCache = new Map();
	            this._compiledNgModuleCache = new Map();
	            this._animationCompiler = new AnimationCompiler();
	        }
	        Object.defineProperty(JitCompiler.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._injector; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        JitCompiler.prototype.compileModuleSync = function (moduleType) {
	            return this._compileModuleAndComponents(moduleType, true).syncResult;
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        JitCompiler.prototype.compileModuleAsync = function (moduleType) {
	            return this._compileModuleAndComponents(moduleType, false).asyncResult;
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        JitCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	            return this._compileModuleAndAllComponents(moduleType, true).syncResult;
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        JitCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	            return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
	        };
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        JitCompiler.prototype.getNgContentSelectors = function (component) {
	            var /** @type {?} */ template = this._compiledTemplateCache.get(component);
	            if (!template) {
	                throw new Error("The component " + stringify(component) + " is not yet compiled!");
	            }
	            return template.compMeta.template.ngContentSelectors;
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?} isSync
	         * @return {?}
	         */
	        JitCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {
	            var _this = this;
	            var /** @type {?} */ loadingPromise = this._loadModules(moduleType, isSync);
	            var /** @type {?} */ createResult = function () {
	                _this._compileComponents(moduleType, null);
	                return _this._compileModule(moduleType);
	            };
	            if (isSync) {
	                return new SyncAsyncResult(createResult());
	            }
	            else {
	                return new SyncAsyncResult(null, loadingPromise.then(createResult));
	            }
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?} isSync
	         * @return {?}
	         */
	        JitCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {
	            var _this = this;
	            var /** @type {?} */ loadingPromise = this._loadModules(moduleType, isSync);
	            var /** @type {?} */ createResult = function () {
	                var /** @type {?} */ componentFactories = [];
	                _this._compileComponents(moduleType, componentFactories);
	                return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
	            };
	            if (isSync) {
	                return new SyncAsyncResult(createResult());
	            }
	            else {
	                return new SyncAsyncResult(null, loadingPromise.then(createResult));
	            }
	        };
	        /**
	         * @param {?} mainModule
	         * @param {?} isSync
	         * @return {?}
	         */
	        JitCompiler.prototype._loadModules = function (mainModule, isSync) {
	            var _this = this;
	            var /** @type {?} */ loadingPromises = [];
	            var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	            // Note: the loadingPromise for a module only includes the loading of the exported directives
	            // of imported modules.
	            // However, for runtime compilation, we want to transitively compile all modules,
	            // so we also need to call loadNgModuleDirectiveAndPipeMetadata for all nested modules.
	            ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {
	                loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync));
	            });
	            return Promise.all(loadingPromises);
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        JitCompiler.prototype._compileModule = function (moduleType) {
	            var _this = this;
	            var /** @type {?} */ ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
	            if (!ngModuleFactory) {
	                var /** @type {?} */ moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
	                // Always provide a bound Compiler
	                var /** @type {?} */ extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, { useFactory: function () { return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference); } }))];
	                var /** @type {?} */ compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
	                compileResult.dependencies.forEach(function (dep) {
	                    dep.placeholder.reference =
	                        _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;
	                });
	                if (!this._compilerConfig.useJit) {
	                    ngModuleFactory =
	                        interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
	                }
	                else {
	                    ngModuleFactory = jitStatements("/" + identifierName(moduleMeta_1.type) + "/module.ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
	                }
	                this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
	            }
	            return ngModuleFactory;
	        };
	        /**
	         * \@internal
	         * @param {?} mainModule
	         * @param {?} allComponentFactories
	         * @return {?}
	         */
	        JitCompiler.prototype._compileComponents = function (mainModule, allComponentFactories) {
	            var _this = this;
	            var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	            var /** @type {?} */ moduleByDirective = new Map();
	            var /** @type {?} */ templates = new Set();
	            ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	                var /** @type {?} */ localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
	                localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                    moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
	                    var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                    _this._compileDirectiveWrapper(dirMeta, localModuleMeta);
	                    if (dirMeta.isComponent) {
	                        templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
	                        if (allComponentFactories) {
	                            var /** @type {?} */ template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
	                            templates.add(template);
	                            allComponentFactories.push(template.proxyComponentFactory);
	                        }
	                    }
	                });
	            });
	            ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	                var /** @type {?} */ localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
	                localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                    var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                    if (dirMeta.isComponent) {
	                        dirMeta.entryComponents.forEach(function (entryComponentType) {
	                            var /** @type {?} */ moduleMeta = moduleByDirective.get(entryComponentType.reference);
	                            templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
	                        });
	                    }
	                });
	                localModuleMeta.entryComponents.forEach(function (entryComponentType) {
	                    var /** @type {?} */ moduleMeta = moduleByDirective.get(entryComponentType.reference);
	                    templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
	                });
	            });
	            templates.forEach(function (template) { return _this._compileTemplate(template); });
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        JitCompiler.prototype.clearCacheFor = function (type) {
	            this._compiledNgModuleCache.delete(type);
	            this._metadataResolver.clearCacheFor(type);
	            this._compiledHostTemplateCache.delete(type);
	            var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(type);
	            if (compiledTemplate) {
	                this._compiledTemplateCache.delete(type);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        JitCompiler.prototype.clearCache = function () {
	            this._metadataResolver.clearCache();
	            this._compiledTemplateCache.clear();
	            this._compiledHostTemplateCache.clear();
	            this._compiledNgModuleCache.clear();
	        };
	        /**
	         * @param {?} compType
	         * @param {?} ngModule
	         * @return {?}
	         */
	        JitCompiler.prototype._createCompiledHostTemplate = function (compType, ngModule) {
	            if (!ngModule) {
	                throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
	            }
	            var /** @type {?} */ compiledTemplate = this._compiledHostTemplateCache.get(compType);
	            if (!compiledTemplate) {
	                var /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata(compType);
	                assertComponent(compMeta);
	                var /** @type {?} */ HostClass = function HostClass() { };
	                ((HostClass)).overriddenName = identifierName(compMeta.type) + "_Host";
	                var /** @type {?} */ hostMeta = createHostComponentMeta(HostClass, compMeta);
	                compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, hostMeta, ngModule, [compMeta.type]);
	                this._compiledHostTemplateCache.set(compType, compiledTemplate);
	            }
	            return compiledTemplate;
	        };
	        /**
	         * @param {?} compMeta
	         * @param {?} ngModule
	         * @return {?}
	         */
	        JitCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {
	            var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
	            if (!compiledTemplate) {
	                assertComponent(compMeta);
	                compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
	                this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
	            }
	            return compiledTemplate;
	        };
	        /**
	         * @param {?} compType
	         * @param {?} isHost
	         * @return {?}
	         */
	        JitCompiler.prototype._assertComponentKnown = function (compType, isHost) {
	            var /** @type {?} */ compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) :
	                this._compiledTemplateCache.get(compType);
	            if (!compiledTemplate) {
	                throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " (host: " + isHost + ") does not exist!");
	            }
	            return compiledTemplate;
	        };
	        /**
	         * @param {?} dirType
	         * @return {?}
	         */
	        JitCompiler.prototype._assertDirectiveWrapper = function (dirType) {
	            var /** @type {?} */ dirWrapper = this._compiledDirectiveWrapperCache.get(dirType);
	            if (!dirWrapper) {
	                throw new Error("Illegal state: Directive wrapper for " + stringify(dirType) + " has not been compiled!");
	            }
	            return dirWrapper;
	        };
	        /**
	         * @param {?} dirMeta
	         * @param {?} moduleMeta
	         * @return {?}
	         */
	        JitCompiler.prototype._compileDirectiveWrapper = function (dirMeta, moduleMeta) {
	            var /** @type {?} */ compileResult = this._directiveWrapperCompiler.compile(dirMeta);
	            var /** @type {?} */ statements = compileResult.statements;
	            var /** @type {?} */ directiveWrapperClass;
	            if (!this._compilerConfig.useJit) {
	                directiveWrapperClass = interpretStatements(statements, compileResult.dirWrapperClassVar);
	            }
	            else {
	                directiveWrapperClass = jitStatements("/" + identifierName(moduleMeta.type) + "/" + identifierName(dirMeta.type) + "/wrapper.ngfactory.js", statements, compileResult.dirWrapperClassVar);
	            }
	            this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass);
	        };
	        /**
	         * @param {?} template
	         * @return {?}
	         */
	        JitCompiler.prototype._compileTemplate = function (template) {
	            var _this = this;
	            if (template.isCompiled) {
	                return;
	            }
	            var /** @type {?} */ compMeta = template.compMeta;
	            var /** @type {?} */ externalStylesheetsByModuleUrl = new Map();
	            var /** @type {?} */ stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
	            stylesCompileResult.externalStylesheets.forEach(function (r) { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r); });
	            this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
	            var /** @type {?} */ parsedAnimations = this._animationParser.parseComponent(compMeta);
	            var /** @type {?} */ directives = template.directives.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	            var /** @type {?} */ pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	            var /** @type {?} */ parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, identifierName(compMeta.type));
	            var /** @type {?} */ compiledAnimations = this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations);
	            var /** @type {?} */ compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), pipes, compiledAnimations);
	            compileResult.dependencies.forEach(function (dep) {
	                var /** @type {?} */ depTemplate;
	                if (dep instanceof ViewClassDependency) {
	                    var /** @type {?} */ vfd = (dep);
	                    depTemplate = _this._assertComponentKnown(vfd.comp.reference, false);
	                    vfd.placeholder.reference = depTemplate.proxyViewClass;
	                }
	                else if (dep instanceof ComponentFactoryDependency$1) {
	                    var /** @type {?} */ cfd = (dep);
	                    depTemplate = _this._assertComponentKnown(cfd.comp.reference, true);
	                    cfd.placeholder.reference = depTemplate.proxyComponentFactory;
	                }
	                else if (dep instanceof DirectiveWrapperDependency) {
	                    var /** @type {?} */ dwd = (dep);
	                    dwd.placeholder.reference = _this._assertDirectiveWrapper(dwd.dir.reference);
	                }
	            });
	            var /** @type {?} */ statements = (_a = stylesCompileResult.componentStylesheet.statements).concat.apply(_a, compiledAnimations.map(function (ca) { return ca.statements; }))
	                .concat(compileResult.statements);
	            var /** @type {?} */ viewClass;
	            if (!this._compilerConfig.useJit) {
	                viewClass = interpretStatements(statements, compileResult.viewClassVar);
	            }
	            else {
	                viewClass = jitStatements("/" + identifierName(template.ngModule.type) + "/" + identifierName(template.compType) + "/" + (template.isHost ? 'host' : 'component') + ".ngfactory.js", statements, compileResult.viewClassVar);
	            }
	            template.compiled(viewClass);
	            var _a;
	        };
	        /**
	         * @param {?} result
	         * @param {?} externalStylesheetsByModuleUrl
	         * @return {?}
	         */
	        JitCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	            var _this = this;
	            result.dependencies.forEach(function (dep, i) {
	                var /** @type {?} */ nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
	                var /** @type {?} */ nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
	                dep.valuePlaceholder.reference = nestedStylesArr;
	            });
	        };
	        /**
	         * @param {?} result
	         * @param {?} externalStylesheetsByModuleUrl
	         * @return {?}
	         */
	        JitCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	            this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
	            if (!this._compilerConfig.useJit) {
	                return interpretStatements(result.statements, result.stylesVar);
	            }
	            else {
	                return jitStatements("/" + result.meta.moduleUrl + ".ngstyle.js", result.statements, result.stylesVar);
	            }
	        };
	        JitCompiler = __decorate$17([
	            CompilerInjectable(), 
	            __metadata$17('design:paramtypes', [_angular_core.Injector, CompileMetadataResolver, TemplateParser, StyleCompiler, ViewCompiler, NgModuleCompiler, DirectiveWrapperCompiler, CompilerConfig, AnimationParser])
	        ], JitCompiler);
	        return JitCompiler;
	    }());
	    var CompiledTemplate = (function () {
	        /**
	         * @param {?} isHost
	         * @param {?} selector
	         * @param {?} compType
	         * @param {?} compMeta
	         * @param {?} ngModule
	         * @param {?} directives
	         */
	        function CompiledTemplate(isHost, selector, compType, compMeta, ngModule, directives) {
	            this.isHost = isHost;
	            this.compType = compType;
	            this.compMeta = compMeta;
	            this.ngModule = ngModule;
	            this.directives = directives;
	            this._viewClass = null;
	            this.isCompiled = false;
	            var self = this;
	            this.proxyViewClass = function () {
	                if (!self._viewClass) {
	                    throw new Error("Illegal state: CompiledTemplate for " + stringify(self.compType) + " is not compiled yet!");
	                }
	                return self._viewClass.apply(this, arguments);
	            };
	            this.proxyComponentFactory = isHost ?
	                new _angular_core.ComponentFactory(selector, this.proxyViewClass, compType.reference) :
	                null;
	        }
	        /**
	         * @param {?} viewClass
	         * @return {?}
	         */
	        CompiledTemplate.prototype.compiled = function (viewClass) {
	            this._viewClass = viewClass;
	            this.proxyViewClass.prototype = viewClass.prototype;
	            this.isCompiled = true;
	        };
	        return CompiledTemplate;
	    }());
	    /**
	     * @param {?} meta
	     * @return {?}
	     */
	    function assertComponent(meta) {
	        if (!meta.isComponent) {
	            throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
	        }
	    }
	    /**
	     * Implements `Compiler` by delegating to the JitCompiler using a known module.
	     */
	    var ModuleBoundCompiler = (function () {
	        /**
	         * @param {?} _delegate
	         * @param {?} _ngModule
	         */
	        function ModuleBoundCompiler(_delegate, _ngModule) {
	            this._delegate = _delegate;
	            this._ngModule = _ngModule;
	        }
	        Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._delegate.injector; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {
	            return this._delegate.compileModuleSync(moduleType);
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {
	            return this._delegate.compileModuleAsync(moduleType);
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	            return this._delegate.compileModuleAndAllComponentsSync(moduleType);
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	            return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
	        };
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.getNgContentSelectors = function (component) {
	            return this._delegate.getNgContentSelectors(component);
	        };
	        /**
	         * Clears all caches
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.clearCache = function () { this._delegate.clearCache(); };
	        /**
	         * Clears the cache for the given component/ngModule.
	         * @param {?} type
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.clearCacheFor = function (type) { this._delegate.clearCacheFor(type); };
	        return ModuleBoundCompiler;
	    }());

	    /**
	     * A container for message extracted from the templates.
	     */
	    var MessageBundle = (function () {
	        /**
	         * @param {?} _htmlParser
	         * @param {?} _implicitTags
	         * @param {?} _implicitAttrs
	         */
	        function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
	            this._htmlParser = _htmlParser;
	            this._implicitTags = _implicitTags;
	            this._implicitAttrs = _implicitAttrs;
	            this._messages = [];
	        }
	        /**
	         * @param {?} html
	         * @param {?} url
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {
	            var /** @type {?} */ htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
	            if (htmlParserResult.errors.length) {
	                return htmlParserResult.errors;
	            }
	            var /** @type {?} */ i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
	            if (i18nParserResult.errors.length) {
	                return i18nParserResult.errors;
	            }
	            (_a = this._messages).push.apply(_a, i18nParserResult.messages);
	            var _a;
	        };
	        /**
	         * @return {?}
	         */
	        MessageBundle.prototype.getMessages = function () { return this._messages; };
	        /**
	         * @param {?} serializer
	         * @return {?}
	         */
	        MessageBundle.prototype.write = function (serializer) { return serializer.write(this._messages); };
	        return MessageBundle;
	    }());

	    var Extractor = (function () {
	        /**
	         * @param {?} host
	         * @param {?} staticSymbolResolver
	         * @param {?} messageBundle
	         * @param {?} metadataResolver
	         */
	        function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {
	            this.host = host;
	            this.staticSymbolResolver = staticSymbolResolver;
	            this.messageBundle = messageBundle;
	            this.metadataResolver = metadataResolver;
	        }
	        /**
	         * @param {?} rootFiles
	         * @return {?}
	         */
	        Extractor.prototype.extract = function (rootFiles) {
	            var _this = this;
	            var /** @type {?} */ programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);
	            var _a = analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver), files = _a.files, ngModules = _a.ngModules;
	            return Promise
	                .all(ngModules.map(function (ngModule) { return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))
	                .then(function () {
	                var /** @type {?} */ errors = [];
	                files.forEach(function (file) {
	                    var /** @type {?} */ compMetas = [];
	                    file.directives.forEach(function (directiveType) {
	                        var /** @type {?} */ dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);
	                        if (dirMeta && dirMeta.isComponent) {
	                            compMetas.push(dirMeta);
	                        }
	                    });
	                    compMetas.forEach(function (compMeta) {
	                        var /** @type {?} */ html = compMeta.template.template;
	                        var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);
	                        errors.push.apply(errors, _this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));
	                    });
	                });
	                if (errors.length) {
	                    throw new Error(errors.map(function (e) { return e.toString(); }).join('\n'));
	                }
	                return _this.messageBundle;
	            });
	        };
	        /**
	         * @param {?} host
	         * @return {?}
	         */
	        Extractor.create = function (host) {
	            var /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser());
	            var /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();
	            var /** @type {?} */ symbolCache = new StaticSymbolCache();
	            var /** @type {?} */ summaryResolver = new AotSummaryResolver(host, symbolCache);
	            var /** @type {?} */ staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);
	            var /** @type {?} */ staticReflector = new StaticReflector(staticSymbolResolver);
	            StaticAndDynamicReflectionCapabilities.install(staticReflector);
	            var /** @type {?} */ config = new CompilerConfig({
	                genDebugInfo: false,
	                defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
	                logBindingUpdate: false,
	                useJit: false
	            });
	            var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return host.loadResource(url); } }, urlResolver, htmlParser, config);
	            var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();
	            var /** @type {?} */ resolver = new CompileMetadataResolver(new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, staticReflector);
	            // TODO(vicb): implicit tags & attributes
	            var /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {});
	            var /** @type {?} */ extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);
	            return { extractor: extractor, staticReflector: staticReflector };
	        };
	        return Extractor;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$18 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$18 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var /** @type {?} */ _NO_RESOURCE_LOADER = {
	        /**
	         * @param {?} url
	         * @return {?}
	         */
	        get: function (url) {
	            throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
	        }
	    };
	    var /** @type {?} */ baseHtmlParser = new _angular_core.OpaqueToken('HtmlParser');
	    /**
	     * A set of providers that provide `JitCompiler` and its dependencies to use for
	     * template compilation.
	     */
	    var /** @type {?} */ COMPILER_PROVIDERS = [
	        { provide: Reflector, useValue: reflector },
	        { provide: ReflectorReader, useExisting: Reflector },
	        { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },
	        SummaryResolver,
	        Console,
	        Lexer,
	        Parser,
	        {
	            provide: baseHtmlParser,
	            useClass: HtmlParser,
	        },
	        {
	            provide: I18NHtmlParser,
	            useFactory: function (parser, translations, format) {
	                return new I18NHtmlParser(parser, translations, format);
	            },
	            deps: [
	                baseHtmlParser,
	                [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)],
	                [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)],
	            ]
	        },
	        {
	            provide: HtmlParser,
	            useExisting: I18NHtmlParser,
	        },
	        TemplateParser,
	        DirectiveNormalizer,
	        CompileMetadataResolver,
	        DEFAULT_PACKAGE_URL_PROVIDER,
	        StyleCompiler,
	        ViewCompiler,
	        NgModuleCompiler,
	        DirectiveWrapperCompiler,
	        { provide: CompilerConfig, useValue: new CompilerConfig() },
	        JitCompiler,
	        { provide: _angular_core.Compiler, useExisting: JitCompiler },
	        DomElementSchemaRegistry,
	        { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },
	        UrlResolver,
	        DirectiveResolver,
	        PipeResolver,
	        NgModuleResolver,
	        AnimationParser
	    ];
	    var JitCompilerFactory = (function () {
	        /**
	         * @param {?} defaultOptions
	         */
	        function JitCompilerFactory(defaultOptions) {
	            this._defaultOptions = [{
	                    useDebug: _angular_core.isDevMode(),
	                    useJit: true,
	                    defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated
	                }].concat(defaultOptions);
	        }
	        /**
	         * @param {?=} options
	         * @return {?}
	         */
	        JitCompilerFactory.prototype.createCompiler = function (options) {
	            if (options === void 0) { options = []; }
	            var /** @type {?} */ mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
	            var /** @type {?} */ injector = _angular_core.ReflectiveInjector.resolveAndCreate([
	                COMPILER_PROVIDERS, {
	                    provide: CompilerConfig,
	                    useFactory: function () {
	                        return new CompilerConfig({
	                            // let explicit values from the compiler options overwrite options
	                            // from the app providers. E.g. important for the testing platform.
	                            genDebugInfo: mergedOptions.useDebug,
	                            // let explicit values from the compiler options overwrite options
	                            // from the app providers
	                            useJit: mergedOptions.useJit,
	                            // let explicit values from the compiler options overwrite options
	                            // from the app providers
	                            defaultEncapsulation: mergedOptions.defaultEncapsulation,
	                            logBindingUpdate: mergedOptions.useDebug
	                        });
	                    },
	                    deps: []
	                },
	                mergedOptions.providers
	            ]);
	            return injector.get(_angular_core.Compiler);
	        };
	        /** @nocollapse */
	        JitCompilerFactory.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: _angular_core.Inject, args: [_angular_core.COMPILER_OPTIONS,] },] },
	        ]; };
	        JitCompilerFactory = __decorate$18([
	            CompilerInjectable(), 
	            __metadata$18('design:paramtypes', [Array])
	        ], JitCompilerFactory);
	        return JitCompilerFactory;
	    }());
	    /**
	     * @return {?}
	     */
	    function _initReflector() {
	        reflector.reflectionCapabilities = new ReflectionCapabilities();
	    }
	    /**
	     * A platform that included corePlatform and the compiler.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [
	        { provide: _angular_core.COMPILER_OPTIONS, useValue: {}, multi: true },
	        { provide: _angular_core.CompilerFactory, useClass: JitCompilerFactory },
	        { provide: _angular_core.PLATFORM_INITIALIZER, useValue: _initReflector, multi: true },
	    ]);
	    /**
	     * @param {?} optionsArr
	     * @return {?}
	     */
	    function _mergeOptions(optionsArr) {
	        return {
	            useDebug: _lastDefined(optionsArr.map(function (options) { return options.useDebug; })),
	            useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),
	            defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),
	            providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; }))
	        };
	    }
	    /**
	     * @param {?} args
	     * @return {?}
	     */
	    function _lastDefined(args) {
	        for (var /** @type {?} */ i = args.length - 1; i >= 0; i--) {
	            if (args[i] !== undefined) {
	                return args[i];
	            }
	        }
	        return undefined;
	    }
	    /**
	     * @param {?} parts
	     * @return {?}
	     */
	    function _mergeArrays(parts) {
	        var /** @type {?} */ result = [];
	        parts.forEach(function (part) { return part && result.push.apply(result, part); });
	        return result;
	    }

	    /**
	     * Interface that defines how import statements should be generated.
	     * @abstract
	     */
	    var ImportResolver = (function () {
	        function ImportResolver() {
	        }
	        /**
	         * Converts a file path to a module name that can be used as an `import.
	         * I.e. `path/to/importedFile.ts` should be imported by `path/to/containingFile.ts`.
	         * @abstract
	         * @param {?} importedFilePath
	         * @param {?} containingFilePath
	         * @return {?}
	         */
	        ImportResolver.prototype.fileNameToModuleName = function (importedFilePath, containingFilePath) { };
	        return ImportResolver;
	    }());

	    exports.VERSION = VERSION;
	    exports.TextAst = TextAst;
	    exports.BoundTextAst = BoundTextAst;
	    exports.AttrAst = AttrAst;
	    exports.BoundElementPropertyAst = BoundElementPropertyAst;
	    exports.BoundEventAst = BoundEventAst;
	    exports.ReferenceAst = ReferenceAst;
	    exports.VariableAst = VariableAst;
	    exports.ElementAst = ElementAst;
	    exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
	    exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
	    exports.DirectiveAst = DirectiveAst;
	    exports.ProviderAst = ProviderAst;
	    exports.ProviderAstType = ProviderAstType;
	    exports.NgContentAst = NgContentAst;
	    exports.PropertyBindingType = PropertyBindingType;
	    exports.templateVisitAll = templateVisitAll;
	    exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
	    exports.CompilerConfig = CompilerConfig;
	    exports.RenderTypes = RenderTypes;
	    exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
	    exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
	    exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
	    exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
	    exports.CompileAnimationMetadata = CompileAnimationMetadata;
	    exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
	    exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
	    exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
	    exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
	    exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
	    exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
	    exports.identifierName = identifierName;
	    exports.identifierModuleUrl = identifierModuleUrl;
	    exports.CompileSummaryKind = CompileSummaryKind;
	    exports.tokenName = tokenName;
	    exports.tokenReference = tokenReference;
	    exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
	    exports.CompileTemplateMetadata = CompileTemplateMetadata;
	    exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
	    exports.createHostComponentMeta = createHostComponentMeta;
	    exports.CompilePipeMetadata = CompilePipeMetadata;
	    exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
	    exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
	    exports.ProviderMeta = ProviderMeta;
	    exports.createAotCompiler = createAotCompiler;
	    exports.AotCompiler = AotCompiler;
	    exports.analyzeNgModules = analyzeNgModules;
	    exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;
	    exports.extractProgramSymbols = extractProgramSymbols;
	    exports.StaticReflector = StaticReflector;
	    exports.StaticAndDynamicReflectionCapabilities = StaticAndDynamicReflectionCapabilities;
	    exports.StaticSymbol = StaticSymbol;
	    exports.StaticSymbolCache = StaticSymbolCache;
	    exports.ResolvedStaticSymbol = ResolvedStaticSymbol;
	    exports.StaticSymbolResolver = StaticSymbolResolver;
	    exports.AotSummaryResolver = AotSummaryResolver;
	    exports.SummaryResolver = SummaryResolver;
	    exports.JitCompiler = JitCompiler;
	    exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
	    exports.JitCompilerFactory = JitCompilerFactory;
	    exports.platformCoreDynamic = platformCoreDynamic;
	    exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
	    exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
	    exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
	    exports.UrlResolver = UrlResolver;
	    exports.getUrlScheme = getUrlScheme;
	    exports.ResourceLoader = ResourceLoader;
	    exports.DirectiveResolver = DirectiveResolver;
	    exports.PipeResolver = PipeResolver;
	    exports.NgModuleResolver = NgModuleResolver;
	    exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
	    exports.InterpolationConfig = InterpolationConfig;
	    exports.ElementSchemaRegistry = ElementSchemaRegistry;
	    exports.Extractor = Extractor;
	    exports.I18NHtmlParser = I18NHtmlParser;
	    exports.MessageBundle = MessageBundle;
	    exports.Serializer = Serializer;
	    exports.Xliff = Xliff;
	    exports.Xmb = Xmb;
	    exports.Xtb = Xtb;
	    exports.DirectiveNormalizer = DirectiveNormalizer;
	    exports.TokenType = TokenType;
	    exports.Lexer = Lexer;
	    exports.Token = Token;
	    exports.EOF = EOF;
	    exports.isIdentifier = isIdentifier;
	    exports.isQuote = isQuote;
	    exports.SplitInterpolation = SplitInterpolation;
	    exports.TemplateBindingParseResult = TemplateBindingParseResult;
	    exports.Parser = Parser;
	    exports._ParseAST = _ParseAST;
	    exports.ERROR_COLLECTOR_TOKEN = ERROR_COLLECTOR_TOKEN;
	    exports.CompileMetadataResolver = CompileMetadataResolver;
	    exports.componentModuleUrl = componentModuleUrl;
	    exports.ParseTreeResult = ParseTreeResult;
	    exports.TreeError = TreeError;
	    exports.HtmlParser = HtmlParser;
	    exports.NgModuleCompiler = NgModuleCompiler;
	    exports.DirectiveWrapperCompiler = DirectiveWrapperCompiler;
	    exports.ImportResolver = ImportResolver;
	    exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
	    exports.TypeScriptEmitter = TypeScriptEmitter;
	    exports.ParseLocation = ParseLocation;
	    exports.ParseSourceFile = ParseSourceFile;
	    exports.ParseSourceSpan = ParseSourceSpan;
	    exports.ParseErrorLevel = ParseErrorLevel;
	    exports.ParseError = ParseError;
	    exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
	    exports.CssSelector = CssSelector;
	    exports.SelectorMatcher = SelectorMatcher;
	    exports.SelectorListContext = SelectorListContext;
	    exports.SelectorContext = SelectorContext;
	    exports.StylesCompileDependency = StylesCompileDependency;
	    exports.StylesCompileResult = StylesCompileResult;
	    exports.CompiledStylesheet = CompiledStylesheet;
	    exports.StyleCompiler = StyleCompiler;
	    exports.TemplateParseError = TemplateParseError;
	    exports.TemplateParseResult = TemplateParseResult;
	    exports.TemplateParser = TemplateParser;
	    exports.splitClasses = splitClasses;
	    exports.createElementCssSelector = createElementCssSelector;
	    exports.removeSummaryDuplicates = removeSummaryDuplicates;
	    exports.ViewCompiler = ViewCompiler;
	    exports.AnimationParser = AnimationParser;
	    exports.SyntaxError = SyntaxError;

	}));

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(4);
	var Highcharts = __webpack_require__(28);
	Highcharts.setOptions({
	    colors: ['#058DC7', '#50B432', '#ED561B']
	});
	var SimpleChartExample = (function () {
	    function SimpleChartExample() {
	        this.options = {
	            title: { text: 'simple chart' },
	            series: [{
	                    data: Array.from(new Array(100), function (x, i) { return i; }),
	                }]
	        };
	    }
	    SimpleChartExample = __decorate([
	        core_1.Component({
	            selector: 'simple-chart-example',
	            template: "\n        <chart [options]=\"options\"></chart>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], SimpleChartExample);
	    return SimpleChartExample;
	}());
	exports.SimpleChartExample = SimpleChartExample;


/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * @license Highstock JS v5.0.7 (2017-01-17)
	 *
	 * (c) 2009-2016 Torstein Honsi
	 *
	 * License: www.highcharts.com/license
	 */
	'use strict';
	(function(root, factory) {
	    if (typeof module === 'object' && module.exports) {
	        module.exports = root.document ?
	            factory(root) :
	            factory;
	    } else {
	        root.Highcharts = factory(root);
	    }
	}(typeof window !== 'undefined' ? window : this, function(win) {
	    var Highcharts = (function() {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        /* global window */
	        var win = window,
	            doc = win.document;

	        var SVG_NS = 'http://www.w3.org/2000/svg',
	            userAgent = (win.navigator && win.navigator.userAgent) || '',
	            svg = doc && doc.createElementNS && !!doc.createElementNS(SVG_NS, 'svg').createSVGRect,
	            isMS = /(edge|msie|trident)/i.test(userAgent) && !window.opera,
	            vml = !svg,
	            isFirefox = /Firefox/.test(userAgent),
	            hasBidiBug = isFirefox && parseInt(userAgent.split('Firefox/')[1], 10) < 4; // issue #38

	        var Highcharts = win.Highcharts ? win.Highcharts.error(16, true) : {
	            product: 'Highstock',
	            version: '5.0.7',
	            deg2rad: Math.PI * 2 / 360,
	            doc: doc,
	            hasBidiBug: hasBidiBug,
	            hasTouch: doc && doc.documentElement.ontouchstart !== undefined,
	            isMS: isMS,
	            isWebKit: /AppleWebKit/.test(userAgent),
	            isFirefox: isFirefox,
	            isTouchDevice: /(Mobile|Android|Windows Phone)/.test(userAgent),
	            SVG_NS: SVG_NS,
	            chartCount: 0,
	            seriesTypes: {},
	            symbolSizes: {},
	            svg: svg,
	            vml: vml,
	            win: win,
	            charts: [],
	            marginNames: ['plotTop', 'marginRight', 'marginBottom', 'plotLeft'],
	            noop: function() {
	                return undefined;
	            }
	        };
	        return Highcharts;
	    }());
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        /* eslint max-len: ["warn", 80, 4] */
	        'use strict';

	        /**
	         * The Highcharts object is the placeholder for all other members, and various
	         * utility functions.
	         * @namespace Highcharts
	         */

	        var timers = [];

	        var charts = H.charts,
	            doc = H.doc,
	            win = H.win;

	        /**
	         * Provide error messages for debugging, with links to online explanation. This
	         * function can be overridden to provide custom error handling.
	         *
	         * @function #error
	         * @memberOf Highcharts
	         * @param {Number|String} code - The error code. See [errors.xml]{@link 
	         *     https://github.com/highcharts/highcharts/blob/master/errors/errors.xml}
	         *     for available codes. If it is a string, the error message is printed
	         *     directly in the console.
	         * @param {Boolean} [stop=false] - Whether to throw an error or just log a 
	         *     warning in the console.
	         */
	        H.error = function(code, stop) {
	            var msg = H.isNumber(code) ?
	                'Highcharts error #' + code + ': www.highcharts.com/errors/' + code :
	                code;
	            if (stop) {
	                throw new Error(msg);
	            }
	            // else ...
	            if (win.console) {
	                console.log(msg); // eslint-disable-line no-console
	            }
	        };

	        /**
	         * An animator object. One instance applies to one property (attribute or style
	         * prop) on one element.
	         *
	         * @constructor Fx
	         * @memberOf Highcharts
	         * @param {HTMLDOMElement|SVGElement} elem - The element to animate.
	         * @param {AnimationOptions} options - Animation options.
	         * @param {string} prop - The single attribute or CSS property to animate.
	         */
	        H.Fx = function(elem, options, prop) {
	            this.options = options;
	            this.elem = elem;
	            this.prop = prop;
	        };
	        H.Fx.prototype = {

	            /**
	             * Set the current step of a path definition on SVGElement.
	             *
	             * @function #dSetter
	             * @memberOf Highcharts.Fx
	             */
	            dSetter: function() {
	                var start = this.paths[0],
	                    end = this.paths[1],
	                    ret = [],
	                    now = this.now,
	                    i = start.length,
	                    startVal;

	                // Land on the final path without adjustment points appended in the ends
	                if (now === 1) {
	                    ret = this.toD;

	                } else if (i === end.length && now < 1) {
	                    while (i--) {
	                        startVal = parseFloat(start[i]);
	                        ret[i] =
	                            isNaN(startVal) ? // a letter instruction like M or L
	                            start[i] :
	                            now * (parseFloat(end[i] - startVal)) + startVal;

	                    }
	                    // If animation is finished or length not matching, land on right value
	                } else {
	                    ret = end;
	                }
	                this.elem.attr('d', ret, null, true);
	            },

	            /**
	             * Update the element with the current animation step.
	             *
	             * @function #update
	             * @memberOf Highcharts.Fx
	             */
	            update: function() {
	                var elem = this.elem,
	                    prop = this.prop, // if destroyed, it is null
	                    now = this.now,
	                    step = this.options.step;

	                // Animation setter defined from outside
	                if (this[prop + 'Setter']) {
	                    this[prop + 'Setter']();

	                    // Other animations on SVGElement
	                } else if (elem.attr) {
	                    if (elem.element) {
	                        elem.attr(prop, now, null, true);
	                    }

	                    // HTML styles, raw HTML content like container size
	                } else {
	                    elem.style[prop] = now + this.unit;
	                }

	                if (step) {
	                    step.call(elem, now, this);
	                }

	            },

	            /**
	             * Run an animation.
	             *
	             * @function #run
	             * @memberOf Highcharts.Fx
	             * @param {Number} from - The current value, value to start from.
	             * @param {Number} to - The end value, value to land on.
	             * @param {String} [unit] - The property unit, for example `px`.
	             * @returns {void}
	             */
	            run: function(from, to, unit) {
	                var self = this,
	                    timer = function(gotoEnd) {
	                        return timer.stopped ? false : self.step(gotoEnd);
	                    },
	                    i;

	                this.startTime = +new Date();
	                this.start = from;
	                this.end = to;
	                this.unit = unit;
	                this.now = this.start;
	                this.pos = 0;

	                timer.elem = this.elem;
	                timer.prop = this.prop;

	                if (timer() && timers.push(timer) === 1) {
	                    timer.timerId = setInterval(function() {

	                        for (i = 0; i < timers.length; i++) {
	                            if (!timers[i]()) {
	                                timers.splice(i--, 1);
	                            }
	                        }

	                        if (!timers.length) {
	                            clearInterval(timer.timerId);
	                        }
	                    }, 13);
	                }
	            },

	            /**
	             * Run a single step in the animation.
	             *
	             * @function #step
	             * @memberOf Highcharts.Fx
	             * @param   {Boolean} [gotoEnd] - Whether to go to the endpoint of the
	             *     animation after abort.
	             * @returns {Boolean} Returns `true` if animation continues.
	             */
	            step: function(gotoEnd) {
	                var t = +new Date(),
	                    ret,
	                    done,
	                    options = this.options,
	                    elem = this.elem,
	                    complete = options.complete,
	                    duration = options.duration,
	                    curAnim = options.curAnim,
	                    i;

	                if (elem.attr && !elem.element) { // #2616, element is destroyed
	                    ret = false;

	                } else if (gotoEnd || t >= duration + this.startTime) {
	                    this.now = this.end;
	                    this.pos = 1;
	                    this.update();

	                    curAnim[this.prop] = true;

	                    done = true;
	                    for (i in curAnim) {
	                        if (curAnim[i] !== true) {
	                            done = false;
	                        }
	                    }

	                    if (done && complete) {
	                        complete.call(elem);
	                    }
	                    ret = false;

	                } else {
	                    this.pos = options.easing((t - this.startTime) / duration);
	                    this.now = this.start + ((this.end - this.start) * this.pos);
	                    this.update();
	                    ret = true;
	                }
	                return ret;
	            },

	            /**
	             * Prepare start and end values so that the path can be animated one to one.
	             *
	             * @function #initPath
	             * @memberOf Highcharts.Fx
	             * @param {SVGElement} elem - The SVGElement item.
	             * @param {String} fromD - Starting path definition.
	             * @param {Array} toD - Ending path definition.
	             * @returns {Array} An array containing start and end paths in array form
	             * so that they can be animated in parallel.
	             */
	            initPath: function(elem, fromD, toD) {
	                fromD = fromD || '';
	                var shift,
	                    startX = elem.startX,
	                    endX = elem.endX,
	                    bezier = fromD.indexOf('C') > -1,
	                    numParams = bezier ? 7 : 3,
	                    fullLength,
	                    slice,
	                    i,
	                    start = fromD.split(' '),
	                    end = toD.slice(), // copy
	                    isArea = elem.isArea,
	                    positionFactor = isArea ? 2 : 1,
	                    reverse;

	                /**
	                 * In splines make moveTo and lineTo points have six parameters like
	                 * bezier curves, to allow animation one-to-one.
	                 */
	                function sixify(arr) {
	                    var isOperator,
	                        nextIsOperator;
	                    i = arr.length;
	                    while (i--) {

	                        // Fill in dummy coordinates only if the next operator comes
	                        // three places behind (#5788)
	                        isOperator = arr[i] === 'M' || arr[i] === 'L';
	                        nextIsOperator = /[a-zA-Z]/.test(arr[i + 3]);
	                        if (isOperator && nextIsOperator) {
	                            arr.splice(
	                                i + 1, 0,
	                                arr[i + 1], arr[i + 2],
	                                arr[i + 1], arr[i + 2]
	                            );
	                        }
	                    }
	                }

	                /**
	                 * Insert an array at the given position of another array
	                 */
	                function insertSlice(arr, subArr, index) {
	                    [].splice.apply(
	                        arr, [index, 0].concat(subArr)
	                    );
	                }

	                /**
	                 * If shifting points, prepend a dummy point to the end path. 
	                 */
	                function prepend(arr, other) {
	                    while (arr.length < fullLength) {

	                        // Move to, line to or curve to?
	                        arr[0] = other[fullLength - arr.length];

	                        // Prepend a copy of the first point
	                        insertSlice(arr, arr.slice(0, numParams), 0);

	                        // For areas, the bottom path goes back again to the left, so we
	                        // need to append a copy of the last point.
	                        if (isArea) {
	                            insertSlice(
	                                arr,
	                                arr.slice(arr.length - numParams), arr.length
	                            );
	                            i--;
	                        }
	                    }
	                    arr[0] = 'M';
	                }

	                /**
	                 * Copy and append last point until the length matches the end length
	                 */
	                function append(arr, other) {
	                    var i = (fullLength - arr.length) / numParams;
	                    while (i > 0 && i--) {

	                        // Pull out the slice that is going to be appended or inserted.
	                        // In a line graph, the positionFactor is 1, and the last point
	                        // is sliced out. In an area graph, the positionFactor is 2,
	                        // causing the middle two points to be sliced out, since an area
	                        // path starts at left, follows the upper path then turns and
	                        // follows the bottom back. 
	                        slice = arr.slice().splice(
	                            (arr.length / positionFactor) - numParams,
	                            numParams * positionFactor
	                        );

	                        // Move to, line to or curve to?
	                        slice[0] = other[fullLength - numParams - (i * numParams)];

	                        // Disable first control point
	                        if (bezier) {
	                            slice[numParams - 6] = slice[numParams - 2];
	                            slice[numParams - 5] = slice[numParams - 1];
	                        }

	                        // Now insert the slice, either in the middle (for areas) or at
	                        // the end (for lines)
	                        insertSlice(arr, slice, arr.length / positionFactor);

	                        if (isArea) {
	                            i--;
	                        }
	                    }
	                }

	                if (bezier) {
	                    sixify(start);
	                    sixify(end);
	                }

	                // For sideways animation, find out how much we need to shift to get the
	                // start path Xs to match the end path Xs.
	                if (startX && endX) {
	                    for (i = 0; i < startX.length; i++) {
	                        // Moving left, new points coming in on right
	                        if (startX[i] === endX[0]) {
	                            shift = i;
	                            break;
	                            // Moving right
	                        } else if (startX[0] ===
	                            endX[endX.length - startX.length + i]) {
	                            shift = i;
	                            reverse = true;
	                            break;
	                        }
	                    }
	                    if (shift === undefined) {
	                        start = [];
	                    }
	                }

	                if (start.length && H.isNumber(shift)) {

	                    // The common target length for the start and end array, where both 
	                    // arrays are padded in opposite ends
	                    fullLength = end.length + shift * positionFactor * numParams;

	                    if (!reverse) {
	                        prepend(end, start);
	                        append(start, end);
	                    } else {
	                        prepend(start, end);
	                        append(end, start);
	                    }
	                }

	                return [start, end];
	            }
	        }; // End of Fx prototype


	        /**
	         * Utility function to extend an object with the members of another.
	         *
	         * @function #extend
	         * @memberOf Highcharts
	         * @param {Object} a - The object to be extended.
	         * @param {Object} b - The object to add to the first one.
	         * @returns {Object} Object a, the original object.
	         */
	        H.extend = function(a, b) {
	            var n;
	            if (!a) {
	                a = {};
	            }
	            for (n in b) {
	                a[n] = b[n];
	            }
	            return a;
	        };

	        /**
	         * Utility function to deep merge two or more objects and return a third object.
	         * If the first argument is true, the contents of the second object is copied
	         * into the first object. The merge function can also be used with a single 
	         * object argument to create a deep copy of an object.
	         *
	         * @function #merge
	         * @memberOf Highcharts
	         * @param {Boolean} [extend] - Whether to extend the left-side object (a) or
	                  return a whole new object.
	         * @param {Object} a - The first object to extend. When only this is given, the
	                  function returns a deep copy.
	         * @param {...Object} [n] - An object to merge into the previous one.
	         * @returns {Object} - The merged object. If the first argument is true, the 
	         * return is the same as the second argument.
	         */
	        H.merge = function() {
	            var i,
	                args = arguments,
	                len,
	                ret = {},
	                doCopy = function(copy, original) {
	                    var value, key;

	                    // An object is replacing a primitive
	                    if (typeof copy !== 'object') {
	                        copy = {};
	                    }

	                    for (key in original) {
	                        if (original.hasOwnProperty(key)) {
	                            value = original[key];

	                            // Copy the contents of objects, but not arrays or DOM nodes
	                            if (H.isObject(value, true) &&
	                                key !== 'renderTo' &&
	                                typeof value.nodeType !== 'number') {
	                                copy[key] = doCopy(copy[key] || {}, value);

	                                // Primitives and arrays are copied over directly
	                            } else {
	                                copy[key] = original[key];
	                            }
	                        }
	                    }
	                    return copy;
	                };

	            // If first argument is true, copy into the existing object. Used in
	            // setOptions.
	            if (args[0] === true) {
	                ret = args[1];
	                args = Array.prototype.slice.call(args, 2);
	            }

	            // For each argument, extend the return
	            len = args.length;
	            for (i = 0; i < len; i++) {
	                ret = doCopy(ret, args[i]);
	            }

	            return ret;
	        };

	        /**
	         * Shortcut for parseInt
	         * @ignore
	         * @param {Object} s
	         * @param {Number} mag Magnitude
	         */
	        H.pInt = function(s, mag) {
	            return parseInt(s, mag || 10);
	        };

	        /**
	         * Utility function to check for string type.
	         *
	         * @function #isString
	         * @memberOf Highcharts
	         * @param {Object} s - The item to check.
	         * @returns {Boolean} - True if the argument is a string.
	         */
	        H.isString = function(s) {
	            return typeof s === 'string';
	        };

	        /**
	         * Utility function to check if an item is an array.
	         *
	         * @function #isArray
	         * @memberOf Highcharts
	         * @param {Object} obj - The item to check.
	         * @returns {Boolean} - True if the argument is an array.
	         */
	        H.isArray = function(obj) {
	            var str = Object.prototype.toString.call(obj);
	            return str === '[object Array]' || str === '[object Array Iterator]';
	        };

	        /**
	         * Utility function to check if an item is of type object.
	         *
	         * @function #isObject
	         * @memberOf Highcharts
	         * @param {Object} obj - The item to check.
	         * @param {Boolean} [strict=false] - Also checks that the object is not an
	         *    array.
	         * @returns {Boolean} - True if the argument is an object.
	         */
	        H.isObject = function(obj, strict) {
	            return obj && typeof obj === 'object' && (!strict || !H.isArray(obj));
	        };

	        /**
	         * Utility function to check if an item is of type number.
	         *
	         * @function #isNumber
	         * @memberOf Highcharts
	         * @param {Object} n - The item to check.
	         * @returns {Boolean} - True if the item is a number and is not NaN.
	         */
	        H.isNumber = function(n) {
	            return typeof n === 'number' && !isNaN(n);
	        };

	        /**
	         * Remove the last occurence of an item from an array.
	         *
	         * @function #erase
	         * @memberOf Highcharts
	         * @param {Array} arr - The array.
	         * @param {*} item - The item to remove.
	         */
	        H.erase = function(arr, item) {
	            var i = arr.length;
	            while (i--) {
	                if (arr[i] === item) {
	                    arr.splice(i, 1);
	                    break;
	                }
	            }
	        };

	        /**
	         * Check if an object is null or undefined.
	         *
	         * @function #defined
	         * @memberOf Highcharts
	         * @param {Object} obj - The object to check.
	         * @returns {Boolean} - False if the object is null or undefined, otherwise
	         *        true.
	         */
	        H.defined = function(obj) {
	            return obj !== undefined && obj !== null;
	        };

	        /**
	         * Set or get an attribute or an object of attributes. To use as a setter, pass
	         * a key and a value, or let the second argument be a collection of keys and
	         * values. To use as a getter, pass only a string as the second argument.
	         *
	         * @function #attr
	         * @memberOf Highcharts
	         * @param {Object} elem - The DOM element to receive the attribute(s).
	         * @param {String|Object} [prop] - The property or an object of key-value pairs.
	         * @param {String} [value] - The value if a single property is set.
	         * @returns {*} When used as a getter, return the value.
	         */
	        H.attr = function(elem, prop, value) {
	            var key,
	                ret;

	            // if the prop is a string
	            if (H.isString(prop)) {
	                // set the value
	                if (H.defined(value)) {
	                    elem.setAttribute(prop, value);

	                    // get the value
	                } else if (elem && elem.getAttribute) {
	                    ret = elem.getAttribute(prop);
	                }

	                // else if prop is defined, it is a hash of key/value pairs
	            } else if (H.defined(prop) && H.isObject(prop)) {
	                for (key in prop) {
	                    elem.setAttribute(key, prop[key]);
	                }
	            }
	            return ret;
	        };

	        /**
	         * Check if an element is an array, and if not, make it into an array.
	         *
	         * @function #splat
	         * @memberOf Highcharts
	         * @param obj {*} - The object to splat.
	         * @returns {Array} The produced or original array.
	         */
	        H.splat = function(obj) {
	            return H.isArray(obj) ? obj : [obj];
	        };

	        /**
	         * Set a timeout if the delay is given, otherwise perform the function
	         * synchronously.
	         *
	         * @function #syncTimeout
	         * @memberOf Highcharts
	         * @param   {Function} fn - The function callback.
	         * @param   {Number}   delay - Delay in milliseconds.
	         * @param   {Object}   [context] - The context.
	         * @returns {Number} An identifier for the timeout that can later be cleared
	         * with clearTimeout.
	         */
	        H.syncTimeout = function(fn, delay, context) {
	            if (delay) {
	                return setTimeout(fn, delay, context);
	            }
	            fn.call(0, context);
	        };


	        /**
	         * Return the first value that is not null or undefined.
	         *
	         * @function #pick
	         * @memberOf Highcharts
	         * @param {...*} items - Variable number of arguments to inspect.
	         * @returns {*} The value of the first argument that is not null or undefined.
	         */
	        H.pick = function() {
	            var args = arguments,
	                i,
	                arg,
	                length = args.length;
	            for (i = 0; i < length; i++) {
	                arg = args[i];
	                if (arg !== undefined && arg !== null) {
	                    return arg;
	                }
	            }
	        };

	        /**
	         * @typedef {Object} CSSObject - A style object with camel case property names.
	         * The properties can be whatever styles are supported on the given SVG or HTML
	         * element.
	         * @example
	         * {
	         *    fontFamily: 'monospace',
	         *    fontSize: '1.2em'
	         * }
	         */
	        /**
	         * Set CSS on a given element.
	         *
	         * @function #css
	         * @memberOf Highcharts
	         * @param {HTMLDOMElement} el - A HTML DOM element.
	         * @param {CSSObject} styles - Style object with camel case property names.
	         * @returns {void}
	         */
	        H.css = function(el, styles) {
	            if (H.isMS && !H.svg) { // #2686
	                if (styles && styles.opacity !== undefined) {
	                    styles.filter = 'alpha(opacity=' + (styles.opacity * 100) + ')';
	                }
	            }
	            H.extend(el.style, styles);
	        };

	        /**
	         * A HTML DOM element.
	         * @typedef {Object} HTMLDOMElement
	         */

	        /**
	         * Utility function to create an HTML element with attributes and styles.
	         *
	         * @function #createElement
	         * @memberOf Highcharts
	         * @param {String} tag - The HTML tag.
	         * @param {Object} [attribs] - Attributes as an object of key-value pairs.
	         * @param {CSSObject} [styles] - Styles as an object of key-value pairs.
	         * @param {Object} [parent] - The parent HTML object.
	         * @param {Boolean} [nopad=false] - If true, remove all padding, border and
	         *    margin.
	         * @returns {HTMLDOMElement} The created DOM element.
	         */
	        H.createElement = function(tag, attribs, styles, parent, nopad) {
	            var el = doc.createElement(tag),
	                css = H.css;
	            if (attribs) {
	                H.extend(el, attribs);
	            }
	            if (nopad) {
	                css(el, {
	                    padding: 0,
	                    border: 'none',
	                    margin: 0
	                });
	            }
	            if (styles) {
	                css(el, styles);
	            }
	            if (parent) {
	                parent.appendChild(el);
	            }
	            return el;
	        };

	        /**
	         * Extend a prototyped class by new members.
	         *
	         * @function #extendClass
	         * @memberOf Highcharts
	         * @param {Object} parent - The parent prototype to inherit.
	         * @param {Object} members - A collection of prototype members to add or
	         *        override compared to the parent prototype.
	         * @returns {Object} A new prototype.
	         */
	        H.extendClass = function(parent, members) {
	            var object = function() {};
	            object.prototype = new parent(); // eslint-disable-line new-cap
	            H.extend(object.prototype, members);
	            return object;
	        };

	        /**
	         * Left-pad a string to a given length by adding a character repetetively.
	         *
	         * @function #pad
	         * @memberOf Highcharts
	         * @param {Number} number - The input string or number.
	         * @param {Number} length - The desired string length.
	         * @param {String} [padder=0] - The character to pad with.
	         * @returns {String} The padded string.
	         */
	        H.pad = function(number, length, padder) {
	            return new Array((length || 2) + 1 -
	                String(number).length).join(padder || 0) + number;
	        };

	        /**
	         * @typedef {Number|String} RelativeSize - If a number is given, it defines the
	         *    pixel length. If a percentage string is given, like for example `'50%'`,
	         *    the setting defines a length relative to a base size, for example the size
	         *    of a container.
	         */
	        /**
	         * Return a length based on either the integer value, or a percentage of a base.
	         *
	         * @function #relativeLength
	         * @memberOf Highcharts
	         * @param {RelativeSize} value - A percentage string or a number.
	         * @param {Number} base - The full length that represents 100%.
	         * @returns {Number} The computed length.
	         */
	        H.relativeLength = function(value, base) {
	            return (/%$/).test(value) ?
	                base * parseFloat(value) / 100 :
	                parseFloat(value);
	        };

	        /**
	         * Wrap a method with extended functionality, preserving the original function.
	         *
	         * @function #wrap
	         * @memberOf Highcharts
	         * @param {Object} obj - The context object that the method belongs to. In real
	         *        cases, this is often a prototype.
	         * @param {String} method - The name of the method to extend.
	         * @param {Function} func - A wrapper function callback. This function is called
	         *        with the same arguments as the original function, except that the
	         *        original function is unshifted and passed as the first argument.
	         * @returns {void}
	         */
	        H.wrap = function(obj, method, func) {
	            var proceed = obj[method];
	            obj[method] = function() {
	                var args = Array.prototype.slice.call(arguments),
	                    outerArgs = arguments,
	                    ctx = this,
	                    ret;
	                ctx.proceed = function() {
	                    proceed.apply(ctx, arguments.length ? arguments : outerArgs);
	                };
	                args.unshift(proceed);
	                ret = func.apply(this, args);
	                ctx.proceed = null;
	                return ret;
	            };
	        };

	        /**
	         * Get the time zone offset based on the current timezone information as set in
	         * the global options.
	         *
	         * @function #getTZOffset
	         * @memberOf Highcharts
	         * @param  {Number} timestamp - The JavaScript timestamp to inspect.
	         * @return {Number} - The timezone offset in minutes compared to UTC.
	         */
	        H.getTZOffset = function(timestamp) {
	            var d = H.Date;
	            return ((d.hcGetTimezoneOffset && d.hcGetTimezoneOffset(timestamp)) ||
	                d.hcTimezoneOffset || 0) * 60000;
	        };

	        /**
	         * Format a date, based on the syntax for PHP's [strftime]{@link
	         * http://www.php.net/manual/en/function.strftime.php} function.
	         *
	         * @function #dateFormat
	         * @memberOf Highcharts
	         * @param {String} format - The desired format where various time
	         *        representations are prefixed with %.
	         * @param {Number} timestamp - The JavaScript timestamp.
	         * @param {Boolean} [capitalize=false] - Upper case first letter in the return.
	         * @returns {String} The formatted date.
	         */
	        H.dateFormat = function(format, timestamp, capitalize) {
	            if (!H.defined(timestamp) || isNaN(timestamp)) {
	                return H.defaultOptions.lang.invalidDate || '';
	            }
	            format = H.pick(format, '%Y-%m-%d %H:%M:%S');

	            var D = H.Date,
	                date = new D(timestamp - H.getTZOffset(timestamp)),
	                key, // used in for constuct below
	                // get the basic time values
	                hours = date[D.hcGetHours](),
	                day = date[D.hcGetDay](),
	                dayOfMonth = date[D.hcGetDate](),
	                month = date[D.hcGetMonth](),
	                fullYear = date[D.hcGetFullYear](),
	                lang = H.defaultOptions.lang,
	                langWeekdays = lang.weekdays,
	                shortWeekdays = lang.shortWeekdays,
	                pad = H.pad,

	                // List all format keys. Custom formats can be added from the outside. 
	                replacements = H.extend({

	                    //-- Day
	                    // Short weekday, like 'Mon'
	                    'a': shortWeekdays ?
	                        shortWeekdays[day] : langWeekdays[day].substr(0, 3),
	                    // Long weekday, like 'Monday'
	                    'A': langWeekdays[day],
	                    // Two digit day of the month, 01 to 31
	                    'd': pad(dayOfMonth),
	                    // Day of the month, 1 through 31
	                    'e': pad(dayOfMonth, 2, ' '),
	                    'w': day,

	                    // Week (none implemented)
	                    //'W': weekNumber(),

	                    //-- Month
	                    // Short month, like 'Jan'
	                    'b': lang.shortMonths[month],
	                    // Long month, like 'January'
	                    'B': lang.months[month],
	                    // Two digit month number, 01 through 12
	                    'm': pad(month + 1),

	                    //-- Year
	                    // Two digits year, like 09 for 2009
	                    'y': fullYear.toString().substr(2, 2),
	                    // Four digits year, like 2009
	                    'Y': fullYear,

	                    //-- Time
	                    // Two digits hours in 24h format, 00 through 23
	                    'H': pad(hours),
	                    // Hours in 24h format, 0 through 23
	                    'k': hours,
	                    // Two digits hours in 12h format, 00 through 11
	                    'I': pad((hours % 12) || 12),
	                    // Hours in 12h format, 1 through 12
	                    'l': (hours % 12) || 12,
	                    // Two digits minutes, 00 through 59
	                    'M': pad(date[D.hcGetMinutes]()),
	                    // Upper case AM or PM
	                    'p': hours < 12 ? 'AM' : 'PM',
	                    // Lower case AM or PM
	                    'P': hours < 12 ? 'am' : 'pm',
	                    // Two digits seconds, 00 through  59
	                    'S': pad(date.getSeconds()),
	                    // Milliseconds (naming from Ruby)
	                    'L': pad(Math.round(timestamp % 1000), 3)
	                }, H.dateFormats);


	            // Do the replaces
	            for (key in replacements) {
	                // Regex would do it in one line, but this is faster
	                while (format.indexOf('%' + key) !== -1) {
	                    format = format.replace(
	                        '%' + key,
	                        typeof replacements[key] === 'function' ?
	                        replacements[key](timestamp) :
	                        replacements[key]
	                    );
	                }
	            }

	            // Optionally capitalize the string and return
	            return capitalize ?
	                format.substr(0, 1).toUpperCase() + format.substr(1) :
	                format;
	        };

	        /**
	         * Format a single variable. Similar to sprintf, without the % prefix.
	         *
	         * @example
	         * formatSingle('.2f', 5); // => '5.00'.
	         *
	         * @function #formatSingle
	         * @memberOf Highcharts
	         * @param {String} format The format string.
	         * @param {*} val The value.
	         * @returns {String} The formatted representation of the value.
	         */
	        H.formatSingle = function(format, val) {
	            var floatRegex = /f$/,
	                decRegex = /\.([0-9])/,
	                lang = H.defaultOptions.lang,
	                decimals;

	            if (floatRegex.test(format)) { // float
	                decimals = format.match(decRegex);
	                decimals = decimals ? decimals[1] : -1;
	                if (val !== null) {
	                    val = H.numberFormat(
	                        val,
	                        decimals,
	                        lang.decimalPoint,
	                        format.indexOf(',') > -1 ? lang.thousandsSep : ''
	                    );
	                }
	            } else {
	                val = H.dateFormat(format, val);
	            }
	            return val;
	        };

	        /**
	         * Format a string according to a subset of the rules of Python's String.format
	         * method.
	         *
	         * @function #format
	         * @memberOf Highcharts
	         * @param {String} str The string to format.
	         * @param {Object} ctx The context, a collection of key-value pairs where each
	         *        key is replaced by its value.
	         * @returns {String} The formatted string.
	         *
	         * @example
	         * var s = Highcharts.format(
	         *     'The {color} fox was {len:.2f} feet long',
	         *     { color: 'red', len: Math.PI }
	         * );
	         * // => The red fox was 3.14 feet long
	         */
	        H.format = function(str, ctx) {
	            var splitter = '{',
	                isInside = false,
	                segment,
	                valueAndFormat,
	                path,
	                i,
	                len,
	                ret = [],
	                val,
	                index;

	            while (str) {
	                index = str.indexOf(splitter);
	                if (index === -1) {
	                    break;
	                }

	                segment = str.slice(0, index);
	                if (isInside) { // we're on the closing bracket looking back

	                    valueAndFormat = segment.split(':');
	                    path = valueAndFormat.shift().split('.'); // get first and leave
	                    len = path.length;
	                    val = ctx;

	                    // Assign deeper paths
	                    for (i = 0; i < len; i++) {
	                        val = val[path[i]];
	                    }

	                    // Format the replacement
	                    if (valueAndFormat.length) {
	                        val = H.formatSingle(valueAndFormat.join(':'), val);
	                    }

	                    // Push the result and advance the cursor
	                    ret.push(val);

	                } else {
	                    ret.push(segment);

	                }
	                str = str.slice(index + 1); // the rest
	                isInside = !isInside; // toggle
	                splitter = isInside ? '}' : '{'; // now look for next matching bracket
	            }
	            ret.push(str);
	            return ret.join('');
	        };

	        /**
	         * Get the magnitude of a number.
	         *
	         * @function #getMagnitude
	         * @memberOf Highcharts
	         * @param {Number} number The number.
	         * @returns {Number} The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2
	         *        etc.
	         */
	        H.getMagnitude = function(num) {
	            return Math.pow(10, Math.floor(Math.log(num) / Math.LN10));
	        };

	        /**
	         * Take an interval and normalize it to multiples of round numbers.
	         *
	         * @todo  Move this function to the Axis prototype. It is here only for
	         *        historical reasons.
	         * @function #normalizeTickInterval
	         * @memberOf Highcharts
	         * @param {Number} interval - The raw, un-rounded interval.
	         * @param {Array} [multiples] - Allowed multiples.
	         * @param {Number} [magnitude] - The magnitude of the number.
	         * @param {Boolean} [allowDecimals] - Whether to allow decimals.
	         * @param {Boolean} [hasTickAmount] - If it has tickAmount, avoid landing
	         *        on tick intervals lower than original.
	         * @returns {Number} The normalized interval.
	         */
	        H.normalizeTickInterval = function(interval, multiples, magnitude,
	            allowDecimals, hasTickAmount) {
	            var normalized,
	                i,
	                retInterval = interval;

	            // round to a tenfold of 1, 2, 2.5 or 5
	            magnitude = H.pick(magnitude, 1);
	            normalized = interval / magnitude;

	            // multiples for a linear scale
	            if (!multiples) {
	                multiples = hasTickAmount ?
	                    // Finer grained ticks when the tick amount is hard set, including
	                    // when alignTicks is true on multiple axes (#4580).
	                    [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] :

	                    // Else, let ticks fall on rounder numbers
	                    [1, 2, 2.5, 5, 10];


	                // the allowDecimals option
	                if (allowDecimals === false) {
	                    if (magnitude === 1) {
	                        multiples = H.grep(multiples, function(num) {
	                            return num % 1 === 0;
	                        });
	                    } else if (magnitude <= 0.1) {
	                        multiples = [1 / magnitude];
	                    }
	                }
	            }

	            // normalize the interval to the nearest multiple
	            for (i = 0; i < multiples.length; i++) {
	                retInterval = multiples[i];
	                // only allow tick amounts smaller than natural
	                if ((hasTickAmount && retInterval * magnitude >= interval) ||
	                    (!hasTickAmount && (normalized <= (multiples[i] +
	                        (multiples[i + 1] || multiples[i])) / 2))) {
	                    break;
	                }
	            }

	            // Multiply back to the correct magnitude. Correct floats to appropriate 
	            // precision (#6085).
	            retInterval = H.correctFloat(
	                retInterval * magnitude, -Math.round(Math.log(0.001) / Math.LN10)
	            );

	            return retInterval;
	        };


	        /**
	         * Sort an object array and keep the order of equal items. The ECMAScript
	         * standard does not specify the behaviour when items are equal.
	         *
	         * @function #stableSort
	         * @memberOf Highcharts
	         * @param {Array} arr - The array to sort.
	         * @param {Function} sortFunction - The function to sort it with, like with 
	         *        regular Array.prototype.sort.
	         * @returns {void}
	         */
	        H.stableSort = function(arr, sortFunction) {
	            var length = arr.length,
	                sortValue,
	                i;

	            // Add index to each item
	            for (i = 0; i < length; i++) {
	                arr[i].safeI = i; // stable sort index
	            }

	            arr.sort(function(a, b) {
	                sortValue = sortFunction(a, b);
	                return sortValue === 0 ? a.safeI - b.safeI : sortValue;
	            });

	            // Remove index from items
	            for (i = 0; i < length; i++) {
	                delete arr[i].safeI; // stable sort index
	            }
	        };

	        /**
	         * Non-recursive method to find the lowest member of an array. `Math.min` raises
	         * a maximum call stack size exceeded error in Chrome when trying to apply more
	         * than 150.000 points. This method is slightly slower, but safe.
	         *
	         * @function #arrayMin
	         * @memberOf  Highcharts
	         * @param {Array} data An array of numbers.
	         * @returns {Number} The lowest number.
	         */
	        H.arrayMin = function(data) {
	            var i = data.length,
	                min = data[0];

	            while (i--) {
	                if (data[i] < min) {
	                    min = data[i];
	                }
	            }
	            return min;
	        };

	        /**
	         * Non-recursive method to find the lowest member of an array. `Math.max` raises
	         * a maximum call stack size exceeded error in Chrome when trying to apply more
	         * than 150.000 points. This method is slightly slower, but safe.
	         *
	         * @function #arrayMax
	         * @memberOf  Highcharts
	         * @param {Array} data - An array of numbers.
	         * @returns {Number} The highest number.
	         */
	        H.arrayMax = function(data) {
	            var i = data.length,
	                max = data[0];

	            while (i--) {
	                if (data[i] > max) {
	                    max = data[i];
	                }
	            }
	            return max;
	        };

	        /**
	         * Utility method that destroys any SVGElement instances that are properties on
	         * the given object. It loops all properties and invokes destroy if there is a
	         * destroy method. The property is then delete.
	         *
	         * @function #destroyObjectProperties
	         * @memberOf Highcharts
	         * @param {Object} obj - The object to destroy properties on.
	         * @param {Object} [except] - Exception, do not destroy this property, only
	         *    delete it.
	         * @returns {void}
	         */
	        H.destroyObjectProperties = function(obj, except) {
	            var n;
	            for (n in obj) {
	                // If the object is non-null and destroy is defined
	                if (obj[n] && obj[n] !== except && obj[n].destroy) {
	                    // Invoke the destroy
	                    obj[n].destroy();
	                }

	                // Delete the property from the object.
	                delete obj[n];
	            }
	        };


	        /**
	         * Discard a HTML element by moving it to the bin and delete.
	         *
	         * @function #discardElement
	         * @memberOf Highcharts
	         * @param {HTMLDOMElement} element - The HTML node to discard.
	         * @returns {void}
	         */
	        H.discardElement = function(element) {
	            var garbageBin = H.garbageBin;
	            // create a garbage bin element, not part of the DOM
	            if (!garbageBin) {
	                garbageBin = H.createElement('div');
	            }

	            // move the node and empty bin
	            if (element) {
	                garbageBin.appendChild(element);
	            }
	            garbageBin.innerHTML = '';
	        };

	        /**
	         * Fix JS round off float errors.
	         *
	         * @function #correctFloat
	         * @memberOf Highcharts
	         * @param {Number} num - A float number to fix.
	         * @param {Number} [prec=14] - The precision.
	         * @returns {Number} The corrected float number.
	         */
	        H.correctFloat = function(num, prec) {
	            return parseFloat(
	                num.toPrecision(prec || 14)
	            );
	        };

	        /**
	         * Set the global animation to either a given value, or fall back to the given
	         * chart's animation option.
	         *
	         * @function #setAnimation
	         * @memberOf Highcharts
	         * @param {Boolean|Animation} animation - The animation object.
	         * @param {Object} chart - The chart instance.
	         * @returns {void}
	         * @todo This function always relates to a chart, and sets a property on the
	         *        renderer, so it should be moved to the SVGRenderer.
	         */
	        H.setAnimation = function(animation, chart) {
	            chart.renderer.globalAnimation = H.pick(
	                animation,
	                chart.options.chart.animation,
	                true
	            );
	        };

	        /**
	         * Get the animation in object form, where a disabled animation is always
	         * returned as `{ duration: 0 }`.
	         *
	         * @function #animObject
	         * @memberOf Highcharts
	         * @param {Boolean|AnimationOptions} animation - An animation setting. Can be an
	         *        object with duration, complete and easing properties, or a boolean to
	         *        enable or disable.
	         * @returns {AnimationOptions} An object with at least a duration property.
	         */
	        H.animObject = function(animation) {
	            return H.isObject(animation) ?
	                H.merge(animation) : {
	                    duration: animation ? 500 : 0
	                };
	        };

	        /**
	         * The time unit lookup
	         */
	        H.timeUnits = {
	            millisecond: 1,
	            second: 1000,
	            minute: 60000,
	            hour: 3600000,
	            day: 24 * 3600000,
	            week: 7 * 24 * 3600000,
	            month: 28 * 24 * 3600000,
	            year: 364 * 24 * 3600000
	        };

	        /**
	         * Format a number and return a string based on input settings.
	         *
	         * @function #numberFormat
	         * @memberOf Highcharts
	         * @param {Number} number - The input number to format.
	         * @param {Number} decimals - The amount of decimals. A value of -1 preserves
	         *        the amount in the input number.
	         * @param {String} [decimalPoint] - The decimal point, defaults to the one given
	         *        in the lang options.
	         * @param {String} [thousandsSep] - The thousands separator, defaults to the one
	         *        given in the lang options.
	         * @returns {String} The formatted number.
	         */
	        H.numberFormat = function(number, decimals, decimalPoint, thousandsSep) {
	            number = +number || 0;
	            decimals = +decimals;

	            var lang = H.defaultOptions.lang,
	                origDec = (number.toString().split('.')[1] || '').length,
	                strinteger,
	                thousands,
	                ret,
	                roundedNumber;

	            if (decimals === -1) {
	                // Preserve decimals. Not huge numbers (#3793).
	                decimals = Math.min(origDec, 20);
	            } else if (!H.isNumber(decimals)) {
	                decimals = 2;
	            }

	            // Add another decimal to avoid rounding errors of float numbers. (#4573)
	            // Then use toFixed to handle rounding.
	            roundedNumber = (
	                Math.abs(number) + Math.pow(10, -Math.max(decimals, origDec) - 1)
	            ).toFixed(decimals);

	            // A string containing the positive integer component of the number
	            strinteger = String(H.pInt(roundedNumber));

	            // Leftover after grouping into thousands. Can be 0, 1 or 3.
	            thousands = strinteger.length > 3 ? strinteger.length % 3 : 0;

	            // Language
	            decimalPoint = H.pick(decimalPoint, lang.decimalPoint);
	            thousandsSep = H.pick(thousandsSep, lang.thousandsSep);

	            // Start building the return
	            ret = number < 0 ? '-' : '';

	            // Add the leftover after grouping into thousands. For example, in the
	            // number 42 000 000, this line adds 42.
	            ret += thousands ? strinteger.substr(0, thousands) + thousandsSep : '';

	            // Add the remaining thousands groups, joined by the thousands separator
	            ret += strinteger
	                .substr(thousands)
	                .replace(/(\d{3})(?=\d)/g, '$1' + thousandsSep);

	            // Add the decimal point and the decimal component
	            if (decimals) {
	                // Get the decimal component
	                ret += decimalPoint + roundedNumber.slice(-decimals);
	            }

	            return ret;
	        };

	        /**
	         * Easing definition
	         * @ignore
	         * @param   {Number} pos Current position, ranging from 0 to 1.
	         */
	        Math.easeInOutSine = function(pos) {
	            return -0.5 * (Math.cos(Math.PI * pos) - 1);
	        };

	        /**
	         * Get the computed CSS value for given element and property, only for numerical
	         * properties. For width and height, the dimension of the inner box (excluding
	         * padding) is returned. Used for fitting the chart within the container.
	         *
	         * @function #getStyle
	         * @memberOf Highcharts
	         * @param {HTMLDOMElement} el - A HTML element.
	         * @param {String} prop - The property name.
	         * @returns {Number} - The numeric value.
	         */
	        H.getStyle = function(el, prop) {

	            var style;

	            // For width and height, return the actual inner pixel size (#4913)
	            if (prop === 'width') {
	                return Math.min(el.offsetWidth, el.scrollWidth) -
	                    H.getStyle(el, 'padding-left') -
	                    H.getStyle(el, 'padding-right');
	            } else if (prop === 'height') {
	                return Math.min(el.offsetHeight, el.scrollHeight) -
	                    H.getStyle(el, 'padding-top') -
	                    H.getStyle(el, 'padding-bottom');
	            }

	            // Otherwise, get the computed style
	            style = win.getComputedStyle(el, undefined);
	            return style && H.pInt(style.getPropertyValue(prop));
	        };

	        /**
	         * Search for an item in an array.
	         *
	         * @function #inArray
	         * @memberOf Highcharts
	         * @param {*} item - The item to search for.
	         * @param {arr} arr - The array or node collection to search in.
	         * @returns {Number} - The index within the array, or -1 if not found.
	         */
	        H.inArray = function(item, arr) {
	            return arr.indexOf ? arr.indexOf(item) : [].indexOf.call(arr, item);
	        };

	        /**
	         * Filter an array by a callback.
	         *
	         * @function #grep
	         * @memberOf Highcharts
	         * @param {Array} arr - The array to filter.
	         * @param {Function} callback - The callback function. The function receives the
	         *        item as the first argument. Return `true` if the item is to be
	         *        preserved.
	         * @returns {Array} - A new, filtered array.
	         */
	        H.grep = function(arr, callback) {
	            return [].filter.call(arr, callback);
	        };

	        /**
	         * Return the value of the first element in the array that satisfies the 
	         * provided testing function.
	         *
	         * @function #find
	         * @memberOf Highcharts
	         * @param {Array} arr - The array to test.
	         * @param {Function} callback - The callback function. The function receives the
	         *        item as the first argument. Return `true` if this item satisfies the
	         *        condition.
	         * @returns {Mixed} - The value of the element.
	         */
	        H.find = function(arr, callback) {
	            return [].find.call(arr, callback);
	        };

	        /**
	         * Map an array by a callback.
	         *
	         * @function #map
	         * @memberOf Highcharts
	         * @param {Array} arr - The array to map.
	         * @param {Function} fn - The callback function. Return the new value for the 
	         *        new array.
	         * @returns {Array} - A new array item with modified items.
	         */
	        H.map = function(arr, fn) {
	            var results = [],
	                i = 0,
	                len = arr.length;

	            for (; i < len; i++) {
	                results[i] = fn.call(arr[i], arr[i], i, arr);
	            }

	            return results;
	        };

	        /**
	         * Get the element's offset position, corrected for `overflow: auto`.
	         *
	         * @function #offset
	         * @memberOf Highcharts
	         * @param {HTMLDOMElement} el - The HTML element.
	         * @returns {Object} An object containing `left` and `top` properties for the
	         * position in the page.
	         */
	        H.offset = function(el) {
	            var docElem = doc.documentElement,
	                box = el.getBoundingClientRect();

	            return {
	                top: box.top + (win.pageYOffset || docElem.scrollTop) -
	                    (docElem.clientTop || 0),
	                left: box.left + (win.pageXOffset || docElem.scrollLeft) -
	                    (docElem.clientLeft || 0)
	            };
	        };

	        /**
	         * Stop running animation.
	         *
	         * @todo A possible extension to this would be to stop a single property, when
	         * we want to continue animating others. Then assign the prop to the timer
	         * in the Fx.run method, and check for the prop here. This would be an
	         * improvement in all cases where we stop the animation from .attr. Instead of
	         * stopping everything, we can just stop the actual attributes we're setting.
	         *
	         * @function #stop
	         * @memberOf Highcharts
	         * @param {SVGElement} el - The SVGElement to stop animation on.
	         * @param {string} [prop] - The property to stop animating. If given, the stop
	         *    method will stop a single property from animating, while others continue.
	         * @returns {void}
	         */
	        H.stop = function(el, prop) {

	            var i = timers.length;

	            // Remove timers related to this element (#4519)
	            while (i--) {
	                if (timers[i].elem === el && (!prop || prop === timers[i].prop)) {
	                    timers[i].stopped = true; // #4667
	                }
	            }
	        };

	        /**
	         * Iterate over an array.
	         *
	         * @function #each
	         * @memberOf Highcharts
	         * @param {Array} arr - The array to iterate over.
	         * @param {Function} fn - The iterator callback. It passes two arguments:
	         * * item - The array item.
	         * * index - The item's index in the array.
	         * @param {Object} [ctx] The context.
	         */
	        H.each = function(arr, fn, ctx) { // modern browsers
	            return Array.prototype.forEach.call(arr, fn, ctx);
	        };

	        /**
	         * Add an event listener.
	         *
	         * @function #addEvent
	         * @memberOf Highcharts
	         * @param {Object} el - The element or object to add a listener to. It can be a
	         *        {@link HTMLDOMElement}, an {@link SVGElement} or any other object.
	         * @param {String} type - The event type.
	         * @param {Function} fn - The function callback to execute when the event is 
	         *        fired.
	         * @returns {Function} A callback function to remove the added event.
	         */
	        H.addEvent = function(el, type, fn) {

	            var events = el.hcEvents = el.hcEvents || {};

	            function wrappedFn(e) {
	                e.target = e.srcElement || win; // #2820
	                fn.call(el, e);
	            }

	            // Handle DOM events in modern browsers
	            if (el.addEventListener) {
	                el.addEventListener(type, fn, false);

	                // Handle old IE implementation
	            } else if (el.attachEvent) {

	                if (!el.hcEventsIE) {
	                    el.hcEventsIE = {};
	                }

	                // Link wrapped fn with original fn, so we can get this in removeEvent
	                el.hcEventsIE[fn.toString()] = wrappedFn;

	                el.attachEvent('on' + type, wrappedFn);
	            }

	            if (!events[type]) {
	                events[type] = [];
	            }

	            events[type].push(fn);

	            // Return a function that can be called to remove this event.
	            return function() {
	                H.removeEvent(el, type, fn);
	            };
	        };

	        /**
	         * Remove an event that was added with {@link Highcharts#addEvent}.
	         *
	         * @function #removeEvent
	         * @memberOf Highcharts
	         * @param {Object} el - The element to remove events on.
	         * @param {String} [type] - The type of events to remove. If undefined, all
	         *        events are removed from the element.
	         * @param {Function} [fn] - The specific callback to remove. If undefined, all
	         *        events that match the element and optionally the type are removed.
	         * @returns {void}
	         */
	        H.removeEvent = function(el, type, fn) {

	            var events,
	                hcEvents = el.hcEvents,
	                index;

	            function removeOneEvent(type, fn) {
	                if (el.removeEventListener) {
	                    el.removeEventListener(type, fn, false);
	                } else if (el.attachEvent) {
	                    fn = el.hcEventsIE[fn.toString()];
	                    el.detachEvent('on' + type, fn);
	                }
	            }

	            function removeAllEvents() {
	                var types,
	                    len,
	                    n;

	                if (!el.nodeName) {
	                    return; // break on non-DOM events
	                }

	                if (type) {
	                    types = {};
	                    types[type] = true;
	                } else {
	                    types = hcEvents;
	                }

	                for (n in types) {
	                    if (hcEvents[n]) {
	                        len = hcEvents[n].length;
	                        while (len--) {
	                            removeOneEvent(n, hcEvents[n][len]);
	                        }
	                    }
	                }
	            }

	            if (hcEvents) {
	                if (type) {
	                    events = hcEvents[type] || [];
	                    if (fn) {
	                        index = H.inArray(fn, events);
	                        if (index > -1) {
	                            events.splice(index, 1);
	                            hcEvents[type] = events;
	                        }
	                        removeOneEvent(type, fn);

	                    } else {
	                        removeAllEvents();
	                        hcEvents[type] = [];
	                    }
	                } else {
	                    removeAllEvents();
	                    el.hcEvents = {};
	                }
	            }
	        };

	        /**
	         * Fire an event that was registered with {@link Highcharts#addEvent}.
	         *
	         * @function #fireEvent
	         * @memberOf Highcharts
	         * @param {Object} el - The object to fire the event on. It can be a
	         *        {@link HTMLDOMElement}, an {@link SVGElement} or any other object.
	         * @param {String} type - The type of event.
	         * @param {Object} [eventArguments] - Custom event arguments that are passed on
	         *        as an argument to the event handler.
	         * @param {Function} [defaultFunction] - The default function to execute if the 
	         *        other listeners haven't returned false.
	         * @returns {void}
	         */
	        H.fireEvent = function(el, type, eventArguments, defaultFunction) {
	            var e,
	                hcEvents = el.hcEvents,
	                events,
	                len,
	                i,
	                fn;

	            eventArguments = eventArguments || {};

	            if (doc.createEvent && (el.dispatchEvent || el.fireEvent)) {
	                e = doc.createEvent('Events');
	                e.initEvent(type, true, true);
	                //e.target = el;

	                H.extend(e, eventArguments);

	                if (el.dispatchEvent) {
	                    el.dispatchEvent(e);
	                } else {
	                    el.fireEvent(type, e);
	                }

	            } else if (hcEvents) {

	                events = hcEvents[type] || [];
	                len = events.length;

	                if (!eventArguments.target) { // We're running a custom event

	                    H.extend(eventArguments, {
	                        // Attach a simple preventDefault function to skip default
	                        // handler if called. The built-in defaultPrevented property is
	                        // not overwritable (#5112)
	                        preventDefault: function() {
	                            eventArguments.defaultPrevented = true;
	                        },
	                        // Setting target to native events fails with clicking the
	                        // zoom-out button in Chrome.
	                        target: el,
	                        // If the type is not set, we're running a custom event (#2297).
	                        // If it is set, we're running a browser event, and setting it
	                        // will cause en error in IE8 (#2465).		
	                        type: type
	                    });
	                }


	                for (i = 0; i < len; i++) {
	                    fn = events[i];

	                    // If the event handler return false, prevent the default handler
	                    // from executing
	                    if (fn && fn.call(el, eventArguments) === false) {
	                        eventArguments.preventDefault();
	                    }
	                }
	            }

	            // Run the default if not prevented
	            if (defaultFunction && !eventArguments.defaultPrevented) {
	                defaultFunction(eventArguments);
	            }
	        };

	        /**
	         * An animation configuration. Animation configurations can also be defined as
	         * booleans, where `false` turns off animation and `true` defaults to a duration
	         * of 500ms.
	         * @typedef {Object} AnimationOptions
	         * @property {Number} duration - The animation duration in milliseconds.
	         * @property {String} [easing] - The name of an easing function as defined on
	         *     the `Math` object.
	         * @property {Function} [complete] - A callback function to exectute when the
	         *     animation finishes.
	         * @property {Function} [step] - A callback function to execute on each step of
	         *     each attribute or CSS property that's being animated. The first argument
	         *     contains information about the animation and progress.
	         */


	        /**
	         * The global animate method, which uses Fx to create individual animators.
	         *
	         * @function #animate
	         * @memberOf Highcharts
	         * @param {HTMLDOMElement|SVGElement} el - The element to animate.
	         * @param {Object} params - An object containing key-value pairs of the
	         *        properties to animate. Supports numeric as pixel-based CSS properties
	         *        for HTML objects and attributes for SVGElements.
	         * @param {AnimationOptions} [opt] - Animation options.
	         */
	        H.animate = function(el, params, opt) {
	            var start,
	                unit = '',
	                end,
	                fx,
	                args,
	                prop;

	            if (!H.isObject(opt)) { // Number or undefined/null
	                args = arguments;
	                opt = {
	                    duration: args[2],
	                    easing: args[3],
	                    complete: args[4]
	                };
	            }
	            if (!H.isNumber(opt.duration)) {
	                opt.duration = 400;
	            }
	            opt.easing = typeof opt.easing === 'function' ?
	                opt.easing :
	                (Math[opt.easing] || Math.easeInOutSine);
	            opt.curAnim = H.merge(params);

	            for (prop in params) {

	                // Stop current running animation of this property
	                H.stop(el, prop);

	                fx = new H.Fx(el, opt, prop);
	                end = null;

	                if (prop === 'd') {
	                    fx.paths = fx.initPath(
	                        el,
	                        el.d,
	                        params.d
	                    );
	                    fx.toD = params.d;
	                    start = 0;
	                    end = 1;
	                } else if (el.attr) {
	                    start = el.attr(prop);
	                } else {
	                    start = parseFloat(H.getStyle(el, prop)) || 0;
	                    if (prop !== 'opacity') {
	                        unit = 'px';
	                    }
	                }

	                if (!end) {
	                    end = params[prop];
	                }
	                if (end.match && end.match('px')) {
	                    end = end.replace(/px/g, ''); // #4351
	                }
	                fx.run(start, end, unit);
	            }
	        };

	        /**
	         * Factory to create new series prototypes.
	         *
	         * @function #seriesType
	         * @memberOf Highcharts
	         *
	         * @param {String} type - The series type name.
	         * @param {String} parent - The parent series type name. Use `line` to inherit
	         *        from the basic {@link Series} object.
	         * @param {Object} options - The additional default options that is merged with
	         *        the parent's options.
	         * @param {Object} props - The properties (functions and primitives) to set on
	         *        the new prototype.
	         * @param {Object} [pointProps] - Members for a series-specific extension of the
	         *        {@link Point} prototype if needed.
	         * @returns {*} - The newly created prototype as extended from {@link Series}
	         * or its derivatives.
	         */
	        // docs: add to API + extending Highcharts
	        H.seriesType = function(type, parent, options, props, pointProps) {
	            var defaultOptions = H.getOptions(),
	                seriesTypes = H.seriesTypes;

	            // Merge the options
	            defaultOptions.plotOptions[type] = H.merge(
	                defaultOptions.plotOptions[parent],
	                options
	            );

	            // Create the class
	            seriesTypes[type] = H.extendClass(seriesTypes[parent] ||
	                function() {}, props);
	            seriesTypes[type].prototype.type = type;

	            // Create the point class if needed
	            if (pointProps) {
	                seriesTypes[type].prototype.pointClass =
	                    H.extendClass(H.Point, pointProps);
	            }

	            return seriesTypes[type];
	        };

	        /**
	         * Get a unique key for using in internal element id's and pointers. The key
	         * is composed of a random hash specific to this Highcharts instance, and a 
	         * counter.
	         * @function #uniqueKey
	         * @memberOf Highcharts
	         * @return {string} The key.
	         * @example
	         * var id = H.uniqueKey(); // => 'highcharts-x45f6hp-0'
	         */
	        H.uniqueKey = (function() {

	            var uniqueKeyHash = Math.random().toString(36).substring(2, 9),
	                idCounter = 0;

	            return function() {
	                return 'highcharts-' + uniqueKeyHash + '-' + idCounter++;
	            };
	        }());

	        /**
	         * Register Highcharts as a plugin in jQuery
	         */
	        if (win.jQuery) {
	            win.jQuery.fn.highcharts = function() {
	                var args = [].slice.call(arguments);

	                if (this[0]) { // this[0] is the renderTo div

	                    // Create the chart
	                    if (args[0]) {
	                        new H[ // eslint-disable-line no-new
	                            // Constructor defaults to Chart
	                            H.isString(args[0]) ? args.shift() : 'Chart'
	                        ](this[0], args[0], args[1]);
	                        return this;
	                    }

	                    // When called without parameters or with the return argument,
	                    // return an existing chart
	                    return charts[H.attr(this[0], 'data-highcharts-chart')];
	                }
	            };
	        }


	        /**
	         * Compatibility section to add support for legacy IE. This can be removed if
	         * old IE support is not needed.
	         */
	        if (doc && !doc.defaultView) {
	            H.getStyle = function(el, prop) {
	                var val,
	                    alias = {
	                        width: 'clientWidth',
	                        height: 'clientHeight'
	                    }[prop];

	                if (el.style[prop]) {
	                    return H.pInt(el.style[prop]);
	                }
	                if (prop === 'opacity') {
	                    prop = 'filter';
	                }

	                // Getting the rendered width and height
	                if (alias) {
	                    el.style.zoom = 1;
	                    return Math.max(el[alias] - 2 * H.getStyle(el, 'padding'), 0);
	                }

	                val = el.currentStyle[prop.replace(/\-(\w)/g, function(a, b) {
	                    return b.toUpperCase();
	                })];
	                if (prop === 'filter') {
	                    val = val.replace(
	                        /alpha\(opacity=([0-9]+)\)/,
	                        function(a, b) {
	                            return b / 100;
	                        }
	                    );
	                }

	                return val === '' ? 1 : H.pInt(val);
	            };
	        }

	        if (!Array.prototype.forEach) {
	            H.each = function(arr, fn, ctx) { // legacy
	                var i = 0,
	                    len = arr.length;
	                for (; i < len; i++) {
	                    if (fn.call(ctx, arr[i], i, arr) === false) {
	                        return i;
	                    }
	                }
	            };
	        }

	        if (!Array.prototype.indexOf) {
	            H.inArray = function(item, arr) {
	                var len,
	                    i = 0;

	                if (arr) {
	                    len = arr.length;

	                    for (; i < len; i++) {
	                        if (arr[i] === item) {
	                            return i;
	                        }
	                    }
	                }

	                return -1;
	            };
	        }

	        if (!Array.prototype.filter) {
	            H.grep = function(elements, fn) {
	                var ret = [],
	                    i = 0,
	                    length = elements.length;

	                for (; i < length; i++) {
	                    if (fn(elements[i], i)) {
	                        ret.push(elements[i]);
	                    }
	                }

	                return ret;
	            };
	        }

	        if (!Array.prototype.find) {
	            H.find = function(arr, fn) {
	                var i,
	                    length = arr.length;

	                for (i = 0; i < length; i++) {
	                    if (fn(arr[i], i)) {
	                        return arr[i];
	                    }
	                }
	            };
	        }

	        //--- End compatibility section ---

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var each = H.each,
	            isNumber = H.isNumber,
	            map = H.map,
	            merge = H.merge,
	            pInt = H.pInt;

	        /**
	         * @typedef {string} ColorString
	         * A valid color to be parsed and handled by Highcharts. Highcharts internally 
	         * supports hex colors like `#ffffff`, rgb colors like `rgb(255,255,255)` and
	         * rgba colors like `rgba(255,255,255,1)`. Other colors may be supported by the
	         * browsers and displayed correctly, but Highcharts is not able to process them
	         * and apply concepts like opacity and brightening.
	         */
	        /**
	         * Handle color operations. The object methods are chainable.
	         * @param {String} input The input color in either rbga or hex format
	         */
	        H.Color = function(input) {
	            // Backwards compatibility, allow instanciation without new
	            if (!(this instanceof H.Color)) {
	                return new H.Color(input);
	            }
	            // Initialize
	            this.init(input);
	        };
	        H.Color.prototype = {

	            // Collection of parsers. This can be extended from the outside by pushing parsers
	            // to Highcharts.Color.prototype.parsers.
	            parsers: [{
	                // RGBA color
	                regex: /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/,
	                parse: function(result) {
	                    return [pInt(result[1]), pInt(result[2]), pInt(result[3]), parseFloat(result[4], 10)];
	                }
	            }, {
	                // HEX color
	                regex: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,
	                parse: function(result) {
	                    return [pInt(result[1], 16), pInt(result[2], 16), pInt(result[3], 16), 1];
	                }
	            }, {
	                // RGB color
	                regex: /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/,
	                parse: function(result) {
	                    return [pInt(result[1]), pInt(result[2]), pInt(result[3]), 1];
	                }
	            }],

	            // Collection of named colors. Can be extended from the outside by adding colors
	            // to Highcharts.Color.prototype.names.
	            names: {
	                white: '#ffffff',
	                black: '#000000'
	            },

	            /**
	             * Parse the input color to rgba array
	             * @param {String} input
	             */
	            init: function(input) {
	                var result,
	                    rgba,
	                    i,
	                    parser;

	                this.input = input = this.names[input] || input;

	                // Gradients
	                if (input && input.stops) {
	                    this.stops = map(input.stops, function(stop) {
	                        return new H.Color(stop[1]);
	                    });

	                    // Solid colors
	                } else {
	                    i = this.parsers.length;
	                    while (i-- && !rgba) {
	                        parser = this.parsers[i];
	                        result = parser.regex.exec(input);
	                        if (result) {
	                            rgba = parser.parse(result);
	                        }
	                    }
	                }
	                this.rgba = rgba || [];
	            },

	            /**
	             * Return the color a specified format
	             * @param {String} format
	             */
	            get: function(format) {
	                var input = this.input,
	                    rgba = this.rgba,
	                    ret;

	                if (this.stops) {
	                    ret = merge(input);
	                    ret.stops = [].concat(ret.stops);
	                    each(this.stops, function(stop, i) {
	                        ret.stops[i] = [ret.stops[i][0], stop.get(format)];
	                    });

	                    // it's NaN if gradient colors on a column chart
	                } else if (rgba && isNumber(rgba[0])) {
	                    if (format === 'rgb' || (!format && rgba[3] === 1)) {
	                        ret = 'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')';
	                    } else if (format === 'a') {
	                        ret = rgba[3];
	                    } else {
	                        ret = 'rgba(' + rgba.join(',') + ')';
	                    }
	                } else {
	                    ret = input;
	                }
	                return ret;
	            },

	            /**
	             * Brighten the color
	             * @param {Number} alpha
	             */
	            brighten: function(alpha) {
	                var i,
	                    rgba = this.rgba;

	                if (this.stops) {
	                    each(this.stops, function(stop) {
	                        stop.brighten(alpha);
	                    });

	                } else if (isNumber(alpha) && alpha !== 0) {
	                    for (i = 0; i < 3; i++) {
	                        rgba[i] += pInt(alpha * 255);

	                        if (rgba[i] < 0) {
	                            rgba[i] = 0;
	                        }
	                        if (rgba[i] > 255) {
	                            rgba[i] = 255;
	                        }
	                    }
	                }
	                return this;
	            },

	            /**
	             * Set the color's opacity to a given alpha value
	             * @param {Number} alpha
	             */
	            setOpacity: function(alpha) {
	                this.rgba[3] = alpha;
	                return this;
	            }
	        };
	        H.color = function(input) {
	            return new H.Color(input);
	        };

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var SVGElement,
	            SVGRenderer,

	            addEvent = H.addEvent,
	            animate = H.animate,
	            attr = H.attr,
	            charts = H.charts,
	            color = H.color,
	            css = H.css,
	            createElement = H.createElement,
	            defined = H.defined,
	            deg2rad = H.deg2rad,
	            destroyObjectProperties = H.destroyObjectProperties,
	            doc = H.doc,
	            each = H.each,
	            extend = H.extend,
	            erase = H.erase,
	            grep = H.grep,
	            hasTouch = H.hasTouch,
	            inArray = H.inArray,
	            isArray = H.isArray,
	            isFirefox = H.isFirefox,
	            isMS = H.isMS,
	            isObject = H.isObject,
	            isString = H.isString,
	            isWebKit = H.isWebKit,
	            merge = H.merge,
	            noop = H.noop,
	            pick = H.pick,
	            pInt = H.pInt,
	            removeEvent = H.removeEvent,
	            splat = H.splat,
	            stop = H.stop,
	            svg = H.svg,
	            SVG_NS = H.SVG_NS,
	            symbolSizes = H.symbolSizes,
	            win = H.win;

	        /**
	         * @typedef {Object} SVGDOMElement - An SVG DOM element.
	         */
	        /**
	         * The SVGElement prototype is a JavaScript wrapper for SVG elements used in the
	         * rendering layer of Highcharts. Combined with the {@link SVGRenderer} object,
	         * these prototypes allow freeform annotation in the charts or even in HTML
	         * pages without instanciating a chart. The SVGElement can also wrap HTML
	         * labels, when `text` or `label` elements are created with the `useHTML`
	         * parameter.
	         *
	         * The SVGElement instances are created through factory functions on the 
	         * {@link SVGRenderer} object, like [rect]{@link SVGRenderer#rect},
	         * [path]{@link SVGRenderer#path}, [text]{@link SVGRenderer#text}, [label]{@link
	         * SVGRenderer#label}, [g]{@link SVGRenderer#g} and more.
	         *
	         * @class
	         */
	        SVGElement = H.SVGElement = function() {
	            return this;
	        };
	        SVGElement.prototype = {

	            // Default base for animation
	            opacity: 1,
	            SVG_NS: SVG_NS,

	            /**
	             * For labels, these CSS properties are applied to the `text` node directly.
	             * @type {Array.<string>}
	             */
	            textProps: ['direction', 'fontSize', 'fontWeight', 'fontFamily',
	                'fontStyle', 'color', 'lineHeight', 'width', 'textDecoration',
	                'textOverflow', 'textOutline'
	            ],

	            /**
	             * Initialize the SVG renderer. This function only exists to make the
	             * initiation process overridable. It should not be called directly.
	             *
	             * @param {SVGRenderer} renderer The SVGRenderer instance to initialize to.
	             * @param {String} nodeName The SVG node name.
	             * @returns {void}
	             */
	            init: function(renderer, nodeName) {

	                /** 
	                 * The DOM node. Each SVGRenderer instance wraps a main DOM node, but 
	                 * may also represent more nodes.
	                 * @type {SVGDOMNode|HTMLDOMNode}
	                 */
	                this.element = nodeName === 'span' ?
	                    createElement(nodeName) :
	                    doc.createElementNS(this.SVG_NS, nodeName);

	                /**
	                 * The renderer that the SVGElement belongs to.
	                 * @type {SVGRenderer}
	                 */
	                this.renderer = renderer;
	            },

	            /**
	             * Animate to given attributes or CSS properties.
	             * 
	             * @param {SVGAttributes} params SVG attributes or CSS to animate.
	             * @param {AnimationOptions} [options] Animation options.
	             * @param {Function} [complete] Function to perform at the end of animation.
	             * @returns {SVGElement} Returns the SVGElement for chaining.
	             */
	            animate: function(params, options, complete) {
	                var animOptions = H.animObject(
	                    pick(options, this.renderer.globalAnimation, true)
	                );
	                if (animOptions.duration !== 0) {
	                    if (complete) { // allows using a callback with the global animation without overwriting it
	                        animOptions.complete = complete;
	                    }
	                    animate(this, params, animOptions);
	                } else {
	                    this.attr(params, null, complete);
	                }
	                return this;
	            },

	            /**
	             * @typedef {Object} GradientOptions
	             * @property {Object} linearGradient Holds an object that defines the start
	             *    position and the end position relative to the shape.
	             * @property {Number} linearGradient.x1 Start horizontal position of the
	             *    gradient. Ranges 0-1.
	             * @property {Number} linearGradient.x2 End horizontal position of the
	             *    gradient. Ranges 0-1.
	             * @property {Number} linearGradient.y1 Start vertical position of the
	             *    gradient. Ranges 0-1.
	             * @property {Number} linearGradient.y2 End vertical position of the
	             *    gradient. Ranges 0-1.
	             * @property {Object} radialGradient Holds an object that defines the center
	             *    position and the radius.
	             * @property {Number} radialGradient.cx Center horizontal position relative
	             *    to the shape. Ranges 0-1.
	             * @property {Number} radialGradient.cy Center vertical position relative
	             *    to the shape. Ranges 0-1.
	             * @property {Number} radialGradient.r Radius relative to the shape. Ranges
	             *    0-1.
	             * @property {Array.<Array>} stops The first item in each tuple is the
	             *    position in the gradient, where 0 is the start of the gradient and 1
	             *    is the end of the gradient. Multiple stops can be applied. The second
	             *    item is the color for each stop. This color can also be given in the
	             *    rgba format.
	             *
	             * @example
	             * // Linear gradient used as a color option
	             * color: {
	             *     linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },
	             *         stops: [
	             *             [0, '#003399'], // start
	             *             [0.5, '#ffffff'], // middle
	             *             [1, '#3366AA'] // end
	             *         ]
	             *     }
	             * }
	             */
	            /**
	             * Build and apply an SVG gradient out of a common JavaScript configuration
	             * object. This function is called from the attribute setters.
	             *
	             * @private
	             * @param {GradientOptions} color The gradient options structure.
	             * @param {string} prop The property to apply, can either be `fill` or
	             * `stroke`. 
	             * @param {SVGDOMElement} elem SVG DOM element to apply the gradient on.
	             */
	            colorGradient: function(color, prop, elem) {
	                var renderer = this.renderer,
	                    colorObject,
	                    gradName,
	                    gradAttr,
	                    radAttr,
	                    gradients,
	                    gradientObject,
	                    stops,
	                    stopColor,
	                    stopOpacity,
	                    radialReference,
	                    n,
	                    id,
	                    key = [],
	                    value;

	                // Apply linear or radial gradients
	                if (color.linearGradient) {
	                    gradName = 'linearGradient';
	                } else if (color.radialGradient) {
	                    gradName = 'radialGradient';
	                }

	                if (gradName) {
	                    gradAttr = color[gradName];
	                    gradients = renderer.gradients;
	                    stops = color.stops;
	                    radialReference = elem.radialReference;

	                    // Keep < 2.2 kompatibility
	                    if (isArray(gradAttr)) {
	                        color[gradName] = gradAttr = {
	                            x1: gradAttr[0],
	                            y1: gradAttr[1],
	                            x2: gradAttr[2],
	                            y2: gradAttr[3],
	                            gradientUnits: 'userSpaceOnUse'
	                        };
	                    }

	                    // Correct the radial gradient for the radial reference system
	                    if (gradName === 'radialGradient' && radialReference && !defined(gradAttr.gradientUnits)) {
	                        radAttr = gradAttr; // Save the radial attributes for updating
	                        gradAttr = merge(gradAttr,
	                            renderer.getRadialAttr(radialReference, radAttr), {
	                                gradientUnits: 'userSpaceOnUse'
	                            }
	                        );
	                    }

	                    // Build the unique key to detect whether we need to create a new element (#1282)
	                    for (n in gradAttr) {
	                        if (n !== 'id') {
	                            key.push(n, gradAttr[n]);
	                        }
	                    }
	                    for (n in stops) {
	                        key.push(stops[n]);
	                    }
	                    key = key.join(',');

	                    // Check if a gradient object with the same config object is created within this renderer
	                    if (gradients[key]) {
	                        id = gradients[key].attr('id');

	                    } else {

	                        // Set the id and create the element
	                        gradAttr.id = id = H.uniqueKey();
	                        gradients[key] = gradientObject = renderer.createElement(gradName)
	                            .attr(gradAttr)
	                            .add(renderer.defs);

	                        gradientObject.radAttr = radAttr;

	                        // The gradient needs to keep a list of stops to be able to destroy them
	                        gradientObject.stops = [];
	                        each(stops, function(stop) {
	                            var stopObject;
	                            if (stop[1].indexOf('rgba') === 0) {
	                                colorObject = H.color(stop[1]);
	                                stopColor = colorObject.get('rgb');
	                                stopOpacity = colorObject.get('a');
	                            } else {
	                                stopColor = stop[1];
	                                stopOpacity = 1;
	                            }
	                            stopObject = renderer.createElement('stop').attr({
	                                offset: stop[0],
	                                'stop-color': stopColor,
	                                'stop-opacity': stopOpacity
	                            }).add(gradientObject);

	                            // Add the stop element to the gradient
	                            gradientObject.stops.push(stopObject);
	                        });
	                    }

	                    // Set the reference to the gradient object
	                    value = 'url(' + renderer.url + '#' + id + ')';
	                    elem.setAttribute(prop, value);
	                    elem.gradient = key;

	                    // Allow the color to be concatenated into tooltips formatters etc. (#2995)
	                    color.toString = function() {
	                        return value;
	                    };
	                }
	            },

	            /**
	             * Apply a text outline through a custom CSS property, by copying the text
	             * element and apply stroke to the copy. Used internally. Contrast checks
	             * at http://jsfiddle.net/highcharts/43soe9m1/2/ .
	             *
	             * @private
	             * @param {String} textOutline A custom CSS `text-outline` setting, defined
	             *    by `width color`. 
	             * @example
	             * // Specific color
	             * text.css({
	             *    textOutline: '1px black'
	             * });
	             * // Automatic contrast
	             * text.css({
	             *    color: '#000000', // black text
	             *    textOutline: '1px contrast' // => white outline
	             * });
	             */
	            applyTextOutline: function(textOutline) {
	                var elem = this.element,
	                    tspans,
	                    hasContrast = textOutline.indexOf('contrast') !== -1,
	                    styles = {},
	                    color,
	                    strokeWidth,
	                    firstRealChild;

	                // When the text shadow is set to contrast, use dark stroke for light
	                // text and vice versa.
	                if (hasContrast) {
	                    styles.textOutline = textOutline = textOutline.replace(
	                        /contrast/g,
	                        this.renderer.getContrast(elem.style.fill)
	                    );
	                }

	                this.fakeTS = true; // Fake text shadow

	                // In order to get the right y position of the clone,
	                // copy over the y setter
	                this.ySetter = this.xSetter;

	                tspans = [].slice.call(elem.getElementsByTagName('tspan'));

	                // Extract the stroke width and color
	                textOutline = textOutline.split(' ');
	                color = textOutline[textOutline.length - 1];
	                strokeWidth = textOutline[0];

	                if (strokeWidth && strokeWidth !== 'none') {

	                    // Since the stroke is applied on center of the actual outline, we
	                    // need to double it to get the correct stroke-width outside the 
	                    // glyphs.
	                    strokeWidth = strokeWidth.replace(
	                        /(^[\d\.]+)(.*?)$/g,
	                        function(match, digit, unit) {
	                            return (2 * digit) + unit;
	                        }
	                    );

	                    // Remove shadows from previous runs
	                    each(tspans, function(tspan) {
	                        if (tspan.getAttribute('class') === 'highcharts-text-outline') {
	                            // Remove then erase
	                            erase(tspans, elem.removeChild(tspan));
	                        }
	                    });

	                    // For each of the tspans, create a stroked copy behind it.
	                    firstRealChild = elem.firstChild;
	                    each(tspans, function(tspan, y) {
	                        var clone;

	                        // Let the first line start at the correct X position
	                        if (y === 0) {
	                            tspan.setAttribute('x', elem.getAttribute('x'));
	                            y = elem.getAttribute('y');
	                            tspan.setAttribute('y', y || 0);
	                            if (y === null) {
	                                elem.setAttribute('y', 0);
	                            }
	                        }

	                        // Create the clone and apply outline properties
	                        clone = tspan.cloneNode(1);
	                        attr(clone, {
	                            'class': 'highcharts-text-outline',
	                            'fill': color,
	                            'stroke': color,
	                            'stroke-width': strokeWidth,
	                            'stroke-linejoin': 'round'
	                        });
	                        elem.insertBefore(clone, firstRealChild);
	                    });
	                }
	            },

	            /**
	             *
	             * @typedef {Object} SVGAttributes An object of key-value pairs for SVG
	             *   attributes. Attributes in Highcharts elements for the most parts
	             *   correspond to SVG, but some are specific to Highcharts, like `zIndex`,
	             *   `rotation`, `translateX`, `translateY`, `scaleX` and `scaleY`. SVG
	             *   attributes containing a hyphen are _not_ camel-cased, they should be
	             *   quoted to preserve the hyphen.
	             * @example
	             * {
	             *     'stroke': '#ff0000', // basic
	             *     'stroke-width': 2, // hyphenated
	             *     'rotation': 45 // custom
	             *     'd': ['M', 10, 10, 'L', 30, 30, 'z'] // path definition, note format
	             * }
	             */
	            /**
	             * Apply native and custom attributes to the SVG elements.
	             * 
	             * In order to set the rotation center for rotation, set x and y to 0 and
	             * use `translateX` and `translateY` attributes to position the element
	             * instead.
	             *
	             * Attributes frequently used in Highcharts are `fill`, `stroke`,
	             * `stroke-width`.
	             *
	             * @param {SVGAttributes|String} hash - The native and custom SVG
	             *    attributes. 
	             * @param {string} [val] - If the type of the first argument is `string`, 
	             *    the second can be a value, which will serve as a single attribute
	             *    setter. If the first argument is a string and the second is undefined,
	             *    the function serves as a getter and the current value of the property
	             *    is returned.
	             * @param {Function} complete - A callback function to execute after setting
	             *    the attributes. This makes the function compliant and interchangeable
	             *    with the {@link SVGElement#animate} function.
	             * @param {boolean} continueAnimation - Used internally when `.attr` is
	             *    called as part of an animation step. Otherwise, calling `.attr` for an
	             *    attribute will stop animation for that attribute.
	             *    
	             * @returns {SVGElement|string|number} If used as a setter, it returns the 
	             *    current {@link SVGElement} so the calls can be chained. If used as a 
	             *    getter, the current value of the attribute is returned.
	             * 
	             * @example
	             * // Set multiple attributes
	             * element.attr({
	             *     stroke: 'red',
	             *     fill: 'blue',
	             *     x: 10,
	             *     y: 10
	             * });
	             *
	             * // Set a single attribute
	             * element.attr('stroke', 'red');
	             *
	             * // Get an attribute
	             * element.attr('stroke'); // => 'red'
	             * 
	             */
	            attr: function(hash, val, complete, continueAnimation) {
	                var key,
	                    value,
	                    element = this.element,
	                    hasSetSymbolSize,
	                    ret = this,
	                    skipAttr,
	                    setter;

	                // single key-value pair
	                if (typeof hash === 'string' && val !== undefined) {
	                    key = hash;
	                    hash = {};
	                    hash[key] = val;
	                }

	                // used as a getter: first argument is a string, second is undefined
	                if (typeof hash === 'string') {
	                    ret = (this[hash + 'Getter'] || this._defaultGetter).call(this, hash, element);

	                    // setter
	                } else {

	                    for (key in hash) {
	                        value = hash[key];
	                        skipAttr = false;

	                        // Unless .attr is from the animator update, stop current
	                        // running animation of this property
	                        if (!continueAnimation) {
	                            stop(this, key);
	                        }

	                        if (this.symbolName && /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(key)) {
	                            if (!hasSetSymbolSize) {
	                                this.symbolAttr(hash);
	                                hasSetSymbolSize = true;
	                            }
	                            skipAttr = true;
	                        }

	                        if (this.rotation && (key === 'x' || key === 'y')) {
	                            this.doTransform = true;
	                        }

	                        if (!skipAttr) {
	                            setter = this[key + 'Setter'] || this._defaultSetter;
	                            setter.call(this, value, key, element);


	                            // Let the shadow follow the main element
	                            if (this.shadows && /^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(key)) {
	                                this.updateShadows(key, value, setter);
	                            }

	                        }
	                    }

	                    // Update transform. Do this outside the loop to prevent redundant updating for batch setting
	                    // of attributes.
	                    if (this.doTransform) {
	                        this.updateTransform();
	                        this.doTransform = false;
	                    }

	                }

	                // In accordance with animate, run a complete callback
	                if (complete) {
	                    complete();
	                }

	                return ret;
	            },


	            /**
	             * Update the shadow elements with new attributes.
	             *
	             * @private
	             * @param {String} key - The attribute name.
	             * @param {String|Number} value - The value of the attribute.
	             * @param {Function} setter - The setter function, inherited from the
	             *   parent wrapper
	             * @returns {void}
	             */
	            updateShadows: function(key, value, setter) {
	                var shadows = this.shadows,
	                    i = shadows.length;

	                while (i--) {
	                    setter.call(
	                        shadows[i],
	                        key === 'height' ?
	                        Math.max(value - (shadows[i].cutHeight || 0), 0) :
	                        key === 'd' ? this.d : value,
	                        key,
	                        shadows[i]
	                    );
	                }
	            },


	            /**
	             * Add a class name to an element.
	             *
	             * @param {string} className - The new class name to add.
	             * @param {boolean} [replace=false] - When true, the existing class name(s)
	             *    will be overwritten with the new one. When false, the new one is
	             *    added.
	             * @returns {SVGElement} Return the SVG element for chainability.
	             */
	            addClass: function(className, replace) {
	                var currentClassName = this.attr('class') || '';

	                if (currentClassName.indexOf(className) === -1) {
	                    if (!replace) {
	                        className =
	                            (currentClassName + (currentClassName ? ' ' : '') +
	                                className).replace('  ', ' ');
	                    }
	                    this.attr('class', className);
	                }
	                return this;
	            },

	            /**
	             * Check if an element has the given class name.
	             * @param  {string}  className - The class name to check for.
	             * @return {Boolean}
	             */
	            hasClass: function(className) {
	                return attr(this.element, 'class').indexOf(className) !== -1;
	            },

	            /**
	             * Remove a class name from the element.
	             * @param  {string} className The class name to remove.
	             * @return {SVGElement} Returns the SVG element for chainability.
	             */
	            removeClass: function(className) {
	                attr(this.element, 'class', (attr(this.element, 'class') || '').replace(className, ''));
	                return this;
	            },

	            /**
	             * If one of the symbol size affecting parameters are changed,
	             * check all the others only once for each call to an element's
	             * .attr() method
	             * @param {Object} hash - The attributes to set.
	             * @private
	             */
	            symbolAttr: function(hash) {
	                var wrapper = this;

	                each(['x', 'y', 'r', 'start', 'end', 'width', 'height', 'innerR', 'anchorX', 'anchorY'], function(key) {
	                    wrapper[key] = pick(hash[key], wrapper[key]);
	                });

	                wrapper.attr({
	                    d: wrapper.renderer.symbols[wrapper.symbolName](
	                        wrapper.x,
	                        wrapper.y,
	                        wrapper.width,
	                        wrapper.height,
	                        wrapper
	                    )
	                });
	            },

	            /**
	             * Apply a clipping rectangle to this element.
	             * 
	             * @param {ClipRect} [clipRect] - The clipping rectangle. If skipped, the
	             *    current clip is removed.
	             * @returns {SVGElement} Returns the SVG element to allow chaining.
	             */
	            clip: function(clipRect) {
	                return this.attr(
	                    'clip-path',
	                    clipRect ?
	                    'url(' + this.renderer.url + '#' + clipRect.id + ')' :
	                    'none'
	                );
	            },

	            /**
	             * Calculate the coordinates needed for drawing a rectangle crisply and
	             * return the calculated attributes.
	             * 
	             * @param {Object} rect - A rectangle.
	             * @param {number} rect.x - The x position.
	             * @param {number} rect.y - The y position.
	             * @param {number} rect.width - The width.
	             * @param {number} rect.height - The height.
	             * @param {number} [strokeWidth] - The stroke width to consider when
	             *    computing crisp positioning. It can also be set directly on the rect
	             *    parameter.
	             *
	             * @returns {{x: Number, y: Number, width: Number, height: Number}} The
	             *    modified rectangle arguments.
	             */
	            crisp: function(rect, strokeWidth) {

	                var wrapper = this,
	                    key,
	                    attribs = {},
	                    normalizer;

	                strokeWidth = strokeWidth || rect.strokeWidth || 0;
	                normalizer = Math.round(strokeWidth) % 2 / 2; // Math.round because strokeWidth can sometimes have roundoff errors

	                // normalize for crisp edges
	                rect.x = Math.floor(rect.x || wrapper.x || 0) + normalizer;
	                rect.y = Math.floor(rect.y || wrapper.y || 0) + normalizer;
	                rect.width = Math.floor((rect.width || wrapper.width || 0) - 2 * normalizer);
	                rect.height = Math.floor((rect.height || wrapper.height || 0) - 2 * normalizer);
	                if (defined(rect.strokeWidth)) {
	                    rect.strokeWidth = strokeWidth;
	                }

	                for (key in rect) {
	                    if (wrapper[key] !== rect[key]) { // only set attribute if changed
	                        wrapper[key] = attribs[key] = rect[key];
	                    }
	                }

	                return attribs;
	            },

	            /**
	             * Set styles for the element. In addition to CSS styles supported by 
	             * native SVG and HTML elements, there are also some custom made for 
	             * Highcharts, like `width`, `ellipsis` and `textOverflow` for SVG text
	             * elements.
	             * @param {CSSObject} styles The new CSS styles.
	             * @returns {SVGElement} Return the SVG element for chaining.
	             */
	            css: function(styles) {
	                var elemWrapper = this,
	                    oldStyles = elemWrapper.styles,
	                    newStyles = {},
	                    elem = elemWrapper.element,
	                    textWidth,
	                    n,
	                    serializedCss = '',
	                    hyphenate,
	                    hasNew = !oldStyles,
	                    // These CSS properties are interpreted internally by the SVG
	                    // renderer, but are not supported by SVG and should not be added to
	                    // the DOM. In styled mode, no CSS should find its way to the DOM
	                    // whatsoever (#6173).
	                    svgPseudoProps = ['textOverflow', 'width'];

	                // convert legacy
	                if (styles && styles.color) {
	                    styles.fill = styles.color;
	                }

	                // Filter out existing styles to increase performance (#2640)
	                if (oldStyles) {
	                    for (n in styles) {
	                        if (styles[n] !== oldStyles[n]) {
	                            newStyles[n] = styles[n];
	                            hasNew = true;
	                        }
	                    }
	                }
	                if (hasNew) {
	                    textWidth = elemWrapper.textWidth =
	                        (styles && styles.width && elem.nodeName.toLowerCase() === 'text' && pInt(styles.width)) ||
	                        elemWrapper.textWidth; // #3501

	                    // Merge the new styles with the old ones
	                    if (oldStyles) {
	                        styles = extend(
	                            oldStyles,
	                            newStyles
	                        );
	                    }

	                    // store object
	                    elemWrapper.styles = styles;

	                    if (textWidth && (!svg && elemWrapper.renderer.forExport)) {
	                        delete styles.width;
	                    }

	                    // serialize and set style attribute
	                    if (isMS && !svg) {
	                        css(elemWrapper.element, styles);
	                    } else {
	                        hyphenate = function(a, b) {
	                            return '-' + b.toLowerCase();
	                        };
	                        for (n in styles) {
	                            if (inArray(n, svgPseudoProps) === -1) {
	                                serializedCss +=
	                                    n.replace(/([A-Z])/g, hyphenate) + ':' +
	                                    styles[n] + ';';
	                            }
	                        }
	                        if (serializedCss) {
	                            attr(elem, 'style', serializedCss); // #1881
	                        }
	                    }


	                    if (elemWrapper.added) {
	                        // Rebuild text after added
	                        if (textWidth) {
	                            elemWrapper.renderer.buildText(elemWrapper);
	                        }

	                        // Apply text outline after added
	                        if (styles && styles.textOutline) {
	                            elemWrapper.applyTextOutline(styles.textOutline);
	                        }
	                    }
	                }

	                return elemWrapper;
	            },


	            /**
	             * Get the current stroke width. In classic mode, the setter registers it 
	             * directly on the element.
	             * @returns {number} The stroke width in pixels.
	             * @ignore
	             */
	            strokeWidth: function() {
	                return this['stroke-width'] || 0;
	            },


	            /**
	             * Add an event listener. This is a simple setter that replaces all other
	             * events of the same type, opposed to the {@link Highcharts#addEvent}
	             * function.
	             * @param {string} eventType - The event type. If the type is `click`, 
	             *    Highcharts will internally translate it to a `touchstart` event on 
	             *    touch devices, to prevent the browser from waiting for a click event
	             *    from firing.
	             * @param {Function} handler - The handler callback.
	             * @returns {SVGElement} The SVGElement for chaining.
	             */
	            on: function(eventType, handler) {
	                var svgElement = this,
	                    element = svgElement.element;

	                // touch
	                if (hasTouch && eventType === 'click') {
	                    element.ontouchstart = function(e) {
	                        svgElement.touchEventFired = Date.now(); // #2269
	                        e.preventDefault();
	                        handler.call(element, e);
	                    };
	                    element.onclick = function(e) {
	                        if (win.navigator.userAgent.indexOf('Android') === -1 ||
	                            Date.now() - (svgElement.touchEventFired || 0) > 1100) {
	                            handler.call(element, e);
	                        }
	                    };
	                } else {
	                    // simplest possible event model for internal use
	                    element['on' + eventType] = handler;
	                }
	                return this;
	            },

	            /**
	             * Set the coordinates needed to draw a consistent radial gradient across
	             * a shape regardless of positioning inside the chart. Used on pie slices
	             * to make all the slices have the same radial reference point.
	             *
	             * @param {Array} coordinates The center reference. The format is
	             *    `[centerX, centerY, diameter]` in pixels.
	             * @returns {SVGElement} Returns the SVGElement for chaining.
	             */
	            setRadialReference: function(coordinates) {
	                var existingGradient = this.renderer.gradients[this.element.gradient];

	                this.element.radialReference = coordinates;

	                // On redrawing objects with an existing gradient, the gradient needs
	                // to be repositioned (#3801)
	                if (existingGradient && existingGradient.radAttr) {
	                    existingGradient.animate(
	                        this.renderer.getRadialAttr(
	                            coordinates,
	                            existingGradient.radAttr
	                        )
	                    );
	                }

	                return this;
	            },

	            /**
	             * Move an object and its children by x and y values.
	             * 
	             * @param {number} x - The x value.
	             * @param {number} y - The y value.
	             */
	            translate: function(x, y) {
	                return this.attr({
	                    translateX: x,
	                    translateY: y
	                });
	            },

	            /**
	             * Invert a group, rotate and flip. This is used internally on inverted 
	             * charts, where the points and graphs are drawn as if not inverted, then
	             * the series group elements are inverted.
	             *
	             * @param {boolean} inverted - Whether to invert or not. An inverted shape
	             *    can be un-inverted by setting it to false.
	             * @returns {SVGElement} Return the SVGElement for chaining.
	             */
	            invert: function(inverted) {
	                var wrapper = this;
	                wrapper.inverted = inverted;
	                wrapper.updateTransform();
	                return wrapper;
	            },

	            /**
	             * Update the transform attribute based on internal properties. Deals with
	             * the custom `translateX`, `translateY`, `rotation`, `scaleX` and `scaleY`
	             * attributes and updates the SVG `transform` attribute.
	             * @private
	             * @returns {void}
	             */
	            updateTransform: function() {
	                var wrapper = this,
	                    translateX = wrapper.translateX || 0,
	                    translateY = wrapper.translateY || 0,
	                    scaleX = wrapper.scaleX,
	                    scaleY = wrapper.scaleY,
	                    inverted = wrapper.inverted,
	                    rotation = wrapper.rotation,
	                    element = wrapper.element,
	                    transform;

	                // flipping affects translate as adjustment for flipping around the group's axis
	                if (inverted) {
	                    translateX += wrapper.width;
	                    translateY += wrapper.height;
	                }

	                // Apply translate. Nearly all transformed elements have translation, so instead
	                // of checking for translate = 0, do it always (#1767, #1846).
	                transform = ['translate(' + translateX + ',' + translateY + ')'];

	                // apply rotation
	                if (inverted) {
	                    transform.push('rotate(90) scale(-1,1)');
	                } else if (rotation) { // text rotation
	                    transform.push('rotate(' + rotation + ' ' + (element.getAttribute('x') || 0) + ' ' + (element.getAttribute('y') || 0) + ')');

	                    // Delete bBox memo when the rotation changes
	                    //delete wrapper.bBox;
	                }

	                // apply scale
	                if (defined(scaleX) || defined(scaleY)) {
	                    transform.push('scale(' + pick(scaleX, 1) + ' ' + pick(scaleY, 1) + ')');
	                }

	                if (transform.length) {
	                    element.setAttribute('transform', transform.join(' '));
	                }
	            },

	            /**
	             * Bring the element to the front.
	             *
	             * @returns {SVGElement} Returns the SVGElement for chaining.
	             */
	            toFront: function() {
	                var element = this.element;
	                element.parentNode.appendChild(element);
	                return this;
	            },


	            /**
	             * Align the element relative to the chart or another box.
	             * ß
	             * @param {Object} [alignOptions] The alignment options. The function can be
	             *   called without this parameter in order to re-align an element after the
	             *   box has been updated.
	             * @param {string} [alignOptions.align=left] Horizontal alignment. Can be
	             *   one of `left`, `center` and `right`.
	             * @param {string} [alignOptions.verticalAlign=top] Vertical alignment. Can
	             *   be one of `top`, `middle` and `bottom`.
	             * @param {number} [alignOptions.x=0] Horizontal pixel offset from
	             *   alignment.
	             * @param {number} [alignOptions.y=0] Vertical pixel offset from alignment.
	             * @param {Boolean} [alignByTranslate=false] Use the `transform` attribute
	             *   with translateX and translateY custom attributes to align this elements
	             *   rather than `x` and `y` attributes.
	             * @param {String|Object} box The box to align to, needs a width and height.
	             *   When the box is a string, it refers to an object in the Renderer. For
	             *   example, when box is `spacingBox`, it refers to `Renderer.spacingBox`
	             *   which holds `width`, `height`, `x` and `y` properties.
	             * @returns {SVGElement} Returns the SVGElement for chaining.
	             */
	            align: function(alignOptions, alignByTranslate, box) {
	                var align,
	                    vAlign,
	                    x,
	                    y,
	                    attribs = {},
	                    alignTo,
	                    renderer = this.renderer,
	                    alignedObjects = renderer.alignedObjects,
	                    alignFactor,
	                    vAlignFactor;

	                // First call on instanciate
	                if (alignOptions) {
	                    this.alignOptions = alignOptions;
	                    this.alignByTranslate = alignByTranslate;
	                    if (!box || isString(box)) { // boxes other than renderer handle this internally
	                        this.alignTo = alignTo = box || 'renderer';
	                        erase(alignedObjects, this); // prevent duplicates, like legendGroup after resize
	                        alignedObjects.push(this);
	                        box = null; // reassign it below
	                    }

	                    // When called on resize, no arguments are supplied
	                } else {
	                    alignOptions = this.alignOptions;
	                    alignByTranslate = this.alignByTranslate;
	                    alignTo = this.alignTo;
	                }

	                box = pick(box, renderer[alignTo], renderer);

	                // Assign variables
	                align = alignOptions.align;
	                vAlign = alignOptions.verticalAlign;
	                x = (box.x || 0) + (alignOptions.x || 0); // default: left align
	                y = (box.y || 0) + (alignOptions.y || 0); // default: top align

	                // Align
	                if (align === 'right') {
	                    alignFactor = 1;
	                } else if (align === 'center') {
	                    alignFactor = 2;
	                }
	                if (alignFactor) {
	                    x += (box.width - (alignOptions.width || 0)) / alignFactor;
	                }
	                attribs[alignByTranslate ? 'translateX' : 'x'] = Math.round(x);


	                // Vertical align
	                if (vAlign === 'bottom') {
	                    vAlignFactor = 1;
	                } else if (vAlign === 'middle') {
	                    vAlignFactor = 2;
	                }
	                if (vAlignFactor) {
	                    y += (box.height - (alignOptions.height || 0)) / vAlignFactor;
	                }
	                attribs[alignByTranslate ? 'translateY' : 'y'] = Math.round(y);

	                // Animate only if already placed
	                this[this.placed ? 'animate' : 'attr'](attribs);
	                this.placed = true;
	                this.alignAttr = attribs;

	                return this;
	            },

	            /**
	             * Get the bounding box (width, height, x and y) for the element. Generally
	             * used to get rendered text size. Since this is called a lot in charts,
	             * the results are cached based on text properties, in order to save DOM
	             * traffic. The returned bounding box includes the rotation, so for example
	             * a single text line of rotation 90 will report a greater height, and a
	             * width corresponding to the line-height.
	             *
	             * @param {boolean} [reload] Skip the cache and get the updated DOM bouding
	             *   box.
	             * @param {number} [rot] Override the element's rotation. This is internally
	             *   used on axis labels with a value of 0 to find out what the bounding box
	             *   would be have been if it were not rotated.
	             * @returns {Object} The bounding box with `x`, `y`, `width` and `height`
	             * properties.
	             */
	            getBBox: function(reload, rot) {
	                var wrapper = this,
	                    bBox, // = wrapper.bBox,
	                    renderer = wrapper.renderer,
	                    width,
	                    height,
	                    rotation,
	                    rad,
	                    element = wrapper.element,
	                    styles = wrapper.styles,
	                    fontSize,
	                    textStr = wrapper.textStr,
	                    toggleTextShadowShim,
	                    cache = renderer.cache,
	                    cacheKeys = renderer.cacheKeys,
	                    cacheKey;

	                rotation = pick(rot, wrapper.rotation);
	                rad = rotation * deg2rad;


	                fontSize = styles && styles.fontSize;


	                if (textStr !== undefined) {

	                    cacheKey = textStr.toString();

	                    // Since numbers are monospaced, and numerical labels appear a lot
	                    // in a chart, we assume that a label of n characters has the same
	                    // bounding box as others of the same length. Unless there is inner
	                    // HTML in the label. In that case, leave the numbers as is (#5899).
	                    if (cacheKey.indexOf('<') === -1) {
	                        cacheKey = cacheKey.replace(/[0-9]/g, '0');
	                    }

	                    // Properties that affect bounding box
	                    cacheKey += [
	                            '',
	                            rotation || 0,
	                            fontSize,
	                            styles && styles.width,
	                            styles && styles.textOverflow // #5968
	                        ]
	                        .join(',');

	                }

	                if (cacheKey && !reload) {
	                    bBox = cache[cacheKey];
	                }

	                // No cache found
	                if (!bBox) {

	                    // SVG elements
	                    if (element.namespaceURI === wrapper.SVG_NS || renderer.forExport) {
	                        try { // Fails in Firefox if the container has display: none.

	                            // When the text shadow shim is used, we need to hide the fake shadows
	                            // to get the correct bounding box (#3872)
	                            toggleTextShadowShim = this.fakeTS && function(display) {
	                                each(element.querySelectorAll('.highcharts-text-outline'), function(tspan) {
	                                    tspan.style.display = display;
	                                });
	                            };

	                            // Workaround for #3842, Firefox reporting wrong bounding box for shadows
	                            if (toggleTextShadowShim) {
	                                toggleTextShadowShim('none');
	                            }

	                            bBox = element.getBBox ?
	                                // SVG: use extend because IE9 is not allowed to change width and height in case
	                                // of rotation (below)
	                                extend({}, element.getBBox()) : {

	                                    // Legacy IE in export mode
	                                    width: element.offsetWidth,
	                                    height: element.offsetHeight
	                                };

	                            // #3842
	                            if (toggleTextShadowShim) {
	                                toggleTextShadowShim('');
	                            }
	                        } catch (e) {}

	                        // If the bBox is not set, the try-catch block above failed. The other condition
	                        // is for Opera that returns a width of -Infinity on hidden elements.
	                        if (!bBox || bBox.width < 0) {
	                            bBox = {
	                                width: 0,
	                                height: 0
	                            };
	                        }


	                        // VML Renderer or useHTML within SVG
	                    } else {

	                        bBox = wrapper.htmlGetBBox();

	                    }

	                    // True SVG elements as well as HTML elements in modern browsers using the .useHTML option
	                    // need to compensated for rotation
	                    if (renderer.isSVG) {
	                        width = bBox.width;
	                        height = bBox.height;

	                        // Workaround for wrong bounding box in IE, Edge and Chrome on
	                        // Windows. With Highcharts' default font, IE and Edge report
	                        // a box height of 16.899 and Chrome rounds it to 17. If this 
	                        // stands uncorrected, it results in more padding added below
	                        // the text than above when adding a label border or background.
	                        // Also vertical positioning is affected.
	                        // http://jsfiddle.net/highcharts/em37nvuj/
	                        // (#1101, #1505, #1669, #2568, #6213).
	                        if (
	                            styles &&
	                            styles.fontSize === '11px' &&
	                            Math.round(height) === 17
	                        ) {
	                            bBox.height = height = 14;
	                        }

	                        // Adjust for rotated text
	                        if (rotation) {
	                            bBox.width = Math.abs(height * Math.sin(rad)) + Math.abs(width * Math.cos(rad));
	                            bBox.height = Math.abs(height * Math.cos(rad)) + Math.abs(width * Math.sin(rad));
	                        }
	                    }

	                    // Cache it. When loading a chart in a hidden iframe in Firefox and IE/Edge, the
	                    // bounding box height is 0, so don't cache it (#5620).
	                    if (cacheKey && bBox.height > 0) {

	                        // Rotate (#4681)
	                        while (cacheKeys.length > 250) {
	                            delete cache[cacheKeys.shift()];
	                        }

	                        if (!cache[cacheKey]) {
	                            cacheKeys.push(cacheKey);
	                        }
	                        cache[cacheKey] = bBox;
	                    }
	                }
	                return bBox;
	            },

	            /**
	             * Show the element after it has been hidden. 
	             *
	             * @param {boolean} [inherit=false] Set the visibility attribute to
	             * `inherit` rather than `visible`. The difference is that an element with
	             * `visibility="visible"` will be visible even if the parent is hidden.
	             *
	             * @returns {SVGElement} Returns the SVGElement for chaining.
	             */
	            show: function(inherit) {
	                return this.attr({
	                    visibility: inherit ? 'inherit' : 'visible'
	                });
	            },

	            /**
	             * Hide the element, equivalent to setting the `visibility` attribute to
	             * `hidden`.
	             *
	             * @returns {SVGElement} Returns the SVGElement for chaining.
	             */
	            hide: function() {
	                return this.attr({
	                    visibility: 'hidden'
	                });
	            },

	            /**
	             * Fade out an element by animating its opacity down to 0, and hide it on
	             * complete. Used internally for the tooltip.
	             * 
	             * @param {number} [duration=150] The fade duration in milliseconds.
	             */
	            fadeOut: function(duration) {
	                var elemWrapper = this;
	                elemWrapper.animate({
	                    opacity: 0
	                }, {
	                    duration: duration || 150,
	                    complete: function() {
	                        elemWrapper.attr({
	                            y: -9999
	                        }); // #3088, assuming we're only using this for tooltips
	                    }
	                });
	            },

	            /**
	             * Add the element to the DOM. All elements must be added this way.
	             * 
	             * @param {SVGElement|SVGDOMElement} [parent] The parent item to add it to.
	             *   If undefined, the element is added to the {@link SVGRenderer.box}.
	             *
	             * @returns {SVGElement} Returns the SVGElement for chaining.
	             *
	             * @sample highcharts/members/renderer-g - Elements added to a group
	             */
	            add: function(parent) {

	                var renderer = this.renderer,
	                    element = this.element,
	                    inserted;

	                if (parent) {
	                    this.parentGroup = parent;
	                }

	                // mark as inverted
	                this.parentInverted = parent && parent.inverted;

	                // build formatted text
	                if (this.textStr !== undefined) {
	                    renderer.buildText(this);
	                }

	                // Mark as added
	                this.added = true;

	                // If we're adding to renderer root, or other elements in the group
	                // have a z index, we need to handle it
	                if (!parent || parent.handleZ || this.zIndex) {
	                    inserted = this.zIndexSetter();
	                }

	                // If zIndex is not handled, append at the end
	                if (!inserted) {
	                    (parent ? parent.element : renderer.box).appendChild(element);
	                }

	                // fire an event for internal hooks
	                if (this.onAdd) {
	                    this.onAdd();
	                }

	                return this;
	            },

	            /**
	             * Removes an element from the DOM.
	             *
	             * @private
	             * @param {SVGDOMElement|HTMLDOMElement} element The DOM node to remove.
	             */
	            safeRemoveChild: function(element) {
	                var parentNode = element.parentNode;
	                if (parentNode) {
	                    parentNode.removeChild(element);
	                }
	            },

	            /**
	             * Destroy the element and element wrapper and clear up the DOM and event
	             * hooks.
	             *
	             * @returns {void}
	             */
	            destroy: function() {
	                var wrapper = this,
	                    element = wrapper.element || {},
	                    parentToClean = wrapper.renderer.isSVG && element.nodeName === 'SPAN' && wrapper.parentGroup,
	                    grandParent,
	                    key,
	                    i;

	                // remove events
	                element.onclick = element.onmouseout = element.onmouseover = element.onmousemove = element.point = null;
	                stop(wrapper); // stop running animations

	                if (wrapper.clipPath) {
	                    wrapper.clipPath = wrapper.clipPath.destroy();
	                }

	                // Destroy stops in case this is a gradient object
	                if (wrapper.stops) {
	                    for (i = 0; i < wrapper.stops.length; i++) {
	                        wrapper.stops[i] = wrapper.stops[i].destroy();
	                    }
	                    wrapper.stops = null;
	                }

	                // remove element
	                wrapper.safeRemoveChild(element);


	                wrapper.destroyShadows();


	                // In case of useHTML, clean up empty containers emulating SVG groups (#1960, #2393, #2697).
	                while (parentToClean && parentToClean.div && parentToClean.div.childNodes.length === 0) {
	                    grandParent = parentToClean.parentGroup;
	                    wrapper.safeRemoveChild(parentToClean.div);
	                    delete parentToClean.div;
	                    parentToClean = grandParent;
	                }

	                // remove from alignObjects
	                if (wrapper.alignTo) {
	                    erase(wrapper.renderer.alignedObjects, wrapper);
	                }

	                for (key in wrapper) {
	                    delete wrapper[key];
	                }

	                return null;
	            },


	            /**
	             * @typedef {Object} ShadowOptions
	             * @property {string} [color=#000000] The shadow color.
	             * @property {number} [offsetX=1] The horizontal offset from the element.
	             * @property {number} [offsetY=1] The vertical offset from the element.
	             * @property {number} [opacity=0.15] The shadow opacity.
	             * @property {number} [width=3] The shadow width or distance from the
	             *    element.
	             */
	            /**
	             * Add a shadow to the element. Must be called after the element is added to
	             * the DOM. In styled mode, this method is not used, instead use `defs` and
	             * filters.
	             * 
	             * @param {boolean|ShadowOptions} shadowOptions The shadow options. If
	             *    `true`, the default options are applied. If `false`, the current
	             *    shadow will be removed.
	             * @param {SVGElement} [group] The SVG group element where the shadows will 
	             *    be applied. The default is to add it to the same parent as the current
	             *    element. Internally, this is ised for pie slices, where all the
	             *    shadows are added to an element behind all the slices.
	             * @param {boolean} [cutOff] Used internally for column shadows.
	             *
	             * @returns {SVGElement} Returns the SVGElement for chaining.
	             *
	             * @example
	             * renderer.rect(10, 100, 100, 100)
	             *     .attr({ fill: 'red' })
	             *     .shadow(true);
	             */
	            shadow: function(shadowOptions, group, cutOff) {
	                var shadows = [],
	                    i,
	                    shadow,
	                    element = this.element,
	                    strokeWidth,
	                    shadowWidth,
	                    shadowElementOpacity,

	                    // compensate for inverted plot area
	                    transform;

	                if (!shadowOptions) {
	                    this.destroyShadows();

	                } else if (!this.shadows) {
	                    shadowWidth = pick(shadowOptions.width, 3);
	                    shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;
	                    transform = this.parentInverted ?
	                        '(-1,-1)' :
	                        '(' + pick(shadowOptions.offsetX, 1) + ', ' + pick(shadowOptions.offsetY, 1) + ')';
	                    for (i = 1; i <= shadowWidth; i++) {
	                        shadow = element.cloneNode(0);
	                        strokeWidth = (shadowWidth * 2) + 1 - (2 * i);
	                        attr(shadow, {
	                            'isShadow': 'true',
	                            'stroke': shadowOptions.color || '#000000',
	                            'stroke-opacity': shadowElementOpacity * i,
	                            'stroke-width': strokeWidth,
	                            'transform': 'translate' + transform,
	                            'fill': 'none'
	                        });
	                        if (cutOff) {
	                            attr(shadow, 'height', Math.max(attr(shadow, 'height') - strokeWidth, 0));
	                            shadow.cutHeight = strokeWidth;
	                        }

	                        if (group) {
	                            group.element.appendChild(shadow);
	                        } else {
	                            element.parentNode.insertBefore(shadow, element);
	                        }

	                        shadows.push(shadow);
	                    }

	                    this.shadows = shadows;
	                }
	                return this;

	            },

	            /**
	             * Destroy shadows on the element.
	             * @private
	             */
	            destroyShadows: function() {
	                each(this.shadows || [], function(shadow) {
	                    this.safeRemoveChild(shadow);
	                }, this);
	                this.shadows = undefined;
	            },



	            xGetter: function(key) {
	                if (this.element.nodeName === 'circle') {
	                    if (key === 'x') {
	                        key = 'cx';
	                    } else if (key === 'y') {
	                        key = 'cy';
	                    }
	                }
	                return this._defaultGetter(key);
	            },

	            /**
	             * Get the current value of an attribute or pseudo attribute, used mainly
	             * for animation. Called internally from the {@link SVGRenderer#attr}
	             * function.
	             *
	             * @private
	             */
	            _defaultGetter: function(key) {
	                var ret = pick(this[key], this.element ? this.element.getAttribute(key) : null, 0);

	                if (/^[\-0-9\.]+$/.test(ret)) { // is numerical
	                    ret = parseFloat(ret);
	                }
	                return ret;
	            },


	            dSetter: function(value, key, element) {
	                if (value && value.join) { // join path
	                    value = value.join(' ');
	                }
	                if (/(NaN| {2}|^$)/.test(value)) {
	                    value = 'M 0 0';
	                }
	                element.setAttribute(key, value);

	                this[key] = value;
	            },

	            dashstyleSetter: function(value) {
	                var i,
	                    strokeWidth = this['stroke-width'];

	                // If "inherit", like maps in IE, assume 1 (#4981). With HC5 and the new strokeWidth 
	                // function, we should be able to use that instead.
	                if (strokeWidth === 'inherit') {
	                    strokeWidth = 1;
	                }
	                value = value && value.toLowerCase();
	                if (value) {
	                    value = value
	                        .replace('shortdashdotdot', '3,1,1,1,1,1,')
	                        .replace('shortdashdot', '3,1,1,1')
	                        .replace('shortdot', '1,1,')
	                        .replace('shortdash', '3,1,')
	                        .replace('longdash', '8,3,')
	                        .replace(/dot/g, '1,3,')
	                        .replace('dash', '4,3,')
	                        .replace(/,$/, '')
	                        .split(','); // ending comma

	                    i = value.length;
	                    while (i--) {
	                        value[i] = pInt(value[i]) * strokeWidth;
	                    }
	                    value = value.join(',')
	                        .replace(/NaN/g, 'none'); // #3226
	                    this.element.setAttribute('stroke-dasharray', value);
	                }
	            },

	            alignSetter: function(value) {
	                var convert = {
	                    left: 'start',
	                    center: 'middle',
	                    right: 'end'
	                };
	                this.element.setAttribute('text-anchor', convert[value]);
	            },
	            opacitySetter: function(value, key, element) {
	                this[key] = value;
	                element.setAttribute(key, value);
	            },
	            titleSetter: function(value) {
	                var titleNode = this.element.getElementsByTagName('title')[0];
	                if (!titleNode) {
	                    titleNode = doc.createElementNS(this.SVG_NS, 'title');
	                    this.element.appendChild(titleNode);
	                }

	                // Remove text content if it exists
	                if (titleNode.firstChild) {
	                    titleNode.removeChild(titleNode.firstChild);
	                }

	                titleNode.appendChild(
	                    doc.createTextNode(
	                        (String(pick(value), '')).replace(/<[^>]*>/g, '') // #3276, #3895
	                    )
	                );
	            },
	            textSetter: function(value) {
	                if (value !== this.textStr) {
	                    // Delete bBox memo when the text changes
	                    delete this.bBox;

	                    this.textStr = value;
	                    if (this.added) {
	                        this.renderer.buildText(this);
	                    }
	                }
	            },
	            fillSetter: function(value, key, element) {
	                if (typeof value === 'string') {
	                    element.setAttribute(key, value);
	                } else if (value) {
	                    this.colorGradient(value, key, element);
	                }
	            },
	            visibilitySetter: function(value, key, element) {
	                // IE9-11 doesn't handle visibilty:inherit well, so we remove the attribute instead (#2881, #3909)
	                if (value === 'inherit') {
	                    element.removeAttribute(key);
	                } else {
	                    element.setAttribute(key, value);
	                }
	            },
	            zIndexSetter: function(value, key) {
	                var renderer = this.renderer,
	                    parentGroup = this.parentGroup,
	                    parentWrapper = parentGroup || renderer,
	                    parentNode = parentWrapper.element || renderer.box,
	                    childNodes,
	                    otherElement,
	                    otherZIndex,
	                    element = this.element,
	                    inserted,
	                    run = this.added,
	                    i;

	                if (defined(value)) {
	                    element.zIndex = value; // So we can read it for other elements in the group
	                    value = +value;
	                    if (this[key] === value) { // Only update when needed (#3865)
	                        run = false;
	                    }
	                    this[key] = value;
	                }

	                // Insert according to this and other elements' zIndex. Before .add() is called,
	                // nothing is done. Then on add, or by later calls to zIndexSetter, the node
	                // is placed on the right place in the DOM.
	                if (run) {
	                    value = this.zIndex;

	                    if (value && parentGroup) {
	                        parentGroup.handleZ = true;
	                    }

	                    childNodes = parentNode.childNodes;
	                    for (i = 0; i < childNodes.length && !inserted; i++) {
	                        otherElement = childNodes[i];
	                        otherZIndex = otherElement.zIndex;
	                        if (otherElement !== element && (
	                                // Insert before the first element with a higher zIndex
	                                pInt(otherZIndex) > value ||
	                                // If no zIndex given, insert before the first element with a zIndex
	                                (!defined(value) && defined(otherZIndex)) ||
	                                // Negative zIndex versus no zIndex:
	                                // On all levels except the highest. If the parent is <svg>,
	                                // then we don't want to put items before <desc> or <defs>
	                                (value < 0 && !defined(otherZIndex) && parentNode !== renderer.box)

	                            )) {
	                            parentNode.insertBefore(element, otherElement);
	                            inserted = true;
	                        }
	                    }
	                    if (!inserted) {
	                        parentNode.appendChild(element);
	                    }
	                }
	                return inserted;
	            },
	            _defaultSetter: function(value, key, element) {
	                element.setAttribute(key, value);
	            }
	        };

	        // Some shared setters and getters
	        SVGElement.prototype.yGetter = SVGElement.prototype.xGetter;
	        SVGElement.prototype.translateXSetter = SVGElement.prototype.translateYSetter =
	            SVGElement.prototype.rotationSetter = SVGElement.prototype.verticalAlignSetter =
	            SVGElement.prototype.scaleXSetter = SVGElement.prototype.scaleYSetter = function(value, key) {
	                this[key] = value;
	                this.doTransform = true;
	            };


	        // WebKit and Batik have problems with a stroke-width of zero, so in this case we remove the 
	        // stroke attribute altogether. #1270, #1369, #3065, #3072.
	        SVGElement.prototype['stroke-widthSetter'] = SVGElement.prototype.strokeSetter = function(value, key, element) {
	            this[key] = value;
	            // Only apply the stroke attribute if the stroke width is defined and larger than 0
	            if (this.stroke && this['stroke-width']) {
	                SVGElement.prototype.fillSetter.call(this, this.stroke, 'stroke', element); // use prototype as instance may be overridden
	                element.setAttribute('stroke-width', this['stroke-width']);
	                this.hasStroke = true;
	            } else if (key === 'stroke-width' && value === 0 && this.hasStroke) {
	                element.removeAttribute('stroke');
	                this.hasStroke = false;
	            }
	        };


	        /**
	         * Allows direct access to the Highcharts rendering layer in order to draw
	         * primitive shapes like circles, rectangles, paths or text directly on a chart,
	         * or independent from any chart. The SVGRenderer represents a wrapper object
	         * for SVGin modern browsers and through the VMLRenderer, for VML in IE < 8.
	         *
	         * An existing chart's renderer can be accessed through {@link Chart#renderer}.
	         * The renderer can also be used completely decoupled from a chart.
	         *
	         * @param {HTMLDOMElement} container - Where to put the SVG in the web page.
	         * @param {number} width - The width of the SVG.
	         * @param {number} height - The height of the SVG.
	         * @param {boolean} [forExport=false] - Whether the rendered content is intended
	         *   for export.
	         * @param {boolean} [allowHTML=true] - Whether the renderer is allowed to
	         *   include HTML text, which will be projected on top of the SVG.
	         *
	         * @example
	         * // Use directly without a chart object.
	         * var renderer = new Highcharts.Renderer(parentNode, 600, 400);
	         *
	         * @sample highcharts/members/renderer-on-chart - Annotating a chart programmatically.
	         * @sample highcharts/members/renderer-basic - Independedt SVG drawing.
	         *
	         * @class
	         */
	        SVGRenderer = H.SVGRenderer = function() {
	            this.init.apply(this, arguments);
	        };
	        SVGRenderer.prototype = {
	            /**
	             * A pointer to the renderer's associated Element class. The VMLRenderer
	             * will have a pointer to VMLElement here.
	             * @type {SVGElement}
	             */
	            Element: SVGElement,
	            SVG_NS: SVG_NS,
	            /**
	             * Initialize the SVGRenderer. Overridable initiator function that takes
	             * the same parameters as the constructor.
	             */
	            init: function(container, width, height, style, forExport, allowHTML) {
	                var renderer = this,
	                    boxWrapper,
	                    element,
	                    desc;

	                boxWrapper = renderer.createElement('svg')
	                    .attr({
	                        'version': '1.1',
	                        'class': 'highcharts-root'
	                    })

	                .css(this.getStyle(style));
	                element = boxWrapper.element;
	                container.appendChild(element);

	                // For browsers other than IE, add the namespace attribute (#1978)
	                if (container.innerHTML.indexOf('xmlns') === -1) {
	                    attr(element, 'xmlns', this.SVG_NS);
	                }

	                // object properties
	                renderer.isSVG = true;

	                /** 
	                 * The root `svg` node of the renderer.
	                 * @type {SVGDOMElement}
	                 */
	                this.box = element;
	                /** 
	                 * The wrapper for the root `svg` node of the renderer.
	                 * @type {SVGElement}
	                 */
	                this.boxWrapper = boxWrapper;
	                renderer.alignedObjects = [];

	                /**
	                 * Page url used for internal references.
	                 * @type {string}
	                 */
	                // #24, #672, #1070
	                this.url = (isFirefox || isWebKit) && doc.getElementsByTagName('base').length ?
	                    win.location.href
	                    .replace(/#.*?$/, '') // remove the hash
	                    .replace(/<[^>]*>/g, '') // wing cut HTML
	                    .replace(/([\('\)])/g, '\\$1') // escape parantheses and quotes
	                    .replace(/ /g, '%20') : // replace spaces (needed for Safari only)
	                    '';

	                // Add description
	                desc = this.createElement('desc').add();
	                desc.element.appendChild(doc.createTextNode('Created with Highstock 5.0.7'));


	                renderer.defs = this.createElement('defs').add();
	                renderer.allowHTML = allowHTML;
	                renderer.forExport = forExport;
	                renderer.gradients = {}; // Object where gradient SvgElements are stored
	                renderer.cache = {}; // Cache for numerical bounding boxes
	                renderer.cacheKeys = [];
	                renderer.imgCount = 0;

	                renderer.setSize(width, height, false);



	                // Issue 110 workaround:
	                // In Firefox, if a div is positioned by percentage, its pixel position may land
	                // between pixels. The container itself doesn't display this, but an SVG element
	                // inside this container will be drawn at subpixel precision. In order to draw
	                // sharp lines, this must be compensated for. This doesn't seem to work inside
	                // iframes though (like in jsFiddle).
	                var subPixelFix, rect;
	                if (isFirefox && container.getBoundingClientRect) {
	                    subPixelFix = function() {
	                        css(container, {
	                            left: 0,
	                            top: 0
	                        });
	                        rect = container.getBoundingClientRect();
	                        css(container, {
	                            left: (Math.ceil(rect.left) - rect.left) + 'px',
	                            top: (Math.ceil(rect.top) - rect.top) + 'px'
	                        });
	                    };

	                    // run the fix now
	                    subPixelFix();

	                    // run it on resize
	                    renderer.unSubPixelFix = addEvent(win, 'resize', subPixelFix);
	                }
	            },



	            /**
	             * Get the global style setting for the renderer.
	             * @private
	             * @param  {CSSObject} style - Style settings.
	             * @return {CSSObject} The style settings mixed with defaults.
	             */
	            getStyle: function(style) {
	                this.style = extend({

	                    fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif', // default font
	                    fontSize: '12px'

	                }, style);
	                return this.style;
	            },
	            /**
	             * Apply the global style on the renderer, mixed with the default styles.
	             * @param {CSSObject} style - CSS to apply.
	             */
	            setStyle: function(style) {
	                this.boxWrapper.css(this.getStyle(style));
	            },


	            /**
	             * Detect whether the renderer is hidden. This happens when one of the
	             * parent elements has display: none. Used internally to detect when we need
	             * to render preliminarily in another div to get the text bounding boxes 
	             * right.
	             *
	             * @returns {boolean} True if it is hidden.
	             */
	            isHidden: function() { // #608
	                return !this.boxWrapper.getBBox().width;
	            },

	            /**
	             * Destroys the renderer and its allocated members.
	             */
	            destroy: function() {
	                var renderer = this,
	                    rendererDefs = renderer.defs;
	                renderer.box = null;
	                renderer.boxWrapper = renderer.boxWrapper.destroy();

	                // Call destroy on all gradient elements
	                destroyObjectProperties(renderer.gradients || {});
	                renderer.gradients = null;

	                // Defs are null in VMLRenderer
	                // Otherwise, destroy them here.
	                if (rendererDefs) {
	                    renderer.defs = rendererDefs.destroy();
	                }

	                // Remove sub pixel fix handler (#982)
	                if (renderer.unSubPixelFix) {
	                    renderer.unSubPixelFix();
	                }

	                renderer.alignedObjects = null;

	                return null;
	            },

	            /**
	             * Create a wrapper for an SVG element. Serves as a factory for 
	             * {@link SVGElement}, but this function is itself mostly called from 
	             * primitive factories like {@link SVGRenderer#path}, {@link
	             * SVGRenderer#rect} or {@link SVGRenderer#text}.
	             * 
	             * @param {string} nodeName - The node name, for example `rect`, `g` etc.
	             * @returns {SVGElement} The generated SVGElement.
	             */
	            createElement: function(nodeName) {
	                var wrapper = new this.Element();
	                wrapper.init(this, nodeName);
	                return wrapper;
	            },

	            /**
	             * Dummy function for plugins, called every time the renderer is updated.
	             * Prior to Highcharts 5, this was used for the canvg renderer.
	             * @function
	             */
	            draw: noop,

	            /**
	             * Get converted radial gradient attributes according to the radial
	             * reference. Used internally from the {@link SVGElement#colorGradient}
	             * function.
	             *
	             * @private
	             */
	            getRadialAttr: function(radialReference, gradAttr) {
	                return {
	                    cx: (radialReference[0] - radialReference[2] / 2) + gradAttr.cx * radialReference[2],
	                    cy: (radialReference[1] - radialReference[2] / 2) + gradAttr.cy * radialReference[2],
	                    r: gradAttr.r * radialReference[2]
	                };
	            },

	            /**
	             * Parse a simple HTML string into SVG tspans. Called internally when text
	             *   is set on an SVGElement. The function supports a subset of HTML tags,
	             *   CSS text features like `width`, `text-overflow`, `white-space`, and
	             *   also attributes like `href` and `style`.
	             * @private
	             * @param {SVGElement} wrapper The parent SVGElement.
	             */
	            buildText: function(wrapper) {
	                var textNode = wrapper.element,
	                    renderer = this,
	                    forExport = renderer.forExport,
	                    textStr = pick(wrapper.textStr, '').toString(),
	                    hasMarkup = textStr.indexOf('<') !== -1,
	                    lines,
	                    childNodes = textNode.childNodes,
	                    clsRegex,
	                    styleRegex,
	                    hrefRegex,
	                    wasTooLong,
	                    parentX = attr(textNode, 'x'),
	                    textStyles = wrapper.styles,
	                    width = wrapper.textWidth,
	                    textLineHeight = textStyles && textStyles.lineHeight,
	                    textOutline = textStyles && textStyles.textOutline,
	                    ellipsis = textStyles && textStyles.textOverflow === 'ellipsis',
	                    noWrap = textStyles && textStyles.whiteSpace === 'nowrap',
	                    fontSize = textStyles && textStyles.fontSize,
	                    textCache,
	                    i = childNodes.length,
	                    tempParent = width && !wrapper.added && this.box,
	                    getLineHeight = function(tspan) {
	                        var fontSizeStyle;

	                        fontSizeStyle = /(px|em)$/.test(tspan && tspan.style.fontSize) ?
	                            tspan.style.fontSize :
	                            (fontSize || renderer.style.fontSize || 12);


	                        return textLineHeight ?
	                            pInt(textLineHeight) :
	                            renderer.fontMetrics(
	                                fontSizeStyle,
	                                // Get the computed size from parent if not explicit
	                                tspan.getAttribute('style') ? tspan : textNode
	                            ).h;
	                    },
	                    unescapeAngleBrackets = function(inputStr) {
	                        return inputStr.replace(/&lt;/g, '<').replace(/&gt;/g, '>');
	                    };

	                // The buildText code is quite heavy, so if we're not changing something
	                // that affects the text, skip it (#6113).
	                textCache = [
	                    textStr,
	                    ellipsis,
	                    noWrap,
	                    textLineHeight,
	                    textOutline,
	                    fontSize,
	                    width
	                ].join(',');
	                if (textCache === wrapper.textCache) {
	                    return;
	                }
	                wrapper.textCache = textCache;

	                /// remove old text
	                while (i--) {
	                    textNode.removeChild(childNodes[i]);
	                }

	                // Skip tspans, add text directly to text node. The forceTSpan is a hook
	                // used in text outline hack.
	                if (!hasMarkup && !textOutline && !ellipsis && !width && textStr.indexOf(' ') === -1) {
	                    textNode.appendChild(doc.createTextNode(unescapeAngleBrackets(textStr)));

	                    // Complex strings, add more logic
	                } else {

	                    clsRegex = /<.*class="([^"]+)".*>/;
	                    styleRegex = /<.*style="([^"]+)".*>/;
	                    hrefRegex = /<.*href="(http[^"]+)".*>/;

	                    if (tempParent) {
	                        tempParent.appendChild(textNode); // attach it to the DOM to read offset width
	                    }

	                    if (hasMarkup) {
	                        lines = textStr
	                            .replace(/<(b|strong)>/g, '<span style="font-weight:bold">')
	                            .replace(/<(i|em)>/g, '<span style="font-style:italic">')
	                            .replace(/<a/g, '<span')
	                            .replace(/<\/(b|strong|i|em|a)>/g, '</span>')
	                            .split(/<br.*?>/g);

	                    } else {
	                        lines = [textStr];
	                    }


	                    // Trim empty lines (#5261)
	                    lines = grep(lines, function(line) {
	                        return line !== '';
	                    });


	                    // build the lines
	                    each(lines, function buildTextLines(line, lineNo) {
	                        var spans,
	                            spanNo = 0;
	                        line = line
	                            .replace(/^\s+|\s+$/g, '') // Trim to prevent useless/costly process on the spaces (#5258)
	                            .replace(/<span/g, '|||<span')
	                            .replace(/<\/span>/g, '</span>|||');
	                        spans = line.split('|||');

	                        each(spans, function buildTextSpans(span) {
	                            if (span !== '' || spans.length === 1) {
	                                var attributes = {},
	                                    tspan = doc.createElementNS(renderer.SVG_NS, 'tspan'),
	                                    spanCls,
	                                    spanStyle; // #390
	                                if (clsRegex.test(span)) {
	                                    spanCls = span.match(clsRegex)[1];
	                                    attr(tspan, 'class', spanCls);
	                                }
	                                if (styleRegex.test(span)) {
	                                    spanStyle = span.match(styleRegex)[1].replace(/(;| |^)color([ :])/, '$1fill$2');
	                                    attr(tspan, 'style', spanStyle);
	                                }
	                                if (hrefRegex.test(span) && !forExport) { // Not for export - #1529
	                                    attr(tspan, 'onclick', 'location.href=\"' + span.match(hrefRegex)[1] + '\"');
	                                    css(tspan, {
	                                        cursor: 'pointer'
	                                    });
	                                }

	                                span = unescapeAngleBrackets(span.replace(/<(.|\n)*?>/g, '') || ' ');

	                                // Nested tags aren't supported, and cause crash in Safari (#1596)
	                                if (span !== ' ') {

	                                    // add the text node
	                                    tspan.appendChild(doc.createTextNode(span));

	                                    if (!spanNo) { // first span in a line, align it to the left
	                                        if (lineNo && parentX !== null) {
	                                            attributes.x = parentX;
	                                        }
	                                    } else {
	                                        attributes.dx = 0; // #16
	                                    }

	                                    // add attributes
	                                    attr(tspan, attributes);

	                                    // Append it
	                                    textNode.appendChild(tspan);

	                                    // first span on subsequent line, add the line height
	                                    if (!spanNo && lineNo) {

	                                        // allow getting the right offset height in exporting in IE
	                                        if (!svg && forExport) {
	                                            css(tspan, {
	                                                display: 'block'
	                                            });
	                                        }

	                                        // Set the line height based on the font size of either
	                                        // the text element or the tspan element
	                                        attr(
	                                            tspan,
	                                            'dy',
	                                            getLineHeight(tspan)
	                                        );
	                                    }

	                                    /*if (width) {
	                                    	renderer.breakText(wrapper, width);
	                                    }*/

	                                    // Check width and apply soft breaks or ellipsis
	                                    if (width) {
	                                        var words = span.replace(/([^\^])-/g, '$1- ').split(' '), // #1273
	                                            hasWhiteSpace = spans.length > 1 || lineNo || (words.length > 1 && !noWrap),
	                                            tooLong,
	                                            actualWidth,
	                                            rest = [],
	                                            dy = getLineHeight(tspan),
	                                            rotation = wrapper.rotation,
	                                            wordStr = span, // for ellipsis
	                                            cursor = wordStr.length, // binary search cursor
	                                            bBox;

	                                        while ((hasWhiteSpace || ellipsis) && (words.length || rest.length)) {
	                                            wrapper.rotation = 0; // discard rotation when computing box
	                                            bBox = wrapper.getBBox(true);
	                                            actualWidth = bBox.width;

	                                            // Old IE cannot measure the actualWidth for SVG elements (#2314)
	                                            if (!svg && renderer.forExport) {
	                                                actualWidth = renderer.measureSpanWidth(tspan.firstChild.data, wrapper.styles);
	                                            }

	                                            tooLong = actualWidth > width;

	                                            // For ellipsis, do a binary search for the correct string length
	                                            if (wasTooLong === undefined) {
	                                                wasTooLong = tooLong; // First time
	                                            }
	                                            if (ellipsis && wasTooLong) {
	                                                cursor /= 2;

	                                                if (wordStr === '' || (!tooLong && cursor < 0.5)) {
	                                                    words = []; // All ok, break out
	                                                } else {
	                                                    wordStr = span.substring(0, wordStr.length + (tooLong ? -1 : 1) * Math.ceil(cursor));
	                                                    words = [wordStr + (width > 3 ? '\u2026' : '')];
	                                                    tspan.removeChild(tspan.firstChild);
	                                                }

	                                                // Looping down, this is the first word sequence that is not too long,
	                                                // so we can move on to build the next line.
	                                            } else if (!tooLong || words.length === 1) {
	                                                words = rest;
	                                                rest = [];

	                                                if (words.length && !noWrap) {
	                                                    tspan = doc.createElementNS(SVG_NS, 'tspan');
	                                                    attr(tspan, {
	                                                        dy: dy,
	                                                        x: parentX
	                                                    });
	                                                    if (spanStyle) { // #390
	                                                        attr(tspan, 'style', spanStyle);
	                                                    }
	                                                    textNode.appendChild(tspan);
	                                                }
	                                                if (actualWidth > width) { // a single word is pressing it out
	                                                    width = actualWidth;
	                                                }
	                                            } else { // append to existing line tspan
	                                                tspan.removeChild(tspan.firstChild);
	                                                rest.unshift(words.pop());
	                                            }
	                                            if (words.length) {
	                                                tspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g, '-')));
	                                            }
	                                        }
	                                        wrapper.rotation = rotation;
	                                    }

	                                    spanNo++;
	                                }
	                            }
	                        });
	                    });

	                    if (wasTooLong) {
	                        wrapper.attr('title', wrapper.textStr);
	                    }
	                    if (tempParent) {
	                        tempParent.removeChild(textNode); // attach it to the DOM to read offset width
	                    }

	                    // Apply the text outline
	                    if (textOutline && wrapper.applyTextOutline) {
	                        wrapper.applyTextOutline(textOutline);
	                    }
	                }
	            },



	            /*
	            breakText: function (wrapper, width) {
	            	var bBox = wrapper.getBBox(),
	            		node = wrapper.element,
	            		textLength = node.textContent.length,
	            		pos = Math.round(width * textLength / bBox.width), // try this position first, based on average character width
	            		increment = 0,
	            		finalPos;

	            	if (bBox.width > width) {
	            		while (finalPos === undefined) {
	            			textLength = node.getSubStringLength(0, pos);

	            			if (textLength <= width) {
	            				if (increment === -1) {
	            					finalPos = pos;
	            				} else {
	            					increment = 1;
	            				}
	            			} else {
	            				if (increment === 1) {
	            					finalPos = pos - 1;
	            				} else {
	            					increment = -1;
	            				}
	            			}
	            			pos += increment;
	            		}
	            	}
	            	console.log('width', width, 'stringWidth', node.getSubStringLength(0, finalPos))
	            },
	            */

	            /**
	             * Returns white for dark colors and black for bright colors.
	             *
	             * @param {ColorString} rgba - The color to get the contrast for.
	             * @returns {string} The contrast color, either `#000000` or `#FFFFFF`.
	             */
	            getContrast: function(rgba) {
	                rgba = color(rgba).rgba;

	                // The threshold may be discussed. Here's a proposal for adding
	                // different weight to the color channels (#6216)
	                /*
	        rgba[0] *= 1; // red
	        rgba[1] *= 1.2; // green
	        rgba[2] *= 0.7; // blue
	        */

	                return rgba[0] + rgba[1] + rgba[2] > 2 * 255 ? '#000000' : '#FFFFFF';
	            },

	            /**
	             * Create a button with preset states.
	             * @param {string} text - The text or HTML to draw.
	             * @param {number} x - The x position of the button's left side.
	             * @param {number} y - The y position of the button's top side.
	             * @param {Function} callback - The function to execute on button click or 
	             *    touch.
	             * @param {SVGAttributes} [normalState] - SVG attributes for the normal
	             *    state.
	             * @param {SVGAttributes} [hoverState] - SVG attributes for the hover state.
	             * @param {SVGAttributes} [pressedState] - SVG attributes for the pressed
	             *    state.
	             * @param {SVGAttributes} [disabledState] - SVG attributes for the disabled
	             *    state.
	             * @param {Symbol} [shape=rect] - The shape type.
	             * @returns {SVGRenderer} The button element.
	             */
	            button: function(text, x, y, callback, normalState, hoverState, pressedState, disabledState, shape) {
	                var label = this.label(text, x, y, shape, null, null, null, null, 'button'),
	                    curState = 0;

	                // Default, non-stylable attributes
	                label.attr(merge({
	                    'padding': 8,
	                    'r': 2
	                }, normalState));


	                // Presentational
	                var normalStyle,
	                    hoverStyle,
	                    pressedStyle,
	                    disabledStyle;

	                // Normal state - prepare the attributes
	                normalState = merge({
	                    fill: '#f7f7f7',
	                    stroke: '#cccccc',
	                    'stroke-width': 1,
	                    style: {
	                        color: '#333333',
	                        cursor: 'pointer',
	                        fontWeight: 'normal'
	                    }
	                }, normalState);
	                normalStyle = normalState.style;
	                delete normalState.style;

	                // Hover state
	                hoverState = merge(normalState, {
	                    fill: '#e6e6e6'
	                }, hoverState);
	                hoverStyle = hoverState.style;
	                delete hoverState.style;

	                // Pressed state
	                pressedState = merge(normalState, {
	                    fill: '#e6ebf5',
	                    style: {
	                        color: '#000000',
	                        fontWeight: 'bold'
	                    }
	                }, pressedState);
	                pressedStyle = pressedState.style;
	                delete pressedState.style;

	                // Disabled state
	                disabledState = merge(normalState, {
	                    style: {
	                        color: '#cccccc'
	                    }
	                }, disabledState);
	                disabledStyle = disabledState.style;
	                delete disabledState.style;


	                // Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).
	                addEvent(label.element, isMS ? 'mouseover' : 'mouseenter', function() {
	                    if (curState !== 3) {
	                        label.setState(1);
	                    }
	                });
	                addEvent(label.element, isMS ? 'mouseout' : 'mouseleave', function() {
	                    if (curState !== 3) {
	                        label.setState(curState);
	                    }
	                });

	                label.setState = function(state) {
	                    // Hover state is temporary, don't record it
	                    if (state !== 1) {
	                        label.state = curState = state;
	                    }
	                    // Update visuals
	                    label.removeClass(/highcharts-button-(normal|hover|pressed|disabled)/)
	                        .addClass('highcharts-button-' + ['normal', 'hover', 'pressed', 'disabled'][state || 0]);


	                    label.attr([normalState, hoverState, pressedState, disabledState][state || 0])
	                        .css([normalStyle, hoverStyle, pressedStyle, disabledStyle][state || 0]);

	                };



	                // Presentational attributes
	                label
	                    .attr(normalState)
	                    .css(extend({
	                        cursor: 'default'
	                    }, normalStyle));


	                return label
	                    .on('click', function(e) {
	                        if (curState !== 3) {
	                            callback.call(label, e);
	                        }
	                    });
	            },

	            /**
	             * Make a straight line crisper by not spilling out to neighbour pixels.
	             * 
	             * @param {Array} points - The original points on the format `['M', 0, 0,
	             *    'L', 100, 0]`.
	             * @param {number} width - The width of the line.
	             * @returns {Array} The original points array, but modified to render
	             * crisply.
	             */
	            crispLine: function(points, width) {
	                // normalize to a crisp line
	                if (points[1] === points[4]) {
	                    // Substract due to #1129. Now bottom and left axis gridlines behave the same.
	                    points[1] = points[4] = Math.round(points[1]) - (width % 2 / 2);
	                }
	                if (points[2] === points[5]) {
	                    points[2] = points[5] = Math.round(points[2]) + (width % 2 / 2);
	                }
	                return points;
	            },


	            /**
	             * Draw a path, wraps the SVG `path` element.
	             * 
	             * @param {Array} [path] An SVG path definition in array form.
	             * 
	             * @example
	             * var path = renderer.path(['M', 10, 10, 'L', 30, 30, 'z'])
	             *     .attr({ stroke: '#ff00ff' })
	             *     .add();
	             * @returns {SVGElement} The generated wrapper element.
	             */
	            /**
	             * Draw a path, wraps the SVG `path` element.
	             * 
	             * @param {SVGAttributes} [attribs] The initial attributes.
	             * @returns {SVGElement} The generated wrapper element.
	             */
	            path: function(path) {
	                var attribs = {

	                    fill: 'none'

	                };
	                if (isArray(path)) {
	                    attribs.d = path;
	                } else if (isObject(path)) { // attributes
	                    extend(attribs, path);
	                }
	                return this.createElement('path').attr(attribs);
	            },

	            /**
	             * Draw a circle, wraps the SVG `circle` element.
	             * 
	             * @param {number} [x] The center x position.
	             * @param {number} [y] The center y position.
	             * @param {number} [r] The radius.
	             * @returns {SVGElement} The generated wrapper element.
	             */
	            /**
	             * Draw a circle, wraps the SVG `circle` element.
	             * 
	             * @param {SVGAttributes} [attribs] The initial attributes.
	             * @returns {SVGElement} The generated wrapper element.
	             */
	            circle: function(x, y, r) {
	                var attribs = isObject(x) ? x : {
	                        x: x,
	                        y: y,
	                        r: r
	                    },
	                    wrapper = this.createElement('circle');

	                // Setting x or y translates to cx and cy
	                wrapper.xSetter = wrapper.ySetter = function(value, key, element) {
	                    element.setAttribute('c' + key, value);
	                };

	                return wrapper.attr(attribs);
	            },

	            /**
	             * Draw and return an arc.
	             * @param {number} [x=0] Center X position.
	             * @param {number} [y=0] Center Y position.
	             * @param {number} [r=0] The outer radius of the arc.
	             * @param {number} [innerR=0] Inner radius like used in donut charts.
	             * @param {number} [start=0] The starting angle of the arc in radians, where
	             *    0 is to the right and `-Math.PI/2` is up.
	             * @param {number} [end=0] The ending angle of the arc in radians, where 0
	             *    is to the right and `-Math.PI/2` is up.
	             * @returns {SVGElement} The generated wrapper element.
	             */
	            /**
	             * Draw and return an arc. Overloaded function that takes arguments object.
	             * @param {SVGAttributes} attribs Initial SVG attributes.
	             * @returns {SVGElement} The generated wrapper element.
	             */
	            arc: function(x, y, r, innerR, start, end) {
	                var arc;

	                if (isObject(x)) {
	                    y = x.y;
	                    r = x.r;
	                    innerR = x.innerR;
	                    start = x.start;
	                    end = x.end;
	                    x = x.x;
	                }

	                // Arcs are defined as symbols for the ability to set
	                // attributes in attr and animate
	                arc = this.symbol('arc', x || 0, y || 0, r || 0, r || 0, {
	                    innerR: innerR || 0,
	                    start: start || 0,
	                    end: end || 0
	                });
	                arc.r = r; // #959
	                return arc;
	            },

	            /**
	             * Draw and return a rectangle.
	             * @param {number} [x] Left position.
	             * @param {number} [y] Top position.
	             * @param {number} [width] Width of the rectangle.
	             * @param {number} [height] Height of the rectangle.
	             * @param {number} [r] Border corner radius.
	             * @param {number} [strokeWidth] A stroke width can be supplied to allow
	             *    crisp drawing.
	             * @returns {SVGElement} The generated wrapper element.
	             */
	            /**
	             * Draw and return a rectangle.
	             * @param {SVGAttributes} [attributes] General SVG attributes for the 
	             *    rectangle.
	             * @returns {SVGElement} The generated wrapper element.
	             */
	            rect: function(x, y, width, height, r, strokeWidth) {

	                r = isObject(x) ? x.r : r;

	                var wrapper = this.createElement('rect'),
	                    attribs = isObject(x) ? x : x === undefined ? {} : {
	                        x: x,
	                        y: y,
	                        width: Math.max(width, 0),
	                        height: Math.max(height, 0)
	                    };


	                if (strokeWidth !== undefined) {
	                    attribs.strokeWidth = strokeWidth;
	                    attribs = wrapper.crisp(attribs);
	                }
	                attribs.fill = 'none';


	                if (r) {
	                    attribs.r = r;
	                }

	                wrapper.rSetter = function(value, key, element) {
	                    attr(element, {
	                        rx: value,
	                        ry: value
	                    });
	                };

	                return wrapper.attr(attribs);
	            },

	            /**
	             * Resize the {@link SVGRenderer#box} and re-align all aligned child
	             * elements.
	             * @param {number} width The new pixel width.
	             * @param {number} height The new pixel height.
	             * @param {boolean} animate Whether to animate.
	             */
	            setSize: function(width, height, animate) {
	                var renderer = this,
	                    alignedObjects = renderer.alignedObjects,
	                    i = alignedObjects.length;

	                renderer.width = width;
	                renderer.height = height;

	                renderer.boxWrapper.animate({
	                    width: width,
	                    height: height
	                }, {
	                    step: function() {
	                        this.attr({
	                            viewBox: '0 0 ' + this.attr('width') + ' ' + this.attr('height')
	                        });
	                    },
	                    duration: pick(animate, true) ? undefined : 0
	                });

	                while (i--) {
	                    alignedObjects[i].align();
	                }
	            },

	            /**
	             * Create and return an svg group element.
	             * 
	             * @param {string} [name] The group will be given a class name of
	             * `highcharts-{name}`. This can be used for styling and scripting.
	             * @returns {SVGElement} The generated wrapper element.
	             */
	            g: function(name) {
	                var elem = this.createElement('g');
	                return name ? elem.attr({
	                    'class': 'highcharts-' + name
	                }) : elem;
	            },

	            /**
	             * Display an image.
	             * @param {string} src The image source.
	             * @param {number} [x] The X position.
	             * @param {number} [y] The Y position.
	             * @param {number} [width] The image width. If omitted, it defaults to the 
	             *    image file width.
	             * @param {number} [height] The image height. If omitted it defaults to the
	             *    image file height.
	             * @returns {SVGElement} The generated wrapper element.
	             */
	            image: function(src, x, y, width, height) {
	                var attribs = {
	                        preserveAspectRatio: 'none'
	                    },
	                    elemWrapper;

	                // optional properties
	                if (arguments.length > 1) {
	                    extend(attribs, {
	                        x: x,
	                        y: y,
	                        width: width,
	                        height: height
	                    });
	                }

	                elemWrapper = this.createElement('image').attr(attribs);

	                // set the href in the xlink namespace
	                if (elemWrapper.element.setAttributeNS) {
	                    elemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink',
	                        'href', src);
	                } else {
	                    // could be exporting in IE
	                    // using href throws "not supported" in ie7 and under, requries regex shim to fix later
	                    elemWrapper.element.setAttribute('hc-svg-href', src);
	                }
	                return elemWrapper;
	            },

	            /**
	             * Draw a symbol out of pre-defined shape paths from {@SVGRenderer#symbols}.
	             * It is used in Highcharts for point makers, which cake a `symbol` option,
	             * and label and button backgrounds like in the tooltip and stock flags.
	             *
	             * @param {Symbol} symbol - The symbol name.
	             * @param {number} x - The X coordinate for the top left position.
	             * @param {number} y - The Y coordinate for the top left position.
	             * @param {number} width - The pixel width.
	             * @param {number} height - The pixel height.
	             * @param {Object} [options] - Additional options, depending on the actual
	             *    symbol drawn. 
	             * @param {number} [options.anchorX] - The anchor X position for the
	             *    `callout` symbol. This is where the chevron points to.
	             * @param {number} [options.anchorY] - The anchor Y position for the
	             *    `callout` symbol. This is where the chevron points to.
	             * @param {number} [options.end] - The end angle of an `arc` symbol.
	             * @param {boolean} [options.open] - Whether to draw `arc` symbol open or
	             *    closed.
	             * @param {number} [options.r] - The radius of an `arc` symbol, or the
	             *    border radius for the `callout` symbol.
	             * @param {number} [options.start] - The start angle of an `arc` symbol.
	             */
	            symbol: function(symbol, x, y, width, height, options) {

	                var ren = this,
	                    obj,

	                    // get the symbol definition function
	                    symbolFn = this.symbols[symbol],

	                    // check if there's a path defined for this symbol
	                    path = defined(x) && symbolFn && this.symbols[symbol](
	                        Math.round(x),
	                        Math.round(y),
	                        width,
	                        height,
	                        options
	                    ),
	                    imageRegex = /^url\((.*?)\)$/,
	                    imageSrc,
	                    centerImage;

	                if (symbolFn) {
	                    obj = this.path(path);


	                    obj.attr('fill', 'none');


	                    // expando properties for use in animate and attr
	                    extend(obj, {
	                        symbolName: symbol,
	                        x: x,
	                        y: y,
	                        width: width,
	                        height: height
	                    });
	                    if (options) {
	                        extend(obj, options);
	                    }


	                    // image symbols
	                } else if (imageRegex.test(symbol)) {


	                    imageSrc = symbol.match(imageRegex)[1];

	                    // Create the image synchronously, add attribs async
	                    obj = this.image(imageSrc);

	                    // The image width is not always the same as the symbol width. The
	                    // image may be centered within the symbol, as is the case when
	                    // image shapes are used as label backgrounds, for example in flags.
	                    obj.imgwidth = pick(
	                        symbolSizes[imageSrc] && symbolSizes[imageSrc].width,
	                        options && options.width
	                    );
	                    obj.imgheight = pick(
	                        symbolSizes[imageSrc] && symbolSizes[imageSrc].height,
	                        options && options.height
	                    );
	                    /**
	                     * Set the size and position
	                     */
	                    centerImage = function() {
	                        obj.attr({
	                            width: obj.width,
	                            height: obj.height
	                        });
	                    };

	                    /**
	                     * Width and height setters that take both the image's physical size
	                     * and the label size into consideration, and translates the image
	                     * to center within the label.
	                     */
	                    each(['width', 'height'], function(key) {
	                        obj[key + 'Setter'] = function(value, key) {
	                            var attribs = {},
	                                imgSize = this['img' + key],
	                                trans = key === 'width' ? 'translateX' : 'translateY';
	                            this[key] = value;
	                            if (defined(imgSize)) {
	                                if (this.element) {
	                                    this.element.setAttribute(key, imgSize);
	                                }
	                                if (!this.alignByTranslate) {
	                                    attribs[trans] = ((this[key] || 0) - imgSize) / 2;
	                                    this.attr(attribs);
	                                }
	                            }
	                        };
	                    });


	                    if (defined(x)) {
	                        obj.attr({
	                            x: x,
	                            y: y
	                        });
	                    }
	                    obj.isImg = true;

	                    if (defined(obj.imgwidth) && defined(obj.imgheight)) {
	                        centerImage();
	                    } else {
	                        // Initialize image to be 0 size so export will still function if there's no cached sizes.
	                        obj.attr({
	                            width: 0,
	                            height: 0
	                        });

	                        // Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,
	                        // the created element must be assigned to a variable in order to load (#292).
	                        createElement('img', {
	                            onload: function() {

	                                var chart = charts[ren.chartIndex];

	                                // Special case for SVGs on IE11, the width is not accessible until the image is
	                                // part of the DOM (#2854).
	                                if (this.width === 0) {
	                                    css(this, {
	                                        position: 'absolute',
	                                        top: '-999em'
	                                    });
	                                    doc.body.appendChild(this);
	                                }

	                                // Center the image
	                                symbolSizes[imageSrc] = { // Cache for next	
	                                    width: this.width,
	                                    height: this.height
	                                };
	                                obj.imgwidth = this.width;
	                                obj.imgheight = this.height;

	                                if (obj.element) {
	                                    centerImage();
	                                }

	                                // Clean up after #2854 workaround.
	                                if (this.parentNode) {
	                                    this.parentNode.removeChild(this);
	                                }

	                                // Fire the load event when all external images are loaded
	                                ren.imgCount--;
	                                if (!ren.imgCount && chart && chart.onload) {
	                                    chart.onload();
	                                }
	                            },
	                            src: imageSrc
	                        });
	                        this.imgCount++;
	                    }
	                }

	                return obj;
	            },

	            /**
	             * @typedef {string} Symbol
	             * 
	             * Can be one of `arc`, `callout`, `circle`, `diamond`, `square`,
	             * `triangle`, `triangle-down`. Symbols are used internally for point
	             * markers, button and label borders and backgrounds, or custom shapes.
	             * Extendable by adding to {@link SVGRenderer#symbols}.
	             */
	            /**
	             * An extendable collection of functions for defining symbol paths.
	             */
	            symbols: {
	                'circle': function(x, y, w, h) {
	                    // Return a full arc
	                    return this.arc(x + w / 2, y + h / 2, w / 2, h / 2, {
	                        start: 0,
	                        end: Math.PI * 2,
	                        open: false
	                    });
	                },

	                'square': function(x, y, w, h) {
	                    return [
	                        'M', x, y,
	                        'L', x + w, y,
	                        x + w, y + h,
	                        x, y + h,
	                        'Z'
	                    ];
	                },

	                'triangle': function(x, y, w, h) {
	                    return [
	                        'M', x + w / 2, y,
	                        'L', x + w, y + h,
	                        x, y + h,
	                        'Z'
	                    ];
	                },

	                'triangle-down': function(x, y, w, h) {
	                    return [
	                        'M', x, y,
	                        'L', x + w, y,
	                        x + w / 2, y + h,
	                        'Z'
	                    ];
	                },
	                'diamond': function(x, y, w, h) {
	                    return [
	                        'M', x + w / 2, y,
	                        'L', x + w, y + h / 2,
	                        x + w / 2, y + h,
	                        x, y + h / 2,
	                        'Z'
	                    ];
	                },
	                'arc': function(x, y, w, h, options) {
	                    var start = options.start,
	                        rx = options.r || w,
	                        ry = options.r || h || w,
	                        end = options.end - 0.001, // to prevent cos and sin of start and end from becoming equal on 360 arcs (related: #1561)
	                        innerRadius = options.innerR,
	                        open = options.open,
	                        cosStart = Math.cos(start),
	                        sinStart = Math.sin(start),
	                        cosEnd = Math.cos(end),
	                        sinEnd = Math.sin(end),
	                        longArc = options.end - start < Math.PI ? 0 : 1,
	                        arc;

	                    arc = [
	                        'M',
	                        x + rx * cosStart,
	                        y + ry * sinStart,
	                        'A', // arcTo
	                        rx, // x radius
	                        ry, // y radius
	                        0, // slanting
	                        longArc, // long or short arc
	                        1, // clockwise
	                        x + rx * cosEnd,
	                        y + ry * sinEnd
	                    ];

	                    if (defined(innerRadius)) {
	                        arc.push(
	                            open ? 'M' : 'L',
	                            x + innerRadius * cosEnd,
	                            y + innerRadius * sinEnd,
	                            'A', // arcTo
	                            innerRadius, // x radius
	                            innerRadius, // y radius
	                            0, // slanting
	                            longArc, // long or short arc
	                            0, // clockwise
	                            x + innerRadius * cosStart,
	                            y + innerRadius * sinStart
	                        );
	                    }

	                    arc.push(open ? '' : 'Z'); // close
	                    return arc;
	                },

	                /**
	                 * Callout shape used for default tooltips, also used for rounded rectangles in VML
	                 */
	                callout: function(x, y, w, h, options) {
	                    var arrowLength = 6,
	                        halfDistance = 6,
	                        r = Math.min((options && options.r) || 0, w, h),
	                        safeDistance = r + halfDistance,
	                        anchorX = options && options.anchorX,
	                        anchorY = options && options.anchorY,
	                        path;

	                    path = [
	                        'M', x + r, y,
	                        'L', x + w - r, y, // top side
	                        'C', x + w, y, x + w, y, x + w, y + r, // top-right corner
	                        'L', x + w, y + h - r, // right side
	                        'C', x + w, y + h, x + w, y + h, x + w - r, y + h, // bottom-right corner
	                        'L', x + r, y + h, // bottom side
	                        'C', x, y + h, x, y + h, x, y + h - r, // bottom-left corner
	                        'L', x, y + r, // left side
	                        'C', x, y, x, y, x + r, y // top-left corner
	                    ];

	                    // Anchor on right side
	                    if (anchorX && anchorX > w) {

	                        // Chevron
	                        if (anchorY > y + safeDistance && anchorY < y + h - safeDistance) {
	                            path.splice(13, 3,
	                                'L', x + w, anchorY - halfDistance,
	                                x + w + arrowLength, anchorY,
	                                x + w, anchorY + halfDistance,
	                                x + w, y + h - r
	                            );

	                            // Simple connector
	                        } else {
	                            path.splice(13, 3,
	                                'L', x + w, h / 2,
	                                anchorX, anchorY,
	                                x + w, h / 2,
	                                x + w, y + h - r
	                            );
	                        }

	                        // Anchor on left side
	                    } else if (anchorX && anchorX < 0) {

	                        // Chevron
	                        if (anchorY > y + safeDistance && anchorY < y + h - safeDistance) {
	                            path.splice(33, 3,
	                                'L', x, anchorY + halfDistance,
	                                x - arrowLength, anchorY,
	                                x, anchorY - halfDistance,
	                                x, y + r
	                            );

	                            // Simple connector
	                        } else {
	                            path.splice(33, 3,
	                                'L', x, h / 2,
	                                anchorX, anchorY,
	                                x, h / 2,
	                                x, y + r
	                            );
	                        }

	                    } else if (anchorY && anchorY > h && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace bottom
	                        path.splice(23, 3,
	                            'L', anchorX + halfDistance, y + h,
	                            anchorX, y + h + arrowLength,
	                            anchorX - halfDistance, y + h,
	                            x + r, y + h
	                        );
	                    } else if (anchorY && anchorY < 0 && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace top
	                        path.splice(3, 3,
	                            'L', anchorX - halfDistance, y,
	                            anchorX, y - arrowLength,
	                            anchorX + halfDistance, y,
	                            w - r, y
	                        );
	                    }

	                    return path;
	                }
	            },

	            /**
	             * @typedef {SVGElement} ClipRect - A clipping rectangle that can be applied
	             * to one or more {@link SVGElement} instances. It is instanciated with the
	             * {@link SVGRenderer#clipRect} function and applied with the {@link 
	             * SVGElement#clip} function.
	             *
	             * @example
	             * var circle = renderer.circle(100, 100, 100)
	             *     .attr({ fill: 'red' })
	             *     .add();
	             * var clipRect = renderer.clipRect(100, 100, 100, 100);
	             *
	             * // Leave only the lower right quarter visible
	             * circle.clip(clipRect);
	             */
	            /**
	             * Define a clipping rectangle
	             * @param {String} id
	             * @param {number} x
	             * @param {number} y
	             * @param {number} width
	             * @param {number} height
	             * @returns {ClipRect} A clipping rectangle.
	             */
	            clipRect: function(x, y, width, height) {
	                var wrapper,
	                    id = H.uniqueKey(),

	                    clipPath = this.createElement('clipPath').attr({
	                        id: id
	                    }).add(this.defs);

	                wrapper = this.rect(x, y, width, height, 0).add(clipPath);
	                wrapper.id = id;
	                wrapper.clipPath = clipPath;
	                wrapper.count = 0;

	                return wrapper;
	            },





	            /**
	             * Add text to the SVG object
	             * @param {String} str
	             * @param {number} x Left position
	             * @param {number} y Top position
	             * @param {Boolean} useHTML Use HTML to render the text
	             */
	            text: function(str, x, y, useHTML) {

	                // declare variables
	                var renderer = this,
	                    fakeSVG = !svg && renderer.forExport,
	                    wrapper,
	                    attribs = {};

	                if (useHTML && (renderer.allowHTML || !renderer.forExport)) {
	                    return renderer.html(str, x, y);
	                }

	                attribs.x = Math.round(x || 0); // X is always needed for line-wrap logic
	                if (y) {
	                    attribs.y = Math.round(y);
	                }
	                if (str || str === 0) {
	                    attribs.text = str;
	                }

	                wrapper = renderer.createElement('text')
	                    .attr(attribs);

	                // Prevent wrapping from creating false offsetWidths in export in legacy IE (#1079, #1063)
	                if (fakeSVG) {
	                    wrapper.css({
	                        position: 'absolute'
	                    });
	                }

	                if (!useHTML) {
	                    wrapper.xSetter = function(value, key, element) {
	                        var tspans = element.getElementsByTagName('tspan'),
	                            tspan,
	                            parentVal = element.getAttribute(key),
	                            i;
	                        for (i = 0; i < tspans.length; i++) {
	                            tspan = tspans[i];
	                            // If the x values are equal, the tspan represents a linebreak
	                            if (tspan.getAttribute(key) === parentVal) {
	                                tspan.setAttribute(key, value);
	                            }
	                        }
	                        element.setAttribute(key, value);
	                    };
	                }

	                return wrapper;
	            },

	            /**
	             * Utility to return the baseline offset and total line height from the font
	             * size.
	             *
	             * @param {?string} fontSize The current font size to inspect. If not given,
	             *   the font size will be found from the DOM element.
	             * @param {SVGElement|SVGDOMElement} [elem] The element to inspect for a
	             *   current font size.
	             * @returns {Object} An object containing `h`: the line height, `b`: the
	             * baseline relative to the top of the box, and `f`: the font size.
	             */
	            fontMetrics: function(fontSize, elem) {
	                var lineHeight,
	                    baseline;


	                fontSize = fontSize ||
	                    // When the elem is a DOM element (#5932)
	                    (elem && elem.style && elem.style.fontSize) ||
	                    // Fall back on the renderer style default
	                    (this.style && this.style.fontSize);



	                // Handle different units
	                if (/px/.test(fontSize)) {
	                    fontSize = pInt(fontSize);
	                } else if (/em/.test(fontSize)) {
	                    // The em unit depends on parent items
	                    fontSize = parseFloat(fontSize) *
	                        (elem ? this.fontMetrics(null, elem.parentNode).f : 16);
	                } else {
	                    fontSize = 12;
	                }

	                // Empirical values found by comparing font size and bounding box
	                // height. Applies to the default font family.
	                // http://jsfiddle.net/highcharts/7xvn7/
	                lineHeight = fontSize < 24 ? fontSize + 3 : Math.round(fontSize * 1.2);
	                baseline = Math.round(lineHeight * 0.8);

	                return {
	                    h: lineHeight,
	                    b: baseline,
	                    f: fontSize
	                };
	            },

	            /**
	             * Correct X and Y positioning of a label for rotation (#1764)
	             */
	            rotCorr: function(baseline, rotation, alterY) {
	                var y = baseline;
	                if (rotation && alterY) {
	                    y = Math.max(y * Math.cos(rotation * deg2rad), 4);
	                }
	                return {
	                    x: (-baseline / 3) * Math.sin(rotation * deg2rad),
	                    y: y
	                };
	            },

	            /**
	             * Add a label, a text item that can hold a colored or gradient background
	             * as well as a border and shadow. Supported custom attributes include
	             * `padding`. 
	             * 
	             * @param {string} str
	             * @param {number} x
	             * @param {number} y
	             * @param {String} shape
	             * @param {number} anchorX In case the shape has a pointer, like a flag, this is the
	             *	coordinates it should be pinned to
	             * @param {number} anchorY
	             * @param {Boolean} baseline Whether to position the label relative to the text baseline,
	             *	like renderer.text, or to the upper border of the rectangle.
	             * @param {String} className Class name for the group
	             */
	            label: function(str, x, y, shape, anchorX, anchorY, useHTML, baseline, className) {

	                var renderer = this,
	                    wrapper = renderer.g(className !== 'button' && 'label'),
	                    text = wrapper.text = renderer.text('', 0, 0, useHTML)
	                    .attr({
	                        zIndex: 1
	                    }),
	                    box,
	                    bBox,
	                    alignFactor = 0,
	                    padding = 3,
	                    paddingLeft = 0,
	                    width,
	                    height,
	                    wrapperX,
	                    wrapperY,
	                    textAlign,
	                    deferredAttr = {},
	                    strokeWidth,
	                    baselineOffset,
	                    hasBGImage = /^url\((.*?)\)$/.test(shape),
	                    needsBox = hasBGImage,
	                    getCrispAdjust,
	                    updateBoxSize,
	                    updateTextPadding,
	                    boxAttr;

	                if (className) {
	                    wrapper.addClass('highcharts-' + className);
	                }


	                needsBox = hasBGImage;
	                getCrispAdjust = function() {
	                    return (strokeWidth || 0) % 2 / 2;
	                };



	                /**
	                 * This function runs after the label is added to the DOM (when the bounding box is
	                 * available), and after the text of the label is updated to detect the new bounding
	                 * box and reflect it in the border box.
	                 */
	                updateBoxSize = function() {
	                    var style = text.element.style,
	                        crispAdjust,
	                        attribs = {};

	                    bBox = (width === undefined || height === undefined || textAlign) && defined(text.textStr) &&
	                        text.getBBox(); //#3295 && 3514 box failure when string equals 0
	                    wrapper.width = (width || bBox.width || 0) + 2 * padding + paddingLeft;
	                    wrapper.height = (height || bBox.height || 0) + 2 * padding;

	                    // Update the label-scoped y offset
	                    baselineOffset = padding + renderer.fontMetrics(style && style.fontSize, text).b;


	                    if (needsBox) {

	                        // Create the border box if it is not already present
	                        if (!box) {
	                            wrapper.box = box = renderer.symbols[shape] || hasBGImage ? // Symbol definition exists (#5324)
	                                renderer.symbol(shape) :
	                                renderer.rect();

	                            box.addClass(
	                                (className === 'button' ? '' : 'highcharts-label-box') + // Don't use label className for buttons
	                                (className ? ' highcharts-' + className + '-box' : '')
	                            );

	                            box.add(wrapper);

	                            crispAdjust = getCrispAdjust();
	                            attribs.x = crispAdjust;
	                            attribs.y = (baseline ? -baselineOffset : 0) + crispAdjust;
	                        }

	                        // Apply the box attributes
	                        attribs.width = Math.round(wrapper.width);
	                        attribs.height = Math.round(wrapper.height);

	                        box.attr(extend(attribs, deferredAttr));
	                        deferredAttr = {};
	                    }
	                };

	                /**
	                 * This function runs after setting text or padding, but only if padding is changed
	                 */
	                updateTextPadding = function() {
	                    var textX = paddingLeft + padding,
	                        textY;

	                    // determin y based on the baseline
	                    textY = baseline ? 0 : baselineOffset;

	                    // compensate for alignment
	                    if (defined(width) && bBox && (textAlign === 'center' || textAlign === 'right')) {
	                        textX += {
	                            center: 0.5,
	                            right: 1
	                        }[textAlign] * (width - bBox.width);
	                    }

	                    // update if anything changed
	                    if (textX !== text.x || textY !== text.y) {
	                        text.attr('x', textX);
	                        if (textY !== undefined) {
	                            text.attr('y', textY);
	                        }
	                    }

	                    // record current values
	                    text.x = textX;
	                    text.y = textY;
	                };

	                /**
	                 * Set a box attribute, or defer it if the box is not yet created
	                 * @param {Object} key
	                 * @param {Object} value
	                 */
	                boxAttr = function(key, value) {
	                    if (box) {
	                        box.attr(key, value);
	                    } else {
	                        deferredAttr[key] = value;
	                    }
	                };

	                /**
	                 * After the text element is added, get the desired size of the border box
	                 * and add it before the text in the DOM.
	                 */
	                wrapper.onAdd = function() {
	                    text.add(wrapper);
	                    wrapper.attr({
	                        text: (str || str === 0) ? str : '', // alignment is available now // #3295: 0 not rendered if given as a value
	                        x: x,
	                        y: y
	                    });

	                    if (box && defined(anchorX)) {
	                        wrapper.attr({
	                            anchorX: anchorX,
	                            anchorY: anchorY
	                        });
	                    }
	                };

	                /*
	                 * Add specific attribute setters.
	                 */

	                // only change local variables
	                wrapper.widthSetter = function(value) {
	                    width = value;
	                };
	                wrapper.heightSetter = function(value) {
	                    height = value;
	                };
	                wrapper['text-alignSetter'] = function(value) {
	                    textAlign = value;
	                };
	                wrapper.paddingSetter = function(value) {
	                    if (defined(value) && value !== padding) {
	                        padding = wrapper.padding = value;
	                        updateTextPadding();
	                    }
	                };
	                wrapper.paddingLeftSetter = function(value) {
	                    if (defined(value) && value !== paddingLeft) {
	                        paddingLeft = value;
	                        updateTextPadding();
	                    }
	                };


	                // change local variable and prevent setting attribute on the group
	                wrapper.alignSetter = function(value) {
	                    value = {
	                        left: 0,
	                        center: 0.5,
	                        right: 1
	                    }[value];
	                    if (value !== alignFactor) {
	                        alignFactor = value;
	                        if (bBox) { // Bounding box exists, means we're dynamically changing
	                            wrapper.attr({
	                                x: wrapperX
	                            }); // #5134
	                        }
	                    }
	                };

	                // apply these to the box and the text alike
	                wrapper.textSetter = function(value) {
	                    if (value !== undefined) {
	                        text.textSetter(value);
	                    }
	                    updateBoxSize();
	                    updateTextPadding();
	                };

	                // apply these to the box but not to the text
	                wrapper['stroke-widthSetter'] = function(value, key) {
	                    if (value) {
	                        needsBox = true;
	                    }
	                    strokeWidth = this['stroke-width'] = value;
	                    boxAttr(key, value);
	                };

	                wrapper.strokeSetter = wrapper.fillSetter = wrapper.rSetter = function(value, key) {
	                    if (key === 'fill' && value) {
	                        needsBox = true;
	                    }
	                    boxAttr(key, value);
	                };

	                wrapper.anchorXSetter = function(value, key) {
	                    anchorX = value;
	                    boxAttr(key, Math.round(value) - getCrispAdjust() - wrapperX);
	                };
	                wrapper.anchorYSetter = function(value, key) {
	                    anchorY = value;
	                    boxAttr(key, value - wrapperY);
	                };

	                // rename attributes
	                wrapper.xSetter = function(value) {
	                    wrapper.x = value; // for animation getter
	                    if (alignFactor) {
	                        value -= alignFactor * ((width || bBox.width) + 2 * padding);
	                    }
	                    wrapperX = Math.round(value);
	                    wrapper.attr('translateX', wrapperX);
	                };
	                wrapper.ySetter = function(value) {
	                    wrapperY = wrapper.y = Math.round(value);
	                    wrapper.attr('translateY', wrapperY);
	                };

	                // Redirect certain methods to either the box or the text
	                var baseCss = wrapper.css;
	                return extend(wrapper, {
	                    /**
	                     * Pick up some properties and apply them to the text instead of the
	                     * wrapper.
	                     * @ignore
	                     */
	                    css: function(styles) {
	                        if (styles) {
	                            var textStyles = {};
	                            styles = merge(styles); // create a copy to avoid altering the original object (#537)
	                            each(wrapper.textProps, function(prop) {
	                                if (styles[prop] !== undefined) {
	                                    textStyles[prop] = styles[prop];
	                                    delete styles[prop];
	                                }
	                            });
	                            text.css(textStyles);
	                        }
	                        return baseCss.call(wrapper, styles);
	                    },
	                    /**
	                     * Return the bounding box of the box, not the group.
	                     * @ignore
	                     */
	                    getBBox: function() {
	                        return {
	                            width: bBox.width + 2 * padding,
	                            height: bBox.height + 2 * padding,
	                            x: bBox.x - padding,
	                            y: bBox.y - padding
	                        };
	                    },

	                    /**
	                     * Apply the shadow to the box.
	                     * @ignore
	                     */
	                    shadow: function(b) {
	                        if (b) {
	                            updateBoxSize();
	                            if (box) {
	                                box.shadow(b);
	                            }
	                        }
	                        return wrapper;
	                    },

	                    /**
	                     * Destroy and release memory.
	                     * @ignore
	                     */
	                    destroy: function() {

	                        // Added by button implementation
	                        removeEvent(wrapper.element, 'mouseenter');
	                        removeEvent(wrapper.element, 'mouseleave');

	                        if (text) {
	                            text = text.destroy();
	                        }
	                        if (box) {
	                            box = box.destroy();
	                        }
	                        // Call base implementation to destroy the rest
	                        SVGElement.prototype.destroy.call(wrapper);

	                        // Release local pointers (#1298)
	                        wrapper = renderer = updateBoxSize = updateTextPadding = boxAttr = null;
	                    }
	                });
	            }
	        }; // end SVGRenderer


	        // general renderer
	        H.Renderer = SVGRenderer;

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var attr = H.attr,
	            createElement = H.createElement,
	            css = H.css,
	            defined = H.defined,
	            each = H.each,
	            extend = H.extend,
	            isFirefox = H.isFirefox,
	            isMS = H.isMS,
	            isWebKit = H.isWebKit,
	            pInt = H.pInt,
	            SVGElement = H.SVGElement,
	            SVGRenderer = H.SVGRenderer,
	            win = H.win,
	            wrap = H.wrap;

	        // Extend SvgElement for useHTML option
	        extend(SVGElement.prototype, /** @lends SVGElement.prototype */ {
	            /**
	             * Apply CSS to HTML elements. This is used in text within SVG rendering and
	             * by the VML renderer
	             */
	            htmlCss: function(styles) {
	                var wrapper = this,
	                    element = wrapper.element,
	                    textWidth = styles && element.tagName === 'SPAN' && styles.width;

	                if (textWidth) {
	                    delete styles.width;
	                    wrapper.textWidth = textWidth;
	                    wrapper.updateTransform();
	                }
	                if (styles && styles.textOverflow === 'ellipsis') {
	                    styles.whiteSpace = 'nowrap';
	                    styles.overflow = 'hidden';
	                }
	                wrapper.styles = extend(wrapper.styles, styles);
	                css(wrapper.element, styles);

	                return wrapper;
	            },

	            /**
	             * VML and useHTML method for calculating the bounding box based on offsets
	             * @param {Boolean} refresh Whether to force a fresh value from the DOM or to
	             * use the cached value
	             *
	             * @return {Object} A hash containing values for x, y, width and height
	             */

	            htmlGetBBox: function() {
	                var wrapper = this,
	                    element = wrapper.element;

	                // faking getBBox in exported SVG in legacy IE
	                // faking getBBox in exported SVG in legacy IE (is this a duplicate of the fix for #1079?)
	                if (element.nodeName === 'text') {
	                    element.style.position = 'absolute';
	                }

	                return {
	                    x: element.offsetLeft,
	                    y: element.offsetTop,
	                    width: element.offsetWidth,
	                    height: element.offsetHeight
	                };
	            },

	            /**
	             * VML override private method to update elements based on internal
	             * properties based on SVG transform
	             */
	            htmlUpdateTransform: function() {
	                // aligning non added elements is expensive
	                if (!this.added) {
	                    this.alignOnAdd = true;
	                    return;
	                }

	                var wrapper = this,
	                    renderer = wrapper.renderer,
	                    elem = wrapper.element,
	                    translateX = wrapper.translateX || 0,
	                    translateY = wrapper.translateY || 0,
	                    x = wrapper.x || 0,
	                    y = wrapper.y || 0,
	                    align = wrapper.textAlign || 'left',
	                    alignCorrection = {
	                        left: 0,
	                        center: 0.5,
	                        right: 1
	                    }[align],
	                    styles = wrapper.styles;

	                // apply translate
	                css(elem, {
	                    marginLeft: translateX,
	                    marginTop: translateY
	                });


	                if (wrapper.shadows) { // used in labels/tooltip
	                    each(wrapper.shadows, function(shadow) {
	                        css(shadow, {
	                            marginLeft: translateX + 1,
	                            marginTop: translateY + 1
	                        });
	                    });
	                }


	                // apply inversion
	                if (wrapper.inverted) { // wrapper is a group
	                    each(elem.childNodes, function(child) {
	                        renderer.invertChild(child, elem);
	                    });
	                }

	                if (elem.tagName === 'SPAN') {

	                    var rotation = wrapper.rotation,
	                        baseline,
	                        textWidth = pInt(wrapper.textWidth),
	                        whiteSpace = styles && styles.whiteSpace,
	                        currentTextTransform = [rotation, align, elem.innerHTML, wrapper.textWidth, wrapper.textAlign].join(',');

	                    if (currentTextTransform !== wrapper.cTT) { // do the calculations and DOM access only if properties changed


	                        baseline = renderer.fontMetrics(elem.style.fontSize).b;

	                        // Renderer specific handling of span rotation
	                        if (defined(rotation)) {
	                            wrapper.setSpanRotation(rotation, alignCorrection, baseline);
	                        }

	                        // Reset multiline/ellipsis in order to read width (#4928, #5417)
	                        css(elem, {
	                            width: '',
	                            whiteSpace: whiteSpace || 'nowrap'
	                        });

	                        // Update textWidth
	                        if (elem.offsetWidth > textWidth && /[ \-]/.test(elem.textContent || elem.innerText)) { // #983, #1254
	                            css(elem, {
	                                width: textWidth + 'px',
	                                display: 'block',
	                                whiteSpace: whiteSpace || 'normal' // #3331
	                            });
	                        }


	                        wrapper.getSpanCorrection(elem.offsetWidth, baseline, alignCorrection, rotation, align);
	                    }

	                    // apply position with correction
	                    css(elem, {
	                        left: (x + (wrapper.xCorr || 0)) + 'px',
	                        top: (y + (wrapper.yCorr || 0)) + 'px'
	                    });

	                    // force reflow in webkit to apply the left and top on useHTML element (#1249)
	                    if (isWebKit) {
	                        baseline = elem.offsetHeight; // assigned to baseline for lint purpose
	                    }

	                    // record current text transform
	                    wrapper.cTT = currentTextTransform;
	                }
	            },

	            /**
	             * Set the rotation of an individual HTML span
	             */
	            setSpanRotation: function(rotation, alignCorrection, baseline) {
	                var rotationStyle = {},
	                    cssTransformKey = isMS ? '-ms-transform' : isWebKit ? '-webkit-transform' : isFirefox ? 'MozTransform' : win.opera ? '-o-transform' : '';

	                rotationStyle[cssTransformKey] = rotationStyle.transform = 'rotate(' + rotation + 'deg)';
	                rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] = rotationStyle.transformOrigin = (alignCorrection * 100) + '% ' + baseline + 'px';
	                css(this.element, rotationStyle);
	            },

	            /**
	             * Get the correction in X and Y positioning as the element is rotated.
	             */
	            getSpanCorrection: function(width, baseline, alignCorrection) {
	                this.xCorr = -width * alignCorrection;
	                this.yCorr = -baseline;
	            }
	        });

	        // Extend SvgRenderer for useHTML option.
	        extend(SVGRenderer.prototype, /** @lends SVGRenderer.prototype */ {
	            /**
	             * Create HTML text node. This is used by the VML renderer as well as the SVG
	             * renderer through the useHTML option.
	             *
	             * @param {String} str
	             * @param {Number} x
	             * @param {Number} y
	             */
	            html: function(str, x, y) {
	                var wrapper = this.createElement('span'),
	                    element = wrapper.element,
	                    renderer = wrapper.renderer,
	                    isSVG = renderer.isSVG,
	                    addSetters = function(element, style) {
	                        // These properties are set as attributes on the SVG group, and as
	                        // identical CSS properties on the div. (#3542)
	                        each(['opacity', 'visibility'], function(prop) {
	                            wrap(element, prop + 'Setter', function(proceed, value, key, elem) {
	                                proceed.call(this, value, key, elem);
	                                style[key] = value;
	                            });
	                        });
	                    };

	                // Text setter
	                wrapper.textSetter = function(value) {
	                    if (value !== element.innerHTML) {
	                        delete this.bBox;
	                    }
	                    element.innerHTML = this.textStr = value;
	                    wrapper.htmlUpdateTransform();
	                };

	                // Add setters for the element itself (#4938)
	                if (isSVG) { // #4938, only for HTML within SVG
	                    addSetters(wrapper, wrapper.element.style);
	                }

	                // Various setters which rely on update transform
	                wrapper.xSetter = wrapper.ySetter = wrapper.alignSetter = wrapper.rotationSetter = function(value, key) {
	                    if (key === 'align') {
	                        key = 'textAlign'; // Do not overwrite the SVGElement.align method. Same as VML.
	                    }
	                    wrapper[key] = value;
	                    wrapper.htmlUpdateTransform();
	                };

	                // Set the default attributes
	                wrapper
	                    .attr({
	                        text: str,
	                        x: Math.round(x),
	                        y: Math.round(y)
	                    })
	                    .css({

	                        fontFamily: this.style.fontFamily,
	                        fontSize: this.style.fontSize,

	                        position: 'absolute'
	                    });

	                // Keep the whiteSpace style outside the wrapper.styles collection
	                element.style.whiteSpace = 'nowrap';

	                // Use the HTML specific .css method
	                wrapper.css = wrapper.htmlCss;

	                // This is specific for HTML within SVG
	                if (isSVG) {
	                    wrapper.add = function(svgGroupWrapper) {

	                        var htmlGroup,
	                            container = renderer.box.parentNode,
	                            parentGroup,
	                            parents = [];

	                        this.parentGroup = svgGroupWrapper;

	                        // Create a mock group to hold the HTML elements
	                        if (svgGroupWrapper) {
	                            htmlGroup = svgGroupWrapper.div;
	                            if (!htmlGroup) {

	                                // Read the parent chain into an array and read from top down
	                                parentGroup = svgGroupWrapper;
	                                while (parentGroup) {

	                                    parents.push(parentGroup);

	                                    // Move up to the next parent group
	                                    parentGroup = parentGroup.parentGroup;
	                                }

	                                // Ensure dynamically updating position when any parent is translated
	                                each(parents.reverse(), function(parentGroup) {
	                                    var htmlGroupStyle,
	                                        cls = attr(parentGroup.element, 'class');

	                                    if (cls) {
	                                        cls = {
	                                            className: cls
	                                        };
	                                    } // else null

	                                    // Create a HTML div and append it to the parent div to emulate
	                                    // the SVG group structure
	                                    htmlGroup = parentGroup.div = parentGroup.div || createElement('div', cls, {
	                                        position: 'absolute',
	                                        left: (parentGroup.translateX || 0) + 'px',
	                                        top: (parentGroup.translateY || 0) + 'px',
	                                        display: parentGroup.display,
	                                        opacity: parentGroup.opacity, // #5075
	                                        pointerEvents: parentGroup.styles && parentGroup.styles.pointerEvents // #5595
	                                    }, htmlGroup || container); // the top group is appended to container

	                                    // Shortcut
	                                    htmlGroupStyle = htmlGroup.style;

	                                    // Set listeners to update the HTML div's position whenever the SVG group
	                                    // position is changed
	                                    extend(parentGroup, {
	                                        on: function() {
	                                            wrapper.on.apply({
	                                                element: parents[0].div
	                                            }, arguments);
	                                            return parentGroup;
	                                        },
	                                        translateXSetter: function(value, key) {
	                                            htmlGroupStyle.left = value + 'px';
	                                            parentGroup[key] = value;
	                                            parentGroup.doTransform = true;
	                                        },
	                                        translateYSetter: function(value, key) {
	                                            htmlGroupStyle.top = value + 'px';
	                                            parentGroup[key] = value;
	                                            parentGroup.doTransform = true;
	                                        }
	                                    });
	                                    addSetters(parentGroup, htmlGroupStyle);
	                                });

	                            }
	                        } else {
	                            htmlGroup = container;
	                        }

	                        htmlGroup.appendChild(element);

	                        // Shared with VML:
	                        wrapper.added = true;
	                        if (wrapper.alignOnAdd) {
	                            wrapper.htmlUpdateTransform();
	                        }

	                        return wrapper;
	                    };
	                }
	                return wrapper;
	            }
	        });

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';

	        var VMLRenderer,
	            VMLRendererExtension,
	            VMLElement,

	            createElement = H.createElement,
	            css = H.css,
	            defined = H.defined,
	            deg2rad = H.deg2rad,
	            discardElement = H.discardElement,
	            doc = H.doc,
	            each = H.each,
	            erase = H.erase,
	            extend = H.extend,
	            extendClass = H.extendClass,
	            isArray = H.isArray,
	            isNumber = H.isNumber,
	            isObject = H.isObject,
	            merge = H.merge,
	            noop = H.noop,
	            pick = H.pick,
	            pInt = H.pInt,
	            svg = H.svg,
	            SVGElement = H.SVGElement,
	            SVGRenderer = H.SVGRenderer,
	            win = H.win;

	        /* ****************************************************************************
	         *                                                                            *
	         * START OF INTERNET EXPLORER <= 8 SPECIFIC CODE                              *
	         *                                                                            *
	         * For applications and websites that don't need IE support, like platform    *
	         * targeted mobile apps and web apps, this code can be removed.               *
	         *                                                                            *
	         *****************************************************************************/

	        /**
	         * @constructor
	         */
	        if (!svg) {

	            /**
	             * The VML element wrapper.
	             */
	            VMLElement = {

	                docMode8: doc && doc.documentMode === 8,

	                /**
	                 * Initialize a new VML element wrapper. It builds the markup as a string
	                 * to minimize DOM traffic.
	                 * @param {Object} renderer
	                 * @param {Object} nodeName
	                 */
	                init: function(renderer, nodeName) {
	                    var wrapper = this,
	                        markup = ['<', nodeName, ' filled="f" stroked="f"'],
	                        style = ['position: ', 'absolute', ';'],
	                        isDiv = nodeName === 'div';

	                    // divs and shapes need size
	                    if (nodeName === 'shape' || isDiv) {
	                        style.push('left:0;top:0;width:1px;height:1px;');
	                    }
	                    style.push('visibility: ', isDiv ? 'hidden' : 'visible');

	                    markup.push(' style="', style.join(''), '"/>');

	                    // create element with default attributes and style
	                    if (nodeName) {
	                        markup = isDiv || nodeName === 'span' || nodeName === 'img' ?
	                            markup.join('') :
	                            renderer.prepVML(markup);
	                        wrapper.element = createElement(markup);
	                    }

	                    wrapper.renderer = renderer;
	                },

	                /**
	                 * Add the node to the given parent
	                 * @param {Object} parent
	                 */
	                add: function(parent) {
	                    var wrapper = this,
	                        renderer = wrapper.renderer,
	                        element = wrapper.element,
	                        box = renderer.box,
	                        inverted = parent && parent.inverted,

	                        // get the parent node
	                        parentNode = parent ?
	                        parent.element || parent :
	                        box;

	                    if (parent) {
	                        this.parentGroup = parent;
	                    }

	                    // if the parent group is inverted, apply inversion on all children
	                    if (inverted) { // only on groups
	                        renderer.invertChild(element, parentNode);
	                    }

	                    // append it
	                    parentNode.appendChild(element);

	                    // align text after adding to be able to read offset
	                    wrapper.added = true;
	                    if (wrapper.alignOnAdd && !wrapper.deferUpdateTransform) {
	                        wrapper.updateTransform();
	                    }

	                    // fire an event for internal hooks
	                    if (wrapper.onAdd) {
	                        wrapper.onAdd();
	                    }

	                    // IE8 Standards can't set the class name before the element is appended
	                    if (this.className) {
	                        this.attr('class', this.className);
	                    }

	                    return wrapper;
	                },

	                /**
	                 * VML always uses htmlUpdateTransform
	                 */
	                updateTransform: SVGElement.prototype.htmlUpdateTransform,

	                /**
	                 * Set the rotation of a span with oldIE's filter
	                 */
	                setSpanRotation: function() {
	                    // Adjust for alignment and rotation. Rotation of useHTML content is not yet implemented
	                    // but it can probably be implemented for Firefox 3.5+ on user request. FF3.5+
	                    // has support for CSS3 transform. The getBBox method also needs to be updated
	                    // to compensate for the rotation, like it currently does for SVG.
	                    // Test case: http://jsfiddle.net/highcharts/Ybt44/

	                    var rotation = this.rotation,
	                        costheta = Math.cos(rotation * deg2rad),
	                        sintheta = Math.sin(rotation * deg2rad);

	                    css(this.element, {
	                        filter: rotation ? ['progid:DXImageTransform.Microsoft.Matrix(M11=', costheta,
	                            ', M12=', -sintheta, ', M21=', sintheta, ', M22=', costheta,
	                            ', sizingMethod=\'auto expand\')'
	                        ].join('') : 'none'
	                    });
	                },

	                /**
	                 * Get the positioning correction for the span after rotating.
	                 */
	                getSpanCorrection: function(width, baseline, alignCorrection, rotation, align) {

	                    var costheta = rotation ? Math.cos(rotation * deg2rad) : 1,
	                        sintheta = rotation ? Math.sin(rotation * deg2rad) : 0,
	                        height = pick(this.elemHeight, this.element.offsetHeight),
	                        quad,
	                        nonLeft = align && align !== 'left';

	                    // correct x and y
	                    this.xCorr = costheta < 0 && -width;
	                    this.yCorr = sintheta < 0 && -height;

	                    // correct for baseline and corners spilling out after rotation
	                    quad = costheta * sintheta < 0;
	                    this.xCorr += sintheta * baseline * (quad ? 1 - alignCorrection : alignCorrection);
	                    this.yCorr -= costheta * baseline * (rotation ? (quad ? alignCorrection : 1 - alignCorrection) : 1);
	                    // correct for the length/height of the text
	                    if (nonLeft) {
	                        this.xCorr -= width * alignCorrection * (costheta < 0 ? -1 : 1);
	                        if (rotation) {
	                            this.yCorr -= height * alignCorrection * (sintheta < 0 ? -1 : 1);
	                        }
	                        css(this.element, {
	                            textAlign: align
	                        });
	                    }
	                },

	                /**
	                 * Converts a subset of an SVG path definition to its VML counterpart. Takes an array
	                 * as the parameter and returns a string.
	                 */
	                pathToVML: function(value) {
	                    // convert paths
	                    var i = value.length,
	                        path = [];

	                    while (i--) {

	                        // Multiply by 10 to allow subpixel precision.
	                        // Substracting half a pixel seems to make the coordinates
	                        // align with SVG, but this hasn't been tested thoroughly
	                        if (isNumber(value[i])) {
	                            path[i] = Math.round(value[i] * 10) - 5;
	                        } else if (value[i] === 'Z') { // close the path
	                            path[i] = 'x';
	                        } else {
	                            path[i] = value[i];

	                            // When the start X and end X coordinates of an arc are too close,
	                            // they are rounded to the same value above. In this case, substract or
	                            // add 1 from the end X and Y positions. #186, #760, #1371, #1410.
	                            if (value.isArc && (value[i] === 'wa' || value[i] === 'at')) {
	                                // Start and end X
	                                if (path[i + 5] === path[i + 7]) {
	                                    path[i + 7] += value[i + 7] > value[i + 5] ? 1 : -1;
	                                }
	                                // Start and end Y
	                                if (path[i + 6] === path[i + 8]) {
	                                    path[i + 8] += value[i + 8] > value[i + 6] ? 1 : -1;
	                                }
	                            }
	                        }
	                    }


	                    // Loop up again to handle path shortcuts (#2132)
	                    /*while (i++ < path.length) {
	                    	if (path[i] === 'H') { // horizontal line to
	                    		path[i] = 'L';
	                    		path.splice(i + 2, 0, path[i - 1]);
	                    	} else if (path[i] === 'V') { // vertical line to
	                    		path[i] = 'L';
	                    		path.splice(i + 1, 0, path[i - 2]);
	                    	}
	                    }*/
	                    return path.join(' ') || 'x';
	                },

	                /**
	                 * Set the element's clipping to a predefined rectangle
	                 *
	                 * @param {String} id The id of the clip rectangle
	                 */
	                clip: function(clipRect) {
	                    var wrapper = this,
	                        clipMembers,
	                        cssRet;

	                    if (clipRect) {
	                        clipMembers = clipRect.members;
	                        erase(clipMembers, wrapper); // Ensure unique list of elements (#1258)
	                        clipMembers.push(wrapper);
	                        wrapper.destroyClip = function() {
	                            erase(clipMembers, wrapper);
	                        };
	                        cssRet = clipRect.getCSS(wrapper);

	                    } else {
	                        if (wrapper.destroyClip) {
	                            wrapper.destroyClip();
	                        }
	                        cssRet = {
	                            clip: wrapper.docMode8 ? 'inherit' : 'rect(auto)'
	                        }; // #1214
	                    }

	                    return wrapper.css(cssRet);

	                },

	                /**
	                 * Set styles for the element
	                 * @param {Object} styles
	                 */
	                css: SVGElement.prototype.htmlCss,

	                /**
	                 * Removes a child either by removeChild or move to garbageBin.
	                 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.
	                 */
	                safeRemoveChild: function(element) {
	                    // discardElement will detach the node from its parent before attaching it
	                    // to the garbage bin. Therefore it is important that the node is attached and have parent.
	                    if (element.parentNode) {
	                        discardElement(element);
	                    }
	                },

	                /**
	                 * Extend element.destroy by removing it from the clip members array
	                 */
	                destroy: function() {
	                    if (this.destroyClip) {
	                        this.destroyClip();
	                    }

	                    return SVGElement.prototype.destroy.apply(this);
	                },

	                /**
	                 * Add an event listener. VML override for normalizing event parameters.
	                 * @param {String} eventType
	                 * @param {Function} handler
	                 */
	                on: function(eventType, handler) {
	                    // simplest possible event model for internal use
	                    this.element['on' + eventType] = function() {
	                        var evt = win.event;
	                        evt.target = evt.srcElement;
	                        handler(evt);
	                    };
	                    return this;
	                },

	                /**
	                 * In stacked columns, cut off the shadows so that they don't overlap
	                 */
	                cutOffPath: function(path, length) {

	                    var len;

	                    path = path.split(/[ ,]/); // The extra comma tricks the trailing comma remover in "gulp scripts" task
	                    len = path.length;

	                    if (len === 9 || len === 11) {
	                        path[len - 4] = path[len - 2] = pInt(path[len - 2]) - 10 * length;
	                    }
	                    return path.join(' ');
	                },

	                /**
	                 * Apply a drop shadow by copying elements and giving them different strokes
	                 * @param {Boolean|Object} shadowOptions
	                 */
	                shadow: function(shadowOptions, group, cutOff) {
	                    var shadows = [],
	                        i,
	                        element = this.element,
	                        renderer = this.renderer,
	                        shadow,
	                        elemStyle = element.style,
	                        markup,
	                        path = element.path,
	                        strokeWidth,
	                        modifiedPath,
	                        shadowWidth,
	                        shadowElementOpacity;

	                    // some times empty paths are not strings
	                    if (path && typeof path.value !== 'string') {
	                        path = 'x';
	                    }
	                    modifiedPath = path;

	                    if (shadowOptions) {
	                        shadowWidth = pick(shadowOptions.width, 3);
	                        shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;
	                        for (i = 1; i <= 3; i++) {

	                            strokeWidth = (shadowWidth * 2) + 1 - (2 * i);

	                            // Cut off shadows for stacked column items
	                            if (cutOff) {
	                                modifiedPath = this.cutOffPath(path.value, strokeWidth + 0.5);
	                            }

	                            markup = ['<shape isShadow="true" strokeweight="', strokeWidth,
	                                '" filled="false" path="', modifiedPath,
	                                '" coordsize="10 10" style="', element.style.cssText, '" />'
	                            ];

	                            shadow = createElement(renderer.prepVML(markup),
	                                null, {
	                                    left: pInt(elemStyle.left) + pick(shadowOptions.offsetX, 1),
	                                    top: pInt(elemStyle.top) + pick(shadowOptions.offsetY, 1)
	                                }
	                            );
	                            if (cutOff) {
	                                shadow.cutOff = strokeWidth + 1;
	                            }

	                            // apply the opacity
	                            markup = [
	                                '<stroke color="',
	                                shadowOptions.color || '#000000',
	                                '" opacity="', shadowElementOpacity * i, '"/>'
	                            ];
	                            createElement(renderer.prepVML(markup), null, null, shadow);


	                            // insert it
	                            if (group) {
	                                group.element.appendChild(shadow);
	                            } else {
	                                element.parentNode.insertBefore(shadow, element);
	                            }

	                            // record it
	                            shadows.push(shadow);

	                        }

	                        this.shadows = shadows;
	                    }
	                    return this;
	                },
	                updateShadows: noop, // Used in SVG only

	                setAttr: function(key, value) {
	                    if (this.docMode8) { // IE8 setAttribute bug
	                        this.element[key] = value;
	                    } else {
	                        this.element.setAttribute(key, value);
	                    }
	                },
	                classSetter: function(value) {
	                    // IE8 Standards mode has problems retrieving the className unless set like this.
	                    // IE8 Standards can't set the class name before the element is appended.
	                    (this.added ? this.element : this).className = value;
	                },
	                dashstyleSetter: function(value, key, element) {
	                    var strokeElem = element.getElementsByTagName('stroke')[0] ||
	                        createElement(this.renderer.prepVML(['<stroke/>']), null, null, element);
	                    strokeElem[key] = value || 'solid';
	                    this[key] = value;
	                    /* because changing stroke-width will change the dash length
					and cause an epileptic effect */
	                },
	                dSetter: function(value, key, element) {
	                    var i,
	                        shadows = this.shadows;
	                    value = value || [];
	                    this.d = value.join && value.join(' '); // used in getter for animation

	                    element.path = value = this.pathToVML(value);

	                    // update shadows
	                    if (shadows) {
	                        i = shadows.length;
	                        while (i--) {
	                            shadows[i].path = shadows[i].cutOff ? this.cutOffPath(value, shadows[i].cutOff) : value;
	                        }
	                    }
	                    this.setAttr(key, value);
	                },
	                fillSetter: function(value, key, element) {
	                    var nodeName = element.nodeName;
	                    if (nodeName === 'SPAN') { // text color
	                        element.style.color = value;
	                    } else if (nodeName !== 'IMG') { // #1336
	                        element.filled = value !== 'none';
	                        this.setAttr('fillcolor', this.renderer.color(value, element, key, this));
	                    }
	                },
	                'fill-opacitySetter': function(value, key, element) {
	                    createElement(
	                        this.renderer.prepVML(['<', key.split('-')[0], ' opacity="', value, '"/>']),
	                        null,
	                        null,
	                        element
	                    );
	                },
	                opacitySetter: noop, // Don't bother - animation is too slow and filters introduce artifacts
	                rotationSetter: function(value, key, element) {
	                    var style = element.style;
	                    this[key] = style[key] = value; // style is for #1873

	                    // Correction for the 1x1 size of the shape container. Used in gauge needles.
	                    style.left = -Math.round(Math.sin(value * deg2rad) + 1) + 'px';
	                    style.top = Math.round(Math.cos(value * deg2rad)) + 'px';
	                },
	                strokeSetter: function(value, key, element) {
	                    this.setAttr('strokecolor', this.renderer.color(value, element, key, this));
	                },
	                'stroke-widthSetter': function(value, key, element) {
	                    element.stroked = !!value; // VML "stroked" attribute
	                    this[key] = value; // used in getter, issue #113
	                    if (isNumber(value)) {
	                        value += 'px';
	                    }
	                    this.setAttr('strokeweight', value);
	                },
	                titleSetter: function(value, key) {
	                    this.setAttr(key, value);
	                },
	                visibilitySetter: function(value, key, element) {

	                    // Handle inherited visibility
	                    if (value === 'inherit') {
	                        value = 'visible';
	                    }

	                    // Let the shadow follow the main element
	                    if (this.shadows) {
	                        each(this.shadows, function(shadow) {
	                            shadow.style[key] = value;
	                        });
	                    }

	                    // Instead of toggling the visibility CSS property, move the div out of the viewport.
	                    // This works around #61 and #586
	                    if (element.nodeName === 'DIV') {
	                        value = value === 'hidden' ? '-999em' : 0;

	                        // In order to redraw, IE7 needs the div to be visible when tucked away
	                        // outside the viewport. So the visibility is actually opposite of
	                        // the expected value. This applies to the tooltip only.
	                        if (!this.docMode8) {
	                            element.style[key] = value ? 'visible' : 'hidden';
	                        }
	                        key = 'top';
	                    }
	                    element.style[key] = value;
	                },
	                xSetter: function(value, key, element) {
	                    this[key] = value; // used in getter

	                    if (key === 'x') {
	                        key = 'left';
	                    } else if (key === 'y') {
	                        key = 'top';
	                    }
	                    /* else {
	                    				value = Math.max(0, value); // don't set width or height below zero (#311)
	                    			}*/

	                    // clipping rectangle special
	                    if (this.updateClipping) {
	                        this[key] = value; // the key is now 'left' or 'top' for 'x' and 'y'
	                        this.updateClipping();
	                    } else {
	                        // normal
	                        element.style[key] = value;
	                    }
	                },
	                zIndexSetter: function(value, key, element) {
	                    element.style[key] = value;
	                }
	            };
	            VMLElement['stroke-opacitySetter'] = VMLElement['fill-opacitySetter'];
	            H.VMLElement = VMLElement = extendClass(SVGElement, VMLElement);

	            // Some shared setters
	            VMLElement.prototype.ySetter =
	                VMLElement.prototype.widthSetter =
	                VMLElement.prototype.heightSetter =
	                VMLElement.prototype.xSetter;


	            /**
	             * The VML renderer
	             */
	            VMLRendererExtension = { // inherit SVGRenderer

	                Element: VMLElement,
	                isIE8: win.navigator.userAgent.indexOf('MSIE 8.0') > -1,


	                /**
	                 * Initialize the VMLRenderer
	                 * @param {Object} container
	                 * @param {Number} width
	                 * @param {Number} height
	                 */
	                init: function(container, width, height) {
	                    var renderer = this,
	                        boxWrapper,
	                        box,
	                        css;

	                    renderer.alignedObjects = [];

	                    boxWrapper = renderer.createElement('div')
	                        .css({
	                            position: 'relative'
	                        });
	                    box = boxWrapper.element;
	                    container.appendChild(boxWrapper.element);


	                    // generate the containing box
	                    renderer.isVML = true;
	                    renderer.box = box;
	                    renderer.boxWrapper = boxWrapper;
	                    renderer.gradients = {};
	                    renderer.cache = {}; // Cache for numerical bounding boxes
	                    renderer.cacheKeys = [];
	                    renderer.imgCount = 0;


	                    renderer.setSize(width, height, false);

	                    // The only way to make IE6 and IE7 print is to use a global namespace. However,
	                    // with IE8 the only way to make the dynamic shapes visible in screen and print mode
	                    // seems to be to add the xmlns attribute and the behaviour style inline.
	                    if (!doc.namespaces.hcv) {

	                        doc.namespaces.add('hcv', 'urn:schemas-microsoft-com:vml');

	                        // Setup default CSS (#2153, #2368, #2384)
	                        css = 'hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke' +
	                            '{ behavior:url(#default#VML); display: inline-block; } ';
	                        try {
	                            doc.createStyleSheet().cssText = css;
	                        } catch (e) {
	                            doc.styleSheets[0].cssText += css;
	                        }

	                    }
	                },


	                /**
	                 * Detect whether the renderer is hidden. This happens when one of the parent elements
	                 * has display: none
	                 */
	                isHidden: function() {
	                    return !this.box.offsetWidth;
	                },

	                /**
	                 * Define a clipping rectangle. In VML it is accomplished by storing the values
	                 * for setting the CSS style to all associated members.
	                 *
	                 * @param {Number} x
	                 * @param {Number} y
	                 * @param {Number} width
	                 * @param {Number} height
	                 */
	                clipRect: function(x, y, width, height) {

	                    // create a dummy element
	                    var clipRect = this.createElement(),
	                        isObj = isObject(x);

	                    // mimic a rectangle with its style object for automatic updating in attr
	                    return extend(clipRect, {
	                        members: [],
	                        count: 0,
	                        left: (isObj ? x.x : x) + 1,
	                        top: (isObj ? x.y : y) + 1,
	                        width: (isObj ? x.width : width) - 1,
	                        height: (isObj ? x.height : height) - 1,
	                        getCSS: function(wrapper) {
	                            var element = wrapper.element,
	                                nodeName = element.nodeName,
	                                isShape = nodeName === 'shape',
	                                inverted = wrapper.inverted,
	                                rect = this,
	                                top = rect.top - (isShape ? element.offsetTop : 0),
	                                left = rect.left,
	                                right = left + rect.width,
	                                bottom = top + rect.height,
	                                ret = {
	                                    clip: 'rect(' +
	                                        Math.round(inverted ? left : top) + 'px,' +
	                                        Math.round(inverted ? bottom : right) + 'px,' +
	                                        Math.round(inverted ? right : bottom) + 'px,' +
	                                        Math.round(inverted ? top : left) + 'px)'
	                                };

	                            // issue 74 workaround
	                            if (!inverted && wrapper.docMode8 && nodeName === 'DIV') {
	                                extend(ret, {
	                                    width: right + 'px',
	                                    height: bottom + 'px'
	                                });
	                            }
	                            return ret;
	                        },

	                        // used in attr and animation to update the clipping of all members
	                        updateClipping: function() {
	                            each(clipRect.members, function(member) {
	                                // Member.element is falsy on deleted series, like in
	                                // stock/members/series-remove demo. Should be removed
	                                // from members, but this will do.
	                                if (member.element) {
	                                    member.css(clipRect.getCSS(member));
	                                }
	                            });
	                        }
	                    });

	                },


	                /**
	                 * Take a color and return it if it's a string, make it a gradient if it's a
	                 * gradient configuration object, and apply opacity.
	                 *
	                 * @param {Object} color The color or config object
	                 */
	                color: function(color, elem, prop, wrapper) {
	                    var renderer = this,
	                        colorObject,
	                        regexRgba = /^rgba/,
	                        markup,
	                        fillType,
	                        ret = 'none';

	                    // Check for linear or radial gradient
	                    if (color && color.linearGradient) {
	                        fillType = 'gradient';
	                    } else if (color && color.radialGradient) {
	                        fillType = 'pattern';
	                    }


	                    if (fillType) {

	                        var stopColor,
	                            stopOpacity,
	                            gradient = color.linearGradient || color.radialGradient,
	                            x1,
	                            y1,
	                            x2,
	                            y2,
	                            opacity1,
	                            opacity2,
	                            color1,
	                            color2,
	                            fillAttr = '',
	                            stops = color.stops,
	                            firstStop,
	                            lastStop,
	                            colors = [],
	                            addFillNode = function() {
	                                // Add the fill subnode. When colors attribute is used, the meanings of opacity and o:opacity2
	                                // are reversed.
	                                markup = ['<fill colors="' + colors.join(',') +
	                                    '" opacity="', opacity2, '" o:opacity2="',
	                                    opacity1, '" type="', fillType, '" ', fillAttr,
	                                    'focus="100%" method="any" />'
	                                ];
	                                createElement(renderer.prepVML(markup), null, null, elem);
	                            };

	                        // Extend from 0 to 1
	                        firstStop = stops[0];
	                        lastStop = stops[stops.length - 1];
	                        if (firstStop[0] > 0) {
	                            stops.unshift([
	                                0,
	                                firstStop[1]
	                            ]);
	                        }
	                        if (lastStop[0] < 1) {
	                            stops.push([
	                                1,
	                                lastStop[1]
	                            ]);
	                        }

	                        // Compute the stops
	                        each(stops, function(stop, i) {
	                            if (regexRgba.test(stop[1])) {
	                                colorObject = H.color(stop[1]);
	                                stopColor = colorObject.get('rgb');
	                                stopOpacity = colorObject.get('a');
	                            } else {
	                                stopColor = stop[1];
	                                stopOpacity = 1;
	                            }

	                            // Build the color attribute
	                            colors.push((stop[0] * 100) + '% ' + stopColor);

	                            // Only start and end opacities are allowed, so we use the first and the last
	                            if (!i) {
	                                opacity1 = stopOpacity;
	                                color2 = stopColor;
	                            } else {
	                                opacity2 = stopOpacity;
	                                color1 = stopColor;
	                            }
	                        });

	                        // Apply the gradient to fills only.
	                        if (prop === 'fill') {

	                            // Handle linear gradient angle
	                            if (fillType === 'gradient') {
	                                x1 = gradient.x1 || gradient[0] || 0;
	                                y1 = gradient.y1 || gradient[1] || 0;
	                                x2 = gradient.x2 || gradient[2] || 0;
	                                y2 = gradient.y2 || gradient[3] || 0;
	                                fillAttr = 'angle="' + (90 - Math.atan(
	                                    (y2 - y1) / // y vector
	                                    (x2 - x1) // x vector
	                                ) * 180 / Math.PI) + '"';

	                                addFillNode();

	                                // Radial (circular) gradient
	                            } else {

	                                var r = gradient.r,
	                                    sizex = r * 2,
	                                    sizey = r * 2,
	                                    cx = gradient.cx,
	                                    cy = gradient.cy,
	                                    radialReference = elem.radialReference,
	                                    bBox,
	                                    applyRadialGradient = function() {
	                                        if (radialReference) {
	                                            bBox = wrapper.getBBox();
	                                            cx += (radialReference[0] - bBox.x) / bBox.width - 0.5;
	                                            cy += (radialReference[1] - bBox.y) / bBox.height - 0.5;
	                                            sizex *= radialReference[2] / bBox.width;
	                                            sizey *= radialReference[2] / bBox.height;
	                                        }
	                                        fillAttr = 'src="' + H.getOptions().global.VMLRadialGradientURL + '" ' +
	                                            'size="' + sizex + ',' + sizey + '" ' +
	                                            'origin="0.5,0.5" ' +
	                                            'position="' + cx + ',' + cy + '" ' +
	                                            'color2="' + color2 + '" ';

	                                        addFillNode();
	                                    };

	                                // Apply radial gradient
	                                if (wrapper.added) {
	                                    applyRadialGradient();
	                                } else {
	                                    // We need to know the bounding box to get the size and position right
	                                    wrapper.onAdd = applyRadialGradient;
	                                }

	                                // The fill element's color attribute is broken in IE8 standards mode, so we
	                                // need to set the parent shape's fillcolor attribute instead.
	                                ret = color1;
	                            }

	                            // Gradients are not supported for VML stroke, return the first color. #722.
	                        } else {
	                            ret = stopColor;
	                        }

	                        // If the color is an rgba color, split it and add a fill node
	                        // to hold the opacity component
	                    } else if (regexRgba.test(color) && elem.tagName !== 'IMG') {

	                        colorObject = H.color(color);

	                        wrapper[prop + '-opacitySetter'](colorObject.get('a'), prop, elem);

	                        ret = colorObject.get('rgb');


	                    } else {
	                        var propNodes = elem.getElementsByTagName(prop); // 'stroke' or 'fill' node
	                        if (propNodes.length) {
	                            propNodes[0].opacity = 1;
	                            propNodes[0].type = 'solid';
	                        }
	                        ret = color;
	                    }

	                    return ret;
	                },

	                /**
	                 * Take a VML string and prepare it for either IE8 or IE6/IE7.
	                 * @param {Array} markup A string array of the VML markup to prepare
	                 */
	                prepVML: function(markup) {
	                    var vmlStyle = 'display:inline-block;behavior:url(#default#VML);',
	                        isIE8 = this.isIE8;

	                    markup = markup.join('');

	                    if (isIE8) { // add xmlns and style inline
	                        markup = markup.replace('/>', ' xmlns="urn:schemas-microsoft-com:vml" />');
	                        if (markup.indexOf('style="') === -1) {
	                            markup = markup.replace('/>', ' style="' + vmlStyle + '" />');
	                        } else {
	                            markup = markup.replace('style="', 'style="' + vmlStyle);
	                        }

	                    } else { // add namespace
	                        markup = markup.replace('<', '<hcv:');
	                    }

	                    return markup;
	                },

	                /**
	                 * Create rotated and aligned text
	                 * @param {String} str
	                 * @param {Number} x
	                 * @param {Number} y
	                 */
	                text: SVGRenderer.prototype.html,

	                /**
	                 * Create and return a path element
	                 * @param {Array} path
	                 */
	                path: function(path) {
	                    var attr = {
	                        // subpixel precision down to 0.1 (width and height = 1px)
	                        coordsize: '10 10'
	                    };
	                    if (isArray(path)) {
	                        attr.d = path;
	                    } else if (isObject(path)) { // attributes
	                        extend(attr, path);
	                    }
	                    // create the shape
	                    return this.createElement('shape').attr(attr);
	                },

	                /**
	                 * Create and return a circle element. In VML circles are implemented as
	                 * shapes, which is faster than v:oval
	                 * @param {Number} x
	                 * @param {Number} y
	                 * @param {Number} r
	                 */
	                circle: function(x, y, r) {
	                    var circle = this.symbol('circle');
	                    if (isObject(x)) {
	                        r = x.r;
	                        y = x.y;
	                        x = x.x;
	                    }
	                    circle.isCircle = true; // Causes x and y to mean center (#1682)
	                    circle.r = r;
	                    return circle.attr({
	                        x: x,
	                        y: y
	                    });
	                },

	                /**
	                 * Create a group using an outer div and an inner v:group to allow rotating
	                 * and flipping. A simple v:group would have problems with positioning
	                 * child HTML elements and CSS clip.
	                 *
	                 * @param {String} name The name of the group
	                 */
	                g: function(name) {
	                    var wrapper,
	                        attribs;

	                    // set the class name
	                    if (name) {
	                        attribs = {
	                            'className': 'highcharts-' + name,
	                            'class': 'highcharts-' + name
	                        };
	                    }

	                    // the div to hold HTML and clipping
	                    wrapper = this.createElement('div').attr(attribs);

	                    return wrapper;
	                },

	                /**
	                 * VML override to create a regular HTML image
	                 * @param {String} src
	                 * @param {Number} x
	                 * @param {Number} y
	                 * @param {Number} width
	                 * @param {Number} height
	                 */
	                image: function(src, x, y, width, height) {
	                    var obj = this.createElement('img')
	                        .attr({
	                            src: src
	                        });

	                    if (arguments.length > 1) {
	                        obj.attr({
	                            x: x,
	                            y: y,
	                            width: width,
	                            height: height
	                        });
	                    }
	                    return obj;
	                },

	                /**
	                 * For rectangles, VML uses a shape for rect to overcome bugs and rotation problems
	                 */
	                createElement: function(nodeName) {
	                    return nodeName === 'rect' ?
	                        this.symbol(nodeName) :
	                        SVGRenderer.prototype.createElement.call(this, nodeName);
	                },

	                /**
	                 * In the VML renderer, each child of an inverted div (group) is inverted
	                 * @param {Object} element
	                 * @param {Object} parentNode
	                 */
	                invertChild: function(element, parentNode) {
	                    var ren = this,
	                        parentStyle = parentNode.style,
	                        imgStyle = element.tagName === 'IMG' && element.style; // #1111

	                    css(element, {
	                        flip: 'x',
	                        left: pInt(parentStyle.width) - (imgStyle ? pInt(imgStyle.top) : 1),
	                        top: pInt(parentStyle.height) - (imgStyle ? pInt(imgStyle.left) : 1),
	                        rotation: -90
	                    });

	                    // Recursively invert child elements, needed for nested composite
	                    // shapes like box plots and error bars. #1680, #1806.
	                    each(element.childNodes, function(child) {
	                        ren.invertChild(child, element);
	                    });
	                },

	                /**
	                 * Symbol definitions that override the parent SVG renderer's symbols
	                 *
	                 */
	                symbols: {
	                    // VML specific arc function
	                    arc: function(x, y, w, h, options) {
	                        var start = options.start,
	                            end = options.end,
	                            radius = options.r || w || h,
	                            innerRadius = options.innerR,
	                            cosStart = Math.cos(start),
	                            sinStart = Math.sin(start),
	                            cosEnd = Math.cos(end),
	                            sinEnd = Math.sin(end),
	                            ret;

	                        if (end - start === 0) { // no angle, don't show it.
	                            return ['x'];
	                        }

	                        ret = [
	                            'wa', // clockwise arc to
	                            x - radius, // left
	                            y - radius, // top
	                            x + radius, // right
	                            y + radius, // bottom
	                            x + radius * cosStart, // start x
	                            y + radius * sinStart, // start y
	                            x + radius * cosEnd, // end x
	                            y + radius * sinEnd // end y
	                        ];

	                        if (options.open && !innerRadius) {
	                            ret.push(
	                                'e',
	                                'M',
	                                x, // - innerRadius,
	                                y // - innerRadius
	                            );
	                        }

	                        ret.push(
	                            'at', // anti clockwise arc to
	                            x - innerRadius, // left
	                            y - innerRadius, // top
	                            x + innerRadius, // right
	                            y + innerRadius, // bottom
	                            x + innerRadius * cosEnd, // start x
	                            y + innerRadius * sinEnd, // start y
	                            x + innerRadius * cosStart, // end x
	                            y + innerRadius * sinStart, // end y
	                            'x', // finish path
	                            'e' // close
	                        );

	                        ret.isArc = true;
	                        return ret;

	                    },
	                    // Add circle symbol path. This performs significantly faster than v:oval.
	                    circle: function(x, y, w, h, wrapper) {

	                        if (wrapper && defined(wrapper.r)) {
	                            w = h = 2 * wrapper.r;
	                        }

	                        // Center correction, #1682
	                        if (wrapper && wrapper.isCircle) {
	                            x -= w / 2;
	                            y -= h / 2;
	                        }

	                        // Return the path
	                        return [
	                            'wa', // clockwisearcto
	                            x, // left
	                            y, // top
	                            x + w, // right
	                            y + h, // bottom
	                            x + w, // start x
	                            y + h / 2, // start y
	                            x + w, // end x
	                            y + h / 2, // end y
	                            //'x', // finish path
	                            'e' // close
	                        ];
	                    },
	                    /**
	                     * Add rectangle symbol path which eases rotation and omits arcsize problems
	                     * compared to the built-in VML roundrect shape. When borders are not rounded,
	                     * use the simpler square path, else use the callout path without the arrow.
	                     */
	                    rect: function(x, y, w, h, options) {
	                        return SVGRenderer.prototype.symbols[!defined(options) || !options.r ? 'square' : 'callout'].call(0, x, y, w, h, options);
	                    }
	                }
	            };
	            H.VMLRenderer = VMLRenderer = function() {
	                this.init.apply(this, arguments);
	            };
	            VMLRenderer.prototype = merge(SVGRenderer.prototype, VMLRendererExtension);

	            // general renderer
	            H.Renderer = VMLRenderer;
	        }

	        // This method is used with exporting in old IE, when emulating SVG (see #2314)
	        SVGRenderer.prototype.measureSpanWidth = function(text, styles) {
	            var measuringSpan = doc.createElement('span'),
	                offsetWidth,
	                textNode = doc.createTextNode(text);

	            measuringSpan.appendChild(textNode);
	            css(measuringSpan, styles);
	            this.box.appendChild(measuringSpan);
	            offsetWidth = measuringSpan.offsetWidth;
	            discardElement(measuringSpan); // #2463
	            return offsetWidth;
	        };


	        /* ****************************************************************************
	         *                                                                            *
	         * END OF INTERNET EXPLORER <= 8 SPECIFIC CODE                                *
	         *                                                                            *
	         *****************************************************************************/


	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var color = H.color,
	            each = H.each,
	            getTZOffset = H.getTZOffset,
	            isTouchDevice = H.isTouchDevice,
	            merge = H.merge,
	            pick = H.pick,
	            svg = H.svg,
	            win = H.win;

	        /* ****************************************************************************
	         * Handle the options                                                         *
	         *****************************************************************************/
	        H.defaultOptions = {

	            colors: '#7cb5ec #434348 #90ed7d #f7a35c #8085e9 #f15c80 #e4d354 #2b908f #f45b5b #91e8e1'.split(' '),

	            symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],
	            lang: {
	                loading: 'Loading...',
	                months: [
	                    'January', 'February', 'March', 'April', 'May', 'June', 'July',
	                    'August', 'September', 'October', 'November', 'December'
	                ],
	                shortMonths: [
	                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',
	                    'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
	                ],
	                weekdays: [
	                    'Sunday', 'Monday', 'Tuesday', 'Wednesday',
	                    'Thursday', 'Friday', 'Saturday'
	                ],
	                // invalidDate: '',
	                decimalPoint: '.',
	                numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'], // SI prefixes used in axis labels
	                resetZoom: 'Reset zoom',
	                resetZoomTitle: 'Reset zoom level 1:1',
	                thousandsSep: ' '
	            },
	            global: {
	                useUTC: true,
	                //timezoneOffset: 0,

	                VMLRadialGradientURL: 'http://code.highcharts.com/5.0.7/gfx/vml-radial-gradient.png'

	            },
	            chart: {
	                //animation: true,
	                //alignTicks: false,
	                //reflow: true,
	                //className: null,
	                //events: { load, selection },
	                //margin: [null],
	                //marginTop: null,
	                //marginRight: null,
	                //marginBottom: null,
	                //marginLeft: null,
	                borderRadius: 0,

	                defaultSeriesType: 'line',
	                ignoreHiddenSeries: true,
	                //inverted: false,
	                spacing: [10, 10, 15, 10],
	                //spacingTop: 10,
	                //spacingRight: 10,
	                //spacingBottom: 15,
	                //spacingLeft: 10,
	                //zoomType: ''
	                resetZoomButton: {
	                    theme: {
	                        zIndex: 20
	                    },
	                    position: {
	                        align: 'right',
	                        x: -10,
	                        //verticalAlign: 'top',
	                        y: 10
	                    }
	                    // relativeTo: 'plot'
	                },
	                width: null,
	                height: null,


	                borderColor: '#335cad',
	                //borderWidth: 0,
	                //style: {
	                //	fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif', // default font
	                //	fontSize: '12px'
	                //},
	                backgroundColor: '#ffffff',
	                //plotBackgroundColor: null,
	                plotBorderColor: '#cccccc'
	                    //plotBorderWidth: 0,
	                    //plotShadow: false

	            },
	            title: {
	                text: 'Chart title',
	                align: 'center',
	                // floating: false,
	                margin: 15,
	                // x: 0,
	                // verticalAlign: 'top',
	                // y: null,
	                // style: {}, // defined inline
	                widthAdjust: -44

	            },
	            subtitle: {
	                text: '',
	                align: 'center',
	                // floating: false
	                // x: 0,
	                // verticalAlign: 'top',
	                // y: null,
	                // style: {}, // defined inline
	                widthAdjust: -44
	            },

	            plotOptions: {},
	            labels: {
	                //items: [],
	                style: {
	                    //font: defaultFont,
	                    position: 'absolute',
	                    color: '#333333'
	                }
	            },
	            legend: {
	                enabled: true,
	                align: 'center',
	                //floating: false,
	                layout: 'horizontal',
	                labelFormatter: function() {
	                    return this.name;
	                },
	                //borderWidth: 0,
	                borderColor: '#999999',
	                borderRadius: 0,
	                navigation: {

	                    activeColor: '#003399',
	                    inactiveColor: '#cccccc'

	                    // animation: true,
	                    // arrowSize: 12
	                    // style: {} // text styles
	                },
	                // margin: 20,
	                // reversed: false,
	                // backgroundColor: null,
	                /*style: {
	                	padding: '5px'
	                },*/

	                itemStyle: {
	                    color: '#333333',
	                    fontSize: '12px',
	                    fontWeight: 'bold'
	                },
	                itemHoverStyle: {
	                    //cursor: 'pointer', removed as of #601
	                    color: '#000000'
	                },
	                itemHiddenStyle: {
	                    color: '#cccccc'
	                },
	                shadow: false,

	                itemCheckboxStyle: {
	                    position: 'absolute',
	                    width: '13px', // for IE precision
	                    height: '13px'
	                },
	                // itemWidth: undefined,
	                squareSymbol: true,
	                // symbolRadius: 0,
	                // symbolWidth: 16,
	                symbolPadding: 5,
	                verticalAlign: 'bottom',
	                // width: undefined,
	                x: 0,
	                y: 0,
	                title: {
	                    //text: null,

	                    style: {
	                        fontWeight: 'bold'
	                    }

	                }
	            },

	            loading: {
	                // hideDuration: 100,
	                // showDuration: 0,

	                labelStyle: {
	                    fontWeight: 'bold',
	                    position: 'relative',
	                    top: '45%'
	                },
	                style: {
	                    position: 'absolute',
	                    backgroundColor: '#ffffff',
	                    opacity: 0.5,
	                    textAlign: 'center'
	                }

	            },

	            tooltip: {
	                enabled: true,
	                animation: svg,
	                //crosshairs: null,
	                borderRadius: 3,
	                dateTimeLabelFormats: {
	                    millisecond: '%A, %b %e, %H:%M:%S.%L',
	                    second: '%A, %b %e, %H:%M:%S',
	                    minute: '%A, %b %e, %H:%M',
	                    hour: '%A, %b %e, %H:%M',
	                    day: '%A, %b %e, %Y',
	                    week: 'Week from %A, %b %e, %Y',
	                    month: '%B %Y',
	                    year: '%Y'
	                },
	                footerFormat: '',
	                //formatter: defaultFormatter,
	                /* todo: em font-size when finished comparing against HC4
	                headerFormat: '<span style="font-size: 0.85em">{point.key}</span><br/>',
	                */
	                padding: 8,

	                //shape: 'callout',
	                //shared: false,
	                snap: isTouchDevice ? 25 : 10,

	                backgroundColor: color('#f7f7f7').setOpacity(0.85).get(),
	                borderWidth: 1,
	                headerFormat: '<span style="font-size: 10px">{point.key}</span><br/>',
	                pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b><br/>',
	                shadow: true,
	                style: {
	                    color: '#333333',
	                    cursor: 'default',
	                    fontSize: '12px',
	                    pointerEvents: 'none', // #1686 http://caniuse.com/#feat=pointer-events
	                    whiteSpace: 'nowrap'
	                }

	                //xDateFormat: '%A, %b %e, %Y',
	                //valueDecimals: null,
	                //valuePrefix: '',
	                //valueSuffix: ''
	            },

	            credits: {
	                enabled: true,
	                href: 'http://www.highcharts.com',
	                position: {
	                    align: 'right',
	                    x: -10,
	                    verticalAlign: 'bottom',
	                    y: -5
	                },

	                style: {
	                    cursor: 'pointer',
	                    color: '#999999',
	                    fontSize: '9px'
	                },

	                text: 'Highcharts.com'
	            }
	        };



	        /**
	         * Sets the getTimezoneOffset function. If the timezone option is set, a default
	         * getTimezoneOffset function with that timezone is returned. If not, the
	         * specified getTimezoneOffset function is returned. If neither are specified,
	         * undefined is returned.
	         * @return {function} a getTimezoneOffset function or undefined
	         */
	        function getTimezoneOffsetOption() {
	            var globalOptions = H.defaultOptions.global,
	                moment = win.moment;

	            if (globalOptions.timezone) {
	                if (!moment) {
	                    // getTimezoneOffset-function stays undefined because it depends on
	                    // Moment.js
	                    H.error(25);

	                } else {
	                    return function(timestamp) {
	                        return -moment.tz(
	                            timestamp,
	                            globalOptions.timezone
	                        ).utcOffset();
	                    };
	                }
	            }

	            // If not timezone is set, look for the getTimezoneOffset callback
	            return globalOptions.useUTC && globalOptions.getTimezoneOffset;
	        }

	        /**
	         * Set the time methods globally based on the useUTC option. Time method can be
	         *   either local time or UTC (default). It is called internally on initiating
	         *   Highcharts and after running `Highcharts.setOptions`.
	         *
	         * @private
	         */
	        function setTimeMethods() {
	            var globalOptions = H.defaultOptions.global,
	                Date,
	                useUTC = globalOptions.useUTC,
	                GET = useUTC ? 'getUTC' : 'get',
	                SET = useUTC ? 'setUTC' : 'set';

	            H.Date = Date = globalOptions.Date || win.Date; // Allow using a different Date class
	            Date.hcTimezoneOffset = useUTC && globalOptions.timezoneOffset;
	            Date.hcGetTimezoneOffset = getTimezoneOffsetOption();
	            Date.hcMakeTime = function(year, month, date, hours, minutes, seconds) {
	                var d;
	                if (useUTC) {
	                    d = Date.UTC.apply(0, arguments);
	                    d += getTZOffset(d);
	                } else {
	                    d = new Date(
	                        year,
	                        month,
	                        pick(date, 1),
	                        pick(hours, 0),
	                        pick(minutes, 0),
	                        pick(seconds, 0)
	                    ).getTime();
	                }
	                return d;
	            };
	            each(['Minutes', 'Hours', 'Day', 'Date', 'Month', 'FullYear'], function(s) {
	                Date['hcGet' + s] = GET + s;
	            });
	            each(['Milliseconds', 'Seconds', 'Minutes', 'Hours', 'Date', 'Month', 'FullYear'], function(s) {
	                Date['hcSet' + s] = SET + s;
	            });
	        }

	        /**
	         * Merge the default options with custom options and return the new options structure
	         * @param {Object} options The new custom options
	         */
	        H.setOptions = function(options) {

	            // Copy in the default options
	            H.defaultOptions = merge(true, H.defaultOptions, options);

	            // Apply UTC
	            setTimeMethods();

	            return H.defaultOptions;
	        };

	        /**
	         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules
	         * wasn't enough because the setOptions method created a new object.
	         */
	        H.getOptions = function() {
	            return H.defaultOptions;
	        };


	        // Series defaults
	        H.defaultPlotOptions = H.defaultOptions.plotOptions;

	        // set the default time methods
	        setTimeMethods();

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var arrayMax = H.arrayMax,
	            arrayMin = H.arrayMin,
	            defined = H.defined,
	            destroyObjectProperties = H.destroyObjectProperties,
	            each = H.each,
	            erase = H.erase,
	            merge = H.merge,
	            pick = H.pick;
	        /*
	         * The object wrapper for plot lines and plot bands
	         * @param {Object} options
	         */
	        H.PlotLineOrBand = function(axis, options) {
	            this.axis = axis;

	            if (options) {
	                this.options = options;
	                this.id = options.id;
	            }
	        };

	        H.PlotLineOrBand.prototype = {

	            /**
	             * Render the plot line or plot band. If it is already existing,
	             * move it.
	             */
	            render: function() {
	                var plotLine = this,
	                    axis = plotLine.axis,
	                    horiz = axis.horiz,
	                    options = plotLine.options,
	                    optionsLabel = options.label,
	                    label = plotLine.label,
	                    to = options.to,
	                    from = options.from,
	                    value = options.value,
	                    isBand = defined(from) && defined(to),
	                    isLine = defined(value),
	                    svgElem = plotLine.svgElem,
	                    isNew = !svgElem,
	                    path = [],
	                    addEvent,
	                    eventType,
	                    color = options.color,
	                    zIndex = pick(options.zIndex, 0),
	                    events = options.events,
	                    attribs = {
	                        'class': 'highcharts-plot-' + (isBand ? 'band ' : 'line ') + (options.className || '')
	                    },
	                    groupAttribs = {},
	                    renderer = axis.chart.renderer,
	                    groupName = isBand ? 'bands' : 'lines',
	                    group,
	                    log2lin = axis.log2lin;

	                // logarithmic conversion
	                if (axis.isLog) {
	                    from = log2lin(from);
	                    to = log2lin(to);
	                    value = log2lin(value);
	                }


	                // Set the presentational attributes
	                if (isLine) {
	                    attribs = {
	                        stroke: color,
	                        'stroke-width': options.width
	                    };
	                    if (options.dashStyle) {
	                        attribs.dashstyle = options.dashStyle;
	                    }

	                } else if (isBand) { // plot band
	                    if (color) {
	                        attribs.fill = color;
	                    }
	                    if (options.borderWidth) {
	                        attribs.stroke = options.borderColor;
	                        attribs['stroke-width'] = options.borderWidth;
	                    }
	                }


	                // Grouping and zIndex
	                groupAttribs.zIndex = zIndex;
	                groupName += '-' + zIndex;

	                group = axis[groupName];
	                if (!group) {
	                    axis[groupName] = group = renderer.g('plot-' + groupName)
	                        .attr(groupAttribs).add();
	                }

	                // Create the path
	                if (isNew) {
	                    plotLine.svgElem = svgElem =
	                        renderer
	                        .path()
	                        .attr(attribs).add(group);
	                }


	                // Set the path or return
	                if (isLine) {
	                    path = axis.getPlotLinePath(value, svgElem.strokeWidth());
	                } else if (isBand) { // plot band
	                    path = axis.getPlotBandPath(from, to, options);
	                } else {
	                    return;
	                }


	                // common for lines and bands
	                if (isNew && path && path.length) {
	                    svgElem.attr({
	                        d: path
	                    });

	                    // events
	                    if (events) {
	                        addEvent = function(eventType) {
	                            svgElem.on(eventType, function(e) {
	                                events[eventType].apply(plotLine, [e]);
	                            });
	                        };
	                        for (eventType in events) {
	                            addEvent(eventType);
	                        }
	                    }
	                } else if (svgElem) {
	                    if (path) {
	                        svgElem.show();
	                        svgElem.animate({
	                            d: path
	                        });
	                    } else {
	                        svgElem.hide();
	                        if (label) {
	                            plotLine.label = label = label.destroy();
	                        }
	                    }
	                }

	                // the plot band/line label
	                if (optionsLabel && defined(optionsLabel.text) && path && path.length &&
	                    axis.width > 0 && axis.height > 0 && !path.flat) {
	                    // apply defaults
	                    optionsLabel = merge({
	                        align: horiz && isBand && 'center',
	                        x: horiz ? !isBand && 4 : 10,
	                        verticalAlign: !horiz && isBand && 'middle',
	                        y: horiz ? isBand ? 16 : 10 : isBand ? 6 : -4,
	                        rotation: horiz && !isBand && 90
	                    }, optionsLabel);

	                    this.renderLabel(optionsLabel, path, isBand, zIndex);

	                } else if (label) { // move out of sight
	                    label.hide();
	                }

	                // chainable
	                return plotLine;
	            },

	            /**
	             * Render and align label for plot line or band.
	             */
	            renderLabel: function(optionsLabel, path, isBand, zIndex) {
	                var plotLine = this,
	                    label = plotLine.label,
	                    renderer = plotLine.axis.chart.renderer,
	                    attribs,
	                    xs,
	                    ys,
	                    x,
	                    y;

	                // add the SVG element
	                if (!label) {
	                    attribs = {
	                        align: optionsLabel.textAlign || optionsLabel.align,
	                        rotation: optionsLabel.rotation,
	                        'class': 'highcharts-plot-' + (isBand ? 'band' : 'line') + '-label ' + (optionsLabel.className || '')
	                    };

	                    attribs.zIndex = zIndex;

	                    plotLine.label = label = renderer.text(
	                            optionsLabel.text,
	                            0,
	                            0,
	                            optionsLabel.useHTML
	                        )
	                        .attr(attribs)
	                        .add();


	                    label.css(optionsLabel.style);

	                }

	                // get the bounding box and align the label
	                // #3000 changed to better handle choice between plotband or plotline
	                xs = [path[1], path[4], (isBand ? path[6] : path[1])];
	                ys = [path[2], path[5], (isBand ? path[7] : path[2])];
	                x = arrayMin(xs);
	                y = arrayMin(ys);

	                label.align(optionsLabel, false, {
	                    x: x,
	                    y: y,
	                    width: arrayMax(xs) - x,
	                    height: arrayMax(ys) - y
	                });
	                label.show();
	            },

	            /**
	             * Remove the plot line or band
	             */
	            destroy: function() {
	                // remove it from the lookup
	                erase(this.axis.plotLinesAndBands, this);

	                delete this.axis;
	                destroyObjectProperties(this);
	            }
	        };

	        /**
	         * Object with members for extending the Axis prototype
	         * @todo Extend directly instead of adding object to Highcharts first
	         */

	        H.AxisPlotLineOrBandExtension = {

	            /**
	             * Create the path for a plot band
	             */
	            getPlotBandPath: function(from, to) {
	                var toPath = this.getPlotLinePath(to, null, null, true),
	                    path = this.getPlotLinePath(from, null, null, true);

	                if (path && toPath) {

	                    // Flat paths don't need labels (#3836)
	                    path.flat = path.toString() === toPath.toString();

	                    path.push(
	                        toPath[4],
	                        toPath[5],
	                        toPath[1],
	                        toPath[2],
	                        'z' // #5909
	                    );
	                } else { // outside the axis area
	                    path = null;
	                }

	                return path;
	            },

	            addPlotBand: function(options) {
	                return this.addPlotBandOrLine(options, 'plotBands');
	            },

	            addPlotLine: function(options) {
	                return this.addPlotBandOrLine(options, 'plotLines');
	            },

	            /**
	             * Add a plot band or plot line after render time
	             *
	             * @param options {Object} The plotBand or plotLine configuration object
	             */
	            addPlotBandOrLine: function(options, coll) {
	                var obj = new H.PlotLineOrBand(this, options).render(),
	                    userOptions = this.userOptions;

	                if (obj) { // #2189
	                    // Add it to the user options for exporting and Axis.update
	                    if (coll) {
	                        userOptions[coll] = userOptions[coll] || [];
	                        userOptions[coll].push(options);
	                    }
	                    this.plotLinesAndBands.push(obj);
	                }

	                return obj;
	            },

	            /**
	             * Remove a plot band or plot line from the chart by id
	             * @param {Object} id
	             */
	            removePlotBandOrLine: function(id) {
	                var plotLinesAndBands = this.plotLinesAndBands,
	                    options = this.options,
	                    userOptions = this.userOptions,
	                    i = plotLinesAndBands.length;
	                while (i--) {
	                    if (plotLinesAndBands[i].id === id) {
	                        plotLinesAndBands[i].destroy();
	                    }
	                }
	                each([options.plotLines || [], userOptions.plotLines || [], options.plotBands || [], userOptions.plotBands || []], function(arr) {
	                    i = arr.length;
	                    while (i--) {
	                        if (arr[i].id === id) {
	                            erase(arr, arr[i]);
	                        }
	                    }
	                });
	            }
	        };

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var correctFloat = H.correctFloat,
	            defined = H.defined,
	            destroyObjectProperties = H.destroyObjectProperties,
	            isNumber = H.isNumber,
	            merge = H.merge,
	            pick = H.pick,
	            deg2rad = H.deg2rad;

	        /**
	         * The Tick class
	         */
	        H.Tick = function(axis, pos, type, noLabel) {
	            this.axis = axis;
	            this.pos = pos;
	            this.type = type || '';
	            this.isNew = true;

	            if (!type && !noLabel) {
	                this.addLabel();
	            }
	        };

	        H.Tick.prototype = {
	            /**
	             * Write the tick label
	             */
	            addLabel: function() {
	                var tick = this,
	                    axis = tick.axis,
	                    options = axis.options,
	                    chart = axis.chart,
	                    categories = axis.categories,
	                    names = axis.names,
	                    pos = tick.pos,
	                    labelOptions = options.labels,
	                    str,
	                    tickPositions = axis.tickPositions,
	                    isFirst = pos === tickPositions[0],
	                    isLast = pos === tickPositions[tickPositions.length - 1],
	                    value = categories ?
	                    pick(categories[pos], names[pos], pos) :
	                    pos,
	                    label = tick.label,
	                    tickPositionInfo = tickPositions.info,
	                    dateTimeLabelFormat;

	                // Set the datetime label format. If a higher rank is set for this position, use that. If not,
	                // use the general format.
	                if (axis.isDatetimeAxis && tickPositionInfo) {
	                    dateTimeLabelFormat =
	                        options.dateTimeLabelFormats[
	                            tickPositionInfo.higherRanks[pos] || tickPositionInfo.unitName
	                        ];
	                }
	                // set properties for access in render method
	                tick.isFirst = isFirst;
	                tick.isLast = isLast;

	                // get the string
	                str = axis.labelFormatter.call({
	                    axis: axis,
	                    chart: chart,
	                    isFirst: isFirst,
	                    isLast: isLast,
	                    dateTimeLabelFormat: dateTimeLabelFormat,
	                    value: axis.isLog ? correctFloat(axis.lin2log(value)) : value
	                });

	                // prepare CSS
	                //css = width && { width: Math.max(1, Math.round(width - 2 * (labelOptions.padding || 10))) + 'px' };

	                // first call
	                if (!defined(label)) {

	                    tick.label = label =
	                        defined(str) && labelOptions.enabled ?
	                        chart.renderer.text(
	                            str,
	                            0,
	                            0,
	                            labelOptions.useHTML
	                        )

	                    // without position absolute, IE export sometimes is wrong
	                    .css(merge(labelOptions.style))

	                    .add(axis.labelGroup):
	                        null;
	                    tick.labelLength = label && label.getBBox().width; // Un-rotated length
	                    tick.rotation = 0; // Base value to detect change for new calls to getBBox

	                    // update
	                } else if (label) {
	                    label.attr({
	                        text: str
	                    });
	                }
	            },

	            /**
	             * Get the offset height or width of the label
	             */
	            getLabelSize: function() {
	                return this.label ?
	                    this.label.getBBox()[this.axis.horiz ? 'height' : 'width'] :
	                    0;
	            },

	            /**
	             * Handle the label overflow by adjusting the labels to the left and right edge, or
	             * hide them if they collide into the neighbour label.
	             */
	            handleOverflow: function(xy) {
	                var axis = this.axis,
	                    pxPos = xy.x,
	                    chartWidth = axis.chart.chartWidth,
	                    spacing = axis.chart.spacing,
	                    leftBound = pick(axis.labelLeft, Math.min(axis.pos, spacing[3])),
	                    rightBound = pick(axis.labelRight, Math.max(axis.pos + axis.len, chartWidth - spacing[1])),
	                    label = this.label,
	                    rotation = this.rotation,
	                    factor = {
	                        left: 0,
	                        center: 0.5,
	                        right: 1
	                    }[axis.labelAlign],
	                    labelWidth = label.getBBox().width,
	                    slotWidth = axis.getSlotWidth(),
	                    modifiedSlotWidth = slotWidth,
	                    xCorrection = factor,
	                    goRight = 1,
	                    leftPos,
	                    rightPos,
	                    textWidth,
	                    css = {};

	                // Check if the label overshoots the chart spacing box. If it does, move it.
	                // If it now overshoots the slotWidth, add ellipsis.
	                if (!rotation) {
	                    leftPos = pxPos - factor * labelWidth;
	                    rightPos = pxPos + (1 - factor) * labelWidth;

	                    if (leftPos < leftBound) {
	                        modifiedSlotWidth = xy.x + modifiedSlotWidth * (1 - factor) - leftBound;
	                    } else if (rightPos > rightBound) {
	                        modifiedSlotWidth = rightBound - xy.x + modifiedSlotWidth * factor;
	                        goRight = -1;
	                    }

	                    modifiedSlotWidth = Math.min(slotWidth, modifiedSlotWidth); // #4177
	                    if (modifiedSlotWidth < slotWidth && axis.labelAlign === 'center') {
	                        xy.x += goRight * (slotWidth - modifiedSlotWidth - xCorrection *
	                            (slotWidth - Math.min(labelWidth, modifiedSlotWidth)));
	                    }
	                    // If the label width exceeds the available space, set a text width to be
	                    // picked up below. Also, if a width has been set before, we need to set a new
	                    // one because the reported labelWidth will be limited by the box (#3938).
	                    if (labelWidth > modifiedSlotWidth || (axis.autoRotation && (label.styles || {}).width)) {
	                        textWidth = modifiedSlotWidth;
	                    }

	                    // Add ellipsis to prevent rotated labels to be clipped against the edge of the chart
	                } else if (rotation < 0 && pxPos - factor * labelWidth < leftBound) {
	                    textWidth = Math.round(pxPos / Math.cos(rotation * deg2rad) - leftBound);
	                } else if (rotation > 0 && pxPos + factor * labelWidth > rightBound) {
	                    textWidth = Math.round((chartWidth - pxPos) / Math.cos(rotation * deg2rad));
	                }

	                if (textWidth) {
	                    css.width = textWidth;
	                    if (!(axis.options.labels.style || {}).textOverflow) {
	                        css.textOverflow = 'ellipsis';
	                    }
	                    label.css(css);
	                }
	            },

	            /**
	             * Get the x and y position for ticks and labels
	             */
	            getPosition: function(horiz, pos, tickmarkOffset, old) {
	                var axis = this.axis,
	                    chart = axis.chart,
	                    cHeight = (old && chart.oldChartHeight) || chart.chartHeight;

	                return {
	                    x: horiz ?
	                        axis.translate(pos + tickmarkOffset, null, null, old) + axis.transB : axis.left + axis.offset +
	                        (axis.opposite ?
	                            ((old && chart.oldChartWidth) || chart.chartWidth) - axis.right - axis.left :
	                            0
	                        ),

	                    y: horiz ?
	                        cHeight - axis.bottom + axis.offset - (axis.opposite ? axis.height : 0) : cHeight - axis.translate(pos + tickmarkOffset, null, null, old) - axis.transB
	                };

	            },

	            /**
	             * Get the x, y position of the tick label
	             */
	            getLabelPosition: function(x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {
	                var axis = this.axis,
	                    transA = axis.transA,
	                    reversed = axis.reversed,
	                    staggerLines = axis.staggerLines,
	                    rotCorr = axis.tickRotCorr || {
	                        x: 0,
	                        y: 0
	                    },
	                    yOffset = labelOptions.y,
	                    line;

	                if (!defined(yOffset)) {
	                    if (axis.side === 0) {
	                        yOffset = label.rotation ? -8 : -label.getBBox().height;
	                    } else if (axis.side === 2) {
	                        yOffset = rotCorr.y + 8;
	                    } else {
	                        // #3140, #3140
	                        yOffset = Math.cos(label.rotation * deg2rad) * (rotCorr.y - label.getBBox(false, 0).height / 2);
	                    }
	                }

	                x = x + labelOptions.x + rotCorr.x - (tickmarkOffset && horiz ?
	                    tickmarkOffset * transA * (reversed ? -1 : 1) : 0);
	                y = y + yOffset - (tickmarkOffset && !horiz ?
	                    tickmarkOffset * transA * (reversed ? 1 : -1) : 0);

	                // Correct for staggered labels
	                if (staggerLines) {
	                    line = (index / (step || 1) % staggerLines);
	                    if (axis.opposite) {
	                        line = staggerLines - line - 1;
	                    }
	                    y += line * (axis.labelOffset / staggerLines);
	                }

	                return {
	                    x: x,
	                    y: Math.round(y)
	                };
	            },

	            /**
	             * Extendible method to return the path of the marker
	             */
	            getMarkPath: function(x, y, tickLength, tickWidth, horiz, renderer) {
	                return renderer.crispLine([
	                    'M',
	                    x,
	                    y,
	                    'L',
	                    x + (horiz ? 0 : -tickLength),
	                    y + (horiz ? tickLength : 0)
	                ], tickWidth);
	            },

	            /**
	             * Put everything in place
	             *
	             * @param index {Number}
	             * @param old {Boolean} Use old coordinates to prepare an animation into new position
	             */
	            render: function(index, old, opacity) {
	                var tick = this,
	                    axis = tick.axis,
	                    options = axis.options,
	                    chart = axis.chart,
	                    renderer = chart.renderer,
	                    horiz = axis.horiz,
	                    type = tick.type,
	                    label = tick.label,
	                    pos = tick.pos,
	                    labelOptions = options.labels,
	                    gridLine = tick.gridLine,
	                    tickPrefix = type ? type + 'Tick' : 'tick',
	                    tickSize = axis.tickSize(tickPrefix),
	                    gridLinePath,
	                    mark = tick.mark,
	                    isNewMark = !mark,
	                    step = labelOptions.step,
	                    attribs = {},
	                    show = true,
	                    tickmarkOffset = axis.tickmarkOffset,
	                    xy = tick.getPosition(horiz, pos, tickmarkOffset, old),
	                    x = xy.x,
	                    y = xy.y,
	                    reverseCrisp = ((horiz && x === axis.pos + axis.len) ||
	                        (!horiz && y === axis.pos)) ? -1 : 1; // #1480, #1687


	                var gridPrefix = type ? type + 'Grid' : 'grid',
	                    gridLineWidth = options[gridPrefix + 'LineWidth'],
	                    gridLineColor = options[gridPrefix + 'LineColor'],
	                    dashStyle = options[gridPrefix + 'LineDashStyle'],
	                    tickWidth = pick(options[tickPrefix + 'Width'], !type && axis.isXAxis ? 1 : 0), // X axis defaults to 1
	                    tickColor = options[tickPrefix + 'Color'];


	                opacity = pick(opacity, 1);
	                this.isActive = true;

	                // Create the grid line
	                if (!gridLine) {

	                    attribs.stroke = gridLineColor;
	                    attribs['stroke-width'] = gridLineWidth;
	                    if (dashStyle) {
	                        attribs.dashstyle = dashStyle;
	                    }

	                    if (!type) {
	                        attribs.zIndex = 1;
	                    }
	                    if (old) {
	                        attribs.opacity = 0;
	                    }
	                    tick.gridLine = gridLine = renderer.path()
	                        .attr(attribs)
	                        .addClass('highcharts-' + (type ? type + '-' : '') + 'grid-line')
	                        .add(axis.gridGroup);
	                }

	                // If the parameter 'old' is set, the current call will be followed
	                // by another call, therefore do not do any animations this time
	                if (!old && gridLine) {
	                    gridLinePath = axis.getPlotLinePath(pos + tickmarkOffset, gridLine.strokeWidth() * reverseCrisp, old, true);
	                    if (gridLinePath) {
	                        gridLine[tick.isNew ? 'attr' : 'animate']({
	                            d: gridLinePath,
	                            opacity: opacity
	                        });
	                    }
	                }

	                // create the tick mark
	                if (tickSize) {

	                    // negate the length
	                    if (axis.opposite) {
	                        tickSize[0] = -tickSize[0];
	                    }

	                    // First time, create it
	                    if (isNewMark) {
	                        tick.mark = mark = renderer.path()
	                            .addClass('highcharts-' + (type ? type + '-' : '') + 'tick')
	                            .add(axis.axisGroup);


	                        mark.attr({
	                            stroke: tickColor,
	                            'stroke-width': tickWidth
	                        });

	                    }
	                    mark[isNewMark ? 'attr' : 'animate']({
	                        d: tick.getMarkPath(x, y, tickSize[0], mark.strokeWidth() * reverseCrisp, horiz, renderer),
	                        opacity: opacity
	                    });

	                }

	                // the label is created on init - now move it into place
	                if (label && isNumber(x)) {
	                    label.xy = xy = tick.getLabelPosition(x, y, label, horiz, labelOptions, tickmarkOffset, index, step);

	                    // Apply show first and show last. If the tick is both first and last, it is
	                    // a single centered tick, in which case we show the label anyway (#2100).
	                    if ((tick.isFirst && !tick.isLast && !pick(options.showFirstLabel, 1)) ||
	                        (tick.isLast && !tick.isFirst && !pick(options.showLastLabel, 1))) {
	                        show = false;

	                        // Handle label overflow and show or hide accordingly
	                    } else if (horiz && !axis.isRadial && !labelOptions.step &&
	                        !labelOptions.rotation && !old && opacity !== 0) {
	                        tick.handleOverflow(xy);
	                    }

	                    // apply step
	                    if (step && index % step) {
	                        // show those indices dividable by step
	                        show = false;
	                    }

	                    // Set the new position, and show or hide
	                    if (show && isNumber(xy.y)) {
	                        xy.opacity = opacity;
	                        label[tick.isNew ? 'attr' : 'animate'](xy);
	                    } else {
	                        label.attr('y', -9999); // #1338
	                    }
	                    tick.isNew = false;
	                }
	            },

	            /**
	             * Destructor for the tick prototype
	             */
	            destroy: function() {
	                destroyObjectProperties(this, this.axis);
	            }
	        };

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';

	        var addEvent = H.addEvent,
	            animObject = H.animObject,
	            arrayMax = H.arrayMax,
	            arrayMin = H.arrayMin,
	            AxisPlotLineOrBandExtension = H.AxisPlotLineOrBandExtension,
	            color = H.color,
	            correctFloat = H.correctFloat,
	            defaultOptions = H.defaultOptions,
	            defined = H.defined,
	            deg2rad = H.deg2rad,
	            destroyObjectProperties = H.destroyObjectProperties,
	            each = H.each,
	            extend = H.extend,
	            fireEvent = H.fireEvent,
	            format = H.format,
	            getMagnitude = H.getMagnitude,
	            grep = H.grep,
	            inArray = H.inArray,
	            isArray = H.isArray,
	            isNumber = H.isNumber,
	            isString = H.isString,
	            merge = H.merge,
	            normalizeTickInterval = H.normalizeTickInterval,
	            pick = H.pick,
	            PlotLineOrBand = H.PlotLineOrBand,
	            removeEvent = H.removeEvent,
	            splat = H.splat,
	            syncTimeout = H.syncTimeout,
	            Tick = H.Tick;

	        /**
	         * Create a new axis object.
	         * @constructor Axis
	         * @param {Object} chart
	         * @param {Object} options
	         */
	        H.Axis = function() {
	            this.init.apply(this, arguments);
	        };

	        H.Axis.prototype = {

	            /**
	             * Default options for the X axis - the Y axis has extended defaults
	             */
	            defaultOptions: {
	                // allowDecimals: null,
	                // alternateGridColor: null,
	                // categories: [],
	                dateTimeLabelFormats: {
	                    millisecond: '%H:%M:%S.%L',
	                    second: '%H:%M:%S',
	                    minute: '%H:%M',
	                    hour: '%H:%M',
	                    day: '%e. %b',
	                    week: '%e. %b',
	                    month: '%b \'%y',
	                    year: '%Y'
	                },
	                endOnTick: false,
	                // reversed: false,

	                labels: {
	                    enabled: true,
	                    // rotation: 0,
	                    // align: 'center',
	                    // step: null,

	                    style: {
	                        color: '#666666',
	                        cursor: 'default',
	                        fontSize: '11px'
	                    },

	                    x: 0
	                        //y: undefined
	                        /*formatter: function () {
	                        	return this.value;
	                        },*/
	                },
	                //linkedTo: null,
	                //max: undefined,
	                //min: undefined,
	                minPadding: 0.01,
	                maxPadding: 0.01,
	                //minRange: null,
	                //minorTickInterval: null,
	                minorTickLength: 2,
	                minorTickPosition: 'outside', // inside or outside
	                //opposite: false,
	                //offset: 0,
	                //plotBands: [{
	                //	events: {},
	                //	zIndex: 1,
	                //	labels: { align, x, verticalAlign, y, style, rotation, textAlign }
	                //}],
	                //plotLines: [{
	                //	events: {}
	                //  dashStyle: {}
	                //	zIndex:
	                //	labels: { align, x, verticalAlign, y, style, rotation, textAlign }
	                //}],
	                //reversed: false,
	                // showFirstLabel: true,
	                // showLastLabel: true,
	                startOfWeek: 1,
	                startOnTick: false,
	                //tickInterval: null,
	                tickLength: 10,
	                tickmarkPlacement: 'between', // on or between
	                tickPixelInterval: 100,
	                tickPosition: 'outside',
	                title: {
	                    //text: null,
	                    align: 'middle', // low, middle or high
	                    //margin: 0 for horizontal, 10 for vertical axes,
	                    //rotation: 0,
	                    //side: 'outside',

	                    style: {
	                        color: '#666666'
	                    }

	                    //x: 0,
	                    //y: 0
	                },
	                type: 'linear', // linear, logarithmic or datetime
	                //visible: true

	                minorGridLineColor: '#f2f2f2',
	                // minorGridLineDashStyle: null,
	                minorGridLineWidth: 1,
	                minorTickColor: '#999999',
	                //minorTickWidth: 0,
	                lineColor: '#ccd6eb',
	                lineWidth: 1,
	                gridLineColor: '#e6e6e6',
	                // gridLineDashStyle: 'solid',
	                // gridLineWidth: 0,
	                tickColor: '#ccd6eb'
	                    // tickWidth: 1

	            },

	            /**
	             * This options set extends the defaultOptions for Y axes
	             */
	            defaultYAxisOptions: {
	                endOnTick: true,
	                tickPixelInterval: 72,
	                showLastLabel: true,
	                labels: {
	                    x: -8
	                },
	                maxPadding: 0.05,
	                minPadding: 0.05,
	                startOnTick: true,
	                title: {
	                    rotation: 270,
	                    text: 'Values'
	                },
	                stackLabels: {
	                    enabled: false,
	                    //align: dynamic,
	                    //y: dynamic,
	                    //x: dynamic,
	                    //verticalAlign: dynamic,
	                    //textAlign: dynamic,
	                    //rotation: 0,
	                    formatter: function() {
	                        return H.numberFormat(this.total, -1);
	                    },

	                    style: {
	                        fontSize: '11px',
	                        fontWeight: 'bold',
	                        color: '#000000',
	                        textOutline: '1px contrast'
	                    }

	                },

	                gridLineWidth: 1,
	                lineWidth: 0
	                    // tickWidth: 0

	            },

	            /**
	             * These options extend the defaultOptions for left axes
	             */
	            defaultLeftAxisOptions: {
	                labels: {
	                    x: -15
	                },
	                title: {
	                    rotation: 270
	                }
	            },

	            /**
	             * These options extend the defaultOptions for right axes
	             */
	            defaultRightAxisOptions: {
	                labels: {
	                    x: 15
	                },
	                title: {
	                    rotation: 90
	                }
	            },

	            /**
	             * These options extend the defaultOptions for bottom axes
	             */
	            defaultBottomAxisOptions: {
	                labels: {
	                    autoRotation: [-45],
	                    x: 0
	                        // overflow: undefined,
	                        // staggerLines: null
	                },
	                title: {
	                    rotation: 0
	                }
	            },
	            /**
	             * These options extend the defaultOptions for top axes
	             */
	            defaultTopAxisOptions: {
	                labels: {
	                    autoRotation: [-45],
	                    x: 0
	                        // overflow: undefined
	                        // staggerLines: null
	                },
	                title: {
	                    rotation: 0
	                }
	            },

	            /**
	             * Initialize the axis
	             */
	            init: function(chart, userOptions) {


	                var isXAxis = userOptions.isX,
	                    axis = this;

	                axis.chart = chart;

	                // Flag, is the axis horizontal
	                axis.horiz = chart.inverted ? !isXAxis : isXAxis;

	                // Flag, isXAxis
	                axis.isXAxis = isXAxis;
	                axis.coll = axis.coll || (isXAxis ? 'xAxis' : 'yAxis');

	                axis.opposite = userOptions.opposite; // needed in setOptions
	                axis.side = userOptions.side || (axis.horiz ?
	                    (axis.opposite ? 0 : 2) : // top : bottom
	                    (axis.opposite ? 1 : 3)); // right : left

	                axis.setOptions(userOptions);


	                var options = this.options,
	                    type = options.type,
	                    isDatetimeAxis = type === 'datetime';

	                axis.labelFormatter = options.labels.formatter || axis.defaultLabelFormatter; // can be overwritten by dynamic format


	                // Flag, stagger lines or not
	                axis.userOptions = userOptions;

	                //axis.axisTitleMargin = undefined,// = options.title.margin,
	                axis.minPixelPadding = 0;

	                axis.reversed = options.reversed;
	                axis.visible = options.visible !== false;
	                axis.zoomEnabled = options.zoomEnabled !== false;

	                // Initial categories
	                axis.hasNames = type === 'category' || options.categories === true;
	                axis.categories = options.categories || axis.hasNames;
	                axis.names = axis.names || []; // Preserve on update (#3830)

	                // Elements
	                //axis.axisGroup = undefined;
	                //axis.gridGroup = undefined;
	                //axis.axisTitle = undefined;
	                //axis.axisLine = undefined;

	                // Shorthand types
	                axis.isLog = type === 'logarithmic';
	                axis.isDatetimeAxis = isDatetimeAxis;

	                // Flag, if axis is linked to another axis
	                axis.isLinked = defined(options.linkedTo);
	                // Linked axis.
	                //axis.linkedParent = undefined;

	                // Tick positions
	                //axis.tickPositions = undefined; // array containing predefined positions
	                // Tick intervals
	                //axis.tickInterval = undefined;
	                //axis.minorTickInterval = undefined;


	                // Major ticks
	                axis.ticks = {};
	                axis.labelEdge = [];
	                // Minor ticks
	                axis.minorTicks = {};

	                // List of plotLines/Bands
	                axis.plotLinesAndBands = [];

	                // Alternate bands
	                axis.alternateBands = {};

	                // Axis metrics
	                //axis.left = undefined;
	                //axis.top = undefined;
	                //axis.width = undefined;
	                //axis.height = undefined;
	                //axis.bottom = undefined;
	                //axis.right = undefined;
	                //axis.transA = undefined;
	                //axis.transB = undefined;
	                //axis.oldTransA = undefined;
	                axis.len = 0;
	                //axis.oldMin = undefined;
	                //axis.oldMax = undefined;
	                //axis.oldUserMin = undefined;
	                //axis.oldUserMax = undefined;
	                //axis.oldAxisLength = undefined;
	                axis.minRange = axis.userMinRange = options.minRange || options.maxZoom;
	                axis.range = options.range;
	                axis.offset = options.offset || 0;


	                // Dictionary for stacks
	                axis.stacks = {};
	                axis.oldStacks = {};
	                axis.stacksTouched = 0;

	                // Min and max in the data
	                //axis.dataMin = undefined,
	                //axis.dataMax = undefined,

	                // The axis range
	                axis.max = null;
	                axis.min = null;

	                // User set min and max
	                //axis.userMin = undefined,
	                //axis.userMax = undefined,

	                // Crosshair options
	                axis.crosshair = pick(options.crosshair, splat(chart.options.tooltip.crosshairs)[isXAxis ? 0 : 1], false);
	                // Run Axis

	                var eventType,
	                    events = axis.options.events;

	                // Register
	                if (inArray(axis, chart.axes) === -1) { // don't add it again on Axis.update()
	                    if (isXAxis) { // #2713
	                        chart.axes.splice(chart.xAxis.length, 0, axis);
	                    } else {
	                        chart.axes.push(axis);
	                    }

	                    chart[axis.coll].push(axis);
	                }

	                axis.series = axis.series || []; // populated by Series

	                // inverted charts have reversed xAxes as default
	                if (chart.inverted && isXAxis && axis.reversed === undefined) {
	                    axis.reversed = true;
	                }

	                axis.removePlotBand = axis.removePlotBandOrLine;
	                axis.removePlotLine = axis.removePlotBandOrLine;


	                // register event listeners
	                for (eventType in events) {
	                    addEvent(axis, eventType, events[eventType]);
	                }

	                // extend logarithmic axis
	                if (axis.isLog) {
	                    axis.val2lin = axis.log2lin;
	                    axis.lin2val = axis.lin2log;
	                }
	            },

	            /**
	             * Merge and set options
	             */
	            setOptions: function(userOptions) {
	                this.options = merge(
	                    this.defaultOptions,
	                    this.coll === 'yAxis' && this.defaultYAxisOptions, [this.defaultTopAxisOptions, this.defaultRightAxisOptions,
	                        this.defaultBottomAxisOptions, this.defaultLeftAxisOptions
	                    ][this.side],
	                    merge(
	                        defaultOptions[this.coll], // if set in setOptions (#1053)
	                        userOptions
	                    )
	                );
	            },

	            /**
	             * The default label formatter. The context is a special config object for the label.
	             */
	            defaultLabelFormatter: function() {
	                var axis = this.axis,
	                    value = this.value,
	                    categories = axis.categories,
	                    dateTimeLabelFormat = this.dateTimeLabelFormat,
	                    lang = defaultOptions.lang,
	                    numericSymbols = lang.numericSymbols,
	                    numSymMagnitude = lang.numericSymbolMagnitude || 1000,
	                    i = numericSymbols && numericSymbols.length,
	                    multi,
	                    ret,
	                    formatOption = axis.options.labels.format,

	                    // make sure the same symbol is added for all labels on a linear axis
	                    numericSymbolDetector = axis.isLog ? value : axis.tickInterval;

	                if (formatOption) {
	                    ret = format(formatOption, this);

	                } else if (categories) {
	                    ret = value;

	                } else if (dateTimeLabelFormat) { // datetime axis
	                    ret = H.dateFormat(dateTimeLabelFormat, value);

	                } else if (i && numericSymbolDetector >= 1000) {
	                    // Decide whether we should add a numeric symbol like k (thousands) or M (millions).
	                    // If we are to enable this in tooltip or other places as well, we can move this
	                    // logic to the numberFormatter and enable it by a parameter.
	                    while (i-- && ret === undefined) {
	                        multi = Math.pow(numSymMagnitude, i + 1);
	                        if (numericSymbolDetector >= multi && (value * 10) % multi === 0 && numericSymbols[i] !== null && value !== 0) { // #5480
	                            ret = H.numberFormat(value / multi, -1) + numericSymbols[i];
	                        }
	                    }
	                }

	                if (ret === undefined) {
	                    if (Math.abs(value) >= 10000) { // add thousands separators
	                        ret = H.numberFormat(value, -1);
	                    } else { // small numbers
	                        ret = H.numberFormat(value, -1, undefined, ''); // #2466
	                    }
	                }

	                return ret;
	            },

	            /**
	             * Get the minimum and maximum for the series of each axis
	             */
	            getSeriesExtremes: function() {
	                var axis = this,
	                    chart = axis.chart;
	                axis.hasVisibleSeries = false;

	                // Reset properties in case we're redrawing (#3353)
	                axis.dataMin = axis.dataMax = axis.threshold = null;
	                axis.softThreshold = !axis.isXAxis;

	                if (axis.buildStacks) {
	                    axis.buildStacks();
	                }

	                // loop through this axis' series
	                each(axis.series, function(series) {

	                    if (series.visible || !chart.options.chart.ignoreHiddenSeries) {

	                        var seriesOptions = series.options,
	                            xData,
	                            threshold = seriesOptions.threshold,
	                            seriesDataMin,
	                            seriesDataMax;

	                        axis.hasVisibleSeries = true;

	                        // Validate threshold in logarithmic axes
	                        if (axis.isLog && threshold <= 0) {
	                            threshold = null;
	                        }

	                        // Get dataMin and dataMax for X axes
	                        if (axis.isXAxis) {
	                            xData = series.xData;
	                            if (xData.length) {
	                                // If xData contains values which is not numbers, then filter them out.
	                                // To prevent performance hit, we only do this after we have already
	                                // found seriesDataMin because in most cases all data is valid. #5234.
	                                seriesDataMin = arrayMin(xData);
	                                if (!isNumber(seriesDataMin) && !(seriesDataMin instanceof Date)) { // Date for #5010
	                                    xData = grep(xData, function(x) {
	                                        return isNumber(x);
	                                    });
	                                    seriesDataMin = arrayMin(xData); // Do it again with valid data
	                                }

	                                axis.dataMin = Math.min(pick(axis.dataMin, xData[0]), seriesDataMin);
	                                axis.dataMax = Math.max(pick(axis.dataMax, xData[0]), arrayMax(xData));

	                            }

	                            // Get dataMin and dataMax for Y axes, as well as handle stacking and processed data
	                        } else {

	                            // Get this particular series extremes
	                            series.getExtremes();
	                            seriesDataMax = series.dataMax;
	                            seriesDataMin = series.dataMin;

	                            // Get the dataMin and dataMax so far. If percentage is used, the min and max are
	                            // always 0 and 100. If seriesDataMin and seriesDataMax is null, then series
	                            // doesn't have active y data, we continue with nulls
	                            if (defined(seriesDataMin) && defined(seriesDataMax)) {
	                                axis.dataMin = Math.min(pick(axis.dataMin, seriesDataMin), seriesDataMin);
	                                axis.dataMax = Math.max(pick(axis.dataMax, seriesDataMax), seriesDataMax);
	                            }

	                            // Adjust to threshold
	                            if (defined(threshold)) {
	                                axis.threshold = threshold;
	                            }
	                            // If any series has a hard threshold, it takes precedence
	                            if (!seriesOptions.softThreshold || axis.isLog) {
	                                axis.softThreshold = false;
	                            }
	                        }
	                    }
	                });
	            },

	            /**
	             * Translate from axis value to pixel position on the chart, or back
	             *
	             */
	            translate: function(val, backwards, cvsCoord, old, handleLog, pointPlacement) {
	                var axis = this.linkedParent || this, // #1417
	                    sign = 1,
	                    cvsOffset = 0,
	                    localA = old ? axis.oldTransA : axis.transA,
	                    localMin = old ? axis.oldMin : axis.min,
	                    returnValue,
	                    minPixelPadding = axis.minPixelPadding,
	                    doPostTranslate = (axis.isOrdinal || axis.isBroken || (axis.isLog && handleLog)) && axis.lin2val;

	                if (!localA) {
	                    localA = axis.transA;
	                }

	                // In vertical axes, the canvas coordinates start from 0 at the top like in
	                // SVG.
	                if (cvsCoord) {
	                    sign *= -1; // canvas coordinates inverts the value
	                    cvsOffset = axis.len;
	                }

	                // Handle reversed axis
	                if (axis.reversed) {
	                    sign *= -1;
	                    cvsOffset -= sign * (axis.sector || axis.len);
	                }

	                // From pixels to value
	                if (backwards) { // reverse translation

	                    val = val * sign + cvsOffset;
	                    val -= minPixelPadding;
	                    returnValue = val / localA + localMin; // from chart pixel to value
	                    if (doPostTranslate) { // log and ordinal axes
	                        returnValue = axis.lin2val(returnValue);
	                    }

	                    // From value to pixels
	                } else {
	                    if (doPostTranslate) { // log and ordinal axes
	                        val = axis.val2lin(val);
	                    }
	                    returnValue = sign * (val - localMin) * localA + cvsOffset +
	                        (sign * minPixelPadding) +
	                        (isNumber(pointPlacement) ? localA * pointPlacement : 0);
	                }

	                return returnValue;
	            },

	            /**
	             * Utility method to translate an axis value to pixel position.
	             * @param {Number} value A value in terms of axis units
	             * @param {Boolean} paneCoordinates Whether to return the pixel coordinate relative to the chart
	             *        or just the axis/pane itself.
	             */
	            toPixels: function(value, paneCoordinates) {
	                return this.translate(value, false, !this.horiz, null, true) + (paneCoordinates ? 0 : this.pos);
	            },

	            /**
	             * Utility method to translate a pixel position in to an axis value.
	             * @param {Number} pixel The pixel value coordinate
	             * @param {Boolean} paneCoordiantes Whether the input pixel is relative to the chart or just the
	             *        axis/pane itself.
	             */
	            toValue: function(pixel, paneCoordinates) {
	                return this.translate(pixel - (paneCoordinates ? 0 : this.pos), true, !this.horiz, null, true);
	            },

	            /**
	             * Create the path for a plot line that goes from the given value on
	             * this axis, across the plot to the opposite side
	             * @param {Number} value
	             * @param {Number} lineWidth Used for calculation crisp line
	             * @param {Number] old Use old coordinates (for resizing and rescaling)
	             */
	            getPlotLinePath: function(value, lineWidth, old, force, translatedValue) {
	                var axis = this,
	                    chart = axis.chart,
	                    axisLeft = axis.left,
	                    axisTop = axis.top,
	                    x1,
	                    y1,
	                    x2,
	                    y2,
	                    cHeight = (old && chart.oldChartHeight) || chart.chartHeight,
	                    cWidth = (old && chart.oldChartWidth) || chart.chartWidth,
	                    skip,
	                    transB = axis.transB,
	                    /**
	                     * Check if x is between a and b. If not, either move to a/b or skip,
	                     * depending on the force parameter.
	                     */
	                    between = function(x, a, b) {
	                        if (x < a || x > b) {
	                            if (force) {
	                                x = Math.min(Math.max(a, x), b);
	                            } else {
	                                skip = true;
	                            }
	                        }
	                        return x;
	                    };

	                translatedValue = pick(translatedValue, axis.translate(value, null, null, old));
	                x1 = x2 = Math.round(translatedValue + transB);
	                y1 = y2 = Math.round(cHeight - translatedValue - transB);
	                if (!isNumber(translatedValue)) { // no min or max
	                    skip = true;

	                } else if (axis.horiz) {
	                    y1 = axisTop;
	                    y2 = cHeight - axis.bottom;
	                    x1 = x2 = between(x1, axisLeft, axisLeft + axis.width);
	                } else {
	                    x1 = axisLeft;
	                    x2 = cWidth - axis.right;
	                    y1 = y2 = between(y1, axisTop, axisTop + axis.height);
	                }
	                return skip && !force ?
	                    null :
	                    chart.renderer.crispLine(['M', x1, y1, 'L', x2, y2], lineWidth || 1);
	            },

	            /**
	             * Set the tick positions of a linear axis to round values like whole tens or every five.
	             */
	            getLinearTickPositions: function(tickInterval, min, max) {
	                var pos,
	                    lastPos,
	                    roundedMin = correctFloat(Math.floor(min / tickInterval) * tickInterval),
	                    roundedMax = correctFloat(Math.ceil(max / tickInterval) * tickInterval),
	                    tickPositions = [];

	                // For single points, add a tick regardless of the relative position (#2662)
	                if (min === max && isNumber(min)) {
	                    return [min];
	                }

	                // Populate the intermediate values
	                pos = roundedMin;
	                while (pos <= roundedMax) {

	                    // Place the tick on the rounded value
	                    tickPositions.push(pos);

	                    // Always add the raw tickInterval, not the corrected one.
	                    pos = correctFloat(pos + tickInterval);

	                    // If the interval is not big enough in the current min - max range to actually increase
	                    // the loop variable, we need to break out to prevent endless loop. Issue #619
	                    if (pos === lastPos) {
	                        break;
	                    }

	                    // Record the last value
	                    lastPos = pos;
	                }
	                return tickPositions;
	            },

	            /**
	             * Return the minor tick positions. For logarithmic axes, reuse the same logic
	             * as for major ticks.
	             */
	            getMinorTickPositions: function() {
	                var axis = this,
	                    options = axis.options,
	                    tickPositions = axis.tickPositions,
	                    minorTickInterval = axis.minorTickInterval,
	                    minorTickPositions = [],
	                    pos,
	                    i,
	                    pointRangePadding = axis.pointRangePadding || 0,
	                    min = axis.min - pointRangePadding, // #1498
	                    max = axis.max + pointRangePadding, // #1498
	                    range = max - min,
	                    len;

	                // If minor ticks get too dense, they are hard to read, and may cause long running script. So we don't draw them.
	                if (range && range / minorTickInterval < axis.len / 3) { // #3875

	                    if (axis.isLog) {
	                        len = tickPositions.length;
	                        for (i = 1; i < len; i++) {
	                            minorTickPositions = minorTickPositions.concat(
	                                axis.getLogTickPositions(minorTickInterval, tickPositions[i - 1], tickPositions[i], true)
	                            );
	                        }
	                    } else if (axis.isDatetimeAxis && options.minorTickInterval === 'auto') { // #1314
	                        minorTickPositions = minorTickPositions.concat(
	                            axis.getTimeTicks(
	                                axis.normalizeTimeTickInterval(minorTickInterval),
	                                min,
	                                max,
	                                options.startOfWeek
	                            )
	                        );
	                    } else {
	                        for (
	                            pos = min + (tickPositions[0] - min) % minorTickInterval; pos <= max; pos += minorTickInterval
	                        ) {
	                            // Very, very, tight grid lines (#5771)
	                            if (pos === minorTickPositions[0]) {
	                                break;
	                            }
	                            minorTickPositions.push(pos);
	                        }
	                    }
	                }

	                if (minorTickPositions.length !== 0) { // don't change the extremes, when there is no minor ticks
	                    axis.trimTicks(minorTickPositions, options.startOnTick, options.endOnTick); // #3652 #3743 #1498
	                }
	                return minorTickPositions;
	            },

	            /**
	             * Adjust the min and max for the minimum range. Keep in mind that the series data is
	             * not yet processed, so we don't have information on data cropping and grouping, or
	             * updated axis.pointRange or series.pointRange. The data can't be processed until
	             * we have finally established min and max.
	             */
	            adjustForMinRange: function() {
	                var axis = this,
	                    options = axis.options,
	                    min = axis.min,
	                    max = axis.max,
	                    zoomOffset,
	                    spaceAvailable = axis.dataMax - axis.dataMin >= axis.minRange,
	                    closestDataRange,
	                    i,
	                    distance,
	                    xData,
	                    loopLength,
	                    minArgs,
	                    maxArgs,
	                    minRange;

	                // Set the automatic minimum range based on the closest point distance
	                if (axis.isXAxis && axis.minRange === undefined && !axis.isLog) {

	                    if (defined(options.min) || defined(options.max)) {
	                        axis.minRange = null; // don't do this again

	                    } else {

	                        // Find the closest distance between raw data points, as opposed to
	                        // closestPointRange that applies to processed points (cropped and grouped)
	                        each(axis.series, function(series) {
	                            xData = series.xData;
	                            loopLength = series.xIncrement ? 1 : xData.length - 1;
	                            for (i = loopLength; i > 0; i--) {
	                                distance = xData[i] - xData[i - 1];
	                                if (closestDataRange === undefined || distance < closestDataRange) {
	                                    closestDataRange = distance;
	                                }
	                            }
	                        });
	                        axis.minRange = Math.min(closestDataRange * 5, axis.dataMax - axis.dataMin);
	                    }
	                }

	                // if minRange is exceeded, adjust
	                if (max - min < axis.minRange) {
	                    minRange = axis.minRange;
	                    zoomOffset = (minRange - max + min) / 2;

	                    // if min and max options have been set, don't go beyond it
	                    minArgs = [min - zoomOffset, pick(options.min, min - zoomOffset)];
	                    if (spaceAvailable) { // if space is available, stay within the data range
	                        minArgs[2] = axis.isLog ? axis.log2lin(axis.dataMin) : axis.dataMin;
	                    }
	                    min = arrayMax(minArgs);

	                    maxArgs = [min + minRange, pick(options.max, min + minRange)];
	                    if (spaceAvailable) { // if space is availabe, stay within the data range
	                        maxArgs[2] = axis.isLog ? axis.log2lin(axis.dataMax) : axis.dataMax;
	                    }

	                    max = arrayMin(maxArgs);

	                    // now if the max is adjusted, adjust the min back
	                    if (max - min < minRange) {
	                        minArgs[0] = max - minRange;
	                        minArgs[1] = pick(options.min, max - minRange);
	                        min = arrayMax(minArgs);
	                    }
	                }

	                // Record modified extremes
	                axis.min = min;
	                axis.max = max;
	            },

	            /**
	             * Find the closestPointRange across all series
	             */
	            getClosest: function() {
	                var ret;

	                if (this.categories) {
	                    ret = 1;
	                } else {
	                    each(this.series, function(series) {
	                        var seriesClosest = series.closestPointRange,
	                            visible = series.visible ||
	                            !series.chart.options.chart.ignoreHiddenSeries;

	                        if (!series.noSharedTooltip &&
	                            defined(seriesClosest) &&
	                            visible
	                        ) {
	                            ret = defined(ret) ?
	                                Math.min(ret, seriesClosest) :
	                                seriesClosest;
	                        }
	                    });
	                }
	                return ret;
	            },

	            /**
	             * When a point name is given and no x, search for the name in the existing categories,
	             * or if categories aren't provided, search names or create a new category (#2522).
	             */
	            nameToX: function(point) {
	                var explicitCategories = isArray(this.categories),
	                    names = explicitCategories ? this.categories : this.names,
	                    nameX = point.options.x,
	                    x;

	                point.series.requireSorting = false;

	                if (!defined(nameX)) {
	                    nameX = this.options.uniqueNames === false ?
	                        point.series.autoIncrement() :
	                        inArray(point.name, names);
	                }
	                if (nameX === -1) { // The name is not found in currenct categories
	                    if (!explicitCategories) {
	                        x = names.length;
	                    }
	                } else {
	                    x = nameX;
	                }

	                // Write the last point's name to the names array
	                this.names[x] = point.name;

	                return x;
	            },

	            /**
	             * When changes have been done to series data, update the axis.names.
	             */
	            updateNames: function() {
	                var axis = this;

	                if (this.names.length > 0) {
	                    this.names.length = 0;
	                    this.minRange = undefined;
	                    each(this.series || [], function(series) {

	                        // Reset incrementer (#5928)
	                        series.xIncrement = null;

	                        // When adding a series, points are not yet generated
	                        if (!series.points || series.isDirtyData) {
	                            series.processData();
	                            series.generatePoints();
	                        }

	                        each(series.points, function(point, i) {
	                            var x;
	                            if (point.options) {
	                                x = axis.nameToX(point);
	                                if (x !== point.x) {
	                                    point.x = x;
	                                    series.xData[i] = x;
	                                }
	                            }
	                        });
	                    });
	                }
	            },

	            /**
	             * Update translation information
	             */
	            setAxisTranslation: function(saveOld) {
	                var axis = this,
	                    range = axis.max - axis.min,
	                    pointRange = axis.axisPointRange || 0,
	                    closestPointRange,
	                    minPointOffset = 0,
	                    pointRangePadding = 0,
	                    linkedParent = axis.linkedParent,
	                    ordinalCorrection,
	                    hasCategories = !!axis.categories,
	                    transA = axis.transA,
	                    isXAxis = axis.isXAxis;

	                // Adjust translation for padding. Y axis with categories need to go through the same (#1784).
	                if (isXAxis || hasCategories || pointRange) {

	                    // Get the closest points
	                    closestPointRange = axis.getClosest();

	                    if (linkedParent) {
	                        minPointOffset = linkedParent.minPointOffset;
	                        pointRangePadding = linkedParent.pointRangePadding;
	                    } else {
	                        each(axis.series, function(series) {
	                            var seriesPointRange = hasCategories ?
	                                1 :
	                                (isXAxis ?
	                                    pick(series.options.pointRange, closestPointRange, 0) :
	                                    (axis.axisPointRange || 0)), // #2806
	                                pointPlacement = series.options.pointPlacement;

	                            pointRange = Math.max(pointRange, seriesPointRange);

	                            if (!axis.single) {
	                                // minPointOffset is the value padding to the left of the axis in order to make
	                                // room for points with a pointRange, typically columns. When the pointPlacement option
	                                // is 'between' or 'on', this padding does not apply.
	                                minPointOffset = Math.max(
	                                    minPointOffset,
	                                    isString(pointPlacement) ? 0 : seriesPointRange / 2
	                                );

	                                // Determine the total padding needed to the length of the axis to make room for the
	                                // pointRange. If the series' pointPlacement is 'on', no padding is added.
	                                pointRangePadding = Math.max(
	                                    pointRangePadding,
	                                    pointPlacement === 'on' ? 0 : seriesPointRange
	                                );
	                            }
	                        });
	                    }

	                    // Record minPointOffset and pointRangePadding
	                    ordinalCorrection = axis.ordinalSlope && closestPointRange ? axis.ordinalSlope / closestPointRange : 1; // #988, #1853
	                    axis.minPointOffset = minPointOffset = minPointOffset * ordinalCorrection;
	                    axis.pointRangePadding = pointRangePadding = pointRangePadding * ordinalCorrection;

	                    // pointRange means the width reserved for each point, like in a column chart
	                    axis.pointRange = Math.min(pointRange, range);

	                    // closestPointRange means the closest distance between points. In columns
	                    // it is mostly equal to pointRange, but in lines pointRange is 0 while closestPointRange
	                    // is some other value
	                    if (isXAxis) {
	                        axis.closestPointRange = closestPointRange;
	                    }
	                }

	                // Secondary values
	                if (saveOld) {
	                    axis.oldTransA = transA;
	                }
	                axis.translationSlope = axis.transA = transA = axis.len / ((range + pointRangePadding) || 1);
	                axis.transB = axis.horiz ? axis.left : axis.bottom; // translation addend
	                axis.minPixelPadding = transA * minPointOffset;
	            },

	            minFromRange: function() {
	                return this.max - this.range;
	            },

	            /**
	             * Set the tick positions to round values and optionally extend the extremes
	             * to the nearest tick
	             */
	            setTickInterval: function(secondPass) {
	                var axis = this,
	                    chart = axis.chart,
	                    options = axis.options,
	                    isLog = axis.isLog,
	                    log2lin = axis.log2lin,
	                    isDatetimeAxis = axis.isDatetimeAxis,
	                    isXAxis = axis.isXAxis,
	                    isLinked = axis.isLinked,
	                    maxPadding = options.maxPadding,
	                    minPadding = options.minPadding,
	                    length,
	                    linkedParentExtremes,
	                    tickIntervalOption = options.tickInterval,
	                    minTickInterval,
	                    tickPixelIntervalOption = options.tickPixelInterval,
	                    categories = axis.categories,
	                    threshold = axis.threshold,
	                    softThreshold = axis.softThreshold,
	                    thresholdMin,
	                    thresholdMax,
	                    hardMin,
	                    hardMax;

	                if (!isDatetimeAxis && !categories && !isLinked) {
	                    this.getTickAmount();
	                }

	                // Min or max set either by zooming/setExtremes or initial options
	                hardMin = pick(axis.userMin, options.min);
	                hardMax = pick(axis.userMax, options.max);

	                // Linked axis gets the extremes from the parent axis
	                if (isLinked) {
	                    axis.linkedParent = chart[axis.coll][options.linkedTo];
	                    linkedParentExtremes = axis.linkedParent.getExtremes();
	                    axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);
	                    axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);
	                    if (options.type !== axis.linkedParent.options.type) {
	                        H.error(11, 1); // Can't link axes of different type
	                    }

	                    // Initial min and max from the extreme data values
	                } else {

	                    // Adjust to hard threshold
	                    if (!softThreshold && defined(threshold)) {
	                        if (axis.dataMin >= threshold) {
	                            thresholdMin = threshold;
	                            minPadding = 0;
	                        } else if (axis.dataMax <= threshold) {
	                            thresholdMax = threshold;
	                            maxPadding = 0;
	                        }
	                    }

	                    axis.min = pick(hardMin, thresholdMin, axis.dataMin);
	                    axis.max = pick(hardMax, thresholdMax, axis.dataMax);

	                }

	                if (isLog) {
	                    if (!secondPass && Math.min(axis.min, pick(axis.dataMin, axis.min)) <= 0) { // #978
	                        H.error(10, 1); // Can't plot negative values on log axis
	                    }
	                    // The correctFloat cures #934, float errors on full tens. But it
	                    // was too aggressive for #4360 because of conversion back to lin,
	                    // therefore use precision 15.
	                    axis.min = correctFloat(log2lin(axis.min), 15);
	                    axis.max = correctFloat(log2lin(axis.max), 15);
	                }

	                // handle zoomed range
	                if (axis.range && defined(axis.max)) {
	                    axis.userMin = axis.min = hardMin = Math.max(axis.min, axis.minFromRange()); // #618
	                    axis.userMax = hardMax = axis.max;

	                    axis.range = null; // don't use it when running setExtremes
	                }

	                // Hook for Highstock Scroller. Consider combining with beforePadding.
	                fireEvent(axis, 'foundExtremes');

	                // Hook for adjusting this.min and this.max. Used by bubble series.
	                if (axis.beforePadding) {
	                    axis.beforePadding();
	                }

	                // adjust min and max for the minimum range
	                axis.adjustForMinRange();

	                // Pad the values to get clear of the chart's edges. To avoid tickInterval taking the padding
	                // into account, we do this after computing tick interval (#1337).
	                if (!categories && !axis.axisPointRange && !axis.usePercentage && !isLinked && defined(axis.min) && defined(axis.max)) {
	                    length = axis.max - axis.min;
	                    if (length) {
	                        if (!defined(hardMin) && minPadding) {
	                            axis.min -= length * minPadding;
	                        }
	                        if (!defined(hardMax) && maxPadding) {
	                            axis.max += length * maxPadding;
	                        }
	                    }
	                }

	                // Handle options for floor, ceiling, softMin and softMax
	                if (isNumber(options.floor)) {
	                    axis.min = Math.max(axis.min, options.floor);
	                } else if (isNumber(options.softMin)) {
	                    axis.min = Math.min(axis.min, options.softMin);
	                }
	                if (isNumber(options.ceiling)) {
	                    axis.max = Math.min(axis.max, options.ceiling);
	                } else if (isNumber(options.softMax)) {
	                    axis.max = Math.max(axis.max, options.softMax);
	                }

	                // When the threshold is soft, adjust the extreme value only if
	                // the data extreme and the padded extreme land on either side of the threshold. For example,
	                // a series of [0, 1, 2, 3] would make the yAxis add a tick for -1 because of the
	                // default minPadding and startOnTick options. This is prevented by the softThreshold
	                // option.
	                if (softThreshold && defined(axis.dataMin)) {
	                    threshold = threshold || 0;
	                    if (!defined(hardMin) && axis.min < threshold && axis.dataMin >= threshold) {
	                        axis.min = threshold;
	                    } else if (!defined(hardMax) && axis.max > threshold && axis.dataMax <= threshold) {
	                        axis.max = threshold;
	                    }
	                }


	                // get tickInterval
	                if (axis.min === axis.max || axis.min === undefined || axis.max === undefined) {
	                    axis.tickInterval = 1;
	                } else if (isLinked && !tickIntervalOption &&
	                    tickPixelIntervalOption === axis.linkedParent.options.tickPixelInterval) {
	                    axis.tickInterval = tickIntervalOption = axis.linkedParent.tickInterval;
	                } else {
	                    axis.tickInterval = pick(
	                        tickIntervalOption,
	                        this.tickAmount ? ((axis.max - axis.min) / Math.max(this.tickAmount - 1, 1)) : undefined,
	                        categories ? // for categoried axis, 1 is default, for linear axis use tickPix
	                        1 :
	                        // don't let it be more than the data range
	                        (axis.max - axis.min) * tickPixelIntervalOption / Math.max(axis.len, tickPixelIntervalOption)
	                    );
	                }

	                // Now we're finished detecting min and max, crop and group series data. This
	                // is in turn needed in order to find tick positions in ordinal axes.
	                if (isXAxis && !secondPass) {
	                    each(axis.series, function(series) {
	                        series.processData(axis.min !== axis.oldMin || axis.max !== axis.oldMax);
	                    });
	                }

	                // set the translation factor used in translate function
	                axis.setAxisTranslation(true);

	                // hook for ordinal axes and radial axes
	                if (axis.beforeSetTickPositions) {
	                    axis.beforeSetTickPositions();
	                }

	                // hook for extensions, used in Highstock ordinal axes
	                if (axis.postProcessTickInterval) {
	                    axis.tickInterval = axis.postProcessTickInterval(axis.tickInterval);
	                }

	                // In column-like charts, don't cramp in more ticks than there are points (#1943, #4184)
	                if (axis.pointRange && !tickIntervalOption) {
	                    axis.tickInterval = Math.max(axis.pointRange, axis.tickInterval);
	                }

	                // Before normalizing the tick interval, handle minimum tick interval. This applies only if tickInterval is not defined.
	                minTickInterval = pick(options.minTickInterval, axis.isDatetimeAxis && axis.closestPointRange);
	                if (!tickIntervalOption && axis.tickInterval < minTickInterval) {
	                    axis.tickInterval = minTickInterval;
	                }

	                // for linear axes, get magnitude and normalize the interval
	                if (!isDatetimeAxis && !isLog && !tickIntervalOption) {
	                    axis.tickInterval = normalizeTickInterval(
	                        axis.tickInterval,
	                        null,
	                        getMagnitude(axis.tickInterval),
	                        // If the tick interval is between 0.5 and 5 and the axis max is in the order of
	                        // thousands, chances are we are dealing with years. Don't allow decimals. #3363.
	                        pick(options.allowDecimals, !(axis.tickInterval > 0.5 && axis.tickInterval < 5 && axis.max > 1000 && axis.max < 9999)), !!this.tickAmount
	                    );
	                }

	                // Prevent ticks from getting so close that we can't draw the labels
	                if (!this.tickAmount) {
	                    axis.tickInterval = axis.unsquish();
	                }

	                this.setTickPositions();
	            },

	            /**
	             * Now we have computed the normalized tickInterval, get the tick positions
	             */
	            setTickPositions: function() {

	                var options = this.options,
	                    tickPositions,
	                    tickPositionsOption = options.tickPositions,
	                    tickPositioner = options.tickPositioner,
	                    startOnTick = options.startOnTick,
	                    endOnTick = options.endOnTick,
	                    single;

	                // Set the tickmarkOffset
	                this.tickmarkOffset = (this.categories && options.tickmarkPlacement === 'between' &&
	                    this.tickInterval === 1) ? 0.5 : 0; // #3202


	                // get minorTickInterval
	                this.minorTickInterval = options.minorTickInterval === 'auto' && this.tickInterval ?
	                    this.tickInterval / 5 : options.minorTickInterval;

	                // Find the tick positions
	                this.tickPositions = tickPositions = tickPositionsOption && tickPositionsOption.slice(); // Work on a copy (#1565)
	                if (!tickPositions) {

	                    if (this.isDatetimeAxis) {
	                        tickPositions = this.getTimeTicks(
	                            this.normalizeTimeTickInterval(this.tickInterval, options.units),
	                            this.min,
	                            this.max,
	                            options.startOfWeek,
	                            this.ordinalPositions,
	                            this.closestPointRange,
	                            true
	                        );
	                    } else if (this.isLog) {
	                        tickPositions = this.getLogTickPositions(this.tickInterval, this.min, this.max);
	                    } else {
	                        tickPositions = this.getLinearTickPositions(this.tickInterval, this.min, this.max);
	                    }

	                    // Too dense ticks, keep only the first and last (#4477)
	                    if (tickPositions.length > this.len) {
	                        tickPositions = [tickPositions[0], tickPositions.pop()];
	                    }

	                    this.tickPositions = tickPositions;

	                    // Run the tick positioner callback, that allows modifying auto tick positions.
	                    if (tickPositioner) {
	                        tickPositioner = tickPositioner.apply(this, [this.min, this.max]);
	                        if (tickPositioner) {
	                            this.tickPositions = tickPositions = tickPositioner;
	                        }
	                    }

	                }

	                // reset min/max or remove extremes based on start/end on tick
	                this.trimTicks(tickPositions, startOnTick, endOnTick);
	                if (!this.isLinked) {
	                    // When there is only one point, or all points have the same value on this axis, then min
	                    // and max are equal and tickPositions.length is 0 or 1. In this case, add some padding
	                    // in order to center the point, but leave it with one tick. #1337.
	                    if (this.min === this.max && defined(this.min) && !this.tickAmount) {
	                        // Substract half a unit (#2619, #2846, #2515, #3390)
	                        single = true;
	                        this.min -= 0.5;
	                        this.max += 0.5;
	                    }
	                    this.single = single;
	                    if (!tickPositionsOption && !tickPositioner) {
	                        this.adjustTickAmount();
	                    }
	                }
	            },

	            /**
	             * Handle startOnTick and endOnTick by either adapting to padding min/max or rounded min/max
	             */
	            trimTicks: function(tickPositions, startOnTick, endOnTick) {
	                var roundedMin = tickPositions[0],
	                    roundedMax = tickPositions[tickPositions.length - 1],
	                    minPointOffset = this.minPointOffset || 0;

	                if (!this.isLinked) {
	                    if (startOnTick) {
	                        this.min = roundedMin;
	                    } else {
	                        while (this.min - minPointOffset > tickPositions[0]) {
	                            tickPositions.shift();
	                        }
	                    }

	                    if (endOnTick) {
	                        this.max = roundedMax;
	                    } else {
	                        while (this.max + minPointOffset < tickPositions[tickPositions.length - 1]) {
	                            tickPositions.pop();
	                        }
	                    }

	                    // If no tick are left, set one tick in the middle (#3195)
	                    if (tickPositions.length === 0 && defined(roundedMin)) {
	                        tickPositions.push((roundedMax + roundedMin) / 2);
	                    }
	                }
	            },

	            /**
	             * Check if there are multiple axes in the same pane
	             * @returns {Boolean} There are other axes
	             */
	            alignToOthers: function() {
	                var others = {}, // Whether there is another axis to pair with this one
	                    hasOther,
	                    options = this.options;

	                if (
	                    // Only if alignTicks is true
	                    this.chart.options.chart.alignTicks !== false &&
	                    options.alignTicks !== false &&

	                    // Don't try to align ticks on a log axis, they are not evenly
	                    // spaced (#6021)
	                    !this.isLog
	                ) {
	                    each(this.chart[this.coll], function(axis) {
	                        var otherOptions = axis.options,
	                            horiz = axis.horiz,
	                            key = [
	                                horiz ? otherOptions.left : otherOptions.top,
	                                otherOptions.width,
	                                otherOptions.height,
	                                otherOptions.pane
	                            ].join(',');


	                        if (axis.series.length) { // #4442
	                            if (others[key]) {
	                                hasOther = true; // #4201
	                            } else {
	                                others[key] = 1;
	                            }
	                        }
	                    });
	                }
	                return hasOther;
	            },

	            /**
	             * Set the max ticks of either the x and y axis collection
	             */
	            getTickAmount: function() {
	                var options = this.options,
	                    tickAmount = options.tickAmount,
	                    tickPixelInterval = options.tickPixelInterval;

	                if (!defined(options.tickInterval) && this.len < tickPixelInterval && !this.isRadial &&
	                    !this.isLog && options.startOnTick && options.endOnTick) {
	                    tickAmount = 2;
	                }

	                if (!tickAmount && this.alignToOthers()) {
	                    // Add 1 because 4 tick intervals require 5 ticks (including first and last)
	                    tickAmount = Math.ceil(this.len / tickPixelInterval) + 1;
	                }

	                // For tick amounts of 2 and 3, compute five ticks and remove the intermediate ones. This
	                // prevents the axis from adding ticks that are too far away from the data extremes.
	                if (tickAmount < 4) {
	                    this.finalTickAmt = tickAmount;
	                    tickAmount = 5;
	                }

	                this.tickAmount = tickAmount;
	            },

	            /**
	             * When using multiple axes, adjust the number of ticks to match the highest
	             * number of ticks in that group
	             */
	            adjustTickAmount: function() {
	                var tickInterval = this.tickInterval,
	                    tickPositions = this.tickPositions,
	                    tickAmount = this.tickAmount,
	                    finalTickAmt = this.finalTickAmt,
	                    currentTickAmount = tickPositions && tickPositions.length,
	                    i,
	                    len;

	                if (currentTickAmount < tickAmount) {
	                    while (tickPositions.length < tickAmount) {
	                        tickPositions.push(correctFloat(
	                            tickPositions[tickPositions.length - 1] + tickInterval
	                        ));
	                    }
	                    this.transA *= (currentTickAmount - 1) / (tickAmount - 1);
	                    this.max = tickPositions[tickPositions.length - 1];

	                    // We have too many ticks, run second pass to try to reduce ticks
	                } else if (currentTickAmount > tickAmount) {
	                    this.tickInterval *= 2;
	                    this.setTickPositions();
	                }

	                // The finalTickAmt property is set in getTickAmount
	                if (defined(finalTickAmt)) {
	                    i = len = tickPositions.length;
	                    while (i--) {
	                        if (
	                            (finalTickAmt === 3 && i % 2 === 1) || // Remove every other tick
	                            (finalTickAmt <= 2 && i > 0 && i < len - 1) // Remove all but first and last
	                        ) {
	                            tickPositions.splice(i, 1);
	                        }
	                    }
	                    this.finalTickAmt = undefined;
	                }
	            },

	            /**
	             * Set the scale based on data min and max, user set min and max or options
	             *
	             */
	            setScale: function() {
	                var axis = this,
	                    isDirtyData,
	                    isDirtyAxisLength;

	                axis.oldMin = axis.min;
	                axis.oldMax = axis.max;
	                axis.oldAxisLength = axis.len;

	                // set the new axisLength
	                axis.setAxisSize();
	                //axisLength = horiz ? axisWidth : axisHeight;
	                isDirtyAxisLength = axis.len !== axis.oldAxisLength;

	                // is there new data?
	                each(axis.series, function(series) {
	                    if (series.isDirtyData || series.isDirty ||
	                        series.xAxis.isDirty) { // when x axis is dirty, we need new data extremes for y as well
	                        isDirtyData = true;
	                    }
	                });

	                // do we really need to go through all this?
	                if (isDirtyAxisLength || isDirtyData || axis.isLinked || axis.forceRedraw ||
	                    axis.userMin !== axis.oldUserMin || axis.userMax !== axis.oldUserMax || axis.alignToOthers()) {

	                    if (axis.resetStacks) {
	                        axis.resetStacks();
	                    }

	                    axis.forceRedraw = false;

	                    // get data extremes if needed
	                    axis.getSeriesExtremes();

	                    // get fixed positions based on tickInterval
	                    axis.setTickInterval();

	                    // record old values to decide whether a rescale is necessary later on (#540)
	                    axis.oldUserMin = axis.userMin;
	                    axis.oldUserMax = axis.userMax;

	                    // Mark as dirty if it is not already set to dirty and extremes have changed. #595.
	                    if (!axis.isDirty) {
	                        axis.isDirty = isDirtyAxisLength || axis.min !== axis.oldMin || axis.max !== axis.oldMax;
	                    }
	                } else if (axis.cleanStacks) {
	                    axis.cleanStacks();
	                }
	            },

	            /**
	             * Set the extremes and optionally redraw
	             * @param {Number} newMin
	             * @param {Number} newMax
	             * @param {Boolean} redraw
	             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	             *    configuration
	             * @param {Object} eventArguments
	             *
	             */
	            setExtremes: function(newMin, newMax, redraw, animation, eventArguments) {
	                var axis = this,
	                    chart = axis.chart;

	                redraw = pick(redraw, true); // defaults to true

	                each(axis.series, function(serie) {
	                    delete serie.kdTree;
	                });

	                // Extend the arguments with min and max
	                eventArguments = extend(eventArguments, {
	                    min: newMin,
	                    max: newMax
	                });

	                // Fire the event
	                fireEvent(axis, 'setExtremes', eventArguments, function() { // the default event handler

	                    axis.userMin = newMin;
	                    axis.userMax = newMax;
	                    axis.eventArgs = eventArguments;

	                    if (redraw) {
	                        chart.redraw(animation);
	                    }
	                });
	            },

	            /**
	             * Overridable method for zooming chart. Pulled out in a separate method to allow overriding
	             * in stock charts.
	             */
	            zoom: function(newMin, newMax) {
	                var dataMin = this.dataMin,
	                    dataMax = this.dataMax,
	                    options = this.options,
	                    min = Math.min(dataMin, pick(options.min, dataMin)),
	                    max = Math.max(dataMax, pick(options.max, dataMax));

	                if (newMin !== this.min || newMax !== this.max) { // #5790

	                    // Prevent pinch zooming out of range. Check for defined is for #1946. #1734.
	                    if (!this.allowZoomOutside) {
	                        // #6014, sometimes newMax will be smaller than min (or newMin will be larger than max).
	                        if (defined(dataMin)) {
	                            if (newMin < min) {
	                                newMin = min;
	                            }
	                            if (newMin > max) {
	                                newMin = max;
	                            }
	                        }
	                        if (defined(dataMax)) {
	                            if (newMax < min) {
	                                newMax = min;
	                            }
	                            if (newMax > max) {
	                                newMax = max;
	                            }
	                        }
	                    }

	                    // In full view, displaying the reset zoom button is not required
	                    this.displayBtn = newMin !== undefined || newMax !== undefined;

	                    // Do it
	                    this.setExtremes(
	                        newMin,
	                        newMax,
	                        false,
	                        undefined, {
	                            trigger: 'zoom'
	                        }
	                    );
	                }

	                return true;
	            },

	            /**
	             * Update the axis metrics
	             */
	            setAxisSize: function() {
	                var chart = this.chart,
	                    options = this.options,
	                    offsets = options.offsets || [0, 0, 0, 0], // top / right / bottom / left
	                    horiz = this.horiz,
	                    width = pick(options.width, chart.plotWidth - offsets[3] + offsets[1]),
	                    height = pick(options.height, chart.plotHeight - offsets[0] + offsets[2]),
	                    top = pick(options.top, chart.plotTop + offsets[0]),
	                    left = pick(options.left, chart.plotLeft + offsets[3]),
	                    percentRegex = /%$/;

	                // Check for percentage based input values. Rounding fixes problems with
	                // column overflow and plot line filtering (#4898, #4899)
	                if (percentRegex.test(height)) {
	                    height = Math.round(parseFloat(height) / 100 * chart.plotHeight);
	                }
	                if (percentRegex.test(top)) {
	                    top = Math.round(parseFloat(top) / 100 * chart.plotHeight + chart.plotTop);
	                }

	                // Expose basic values to use in Series object and navigator
	                this.left = left;
	                this.top = top;
	                this.width = width;
	                this.height = height;
	                this.bottom = chart.chartHeight - height - top;
	                this.right = chart.chartWidth - width - left;

	                // Direction agnostic properties
	                this.len = Math.max(horiz ? width : height, 0); // Math.max fixes #905
	                this.pos = horiz ? left : top; // distance from SVG origin
	            },

	            /**
	             * Get the actual axis extremes
	             */
	            getExtremes: function() {
	                var axis = this,
	                    isLog = axis.isLog,
	                    lin2log = axis.lin2log;

	                return {
	                    min: isLog ? correctFloat(lin2log(axis.min)) : axis.min,
	                    max: isLog ? correctFloat(lin2log(axis.max)) : axis.max,
	                    dataMin: axis.dataMin,
	                    dataMax: axis.dataMax,
	                    userMin: axis.userMin,
	                    userMax: axis.userMax
	                };
	            },

	            /**
	             * Get the zero plane either based on zero or on the min or max value.
	             * Used in bar and area plots
	             */
	            getThreshold: function(threshold) {
	                var axis = this,
	                    isLog = axis.isLog,
	                    lin2log = axis.lin2log,
	                    realMin = isLog ? lin2log(axis.min) : axis.min,
	                    realMax = isLog ? lin2log(axis.max) : axis.max;

	                if (threshold === null) {
	                    threshold = realMin;
	                } else if (realMin > threshold) {
	                    threshold = realMin;
	                } else if (realMax < threshold) {
	                    threshold = realMax;
	                }

	                return axis.translate(threshold, 0, 1, 0, 1);
	            },

	            /**
	             * Compute auto alignment for the axis label based on which side the axis is on
	             * and the given rotation for the label
	             */
	            autoLabelAlign: function(rotation) {
	                var ret,
	                    angle = (pick(rotation, 0) - (this.side * 90) + 720) % 360;

	                if (angle > 15 && angle < 165) {
	                    ret = 'right';
	                } else if (angle > 195 && angle < 345) {
	                    ret = 'left';
	                } else {
	                    ret = 'center';
	                }
	                return ret;
	            },

	            /**
	             * Get the tick length and width for the axis.
	             * @param   {String} prefix 'tick' or 'minorTick'
	             * @returns {Array}        An array of tickLength and tickWidth
	             */
	            tickSize: function(prefix) {
	                var options = this.options,
	                    tickLength = options[prefix + 'Length'],
	                    tickWidth = pick(options[prefix + 'Width'], prefix === 'tick' && this.isXAxis ? 1 : 0); // X axis defaults to 1

	                if (tickWidth && tickLength) {
	                    // Negate the length
	                    if (options[prefix + 'Position'] === 'inside') {
	                        tickLength = -tickLength;
	                    }
	                    return [tickLength, tickWidth];
	                }

	            },

	            /**
	             * Return the size of the labels
	             */
	            labelMetrics: function() {
	                return this.chart.renderer.fontMetrics(
	                    this.options.labels.style && this.options.labels.style.fontSize,
	                    this.ticks[0] && this.ticks[0].label
	                );
	            },

	            /**
	             * Prevent the ticks from getting so close we can't draw the labels. On a horizontal
	             * axis, this is handled by rotating the labels, removing ticks and adding ellipsis.
	             * On a vertical axis remove ticks and add ellipsis.
	             */
	            unsquish: function() {
	                var labelOptions = this.options.labels,
	                    horiz = this.horiz,
	                    tickInterval = this.tickInterval,
	                    newTickInterval = tickInterval,
	                    slotSize = this.len / (((this.categories ? 1 : 0) + this.max - this.min) / tickInterval),
	                    rotation,
	                    rotationOption = labelOptions.rotation,
	                    labelMetrics = this.labelMetrics(),
	                    step,
	                    bestScore = Number.MAX_VALUE,
	                    autoRotation,
	                    // Return the multiple of tickInterval that is needed to avoid collision
	                    getStep = function(spaceNeeded) {
	                        var step = spaceNeeded / (slotSize || 1);
	                        step = step > 1 ? Math.ceil(step) : 1;
	                        return step * tickInterval;
	                    };

	                if (horiz) {
	                    autoRotation = !labelOptions.staggerLines && !labelOptions.step && ( // #3971
	                        defined(rotationOption) ? [rotationOption] :
	                        slotSize < pick(labelOptions.autoRotationLimit, 80) && labelOptions.autoRotation
	                    );

	                    if (autoRotation) {

	                        // Loop over the given autoRotation options, and determine which gives the best score. The
	                        // best score is that with the lowest number of steps and a rotation closest to horizontal.
	                        each(autoRotation, function(rot) {
	                            var score;

	                            if (rot === rotationOption || (rot && rot >= -90 && rot <= 90)) { // #3891

	                                step = getStep(Math.abs(labelMetrics.h / Math.sin(deg2rad * rot)));

	                                score = step + Math.abs(rot / 360);

	                                if (score < bestScore) {
	                                    bestScore = score;
	                                    rotation = rot;
	                                    newTickInterval = step;
	                                }
	                            }
	                        });
	                    }

	                } else if (!labelOptions.step) { // #4411
	                    newTickInterval = getStep(labelMetrics.h);
	                }

	                this.autoRotation = autoRotation;
	                this.labelRotation = pick(rotation, rotationOption);

	                return newTickInterval;
	            },

	            /**
	             * Get the general slot width for this axis. This may change between the pre-render (from Axis.getOffset) 
	             * and the final tick rendering and placement (#5086).
	             */
	            getSlotWidth: function() {
	                var chart = this.chart,
	                    horiz = this.horiz,
	                    labelOptions = this.options.labels,
	                    slotCount = Math.max(this.tickPositions.length - (this.categories ? 0 : 1), 1),
	                    marginLeft = chart.margin[3];

	                return (
	                    horiz &&
	                    (labelOptions.step || 0) < 2 &&
	                    !labelOptions.rotation && // #4415
	                    ((this.staggerLines || 1) * this.len) / slotCount
	                ) || (!horiz && (
	                    (marginLeft && (marginLeft - chart.spacing[3])) ||
	                    chart.chartWidth * 0.33
	                )); // #1580, #1931

	            },

	            /**
	             * Render the axis labels and determine whether ellipsis or rotation need to be applied
	             */
	            renderUnsquish: function() {
	                var chart = this.chart,
	                    renderer = chart.renderer,
	                    tickPositions = this.tickPositions,
	                    ticks = this.ticks,
	                    labelOptions = this.options.labels,
	                    horiz = this.horiz,
	                    slotWidth = this.getSlotWidth(),
	                    innerWidth = Math.max(1, Math.round(slotWidth - 2 * (labelOptions.padding || 5))),
	                    attr = {},
	                    labelMetrics = this.labelMetrics(),
	                    textOverflowOption = labelOptions.style && labelOptions.style.textOverflow,
	                    css,
	                    maxLabelLength = 0,
	                    label,
	                    i,
	                    pos;

	                // Set rotation option unless it is "auto", like in gauges
	                if (!isString(labelOptions.rotation)) {
	                    attr.rotation = labelOptions.rotation || 0; // #4443
	                }

	                // Get the longest label length
	                each(tickPositions, function(tick) {
	                    tick = ticks[tick];
	                    if (tick && tick.labelLength > maxLabelLength) {
	                        maxLabelLength = tick.labelLength;
	                    }
	                });
	                this.maxLabelLength = maxLabelLength;


	                // Handle auto rotation on horizontal axis
	                if (this.autoRotation) {

	                    // Apply rotation only if the label is too wide for the slot, and
	                    // the label is wider than its height.
	                    if (maxLabelLength > innerWidth && maxLabelLength > labelMetrics.h) {
	                        attr.rotation = this.labelRotation;
	                    } else {
	                        this.labelRotation = 0;
	                    }

	                    // Handle word-wrap or ellipsis on vertical axis
	                } else if (slotWidth) {
	                    // For word-wrap or ellipsis
	                    css = {
	                        width: innerWidth + 'px'
	                    };

	                    if (!textOverflowOption) {
	                        css.textOverflow = 'clip';

	                        // On vertical axis, only allow word wrap if there is room for more lines.
	                        i = tickPositions.length;
	                        while (!horiz && i--) {
	                            pos = tickPositions[i];
	                            label = ticks[pos].label;
	                            if (label) {
	                                // Reset ellipsis in order to get the correct bounding box (#4070)
	                                if (label.styles && label.styles.textOverflow === 'ellipsis') {
	                                    label.css({
	                                        textOverflow: 'clip'
	                                    });

	                                    // Set the correct width in order to read the bounding box height (#4678, #5034)
	                                } else if (ticks[pos].labelLength > slotWidth) {
	                                    label.css({
	                                        width: slotWidth + 'px'
	                                    });
	                                }

	                                if (label.getBBox().height > this.len / tickPositions.length - (labelMetrics.h - labelMetrics.f)) {
	                                    label.specCss = {
	                                        textOverflow: 'ellipsis'
	                                    };
	                                }
	                            }
	                        }
	                    }
	                }


	                // Add ellipsis if the label length is significantly longer than ideal
	                if (attr.rotation) {
	                    css = {
	                        width: (maxLabelLength > chart.chartHeight * 0.5 ? chart.chartHeight * 0.33 : chart.chartHeight) + 'px'
	                    };
	                    if (!textOverflowOption) {
	                        css.textOverflow = 'ellipsis';
	                    }
	                }

	                // Set the explicit or automatic label alignment
	                this.labelAlign = labelOptions.align || this.autoLabelAlign(this.labelRotation);
	                if (this.labelAlign) {
	                    attr.align = this.labelAlign;
	                }

	                // Apply general and specific CSS
	                each(tickPositions, function(pos) {
	                    var tick = ticks[pos],
	                        label = tick && tick.label;
	                    if (label) {
	                        label.attr(attr); // This needs to go before the CSS in old IE (#4502)
	                        if (css) {
	                            label.css(merge(css, label.specCss));
	                        }
	                        delete label.specCss;
	                        tick.rotation = attr.rotation;
	                    }
	                });

	                // Note: Why is this not part of getLabelPosition?
	                this.tickRotCorr = renderer.rotCorr(labelMetrics.b, this.labelRotation || 0, this.side !== 0);
	            },

	            /**
	             * Return true if the axis has associated data
	             */
	            hasData: function() {
	                return this.hasVisibleSeries || (defined(this.min) && defined(this.max) && !!this.tickPositions);
	            },

	            /**
	             * Adds the title defined in axis.options.title.
	             * @param {Boolean} display - whether or not to display the title
	             */
	            addTitle: function(display) {
	                var axis = this,
	                    renderer = axis.chart.renderer,
	                    horiz = axis.horiz,
	                    opposite = axis.opposite,
	                    options = axis.options,
	                    axisTitleOptions = options.title,
	                    textAlign;

	                if (!axis.axisTitle) {
	                    textAlign = axisTitleOptions.textAlign;
	                    if (!textAlign) {
	                        textAlign = (horiz ? {
	                            low: 'left',
	                            middle: 'center',
	                            high: 'right'
	                        } : {
	                            low: opposite ? 'right' : 'left',
	                            middle: 'center',
	                            high: opposite ? 'left' : 'right'
	                        })[axisTitleOptions.align];
	                    }
	                    axis.axisTitle = renderer.text(
	                            axisTitleOptions.text,
	                            0,
	                            0,
	                            axisTitleOptions.useHTML
	                        )
	                        .attr({
	                            zIndex: 7,
	                            rotation: axisTitleOptions.rotation || 0,
	                            align: textAlign
	                        })
	                        .addClass('highcharts-axis-title')

	                    .css(axisTitleOptions.style)

	                    .add(axis.axisGroup);
	                    axis.axisTitle.isNew = true;
	                }

	                // hide or show the title depending on whether showEmpty is set
	                axis.axisTitle[display ? 'show' : 'hide'](true);
	            },

	            /**
	             * Generates a tick for initial positioning.
	             * @param  {number} pos - The tick position in axis values.
	             * @param  {number} i - The index of the tick in axis.tickPositions.
	             */
	            generateTick: function(pos) {
	                var ticks = this.ticks;

	                if (!ticks[pos]) {
	                    ticks[pos] = new Tick(this, pos);
	                } else {
	                    ticks[pos].addLabel(); // update labels depending on tick interval
	                }
	            },

	            /**
	             * Render the tick labels to a preliminary position to get their sizes
	             */
	            getOffset: function() {
	                var axis = this,
	                    chart = axis.chart,
	                    renderer = chart.renderer,
	                    options = axis.options,
	                    tickPositions = axis.tickPositions,
	                    ticks = axis.ticks,
	                    horiz = axis.horiz,
	                    side = axis.side,
	                    invertedSide = chart.inverted ? [1, 0, 3, 2][side] : side,
	                    hasData,
	                    showAxis,
	                    titleOffset = 0,
	                    titleOffsetOption,
	                    titleMargin = 0,
	                    axisTitleOptions = options.title,
	                    labelOptions = options.labels,
	                    labelOffset = 0, // reset
	                    labelOffsetPadded,
	                    axisOffset = chart.axisOffset,
	                    clipOffset = chart.clipOffset,
	                    clip,
	                    directionFactor = [-1, 1, 1, -1][side],
	                    n,
	                    className = options.className,
	                    axisParent = axis.axisParent, // Used in color axis
	                    lineHeightCorrection,
	                    tickSize = this.tickSize('tick');

	                // For reuse in Axis.render
	                hasData = axis.hasData();
	                axis.showAxis = showAxis = hasData || pick(options.showEmpty, true);

	                // Set/reset staggerLines
	                axis.staggerLines = axis.horiz && labelOptions.staggerLines;

	                // Create the axisGroup and gridGroup elements on first iteration
	                if (!axis.axisGroup) {
	                    axis.gridGroup = renderer.g('grid')
	                        .attr({
	                            zIndex: options.gridZIndex || 1
	                        })
	                        .addClass('highcharts-' + this.coll.toLowerCase() + '-grid ' + (className || ''))
	                        .add(axisParent);
	                    axis.axisGroup = renderer.g('axis')
	                        .attr({
	                            zIndex: options.zIndex || 2
	                        })
	                        .addClass('highcharts-' + this.coll.toLowerCase() + ' ' + (className || ''))
	                        .add(axisParent);
	                    axis.labelGroup = renderer.g('axis-labels')
	                        .attr({
	                            zIndex: labelOptions.zIndex || 7
	                        })
	                        .addClass('highcharts-' + axis.coll.toLowerCase() + '-labels ' + (className || ''))
	                        .add(axisParent);
	                }

	                if (hasData || axis.isLinked) {

	                    // Generate ticks
	                    each(tickPositions, function(pos, i) {
	                        // i is not used here, but may be used in overrides
	                        axis.generateTick(pos, i);
	                    });

	                    axis.renderUnsquish();


	                    // Left side must be align: right and right side must have align: left for labels
	                    if (labelOptions.reserveSpace !== false && (side === 0 || side === 2 || {
	                            1: 'left',
	                            3: 'right'
	                        }[side] === axis.labelAlign || axis.labelAlign === 'center')) {
	                        each(tickPositions, function(pos) {

	                            // get the highest offset
	                            labelOffset = Math.max(
	                                ticks[pos].getLabelSize(),
	                                labelOffset
	                            );
	                        });
	                    }

	                    if (axis.staggerLines) {
	                        labelOffset *= axis.staggerLines;
	                        axis.labelOffset = labelOffset * (axis.opposite ? -1 : 1);
	                    }


	                } else { // doesn't have data
	                    for (n in ticks) {
	                        ticks[n].destroy();
	                        delete ticks[n];
	                    }
	                }

	                if (axisTitleOptions && axisTitleOptions.text && axisTitleOptions.enabled !== false) {
	                    axis.addTitle(showAxis);

	                    if (showAxis) {
	                        titleOffset = axis.axisTitle.getBBox()[horiz ? 'height' : 'width'];
	                        titleOffsetOption = axisTitleOptions.offset;
	                        titleMargin = defined(titleOffsetOption) ? 0 : pick(axisTitleOptions.margin, horiz ? 5 : 10);
	                    }
	                }

	                // Render the axis line
	                axis.renderLine();

	                // handle automatic or user set offset
	                axis.offset = directionFactor * pick(options.offset, axisOffset[side]);

	                axis.tickRotCorr = axis.tickRotCorr || {
	                    x: 0,
	                    y: 0
	                }; // polar
	                if (side === 0) {
	                    lineHeightCorrection = -axis.labelMetrics().h;
	                } else if (side === 2) {
	                    lineHeightCorrection = axis.tickRotCorr.y;
	                } else {
	                    lineHeightCorrection = 0;
	                }

	                // Find the padded label offset
	                labelOffsetPadded = Math.abs(labelOffset) + titleMargin;
	                if (labelOffset) {
	                    labelOffsetPadded -= lineHeightCorrection;
	                    labelOffsetPadded += directionFactor * (horiz ? pick(labelOptions.y, axis.tickRotCorr.y + directionFactor * 8) : labelOptions.x);
	                }
	                axis.axisTitleMargin = pick(titleOffsetOption, labelOffsetPadded);

	                axisOffset[side] = Math.max(
	                    axisOffset[side],
	                    axis.axisTitleMargin + titleOffset + directionFactor * axis.offset,
	                    labelOffsetPadded, // #3027
	                    hasData && tickPositions.length && tickSize ? tickSize[0] : 0 // #4866
	                );

	                // Decide the clipping needed to keep the graph inside the plot area and axis lines
	                clip = options.offset ? 0 : Math.floor(axis.axisLine.strokeWidth() / 2) * 2; // #4308, #4371
	                clipOffset[invertedSide] = Math.max(clipOffset[invertedSide], clip);
	            },

	            /**
	             * Get the path for the axis line
	             */
	            getLinePath: function(lineWidth) {
	                var chart = this.chart,
	                    opposite = this.opposite,
	                    offset = this.offset,
	                    horiz = this.horiz,
	                    lineLeft = this.left + (opposite ? this.width : 0) + offset,
	                    lineTop = chart.chartHeight - this.bottom - (opposite ? this.height : 0) + offset;

	                if (opposite) {
	                    lineWidth *= -1; // crispify the other way - #1480, #1687
	                }

	                return chart.renderer
	                    .crispLine([
	                        'M',
	                        horiz ?
	                        this.left :
	                        lineLeft,
	                        horiz ?
	                        lineTop :
	                        this.top,
	                        'L',
	                        horiz ?
	                        chart.chartWidth - this.right :
	                        lineLeft,
	                        horiz ?
	                        lineTop :
	                        chart.chartHeight - this.bottom
	                    ], lineWidth);
	            },

	            /**
	             * Render the axis line
	             */
	            renderLine: function() {
	                if (!this.axisLine) {
	                    this.axisLine = this.chart.renderer.path()
	                        .addClass('highcharts-axis-line')
	                        .add(this.axisGroup);


	                    this.axisLine.attr({
	                        stroke: this.options.lineColor,
	                        'stroke-width': this.options.lineWidth,
	                        zIndex: 7
	                    });

	                }
	            },

	            /**
	             * Position the title
	             */
	            getTitlePosition: function() {
	                // compute anchor points for each of the title align options
	                var horiz = this.horiz,
	                    axisLeft = this.left,
	                    axisTop = this.top,
	                    axisLength = this.len,
	                    axisTitleOptions = this.options.title,
	                    margin = horiz ? axisLeft : axisTop,
	                    opposite = this.opposite,
	                    offset = this.offset,
	                    xOption = axisTitleOptions.x || 0,
	                    yOption = axisTitleOptions.y || 0,
	                    fontSize = this.chart.renderer.fontMetrics(axisTitleOptions.style && axisTitleOptions.style.fontSize, this.axisTitle).f,

	                    // the position in the length direction of the axis
	                    alongAxis = {
	                        low: margin + (horiz ? 0 : axisLength),
	                        middle: margin + axisLength / 2,
	                        high: margin + (horiz ? axisLength : 0)
	                    }[axisTitleOptions.align],

	                    // the position in the perpendicular direction of the axis
	                    offAxis = (horiz ? axisTop + this.height : axisLeft) +
	                    (horiz ? 1 : -1) * // horizontal axis reverses the margin
	                    (opposite ? -1 : 1) * // so does opposite axes
	                    this.axisTitleMargin +
	                    (this.side === 2 ? fontSize : 0);

	                return {
	                    x: horiz ?
	                        alongAxis + xOption : offAxis + (opposite ? this.width : 0) + offset + xOption,
	                    y: horiz ?
	                        offAxis + yOption - (opposite ? this.height : 0) + offset : alongAxis + yOption
	                };
	            },

	            /**
	             * Render a minor tick into the given position. If a minor tick already 
	             * exists in this position, move it.
	             * @param  {number} pos - The position in axis values.
	             */
	            renderMinorTick: function(pos) {
	                var slideInTicks = this.chart.hasRendered && isNumber(this.oldMin),
	                    minorTicks = this.minorTicks;

	                if (!minorTicks[pos]) {
	                    minorTicks[pos] = new Tick(this, pos, 'minor');
	                }

	                // Render new ticks in old position
	                if (slideInTicks && minorTicks[pos].isNew) {
	                    minorTicks[pos].render(null, true);
	                }

	                minorTicks[pos].render(null, false, 1);
	            },

	            /**
	             * Render a major tick into the given position. If a tick already exists
	             * in this position, move it.
	             * @param  {number} pos - The position in axis values
	             * @param  {number} i - The tick index
	             */
	            renderTick: function(pos, i) {
	                var isLinked = this.isLinked,
	                    ticks = this.ticks,
	                    slideInTicks = this.chart.hasRendered && isNumber(this.oldMin);

	                // Linked axes need an extra check to find out if
	                if (!isLinked || (pos >= this.min && pos <= this.max)) {

	                    if (!ticks[pos]) {
	                        ticks[pos] = new Tick(this, pos);
	                    }

	                    // render new ticks in old position
	                    if (slideInTicks && ticks[pos].isNew) {
	                        ticks[pos].render(i, true, 0.1);
	                    }

	                    ticks[pos].render(i);
	                }
	            },

	            /**
	             * Render the axis
	             */
	            render: function() {
	                var axis = this,
	                    chart = axis.chart,
	                    renderer = chart.renderer,
	                    options = axis.options,
	                    isLog = axis.isLog,
	                    lin2log = axis.lin2log,
	                    isLinked = axis.isLinked,
	                    tickPositions = axis.tickPositions,
	                    axisTitle = axis.axisTitle,
	                    ticks = axis.ticks,
	                    minorTicks = axis.minorTicks,
	                    alternateBands = axis.alternateBands,
	                    stackLabelOptions = options.stackLabels,
	                    alternateGridColor = options.alternateGridColor,
	                    tickmarkOffset = axis.tickmarkOffset,
	                    axisLine = axis.axisLine,
	                    showAxis = axis.showAxis,
	                    animation = animObject(renderer.globalAnimation),
	                    from,
	                    to;

	                // Reset
	                axis.labelEdge.length = 0;
	                //axis.justifyToPlot = overflow === 'justify';
	                axis.overlap = false;

	                // Mark all elements inActive before we go over and mark the active ones
	                each([ticks, minorTicks, alternateBands], function(coll) {
	                    var pos;
	                    for (pos in coll) {
	                        coll[pos].isActive = false;
	                    }
	                });

	                // If the series has data draw the ticks. Else only the line and title
	                if (axis.hasData() || isLinked) {

	                    // minor ticks
	                    if (axis.minorTickInterval && !axis.categories) {
	                        each(axis.getMinorTickPositions(), function(pos) {
	                            axis.renderMinorTick(pos);
	                        });
	                    }

	                    // Major ticks. Pull out the first item and render it last so that
	                    // we can get the position of the neighbour label. #808.
	                    if (tickPositions.length) { // #1300
	                        each(tickPositions, function(pos, i) {
	                            axis.renderTick(pos, i);
	                        });
	                        // In a categorized axis, the tick marks are displayed between labels. So
	                        // we need to add a tick mark and grid line at the left edge of the X axis.
	                        if (tickmarkOffset && (axis.min === 0 || axis.single)) {
	                            if (!ticks[-1]) {
	                                ticks[-1] = new Tick(axis, -1, null, true);
	                            }
	                            ticks[-1].render(-1);
	                        }

	                    }

	                    // alternate grid color
	                    if (alternateGridColor) {
	                        each(tickPositions, function(pos, i) {
	                            to = tickPositions[i + 1] !== undefined ? tickPositions[i + 1] + tickmarkOffset : axis.max - tickmarkOffset;
	                            if (i % 2 === 0 && pos < axis.max && to <= axis.max + (chart.polar ? -tickmarkOffset : tickmarkOffset)) { // #2248, #4660
	                                if (!alternateBands[pos]) {
	                                    alternateBands[pos] = new PlotLineOrBand(axis);
	                                }
	                                from = pos + tickmarkOffset; // #949
	                                alternateBands[pos].options = {
	                                    from: isLog ? lin2log(from) : from,
	                                    to: isLog ? lin2log(to) : to,
	                                    color: alternateGridColor
	                                };
	                                alternateBands[pos].render();
	                                alternateBands[pos].isActive = true;
	                            }
	                        });
	                    }

	                    // custom plot lines and bands
	                    if (!axis._addedPlotLB) { // only first time
	                        each((options.plotLines || []).concat(options.plotBands || []), function(plotLineOptions) {
	                            axis.addPlotBandOrLine(plotLineOptions);
	                        });
	                        axis._addedPlotLB = true;
	                    }

	                } // end if hasData

	                // Remove inactive ticks
	                each([ticks, minorTicks, alternateBands], function(coll) {
	                    var pos,
	                        i,
	                        forDestruction = [],
	                        delay = animation.duration,
	                        destroyInactiveItems = function() {
	                            i = forDestruction.length;
	                            while (i--) {
	                                // When resizing rapidly, the same items may be destroyed in different timeouts,
	                                // or the may be reactivated
	                                if (coll[forDestruction[i]] && !coll[forDestruction[i]].isActive) {
	                                    coll[forDestruction[i]].destroy();
	                                    delete coll[forDestruction[i]];
	                                }
	                            }

	                        };

	                    for (pos in coll) {

	                        if (!coll[pos].isActive) {
	                            // Render to zero opacity
	                            coll[pos].render(pos, false, 0);
	                            coll[pos].isActive = false;
	                            forDestruction.push(pos);
	                        }
	                    }

	                    // When the objects are finished fading out, destroy them
	                    syncTimeout(
	                        destroyInactiveItems,
	                        coll === alternateBands || !chart.hasRendered || !delay ? 0 : delay
	                    );
	                });

	                // Set the axis line path
	                if (axisLine) {
	                    axisLine[axisLine.isPlaced ? 'animate' : 'attr']({
	                        d: this.getLinePath(axisLine.strokeWidth())
	                    });
	                    axisLine.isPlaced = true;

	                    // Show or hide the line depending on options.showEmpty
	                    axisLine[showAxis ? 'show' : 'hide'](true);
	                }

	                if (axisTitle && showAxis) {

	                    axisTitle[axisTitle.isNew ? 'attr' : 'animate'](
	                        axis.getTitlePosition()
	                    );
	                    axisTitle.isNew = false;
	                }

	                // Stacked totals:
	                if (stackLabelOptions && stackLabelOptions.enabled) {
	                    axis.renderStackTotals();
	                }
	                // End stacked totals

	                axis.isDirty = false;
	            },

	            /**
	             * Redraw the axis to reflect changes in the data or axis extremes
	             */
	            redraw: function() {

	                if (this.visible) {
	                    // render the axis
	                    this.render();

	                    // move plot lines and bands
	                    each(this.plotLinesAndBands, function(plotLine) {
	                        plotLine.render();
	                    });
	                }

	                // mark associated series as dirty and ready for redraw
	                each(this.series, function(series) {
	                    series.isDirty = true;
	                });

	            },

	            // Properties to survive after destroy, needed for Axis.update (#4317,
	            // #5773, #5881).
	            keepProps: ['extKey', 'hcEvents', 'names', 'series', 'userMax', 'userMin'],

	            /**
	             * Destroys an Axis instance.
	             */
	            destroy: function(keepEvents) {
	                var axis = this,
	                    stacks = axis.stacks,
	                    stackKey,
	                    plotLinesAndBands = axis.plotLinesAndBands,
	                    i,
	                    n;

	                // Remove the events
	                if (!keepEvents) {
	                    removeEvent(axis);
	                }

	                // Destroy each stack total
	                for (stackKey in stacks) {
	                    destroyObjectProperties(stacks[stackKey]);

	                    stacks[stackKey] = null;
	                }

	                // Destroy collections
	                each([axis.ticks, axis.minorTicks, axis.alternateBands], function(coll) {
	                    destroyObjectProperties(coll);
	                });
	                if (plotLinesAndBands) {
	                    i = plotLinesAndBands.length;
	                    while (i--) { // #1975
	                        plotLinesAndBands[i].destroy();
	                    }
	                }

	                // Destroy local variables
	                each(['stackTotalGroup', 'axisLine', 'axisTitle', 'axisGroup', 'gridGroup', 'labelGroup', 'cross'], function(prop) {
	                    if (axis[prop]) {
	                        axis[prop] = axis[prop].destroy();
	                    }
	                });

	                // Delete all properties and fall back to the prototype.
	                for (n in axis) {
	                    if (axis.hasOwnProperty(n) && inArray(n, axis.keepProps) === -1) {
	                        delete axis[n];
	                    }
	                }
	            },

	            /**
	             * Draw the crosshair
	             * 
	             * @param  {Object} e The event arguments from the modified pointer event
	             * @param  {Object} point The Point object
	             */
	            drawCrosshair: function(e, point) {

	                var path,
	                    options = this.crosshair,
	                    snap = pick(options.snap, true),
	                    pos,
	                    categorized,
	                    graphic = this.cross;

	                // Use last available event when updating non-snapped crosshairs without
	                // mouse interaction (#5287)
	                if (!e) {
	                    e = this.cross && this.cross.e;
	                }

	                if (
	                    // Disabled in options
	                    !this.crosshair ||
	                    // Snap
	                    ((defined(point) || !snap) === false)
	                ) {
	                    this.hideCrosshair();
	                } else {

	                    // Get the path
	                    if (!snap) {
	                        pos = e && (this.horiz ? e.chartX - this.pos : this.len - e.chartY + this.pos);
	                    } else if (defined(point)) {
	                        pos = this.isXAxis ? point.plotX : this.len - point.plotY; // #3834
	                    }

	                    if (defined(pos)) {
	                        path = this.getPlotLinePath(
	                            // First argument, value, only used on radial
	                            point && (this.isXAxis ? point.x : pick(point.stackY, point.y)),
	                            null,
	                            null,
	                            null,
	                            pos // Translated position
	                        ) || null; // #3189
	                    }

	                    if (!defined(path)) {
	                        this.hideCrosshair();
	                        return;
	                    }

	                    categorized = this.categories && !this.isRadial;

	                    // Draw the cross
	                    if (!graphic) {
	                        this.cross = graphic = this.chart.renderer
	                            .path()
	                            .addClass('highcharts-crosshair highcharts-crosshair-' +
	                                (categorized ? 'category ' : 'thin ') + options.className)
	                            .attr({
	                                zIndex: pick(options.zIndex, 2)
	                            })
	                            .add();


	                        // Presentational attributes
	                        graphic.attr({
	                            'stroke': options.color || (categorized ? color('#ccd6eb').setOpacity(0.25).get() : '#cccccc'),
	                            'stroke-width': pick(options.width, 1)
	                        });
	                        if (options.dashStyle) {
	                            graphic.attr({
	                                dashstyle: options.dashStyle
	                            });
	                        }


	                    }

	                    graphic.show().attr({
	                        d: path
	                    });

	                    if (categorized && !options.width) {
	                        graphic.attr({
	                            'stroke-width': this.transA
	                        });
	                    }
	                    this.cross.e = e;
	                }
	            },

	            /**
	             *	Hide the crosshair.
	             */
	            hideCrosshair: function() {
	                if (this.cross) {
	                    this.cross.hide();
	                }
	            }
	        }; // end Axis

	        extend(H.Axis.prototype, AxisPlotLineOrBandExtension);

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var Axis = H.Axis,
	            Date = H.Date,
	            dateFormat = H.dateFormat,
	            defaultOptions = H.defaultOptions,
	            defined = H.defined,
	            each = H.each,
	            extend = H.extend,
	            getMagnitude = H.getMagnitude,
	            getTZOffset = H.getTZOffset,
	            normalizeTickInterval = H.normalizeTickInterval,
	            pick = H.pick,
	            timeUnits = H.timeUnits;
	        /**
	         * Set the tick positions to a time unit that makes sense, for example
	         * on the first of each month or on every Monday. Return an array
	         * with the time positions. Used in datetime axes as well as for grouping
	         * data on a datetime axis.
	         *
	         * @param {Object} normalizedInterval The interval in axis values (ms) and the count
	         * @param {Number} min The minimum in axis values
	         * @param {Number} max The maximum in axis values
	         * @param {Number} startOfWeek
	         */
	        Axis.prototype.getTimeTicks = function(normalizedInterval, min, max, startOfWeek) {
	            var tickPositions = [],
	                i,
	                higherRanks = {},
	                useUTC = defaultOptions.global.useUTC,
	                minYear, // used in months and years as a basis for Date.UTC()
	                minDate = new Date(min - getTZOffset(min)),
	                makeTime = Date.hcMakeTime,
	                interval = normalizedInterval.unitRange,
	                count = normalizedInterval.count,
	                variableDayLength;

	            if (defined(min)) { // #1300
	                minDate[Date.hcSetMilliseconds](interval >= timeUnits.second ? 0 : // #3935
	                    count * Math.floor(minDate.getMilliseconds() / count)); // #3652, #3654

	                if (interval >= timeUnits.second) { // second
	                    minDate[Date.hcSetSeconds](interval >= timeUnits.minute ? 0 : // #3935
	                        count * Math.floor(minDate.getSeconds() / count));
	                }

	                if (interval >= timeUnits.minute) { // minute
	                    minDate[Date.hcSetMinutes](interval >= timeUnits.hour ? 0 :
	                        count * Math.floor(minDate[Date.hcGetMinutes]() / count));
	                }

	                if (interval >= timeUnits.hour) { // hour
	                    minDate[Date.hcSetHours](interval >= timeUnits.day ? 0 :
	                        count * Math.floor(minDate[Date.hcGetHours]() / count));
	                }

	                if (interval >= timeUnits.day) { // day
	                    minDate[Date.hcSetDate](interval >= timeUnits.month ? 1 :
	                        count * Math.floor(minDate[Date.hcGetDate]() / count));
	                }

	                if (interval >= timeUnits.month) { // month
	                    minDate[Date.hcSetMonth](interval >= timeUnits.year ? 0 :
	                        count * Math.floor(minDate[Date.hcGetMonth]() / count));
	                    minYear = minDate[Date.hcGetFullYear]();
	                }

	                if (interval >= timeUnits.year) { // year
	                    minYear -= minYear % count;
	                    minDate[Date.hcSetFullYear](minYear);
	                }

	                // week is a special case that runs outside the hierarchy
	                if (interval === timeUnits.week) {
	                    // get start of current week, independent of count
	                    minDate[Date.hcSetDate](minDate[Date.hcGetDate]() - minDate[Date.hcGetDay]() +
	                        pick(startOfWeek, 1));
	                }


	                // Get basics for variable time spans
	                minYear = minDate[Date.hcGetFullYear]();
	                var minMonth = minDate[Date.hcGetMonth](),
	                    minDateDate = minDate[Date.hcGetDate](),
	                    minHours = minDate[Date.hcGetHours]();


	                // Handle local timezone offset
	                if (Date.hcTimezoneOffset || Date.hcGetTimezoneOffset) {

	                    // Detect whether we need to take the DST crossover into
	                    // consideration. If we're crossing over DST, the day length may be
	                    // 23h or 25h and we need to compute the exact clock time for each
	                    // tick instead of just adding hours. This comes at a cost, so first
	                    // we found out if it is needed. #4951.
	                    variableDayLength =
	                        (!useUTC || !!Date.hcGetTimezoneOffset) &&
	                        (
	                            // Long range, assume we're crossing over.
	                            max - min > 4 * timeUnits.month ||
	                            // Short range, check if min and max are in different time 
	                            // zones.
	                            getTZOffset(min) !== getTZOffset(max)
	                        );

	                    // Adjust minDate to the offset date
	                    minDate = minDate.getTime();
	                    minDate = new Date(minDate + getTZOffset(minDate));
	                }


	                // Iterate and add tick positions at appropriate values
	                var time = minDate.getTime();
	                i = 1;
	                while (time < max) {
	                    tickPositions.push(time);

	                    // if the interval is years, use Date.UTC to increase years
	                    if (interval === timeUnits.year) {
	                        time = makeTime(minYear + i * count, 0);

	                        // if the interval is months, use Date.UTC to increase months
	                    } else if (interval === timeUnits.month) {
	                        time = makeTime(minYear, minMonth + i * count);

	                        // if we're using global time, the interval is not fixed as it jumps
	                        // one hour at the DST crossover
	                    } else if (variableDayLength && (interval === timeUnits.day || interval === timeUnits.week)) {
	                        time = makeTime(minYear, minMonth, minDateDate +
	                            i * count * (interval === timeUnits.day ? 1 : 7));

	                    } else if (variableDayLength && interval === timeUnits.hour) {
	                        time = makeTime(minYear, minMonth, minDateDate, minHours + i * count);

	                        // else, the interval is fixed and we use simple addition
	                    } else {
	                        time += interval * count;
	                    }

	                    i++;
	                }

	                // push the last time
	                tickPositions.push(time);


	                // Handle higher ranks. Mark new days if the time is on midnight
	                // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold to 
	                // prevent looping over dense data grouping (#6156).
	                if (interval <= timeUnits.hour && tickPositions.length < 10000) {
	                    each(tickPositions, function(time) {
	                        if (
	                            // Speed optimization, no need to run dateFormat unless
	                            // we're on a full or half hour
	                            time % 1800000 === 0 &&
	                            // Check for local or global midnight
	                            dateFormat('%H%M%S%L', time) === '000000000'
	                        ) {
	                            higherRanks[time] = 'day';
	                        }
	                    });
	                }
	            }


	            // record information on the chosen unit - for dynamic label formatter
	            tickPositions.info = extend(normalizedInterval, {
	                higherRanks: higherRanks,
	                totalRange: interval * count
	            });

	            return tickPositions;
	        };

	        /**
	         * Get a normalized tick interval for dates. Returns a configuration object with
	         * unit range (interval), count and name. Used to prepare data for getTimeTicks.
	         * Previously this logic was part of getTimeTicks, but as getTimeTicks now runs
	         * of segments in stock charts, the normalizing logic was extracted in order to
	         * prevent it for running over again for each segment having the same interval.
	         * #662, #697.
	         */
	        Axis.prototype.normalizeTimeTickInterval = function(tickInterval, unitsOption) {
	            var units = unitsOption || [
	                    [
	                        'millisecond', // unit name
	                        [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples
	                    ],
	                    [
	                        'second', [1, 2, 5, 10, 15, 30]
	                    ],
	                    [
	                        'minute', [1, 2, 5, 10, 15, 30]
	                    ],
	                    [
	                        'hour', [1, 2, 3, 4, 6, 8, 12]
	                    ],
	                    [
	                        'day', [1, 2]
	                    ],
	                    [
	                        'week', [1, 2]
	                    ],
	                    [
	                        'month', [1, 2, 3, 4, 6]
	                    ],
	                    [
	                        'year',
	                        null
	                    ]
	                ],
	                unit = units[units.length - 1], // default unit is years
	                interval = timeUnits[unit[0]],
	                multiples = unit[1],
	                count,
	                i;

	            // loop through the units to find the one that best fits the tickInterval
	            for (i = 0; i < units.length; i++) {
	                unit = units[i];
	                interval = timeUnits[unit[0]];
	                multiples = unit[1];


	                if (units[i + 1]) {
	                    // lessThan is in the middle between the highest multiple and the next unit.
	                    var lessThan = (interval * multiples[multiples.length - 1] +
	                        timeUnits[units[i + 1][0]]) / 2;

	                    // break and keep the current unit
	                    if (tickInterval <= lessThan) {
	                        break;
	                    }
	                }
	            }

	            // prevent 2.5 years intervals, though 25, 250 etc. are allowed
	            if (interval === timeUnits.year && tickInterval < 5 * interval) {
	                multiples = [1, 2, 5];
	            }

	            // get the count
	            count = normalizeTickInterval(
	                tickInterval / interval,
	                multiples,
	                unit[0] === 'year' ? Math.max(getMagnitude(tickInterval / interval), 1) : 1 // #1913, #2360
	            );

	            return {
	                unitRange: interval,
	                count: count,
	                unitName: unit[0]
	            };
	        };

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var Axis = H.Axis,
	            getMagnitude = H.getMagnitude,
	            map = H.map,
	            normalizeTickInterval = H.normalizeTickInterval,
	            pick = H.pick;
	        /**
	         * Methods defined on the Axis prototype
	         */

	        /**
	         * Set the tick positions of a logarithmic axis
	         */
	        Axis.prototype.getLogTickPositions = function(interval, min, max, minor) {
	            var axis = this,
	                options = axis.options,
	                axisLength = axis.len,
	                lin2log = axis.lin2log,
	                log2lin = axis.log2lin,
	                // Since we use this method for both major and minor ticks,
	                // use a local variable and return the result
	                positions = [];

	            // Reset
	            if (!minor) {
	                axis._minorAutoInterval = null;
	            }

	            // First case: All ticks fall on whole logarithms: 1, 10, 100 etc.
	            if (interval >= 0.5) {
	                interval = Math.round(interval);
	                positions = axis.getLinearTickPositions(interval, min, max);

	                // Second case: We need intermediary ticks. For example
	                // 1, 2, 4, 6, 8, 10, 20, 40 etc.
	            } else if (interval >= 0.08) {
	                var roundedMin = Math.floor(min),
	                    intermediate,
	                    i,
	                    j,
	                    len,
	                    pos,
	                    lastPos,
	                    break2;

	                if (interval > 0.3) {
	                    intermediate = [1, 2, 4];
	                } else if (interval > 0.15) { // 0.2 equals five minor ticks per 1, 10, 100 etc
	                    intermediate = [1, 2, 4, 6, 8];
	                } else { // 0.1 equals ten minor ticks per 1, 10, 100 etc
	                    intermediate = [1, 2, 3, 4, 5, 6, 7, 8, 9];
	                }

	                for (i = roundedMin; i < max + 1 && !break2; i++) {
	                    len = intermediate.length;
	                    for (j = 0; j < len && !break2; j++) {
	                        pos = log2lin(lin2log(i) * intermediate[j]);
	                        if (pos > min && (!minor || lastPos <= max) && lastPos !== undefined) { // #1670, lastPos is #3113
	                            positions.push(lastPos);
	                        }

	                        if (lastPos > max) {
	                            break2 = true;
	                        }
	                        lastPos = pos;
	                    }
	                }

	                // Third case: We are so deep in between whole logarithmic values that
	                // we might as well handle the tick positions like a linear axis. For
	                // example 1.01, 1.02, 1.03, 1.04.
	            } else {
	                var realMin = lin2log(min),
	                    realMax = lin2log(max),
	                    tickIntervalOption = options[minor ? 'minorTickInterval' : 'tickInterval'],
	                    filteredTickIntervalOption = tickIntervalOption === 'auto' ? null : tickIntervalOption,
	                    tickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1),
	                    totalPixelLength = minor ? axisLength / axis.tickPositions.length : axisLength;

	                interval = pick(
	                    filteredTickIntervalOption,
	                    axis._minorAutoInterval,
	                    (realMax - realMin) * tickPixelIntervalOption / (totalPixelLength || 1)
	                );

	                interval = normalizeTickInterval(
	                    interval,
	                    null,
	                    getMagnitude(interval)
	                );

	                positions = map(axis.getLinearTickPositions(
	                    interval,
	                    realMin,
	                    realMax
	                ), log2lin);

	                if (!minor) {
	                    axis._minorAutoInterval = interval / 5;
	                }
	            }

	            // Set the axis-level tickInterval variable
	            if (!minor) {
	                axis.tickInterval = interval;
	            }
	            return positions;
	        };

	        Axis.prototype.log2lin = function(num) {
	            return Math.log(num) / Math.LN10;
	        };

	        Axis.prototype.lin2log = function(num) {
	            return Math.pow(10, num);
	        };

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var dateFormat = H.dateFormat,
	            each = H.each,
	            extend = H.extend,
	            format = H.format,
	            isNumber = H.isNumber,
	            map = H.map,
	            merge = H.merge,
	            pick = H.pick,
	            splat = H.splat,
	            syncTimeout = H.syncTimeout,
	            timeUnits = H.timeUnits;
	        /**
	         * The tooltip object
	         * @param {Object} chart The chart instance
	         * @param {Object} options Tooltip options
	         */
	        H.Tooltip = function() {
	            this.init.apply(this, arguments);
	        };

	        H.Tooltip.prototype = {

	            init: function(chart, options) {

	                // Save the chart and options
	                this.chart = chart;
	                this.options = options;

	                // Keep track of the current series
	                //this.currentSeries = undefined;

	                // List of crosshairs
	                this.crosshairs = [];

	                // Current values of x and y when animating
	                this.now = {
	                    x: 0,
	                    y: 0
	                };

	                // The tooltip is initially hidden
	                this.isHidden = true;



	                // Public property for getting the shared state.
	                this.split = options.split && !chart.inverted;
	                this.shared = options.shared || this.split;

	            },

	            /**
	             * Destroy the single tooltips in a split tooltip.
	             * If the tooltip is active then it is not destroyed, unless forced to.
	             * @param  {boolean} force Force destroy all tooltips.
	             * @return {undefined}
	             */
	            cleanSplit: function(force) {
	                each(this.chart.series, function(series) {
	                    var tt = series && series.tt;
	                    if (tt) {
	                        if (!tt.isActive || force) {
	                            series.tt = tt.destroy();
	                        } else {
	                            tt.isActive = false;
	                        }
	                    }
	                });
	            },




	            /**
	             * Create the Tooltip label element if it doesn't exist, then return the
	             * label.
	             */
	            getLabel: function() {

	                var renderer = this.chart.renderer,
	                    options = this.options;

	                if (!this.label) {
	                    // Create the label
	                    if (this.split) {
	                        this.label = renderer.g('tooltip');
	                    } else {
	                        this.label = renderer.label(
	                                '',
	                                0,
	                                0,
	                                options.shape || 'callout',
	                                null,
	                                null,
	                                options.useHTML,
	                                null,
	                                'tooltip'
	                            )
	                            .attr({
	                                padding: options.padding,
	                                r: options.borderRadius
	                            });


	                        this.label
	                            .attr({
	                                'fill': options.backgroundColor,
	                                'stroke-width': options.borderWidth
	                            })
	                            // #2301, #2657
	                            .css(options.style)
	                            .shadow(options.shadow);

	                    }



	                    this.label
	                        .attr({
	                            zIndex: 8
	                        })
	                        .add();
	                }
	                return this.label;
	            },

	            update: function(options) {
	                this.destroy();
	                this.init(this.chart, merge(true, this.options, options));
	            },

	            /**
	             * Destroy the tooltip and its elements.
	             */
	            destroy: function() {
	                // Destroy and clear local variables
	                if (this.label) {
	                    this.label = this.label.destroy();
	                }
	                if (this.split && this.tt) {
	                    this.cleanSplit(this.chart, true);
	                    this.tt = this.tt.destroy();
	                }
	                clearTimeout(this.hideTimer);
	                clearTimeout(this.tooltipTimeout);
	            },

	            /**
	             * Provide a soft movement for the tooltip
	             *
	             * @param {Number} x
	             * @param {Number} y
	             * @private
	             */
	            move: function(x, y, anchorX, anchorY) {
	                var tooltip = this,
	                    now = tooltip.now,
	                    animate = tooltip.options.animation !== false && !tooltip.isHidden &&
	                    // When we get close to the target position, abort animation and land on the right place (#3056)
	                    (Math.abs(x - now.x) > 1 || Math.abs(y - now.y) > 1),
	                    skipAnchor = tooltip.followPointer || tooltip.len > 1;

	                // Get intermediate values for animation
	                extend(now, {
	                    x: animate ? (2 * now.x + x) / 3 : x,
	                    y: animate ? (now.y + y) / 2 : y,
	                    anchorX: skipAnchor ? undefined : animate ? (2 * now.anchorX + anchorX) / 3 : anchorX,
	                    anchorY: skipAnchor ? undefined : animate ? (now.anchorY + anchorY) / 2 : anchorY
	                });

	                // Move to the intermediate value
	                tooltip.getLabel().attr(now);


	                // Run on next tick of the mouse tracker
	                if (animate) {

	                    // Never allow two timeouts
	                    clearTimeout(this.tooltipTimeout);

	                    // Set the fixed interval ticking for the smooth tooltip
	                    this.tooltipTimeout = setTimeout(function() {
	                        // The interval function may still be running during destroy,
	                        // so check that the chart is really there before calling.
	                        if (tooltip) {
	                            tooltip.move(x, y, anchorX, anchorY);
	                        }
	                    }, 32);

	                }
	            },

	            /**
	             * Hide the tooltip
	             */
	            hide: function(delay) {
	                var tooltip = this;
	                clearTimeout(this.hideTimer); // disallow duplicate timers (#1728, #1766)
	                delay = pick(delay, this.options.hideDelay, 500);
	                if (!this.isHidden) {
	                    this.hideTimer = syncTimeout(function() {
	                        tooltip.getLabel()[delay ? 'fadeOut' : 'hide']();
	                        tooltip.isHidden = true;
	                    }, delay);
	                }
	            },

	            /**
	             * Extendable method to get the anchor position of the tooltip
	             * from a point or set of points
	             */
	            getAnchor: function(points, mouseEvent) {
	                var ret,
	                    chart = this.chart,
	                    inverted = chart.inverted,
	                    plotTop = chart.plotTop,
	                    plotLeft = chart.plotLeft,
	                    plotX = 0,
	                    plotY = 0,
	                    yAxis,
	                    xAxis;

	                points = splat(points);

	                // Pie uses a special tooltipPos
	                ret = points[0].tooltipPos;

	                // When tooltip follows mouse, relate the position to the mouse
	                if (this.followPointer && mouseEvent) {
	                    if (mouseEvent.chartX === undefined) {
	                        mouseEvent = chart.pointer.normalize(mouseEvent);
	                    }
	                    ret = [
	                        mouseEvent.chartX - chart.plotLeft,
	                        mouseEvent.chartY - plotTop
	                    ];
	                }
	                // When shared, use the average position
	                if (!ret) {
	                    each(points, function(point) {
	                        yAxis = point.series.yAxis;
	                        xAxis = point.series.xAxis;
	                        plotX += point.plotX + (!inverted && xAxis ? xAxis.left - plotLeft : 0);
	                        plotY += (point.plotLow ? (point.plotLow + point.plotHigh) / 2 : point.plotY) +
	                            (!inverted && yAxis ? yAxis.top - plotTop : 0); // #1151
	                    });

	                    plotX /= points.length;
	                    plotY /= points.length;

	                    ret = [
	                        inverted ? chart.plotWidth - plotY : plotX,
	                        this.shared && !inverted && points.length > 1 && mouseEvent ?
	                        mouseEvent.chartY - plotTop : // place shared tooltip next to the mouse (#424)
	                        inverted ? chart.plotHeight - plotX : plotY
	                    ];
	                }

	                return map(ret, Math.round);
	            },

	            /**
	             * Place the tooltip in a chart without spilling over
	             * and not covering the point it self.
	             */
	            getPosition: function(boxWidth, boxHeight, point) {

	                var chart = this.chart,
	                    distance = this.distance,
	                    ret = {},
	                    h = point.h || 0, // #4117
	                    swapped,
	                    first = ['y', chart.chartHeight, boxHeight,
	                        point.plotY + chart.plotTop, chart.plotTop,
	                        chart.plotTop + chart.plotHeight
	                    ],
	                    second = ['x', chart.chartWidth, boxWidth,
	                        point.plotX + chart.plotLeft, chart.plotLeft,
	                        chart.plotLeft + chart.plotWidth
	                    ],
	                    // The far side is right or bottom
	                    preferFarSide = !this.followPointer && pick(point.ttBelow, !chart.inverted === !!point.negative), // #4984
	                    /**
	                     * Handle the preferred dimension. When the preferred dimension is tooltip
	                     * on top or bottom of the point, it will look for space there.
	                     */
	                    firstDimension = function(dim, outerSize, innerSize, point, min, max) {
	                        var roomLeft = innerSize < point - distance,
	                            roomRight = point + distance + innerSize < outerSize,
	                            alignedLeft = point - distance - innerSize,
	                            alignedRight = point + distance;

	                        if (preferFarSide && roomRight) {
	                            ret[dim] = alignedRight;
	                        } else if (!preferFarSide && roomLeft) {
	                            ret[dim] = alignedLeft;
	                        } else if (roomLeft) {
	                            ret[dim] = Math.min(max - innerSize, alignedLeft - h < 0 ? alignedLeft : alignedLeft - h);
	                        } else if (roomRight) {
	                            ret[dim] = Math.max(
	                                min,
	                                alignedRight + h + innerSize > outerSize ?
	                                alignedRight :
	                                alignedRight + h
	                            );
	                        } else {
	                            return false;
	                        }
	                    },
	                    /**
	                     * Handle the secondary dimension. If the preferred dimension is tooltip
	                     * on top or bottom of the point, the second dimension is to align the tooltip
	                     * above the point, trying to align center but allowing left or right
	                     * align within the chart box.
	                     */
	                    secondDimension = function(dim, outerSize, innerSize, point) {
	                        var retVal;

	                        // Too close to the edge, return false and swap dimensions
	                        if (point < distance || point > outerSize - distance) {
	                            retVal = false;
	                            // Align left/top
	                        } else if (point < innerSize / 2) {
	                            ret[dim] = 1;
	                            // Align right/bottom
	                        } else if (point > outerSize - innerSize / 2) {
	                            ret[dim] = outerSize - innerSize - 2;
	                            // Align center
	                        } else {
	                            ret[dim] = point - innerSize / 2;
	                        }
	                        return retVal;
	                    },
	                    /**
	                     * Swap the dimensions
	                     */
	                    swap = function(count) {
	                        var temp = first;
	                        first = second;
	                        second = temp;
	                        swapped = count;
	                    },
	                    run = function() {
	                        if (firstDimension.apply(0, first) !== false) {
	                            if (secondDimension.apply(0, second) === false && !swapped) {
	                                swap(true);
	                                run();
	                            }
	                        } else if (!swapped) {
	                            swap(true);
	                            run();
	                        } else {
	                            ret.x = ret.y = 0;
	                        }
	                    };

	                // Under these conditions, prefer the tooltip on the side of the point
	                if (chart.inverted || this.len > 1) {
	                    swap();
	                }
	                run();

	                return ret;

	            },

	            /**
	             * In case no user defined formatter is given, this will be used. Note that the context
	             * here is an object holding point, series, x, y etc.
	             *
	             * @returns {String|Array<String>}
	             */
	            defaultFormatter: function(tooltip) {
	                var items = this.points || splat(this),
	                    s;

	                // Build the header
	                s = [tooltip.tooltipFooterHeaderFormatter(items[0])];

	                // build the values
	                s = s.concat(tooltip.bodyFormatter(items));

	                // footer
	                s.push(tooltip.tooltipFooterHeaderFormatter(items[0], true));

	                return s;
	            },

	            /**
	             * Refresh the tooltip's text and position.
	             * @param {Object} point
	             */
	            refresh: function(point, mouseEvent) {
	                var tooltip = this,
	                    chart = tooltip.chart,
	                    label,
	                    options = tooltip.options,
	                    x,
	                    y,
	                    anchor,
	                    textConfig = {},
	                    text,
	                    pointConfig = [],
	                    formatter = options.formatter || tooltip.defaultFormatter,
	                    hoverPoints = chart.hoverPoints,
	                    shared = tooltip.shared,
	                    currentSeries;

	                clearTimeout(this.hideTimer);

	                // get the reference point coordinates (pie charts use tooltipPos)
	                tooltip.followPointer = splat(point)[0].series.tooltipOptions.followPointer;
	                anchor = tooltip.getAnchor(point, mouseEvent);
	                x = anchor[0];
	                y = anchor[1];

	                // shared tooltip, array is sent over
	                if (shared && !(point.series && point.series.noSharedTooltip)) {

	                    // hide previous hoverPoints and set new

	                    chart.hoverPoints = point;
	                    if (hoverPoints) {
	                        each(hoverPoints, function(point) {
	                            point.setState();
	                        });
	                    }

	                    each(point, function(item) {
	                        item.setState('hover');

	                        pointConfig.push(item.getLabelConfig());
	                    });

	                    textConfig = {
	                        x: point[0].category,
	                        y: point[0].y
	                    };
	                    textConfig.points = pointConfig;
	                    point = point[0];

	                    // single point tooltip
	                } else {
	                    textConfig = point.getLabelConfig();
	                }
	                this.len = pointConfig.length; // #6128
	                text = formatter.call(textConfig, tooltip);

	                // register the current series
	                currentSeries = point.series;
	                this.distance = pick(currentSeries.tooltipOptions.distance, 16);

	                // update the inner HTML
	                if (text === false) {
	                    this.hide();
	                } else {

	                    label = tooltip.getLabel();

	                    // show it
	                    if (tooltip.isHidden) {
	                        label.attr({
	                            opacity: 1
	                        }).show();
	                    }

	                    // update text
	                    if (tooltip.split) {
	                        this.renderSplit(text, chart.hoverPoints);
	                    } else {
	                        label.attr({
	                            text: text && text.join ? text.join('') : text
	                        });

	                        // Set the stroke color of the box to reflect the point
	                        label.removeClass(/highcharts-color-[\d]+/g)
	                            .addClass('highcharts-color-' + pick(point.colorIndex, currentSeries.colorIndex));


	                        label.attr({
	                            stroke: options.borderColor || point.color || currentSeries.color || '#666666'
	                        });


	                        tooltip.updatePosition({
	                            plotX: x,
	                            plotY: y,
	                            negative: point.negative,
	                            ttBelow: point.ttBelow,
	                            h: anchor[2] || 0
	                        });
	                    }

	                    this.isHidden = false;
	                }
	            },

	            /**
	             * Render the split tooltip. Loops over each point's text and adds
	             * a label next to the point, then uses the distribute function to 
	             * find best non-overlapping positions.
	             */
	            renderSplit: function(labels, points) {
	                var tooltip = this,
	                    boxes = [],
	                    chart = this.chart,
	                    ren = chart.renderer,
	                    rightAligned = true,
	                    options = this.options,
	                    headerHeight,
	                    tooltipLabel = this.getLabel();

	                // Create the individual labels for header and points, ignore footer
	                each(labels.slice(0, points.length + 1), function(str, i) {
	                    var point = points[i - 1] ||
	                        // Item 0 is the header. Instead of this, we could also use the crosshair label
	                        {
	                            isHeader: true,
	                            plotX: points[0].plotX
	                        },
	                        owner = point.series || tooltip,
	                        tt = owner.tt,
	                        series = point.series || {},
	                        colorClass = 'highcharts-color-' + pick(point.colorIndex, series.colorIndex, 'none'),
	                        target,
	                        x,
	                        bBox,
	                        boxWidth;

	                    // Store the tooltip referance on the series
	                    if (!tt) {
	                        owner.tt = tt = ren.label(null, null, null, 'callout')
	                            .addClass('highcharts-tooltip-box ' + colorClass)
	                            .attr({
	                                'padding': options.padding,
	                                'r': options.borderRadius,

	                                'fill': options.backgroundColor,
	                                'stroke': point.color || series.color || '#333333',
	                                'stroke-width': options.borderWidth

	                            })
	                            .add(tooltipLabel);
	                    }

	                    tt.isActive = true;
	                    tt.attr({
	                        text: str
	                    });

	                    tt.css(options.style);


	                    // Get X position now, so we can move all to the other side in case of overflow
	                    bBox = tt.getBBox();
	                    boxWidth = bBox.width + tt.strokeWidth();
	                    if (point.isHeader) {
	                        headerHeight = bBox.height;
	                        x = Math.max(
	                            0, // No left overflow
	                            Math.min(
	                                point.plotX + chart.plotLeft - boxWidth / 2,
	                                chart.chartWidth - boxWidth // No right overflow (#5794)
	                            )
	                        );
	                    } else {
	                        x = point.plotX + chart.plotLeft - pick(options.distance, 16) -
	                            boxWidth;
	                    }


	                    // If overflow left, we don't use this x in the next loop
	                    if (x < 0) {
	                        rightAligned = false;
	                    }

	                    // Prepare for distribution
	                    target = (point.series && point.series.yAxis && point.series.yAxis.pos) + (point.plotY || 0);
	                    target -= chart.plotTop;
	                    boxes.push({
	                        target: point.isHeader ? chart.plotHeight + headerHeight : target,
	                        rank: point.isHeader ? 1 : 0,
	                        size: owner.tt.getBBox().height + 1,
	                        point: point,
	                        x: x,
	                        tt: tt
	                    });
	                });

	                // Clean previous run (for missing points)
	                this.cleanSplit();

	                // Distribute and put in place
	                H.distribute(boxes, chart.plotHeight + headerHeight);
	                each(boxes, function(box) {
	                    var point = box.point,
	                        series = point.series;

	                    // Put the label in place
	                    box.tt.attr({
	                        visibility: box.pos === undefined ? 'hidden' : 'inherit',
	                        x: (rightAligned || point.isHeader ?
	                            box.x :
	                            point.plotX + chart.plotLeft + pick(options.distance, 16)),
	                        y: box.pos + chart.plotTop,
	                        anchorX: point.isHeader ?
	                            point.plotX + chart.plotLeft : point.plotX + series.xAxis.pos,
	                        anchorY: point.isHeader ?
	                            box.pos + chart.plotTop - 15 : point.plotY + series.yAxis.pos
	                    });
	                });
	            },

	            /**
	             * Find the new position and perform the move
	             */
	            updatePosition: function(point) {
	                var chart = this.chart,
	                    label = this.getLabel(),
	                    pos = (this.options.positioner || this.getPosition).call(
	                        this,
	                        label.width,
	                        label.height,
	                        point
	                    );

	                // do the move
	                this.move(
	                    Math.round(pos.x),
	                    Math.round(pos.y || 0), // can be undefined (#3977) 
	                    point.plotX + chart.plotLeft,
	                    point.plotY + chart.plotTop
	                );
	            },

	            /**
	             * Get the optimal date format for a point, based on a range.
	             * @param  {number} range - The time range
	             * @param  {number|Date} date - The date of the point in question
	             * @param  {number} startOfWeek - An integer representing the first day of
	             * the week, where 0 is Sunday
	             * @param  {Object} dateTimeLabelFormats - A map of time units to formats
	             * @return {string} - the optimal date format for a point
	             */
	            getDateFormat: function(range, date, startOfWeek, dateTimeLabelFormats) {
	                var dateStr = dateFormat('%m-%d %H:%M:%S.%L', date),
	                    format,
	                    n,
	                    blank = '01-01 00:00:00.000',
	                    strpos = {
	                        millisecond: 15,
	                        second: 12,
	                        minute: 9,
	                        hour: 6,
	                        day: 3
	                    },
	                    lastN = 'millisecond'; // for sub-millisecond data, #4223
	                for (n in timeUnits) {

	                    // If the range is exactly one week and we're looking at a Sunday/Monday, go for the week format
	                    if (range === timeUnits.week && +dateFormat('%w', date) === startOfWeek &&
	                        dateStr.substr(6) === blank.substr(6)) {
	                        n = 'week';
	                        break;
	                    }

	                    // The first format that is too great for the range
	                    if (timeUnits[n] > range) {
	                        n = lastN;
	                        break;
	                    }

	                    // If the point is placed every day at 23:59, we need to show
	                    // the minutes as well. #2637.
	                    if (strpos[n] && dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {
	                        break;
	                    }

	                    // Weeks are outside the hierarchy, only apply them on Mondays/Sundays like in the first condition
	                    if (n !== 'week') {
	                        lastN = n;
	                    }
	                }

	                if (n) {
	                    format = dateTimeLabelFormats[n];
	                }

	                return format;
	            },

	            /**
	             * Get the best X date format based on the closest point range on the axis.
	             */
	            getXDateFormat: function(point, options, xAxis) {
	                var xDateFormat,
	                    dateTimeLabelFormats = options.dateTimeLabelFormats,
	                    closestPointRange = xAxis && xAxis.closestPointRange;

	                if (closestPointRange) {
	                    xDateFormat = this.getDateFormat(
	                        closestPointRange,
	                        point.x,
	                        xAxis.options.startOfWeek,
	                        dateTimeLabelFormats
	                    );
	                } else {
	                    xDateFormat = dateTimeLabelFormats.day;
	                }

	                return xDateFormat || dateTimeLabelFormats.year; // #2546, 2581
	            },

	            /**
	             * Format the footer/header of the tooltip
	             * #3397: abstraction to enable formatting of footer and header
	             */
	            tooltipFooterHeaderFormatter: function(labelConfig, isFooter) {
	                var footOrHead = isFooter ? 'footer' : 'header',
	                    series = labelConfig.series,
	                    tooltipOptions = series.tooltipOptions,
	                    xDateFormat = tooltipOptions.xDateFormat,
	                    xAxis = series.xAxis,
	                    isDateTime = xAxis && xAxis.options.type === 'datetime' && isNumber(labelConfig.key),
	                    formatString = tooltipOptions[footOrHead + 'Format'];

	                // Guess the best date format based on the closest point distance (#568, #3418)
	                if (isDateTime && !xDateFormat) {
	                    xDateFormat = this.getXDateFormat(labelConfig, tooltipOptions, xAxis);
	                }

	                // Insert the footer date format if any
	                if (isDateTime && xDateFormat) {
	                    formatString = formatString.replace('{point.key}', '{point.key:' + xDateFormat + '}');
	                }

	                return format(formatString, {
	                    point: labelConfig,
	                    series: series
	                });
	            },

	            /**
	             * Build the body (lines) of the tooltip by iterating over the items and returning one entry for each item,
	             * abstracting this functionality allows to easily overwrite and extend it.
	             */
	            bodyFormatter: function(items) {
	                return map(items, function(item) {
	                    var tooltipOptions = item.series.tooltipOptions;
	                    return (tooltipOptions.pointFormatter || item.point.tooltipFormatter)
	                        .call(item.point, tooltipOptions.pointFormat);
	                });
	            }

	        };

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            attr = H.attr,
	            charts = H.charts,
	            color = H.color,
	            css = H.css,
	            defined = H.defined,
	            doc = H.doc,
	            each = H.each,
	            extend = H.extend,
	            fireEvent = H.fireEvent,
	            offset = H.offset,
	            pick = H.pick,
	            removeEvent = H.removeEvent,
	            splat = H.splat,
	            Tooltip = H.Tooltip,
	            win = H.win;

	        /**
	         * The mouse tracker object. All methods starting with "on" are primary DOM
	         * event handlers. Subsequent methods should be named differently from what they
	         * are doing.
	         *
	         * @constructor Pointer
	         * @param {Object} chart The Chart instance
	         * @param {Object} options The root options object
	         */
	        H.Pointer = function(chart, options) {
	            this.init(chart, options);
	        };

	        H.Pointer.prototype = {
	            /**
	             * Initialize Pointer
	             */
	            init: function(chart, options) {

	                // Store references
	                this.options = options;
	                this.chart = chart;

	                // Do we need to handle click on a touch device?
	                this.runChartClick = options.chart.events && !!options.chart.events.click;

	                this.pinchDown = [];
	                this.lastValidTouch = {};

	                if (Tooltip && options.tooltip.enabled) {
	                    chart.tooltip = new Tooltip(chart, options.tooltip);
	                    this.followTouchMove = pick(options.tooltip.followTouchMove, true);
	                }

	                this.setDOMEvents();
	            },

	            /**
	             * Resolve the zoomType option, this is reset on all touch start and mouse
	             * down events.
	             */
	            zoomOption: function(e) {
	                var chart = this.chart,
	                    options = chart.options.chart,
	                    zoomType = options.zoomType || '',
	                    inverted = chart.inverted,
	                    zoomX,
	                    zoomY;

	                // Look for the pinchType option
	                if (/touch/.test(e.type)) {
	                    zoomType = pick(options.pinchType, zoomType);
	                }

	                this.zoomX = zoomX = /x/.test(zoomType);
	                this.zoomY = zoomY = /y/.test(zoomType);
	                this.zoomHor = (zoomX && !inverted) || (zoomY && inverted);
	                this.zoomVert = (zoomY && !inverted) || (zoomX && inverted);
	                this.hasZoom = zoomX || zoomY;
	            },

	            /**
	             * Add crossbrowser support for chartX and chartY
	             * @param {Object} e The event object in standard browsers
	             */
	            normalize: function(e, chartPosition) {
	                var chartX,
	                    chartY,
	                    ePos;

	                // IE normalizing
	                e = e || win.event;
	                if (!e.target) {
	                    e.target = e.srcElement;
	                }

	                // iOS (#2757)
	                ePos = e.touches ? (e.touches.length ? e.touches.item(0) : e.changedTouches[0]) : e;

	                // Get mouse position
	                if (!chartPosition) {
	                    this.chartPosition = chartPosition = offset(this.chart.container);
	                }

	                // chartX and chartY
	                if (ePos.pageX === undefined) { // IE < 9. #886.
	                    chartX = Math.max(e.x, e.clientX - chartPosition.left); // #2005, #2129: the second case is 
	                    // for IE10 quirks mode within framesets
	                    chartY = e.y;
	                } else {
	                    chartX = ePos.pageX - chartPosition.left;
	                    chartY = ePos.pageY - chartPosition.top;
	                }

	                return extend(e, {
	                    chartX: Math.round(chartX),
	                    chartY: Math.round(chartY)
	                });
	            },

	            /**
	             * Get the click position in terms of axis values.
	             *
	             * @param {Object} e A pointer event
	             */
	            getCoordinates: function(e) {
	                var coordinates = {
	                    xAxis: [],
	                    yAxis: []
	                };

	                each(this.chart.axes, function(axis) {
	                    coordinates[axis.isXAxis ? 'xAxis' : 'yAxis'].push({
	                        axis: axis,
	                        value: axis.toValue(e[axis.horiz ? 'chartX' : 'chartY'])
	                    });
	                });
	                return coordinates;
	            },

	            /**
	             * With line type charts with a single tracker, get the point closest to the mouse.
	             * Run Point.onMouseOver and display tooltip for the point or points.
	             */
	            runPointActions: function(e) {

	                var pointer = this,
	                    chart = pointer.chart,
	                    series = chart.series,
	                    tooltip = chart.tooltip,
	                    shared = tooltip ? tooltip.shared : false,
	                    followPointer,
	                    updatePosition = true,
	                    hoverPoint = chart.hoverPoint,
	                    hoverSeries = chart.hoverSeries,
	                    i,
	                    anchor,
	                    noSharedTooltip,
	                    stickToHoverSeries,
	                    directTouch,
	                    kdpoints = [],
	                    kdpointT;

	                // For hovering over the empty parts of the plot area (hoverSeries is undefined).
	                // If there is one series with point tracking (combo chart), don't go to nearest neighbour.
	                if (!shared && !hoverSeries) {
	                    for (i = 0; i < series.length; i++) {
	                        if (series[i].directTouch || !series[i].options.stickyTracking) {
	                            series = [];
	                        }
	                    }
	                }

	                // If it has a hoverPoint and that series requires direct touch (like columns, #3899), or we're on
	                // a noSharedTooltip series among shared tooltip series (#4546), use the hoverPoint . Otherwise,
	                // search the k-d tree.
	                stickToHoverSeries = hoverSeries && (shared ? hoverSeries.noSharedTooltip : hoverSeries.directTouch);
	                if (stickToHoverSeries && hoverPoint) {
	                    kdpoints = [hoverPoint];

	                    // Handle shared tooltip or cases where a series is not yet hovered
	                } else {
	                    // When we have non-shared tooltip and sticky tracking is disabled,
	                    // search for the closest point only on hovered series: #5533, #5476
	                    if (!shared && hoverSeries && !hoverSeries.options.stickyTracking) {
	                        series = [hoverSeries];
	                    }
	                    // Find nearest points on all series
	                    each(series, function(s) {
	                        // Skip hidden series
	                        noSharedTooltip = s.noSharedTooltip && shared;
	                        directTouch = !shared && s.directTouch;
	                        if (s.visible && !noSharedTooltip && !directTouch && pick(s.options.enableMouseTracking, true)) { // #3821
	                            kdpointT = s.searchPoint(e, !noSharedTooltip && s.kdDimensions === 1); // #3828
	                            if (kdpointT && kdpointT.series) { // Point.series becomes null when reset and before redraw (#5197)
	                                kdpoints.push(kdpointT);
	                            }
	                        }
	                    });

	                    // Sort kdpoints by distance to mouse pointer
	                    kdpoints.sort(function(p1, p2) {
	                        var isCloserX = p1.distX - p2.distX,
	                            isCloser = p1.dist - p2.dist,
	                            isAbove = (p2.series.group && p2.series.group.zIndex) -
	                            (p1.series.group && p1.series.group.zIndex);

	                        // We have two points which are not in the same place on xAxis and shared tooltip:
	                        if (isCloserX !== 0 && shared) { // #5721
	                            return isCloserX;
	                        }
	                        // Points are not exactly in the same place on x/yAxis:
	                        if (isCloser !== 0) {
	                            return isCloser;
	                        }
	                        // The same xAxis and yAxis position, sort by z-index:
	                        if (isAbove !== 0) {
	                            return isAbove;
	                        }

	                        // The same zIndex, sort by array index:
	                        return p1.series.index > p2.series.index ? -1 : 1;
	                    });
	                }

	                // Remove points with different x-positions, required for shared tooltip and crosshairs (#4645):
	                if (shared) {
	                    i = kdpoints.length;
	                    while (i--) {
	                        if (kdpoints[i].x !== kdpoints[0].x || kdpoints[i].series.noSharedTooltip) {
	                            kdpoints.splice(i, 1);
	                        }
	                    }
	                }

	                // Refresh tooltip for kdpoint if new hover point or tooltip was hidden // #3926, #4200
	                if (kdpoints[0] && (kdpoints[0] !== this.prevKDPoint || (tooltip && tooltip.isHidden))) {
	                    // Draw tooltip if necessary
	                    if (shared && !kdpoints[0].series.noSharedTooltip) {
	                        // Do mouseover on all points (#3919, #3985, #4410, #5622)
	                        for (i = 0; i < kdpoints.length; i++) {
	                            kdpoints[i].onMouseOver(e, kdpoints[i] !== ((hoverSeries && hoverSeries.directTouch && hoverPoint) || kdpoints[0]));
	                        }

	                        if (kdpoints.length && tooltip) {
	                            // Keep the order of series in tooltip:
	                            tooltip.refresh(kdpoints.sort(function(p1, p2) {
	                                return p1.series.index - p2.series.index;
	                            }), e);
	                        }
	                    } else {
	                        if (tooltip) {
	                            tooltip.refresh(kdpoints[0], e);
	                        }
	                        if (!hoverSeries || !hoverSeries.directTouch) { // #4448
	                            kdpoints[0].onMouseOver(e);
	                        }
	                    }
	                    this.prevKDPoint = kdpoints[0];
	                    updatePosition = false;
	                }
	                // Update positions (regardless of kdpoint or hoverPoint)
	                if (updatePosition) {
	                    followPointer = hoverSeries && hoverSeries.tooltipOptions.followPointer;
	                    if (tooltip && followPointer && !tooltip.isHidden) {
	                        anchor = tooltip.getAnchor([{}], e);
	                        tooltip.updatePosition({
	                            plotX: anchor[0],
	                            plotY: anchor[1]
	                        });
	                    }
	                }

	                // Start the event listener to pick up the tooltip and crosshairs
	                if (!pointer.unDocMouseMove) {
	                    pointer.unDocMouseMove = addEvent(doc, 'mousemove', function(e) {
	                        if (charts[H.hoverChartIndex]) {
	                            charts[H.hoverChartIndex].pointer.onDocumentMouseMove(e);
	                        }
	                    });
	                }

	                // Crosshair. For each hover point, loop over axes and draw cross if that point
	                // belongs to the axis (#4927).
	                each(shared ? kdpoints : [pick(hoverPoint, kdpoints[0])], function drawPointCrosshair(point) { // #5269
	                    each(chart.axes, function drawAxisCrosshair(axis) {
	                        // In case of snap = false, point is undefined, and we draw the crosshair anyway (#5066)
	                        if (!point || point.series && point.series[axis.coll] === axis) { // #5658
	                            axis.drawCrosshair(e, point);
	                        }
	                    });
	                });
	            },

	            /**
	             * Reset the tracking by hiding the tooltip, the hover series state and the hover point
	             *
	             * @param allowMove {Boolean} Instead of destroying the tooltip altogether, allow moving it if possible
	             */
	            reset: function(allowMove, delay) {
	                var pointer = this,
	                    chart = pointer.chart,
	                    hoverSeries = chart.hoverSeries,
	                    hoverPoint = chart.hoverPoint,
	                    hoverPoints = chart.hoverPoints,
	                    tooltip = chart.tooltip,
	                    tooltipPoints = tooltip && tooltip.shared ? hoverPoints : hoverPoint;

	                // Check if the points have moved outside the plot area (#1003, #4736, #5101)
	                if (allowMove && tooltipPoints) {
	                    each(splat(tooltipPoints), function(point) {
	                        if (point.series.isCartesian && point.plotX === undefined) {
	                            allowMove = false;
	                        }
	                    });
	                }

	                // Just move the tooltip, #349
	                if (allowMove) {
	                    if (tooltip && tooltipPoints) {
	                        tooltip.refresh(tooltipPoints);
	                        if (hoverPoint) { // #2500
	                            hoverPoint.setState(hoverPoint.state, true);
	                            each(chart.axes, function(axis) {
	                                if (axis.crosshair) {
	                                    axis.drawCrosshair(null, hoverPoint);
	                                }
	                            });
	                        }
	                    }

	                    // Full reset
	                } else {

	                    if (hoverPoint) {
	                        hoverPoint.onMouseOut();
	                    }

	                    if (hoverPoints) {
	                        each(hoverPoints, function(point) {
	                            point.setState();
	                        });
	                    }

	                    if (hoverSeries) {
	                        hoverSeries.onMouseOut();
	                    }

	                    if (tooltip) {
	                        tooltip.hide(delay);
	                    }

	                    if (pointer.unDocMouseMove) {
	                        pointer.unDocMouseMove = pointer.unDocMouseMove();
	                    }

	                    // Remove crosshairs
	                    each(chart.axes, function(axis) {
	                        axis.hideCrosshair();
	                    });

	                    pointer.hoverX = pointer.prevKDPoint = chart.hoverPoints = chart.hoverPoint = null;
	                }
	            },

	            /**
	             * Scale series groups to a certain scale and translation
	             */
	            scaleGroups: function(attribs, clip) {

	                var chart = this.chart,
	                    seriesAttribs;

	                // Scale each series
	                each(chart.series, function(series) {
	                    seriesAttribs = attribs || series.getPlotBox(); // #1701
	                    if (series.xAxis && series.xAxis.zoomEnabled && series.group) {
	                        series.group.attr(seriesAttribs);
	                        if (series.markerGroup) {
	                            series.markerGroup.attr(seriesAttribs);
	                            series.markerGroup.clip(clip ? chart.clipRect : null);
	                        }
	                        if (series.dataLabelsGroup) {
	                            series.dataLabelsGroup.attr(seriesAttribs);
	                        }
	                    }
	                });

	                // Clip
	                chart.clipRect.attr(clip || chart.clipBox);
	            },

	            /**
	             * Start a drag operation
	             */
	            dragStart: function(e) {
	                var chart = this.chart;

	                // Record the start position
	                chart.mouseIsDown = e.type;
	                chart.cancelClick = false;
	                chart.mouseDownX = this.mouseDownX = e.chartX;
	                chart.mouseDownY = this.mouseDownY = e.chartY;
	            },

	            /**
	             * Perform a drag operation in response to a mousemove event while the mouse is down
	             */
	            drag: function(e) {

	                var chart = this.chart,
	                    chartOptions = chart.options.chart,
	                    chartX = e.chartX,
	                    chartY = e.chartY,
	                    zoomHor = this.zoomHor,
	                    zoomVert = this.zoomVert,
	                    plotLeft = chart.plotLeft,
	                    plotTop = chart.plotTop,
	                    plotWidth = chart.plotWidth,
	                    plotHeight = chart.plotHeight,
	                    clickedInside,
	                    size,
	                    selectionMarker = this.selectionMarker,
	                    mouseDownX = this.mouseDownX,
	                    mouseDownY = this.mouseDownY,
	                    panKey = chartOptions.panKey && e[chartOptions.panKey + 'Key'];

	                // If the device supports both touch and mouse (like IE11), and we are touch-dragging
	                // inside the plot area, don't handle the mouse event. #4339.
	                if (selectionMarker && selectionMarker.touch) {
	                    return;
	                }

	                // If the mouse is outside the plot area, adjust to cooordinates
	                // inside to prevent the selection marker from going outside
	                if (chartX < plotLeft) {
	                    chartX = plotLeft;
	                } else if (chartX > plotLeft + plotWidth) {
	                    chartX = plotLeft + plotWidth;
	                }

	                if (chartY < plotTop) {
	                    chartY = plotTop;
	                } else if (chartY > plotTop + plotHeight) {
	                    chartY = plotTop + plotHeight;
	                }

	                // determine if the mouse has moved more than 10px
	                this.hasDragged = Math.sqrt(
	                    Math.pow(mouseDownX - chartX, 2) +
	                    Math.pow(mouseDownY - chartY, 2)
	                );

	                if (this.hasDragged > 10) {
	                    clickedInside = chart.isInsidePlot(mouseDownX - plotLeft, mouseDownY - plotTop);

	                    // make a selection
	                    if (chart.hasCartesianSeries && (this.zoomX || this.zoomY) && clickedInside && !panKey) {
	                        if (!selectionMarker) {
	                            this.selectionMarker = selectionMarker = chart.renderer.rect(
	                                    plotLeft,
	                                    plotTop,
	                                    zoomHor ? 1 : plotWidth,
	                                    zoomVert ? 1 : plotHeight,
	                                    0
	                                )
	                                .attr({

	                                    fill: chartOptions.selectionMarkerFill || color('#335cad').setOpacity(0.25).get(),

	                                    'class': 'highcharts-selection-marker',
	                                    'zIndex': 7
	                                })
	                                .add();
	                        }
	                    }

	                    // adjust the width of the selection marker
	                    if (selectionMarker && zoomHor) {
	                        size = chartX - mouseDownX;
	                        selectionMarker.attr({
	                            width: Math.abs(size),
	                            x: (size > 0 ? 0 : size) + mouseDownX
	                        });
	                    }
	                    // adjust the height of the selection marker
	                    if (selectionMarker && zoomVert) {
	                        size = chartY - mouseDownY;
	                        selectionMarker.attr({
	                            height: Math.abs(size),
	                            y: (size > 0 ? 0 : size) + mouseDownY
	                        });
	                    }

	                    // panning
	                    if (clickedInside && !selectionMarker && chartOptions.panning) {
	                        chart.pan(e, chartOptions.panning);
	                    }
	                }
	            },

	            /**
	             * On mouse up or touch end across the entire document, drop the selection.
	             */
	            drop: function(e) {
	                var pointer = this,
	                    chart = this.chart,
	                    hasPinched = this.hasPinched;

	                if (this.selectionMarker) {
	                    var selectionData = {
	                            originalEvent: e, // #4890
	                            xAxis: [],
	                            yAxis: []
	                        },
	                        selectionBox = this.selectionMarker,
	                        selectionLeft = selectionBox.attr ? selectionBox.attr('x') : selectionBox.x,
	                        selectionTop = selectionBox.attr ? selectionBox.attr('y') : selectionBox.y,
	                        selectionWidth = selectionBox.attr ? selectionBox.attr('width') : selectionBox.width,
	                        selectionHeight = selectionBox.attr ? selectionBox.attr('height') : selectionBox.height,
	                        runZoom;

	                    // a selection has been made
	                    if (this.hasDragged || hasPinched) {

	                        // record each axis' min and max
	                        each(chart.axes, function(axis) {
	                            if (axis.zoomEnabled && defined(axis.min) && (hasPinched || pointer[{
	                                    xAxis: 'zoomX',
	                                    yAxis: 'zoomY'
	                                }[axis.coll]])) { // #859, #3569
	                                var horiz = axis.horiz,
	                                    minPixelPadding = e.type === 'touchend' ? axis.minPixelPadding : 0, // #1207, #3075
	                                    selectionMin = axis.toValue((horiz ? selectionLeft : selectionTop) + minPixelPadding),
	                                    selectionMax = axis.toValue((horiz ? selectionLeft + selectionWidth : selectionTop + selectionHeight) - minPixelPadding);

	                                selectionData[axis.coll].push({
	                                    axis: axis,
	                                    min: Math.min(selectionMin, selectionMax), // for reversed axes
	                                    max: Math.max(selectionMin, selectionMax)
	                                });
	                                runZoom = true;
	                            }
	                        });
	                        if (runZoom) {
	                            fireEvent(chart, 'selection', selectionData, function(args) {
	                                chart.zoom(extend(args, hasPinched ? {
	                                    animation: false
	                                } : null));
	                            });
	                        }

	                    }
	                    this.selectionMarker = this.selectionMarker.destroy();

	                    // Reset scaling preview
	                    if (hasPinched) {
	                        this.scaleGroups();
	                    }
	                }

	                // Reset all
	                if (chart) { // it may be destroyed on mouse up - #877
	                    css(chart.container, {
	                        cursor: chart._cursor
	                    });
	                    chart.cancelClick = this.hasDragged > 10; // #370
	                    chart.mouseIsDown = this.hasDragged = this.hasPinched = false;
	                    this.pinchDown = [];
	                }
	            },

	            onContainerMouseDown: function(e) {

	                e = this.normalize(e);

	                this.zoomOption(e);

	                // issue #295, dragging not always working in Firefox
	                if (e.preventDefault) {
	                    e.preventDefault();
	                }

	                this.dragStart(e);
	            },



	            onDocumentMouseUp: function(e) {
	                if (charts[H.hoverChartIndex]) {
	                    charts[H.hoverChartIndex].pointer.drop(e);
	                }
	            },

	            /**
	             * Special handler for mouse move that will hide the tooltip when the mouse leaves the plotarea.
	             * Issue #149 workaround. The mouseleave event does not always fire.
	             */
	            onDocumentMouseMove: function(e) {
	                var chart = this.chart,
	                    chartPosition = this.chartPosition;

	                e = this.normalize(e, chartPosition);

	                // If we're outside, hide the tooltip
	                if (chartPosition && !this.inClass(e.target, 'highcharts-tracker') &&
	                    !chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) {
	                    this.reset();
	                }
	            },

	            /**
	             * When mouse leaves the container, hide the tooltip.
	             */
	            onContainerMouseLeave: function(e) {
	                var chart = charts[H.hoverChartIndex];
	                if (chart && (e.relatedTarget || e.toElement)) { // #4886, MS Touch end fires mouseleave but with no related target
	                    chart.pointer.reset();
	                    chart.pointer.chartPosition = null; // also reset the chart position, used in #149 fix
	                }
	            },

	            // The mousemove, touchmove and touchstart event handler
	            onContainerMouseMove: function(e) {

	                var chart = this.chart;

	                if (!defined(H.hoverChartIndex) || !charts[H.hoverChartIndex] || !charts[H.hoverChartIndex].mouseIsDown) {
	                    H.hoverChartIndex = chart.index;
	                }

	                e = this.normalize(e);
	                e.returnValue = false; // #2251, #3224

	                if (chart.mouseIsDown === 'mousedown') {
	                    this.drag(e);
	                }

	                // Show the tooltip and run mouse over events (#977)
	                if ((this.inClass(e.target, 'highcharts-tracker') ||
	                        chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) && !chart.openMenu) {
	                    this.runPointActions(e);
	                }
	            },

	            /**
	             * Utility to detect whether an element has, or has a parent with, a specific
	             * class name. Used on detection of tracker objects and on deciding whether
	             * hovering the tooltip should cause the active series to mouse out.
	             */
	            inClass: function(element, className) {
	                var elemClassName;
	                while (element) {
	                    elemClassName = attr(element, 'class');
	                    if (elemClassName) {
	                        if (elemClassName.indexOf(className) !== -1) {
	                            return true;
	                        }
	                        if (elemClassName.indexOf('highcharts-container') !== -1) {
	                            return false;
	                        }
	                    }
	                    element = element.parentNode;
	                }
	            },

	            onTrackerMouseOut: function(e) {
	                var series = this.chart.hoverSeries,
	                    relatedTarget = e.relatedTarget || e.toElement;

	                if (series && relatedTarget && !series.options.stickyTracking &&
	                    !this.inClass(relatedTarget, 'highcharts-tooltip') &&
	                    (!this.inClass(relatedTarget, 'highcharts-series-' + series.index) || // #2499, #4465
	                        !this.inClass(relatedTarget, 'highcharts-tracker') // #5553
	                    )
	                ) {
	                    series.onMouseOut();
	                }
	            },

	            onContainerClick: function(e) {
	                var chart = this.chart,
	                    hoverPoint = chart.hoverPoint,
	                    plotLeft = chart.plotLeft,
	                    plotTop = chart.plotTop;

	                e = this.normalize(e);

	                if (!chart.cancelClick) {

	                    // On tracker click, fire the series and point events. #783, #1583
	                    if (hoverPoint && this.inClass(e.target, 'highcharts-tracker')) {

	                        // the series click event
	                        fireEvent(hoverPoint.series, 'click', extend(e, {
	                            point: hoverPoint
	                        }));

	                        // the point click event
	                        if (chart.hoverPoint) { // it may be destroyed (#1844)
	                            hoverPoint.firePointEvent('click', e);
	                        }

	                        // When clicking outside a tracker, fire a chart event
	                    } else {
	                        extend(e, this.getCoordinates(e));

	                        // fire a click event in the chart
	                        if (chart.isInsidePlot(e.chartX - plotLeft, e.chartY - plotTop)) {
	                            fireEvent(chart, 'click', e);
	                        }
	                    }


	                }
	            },

	            /**
	             * Set the JS DOM events on the container and document. This method should contain
	             * a one-to-one assignment between methods and their handlers. Any advanced logic should
	             * be moved to the handler reflecting the event's name.
	             */
	            setDOMEvents: function() {

	                var pointer = this,
	                    container = pointer.chart.container;

	                container.onmousedown = function(e) {
	                    pointer.onContainerMouseDown(e);
	                };
	                container.onmousemove = function(e) {
	                    pointer.onContainerMouseMove(e);
	                };
	                container.onclick = function(e) {
	                    pointer.onContainerClick(e);
	                };
	                addEvent(container, 'mouseleave', pointer.onContainerMouseLeave);
	                if (H.chartCount === 1) {
	                    addEvent(doc, 'mouseup', pointer.onDocumentMouseUp);
	                }
	                if (H.hasTouch) {
	                    container.ontouchstart = function(e) {
	                        pointer.onContainerTouchStart(e);
	                    };
	                    container.ontouchmove = function(e) {
	                        pointer.onContainerTouchMove(e);
	                    };
	                    if (H.chartCount === 1) {
	                        addEvent(doc, 'touchend', pointer.onDocumentTouchEnd);
	                    }
	                }

	            },

	            /**
	             * Destroys the Pointer object and disconnects DOM events.
	             */
	            destroy: function() {
	                var prop;

	                removeEvent(this.chart.container, 'mouseleave', this.onContainerMouseLeave);
	                if (!H.chartCount) {
	                    removeEvent(doc, 'mouseup', this.onDocumentMouseUp);
	                    removeEvent(doc, 'touchend', this.onDocumentTouchEnd);
	                }

	                // memory and CPU leak
	                clearInterval(this.tooltipTimeout);

	                for (prop in this) {
	                    this[prop] = null;
	                }
	            }
	        };

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var charts = H.charts,
	            each = H.each,
	            extend = H.extend,
	            map = H.map,
	            noop = H.noop,
	            pick = H.pick,
	            Pointer = H.Pointer;

	        /* Support for touch devices */
	        extend(Pointer.prototype, /** @lends Pointer.prototype */ {

	            /**
	             * Run translation operations
	             */
	            pinchTranslate: function(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch) {
	                if (this.zoomHor) {
	                    this.pinchTranslateDirection(true, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
	                }
	                if (this.zoomVert) {
	                    this.pinchTranslateDirection(false, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
	                }
	            },

	            /**
	             * Run translation operations for each direction (horizontal and vertical) independently
	             */
	            pinchTranslateDirection: function(horiz, pinchDown, touches, transform,
	                selectionMarker, clip, lastValidTouch, forcedScale) {
	                var chart = this.chart,
	                    xy = horiz ? 'x' : 'y',
	                    XY = horiz ? 'X' : 'Y',
	                    sChartXY = 'chart' + XY,
	                    wh = horiz ? 'width' : 'height',
	                    plotLeftTop = chart['plot' + (horiz ? 'Left' : 'Top')],
	                    selectionWH,
	                    selectionXY,
	                    clipXY,
	                    scale = forcedScale || 1,
	                    inverted = chart.inverted,
	                    bounds = chart.bounds[horiz ? 'h' : 'v'],
	                    singleTouch = pinchDown.length === 1,
	                    touch0Start = pinchDown[0][sChartXY],
	                    touch0Now = touches[0][sChartXY],
	                    touch1Start = !singleTouch && pinchDown[1][sChartXY],
	                    touch1Now = !singleTouch && touches[1][sChartXY],
	                    outOfBounds,
	                    transformScale,
	                    scaleKey,
	                    setScale = function() {
	                        // Don't zoom if fingers are too close on this axis
	                        if (!singleTouch && Math.abs(touch0Start - touch1Start) > 20) {
	                            scale = forcedScale || Math.abs(touch0Now - touch1Now) / Math.abs(touch0Start - touch1Start);
	                        }

	                        clipXY = ((plotLeftTop - touch0Now) / scale) + touch0Start;
	                        selectionWH = chart['plot' + (horiz ? 'Width' : 'Height')] / scale;
	                    };

	                // Set the scale, first pass
	                setScale();

	                selectionXY = clipXY; // the clip position (x or y) is altered if out of bounds, the selection position is not

	                // Out of bounds
	                if (selectionXY < bounds.min) {
	                    selectionXY = bounds.min;
	                    outOfBounds = true;
	                } else if (selectionXY + selectionWH > bounds.max) {
	                    selectionXY = bounds.max - selectionWH;
	                    outOfBounds = true;
	                }

	                // Is the chart dragged off its bounds, determined by dataMin and dataMax?
	                if (outOfBounds) {

	                    // Modify the touchNow position in order to create an elastic drag movement. This indicates
	                    // to the user that the chart is responsive but can't be dragged further.
	                    touch0Now -= 0.8 * (touch0Now - lastValidTouch[xy][0]);
	                    if (!singleTouch) {
	                        touch1Now -= 0.8 * (touch1Now - lastValidTouch[xy][1]);
	                    }

	                    // Set the scale, second pass to adapt to the modified touchNow positions
	                    setScale();

	                } else {
	                    lastValidTouch[xy] = [touch0Now, touch1Now];
	                }

	                // Set geometry for clipping, selection and transformation
	                if (!inverted) {
	                    clip[xy] = clipXY - plotLeftTop;
	                    clip[wh] = selectionWH;
	                }
	                scaleKey = inverted ? (horiz ? 'scaleY' : 'scaleX') : 'scale' + XY;
	                transformScale = inverted ? 1 / scale : scale;

	                selectionMarker[wh] = selectionWH;
	                selectionMarker[xy] = selectionXY;
	                transform[scaleKey] = scale;
	                transform['translate' + XY] = (transformScale * plotLeftTop) + (touch0Now - (transformScale * touch0Start));
	            },

	            /**
	             * Handle touch events with two touches
	             */
	            pinch: function(e) {

	                var self = this,
	                    chart = self.chart,
	                    pinchDown = self.pinchDown,
	                    touches = e.touches,
	                    touchesLength = touches.length,
	                    lastValidTouch = self.lastValidTouch,
	                    hasZoom = self.hasZoom,
	                    selectionMarker = self.selectionMarker,
	                    transform = {},
	                    fireClickEvent = touchesLength === 1 && ((self.inClass(e.target, 'highcharts-tracker') &&
	                        chart.runTrackerClick) || self.runChartClick),
	                    clip = {};

	                // Don't initiate panning until the user has pinched. This prevents us from
	                // blocking page scrolling as users scroll down a long page (#4210).
	                if (touchesLength > 1) {
	                    self.initiated = true;
	                }

	                // On touch devices, only proceed to trigger click if a handler is defined
	                if (hasZoom && self.initiated && !fireClickEvent) {
	                    e.preventDefault();
	                }

	                // Normalize each touch
	                map(touches, function(e) {
	                    return self.normalize(e);
	                });

	                // Register the touch start position
	                if (e.type === 'touchstart') {
	                    each(touches, function(e, i) {
	                        pinchDown[i] = {
	                            chartX: e.chartX,
	                            chartY: e.chartY
	                        };
	                    });
	                    lastValidTouch.x = [pinchDown[0].chartX, pinchDown[1] && pinchDown[1].chartX];
	                    lastValidTouch.y = [pinchDown[0].chartY, pinchDown[1] && pinchDown[1].chartY];

	                    // Identify the data bounds in pixels
	                    each(chart.axes, function(axis) {
	                        if (axis.zoomEnabled) {
	                            var bounds = chart.bounds[axis.horiz ? 'h' : 'v'],
	                                minPixelPadding = axis.minPixelPadding,
	                                min = axis.toPixels(pick(axis.options.min, axis.dataMin)),
	                                max = axis.toPixels(pick(axis.options.max, axis.dataMax)),
	                                absMin = Math.min(min, max),
	                                absMax = Math.max(min, max);

	                            // Store the bounds for use in the touchmove handler
	                            bounds.min = Math.min(axis.pos, absMin - minPixelPadding);
	                            bounds.max = Math.max(axis.pos + axis.len, absMax + minPixelPadding);
	                        }
	                    });
	                    self.res = true; // reset on next move

	                    // Optionally move the tooltip on touchmove
	                } else if (self.followTouchMove && touchesLength === 1) {
	                    this.runPointActions(self.normalize(e));

	                    // Event type is touchmove, handle panning and pinching
	                } else if (pinchDown.length) { // can be 0 when releasing, if touchend fires first


	                    // Set the marker
	                    if (!selectionMarker) {
	                        self.selectionMarker = selectionMarker = extend({
	                            destroy: noop,
	                            touch: true
	                        }, chart.plotBox);
	                    }

	                    self.pinchTranslate(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);

	                    self.hasPinched = hasZoom;

	                    // Scale and translate the groups to provide visual feedback during pinching
	                    self.scaleGroups(transform, clip);

	                    if (self.res) {
	                        self.res = false;
	                        this.reset(false, 0);
	                    }
	                }
	            },

	            /**
	             * General touch handler shared by touchstart and touchmove.
	             */
	            touch: function(e, start) {
	                var chart = this.chart,
	                    hasMoved,
	                    pinchDown,
	                    isInside;

	                if (chart.index !== H.hoverChartIndex) {
	                    this.onContainerMouseLeave({
	                        relatedTarget: true
	                    });
	                }
	                H.hoverChartIndex = chart.index;

	                if (e.touches.length === 1) {

	                    e = this.normalize(e);

	                    isInside = chart.isInsidePlot(
	                        e.chartX - chart.plotLeft,
	                        e.chartY - chart.plotTop
	                    );
	                    if (isInside && !chart.openMenu) {

	                        // Run mouse events and display tooltip etc
	                        if (start) {
	                            this.runPointActions(e);
	                        }

	                        // Android fires touchmove events after the touchstart even if the
	                        // finger hasn't moved, or moved only a pixel or two. In iOS however,
	                        // the touchmove doesn't fire unless the finger moves more than ~4px.
	                        // So we emulate this behaviour in Android by checking how much it
	                        // moved, and cancelling on small distances. #3450.
	                        if (e.type === 'touchmove') {
	                            pinchDown = this.pinchDown;
	                            hasMoved = pinchDown[0] ? Math.sqrt( // #5266
	                                Math.pow(pinchDown[0].chartX - e.chartX, 2) +
	                                Math.pow(pinchDown[0].chartY - e.chartY, 2)
	                            ) >= 4 : false;
	                        }

	                        if (pick(hasMoved, true)) {
	                            this.pinch(e);
	                        }

	                    } else if (start) {
	                        // Hide the tooltip on touching outside the plot area (#1203)
	                        this.reset();
	                    }

	                } else if (e.touches.length === 2) {
	                    this.pinch(e);
	                }
	            },

	            onContainerTouchStart: function(e) {
	                this.zoomOption(e);
	                this.touch(e, true);
	            },

	            onContainerTouchMove: function(e) {
	                this.touch(e);
	            },

	            onDocumentTouchEnd: function(e) {
	                if (charts[H.hoverChartIndex]) {
	                    charts[H.hoverChartIndex].pointer.drop(e);
	                }
	            }

	        });

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            charts = H.charts,
	            css = H.css,
	            doc = H.doc,
	            extend = H.extend,
	            noop = H.noop,
	            Pointer = H.Pointer,
	            removeEvent = H.removeEvent,
	            win = H.win,
	            wrap = H.wrap;

	        if (win.PointerEvent || win.MSPointerEvent) {

	            // The touches object keeps track of the points being touched at all times
	            var touches = {},
	                hasPointerEvent = !!win.PointerEvent,
	                getWebkitTouches = function() {
	                    var key,
	                        fake = [];
	                    fake.item = function(i) {
	                        return this[i];
	                    };
	                    for (key in touches) {
	                        if (touches.hasOwnProperty(key)) {
	                            fake.push({
	                                pageX: touches[key].pageX,
	                                pageY: touches[key].pageY,
	                                target: touches[key].target
	                            });
	                        }
	                    }
	                    return fake;
	                },
	                translateMSPointer = function(e, method, wktype, func) {
	                    var p;
	                    if ((e.pointerType === 'touch' || e.pointerType === e.MSPOINTER_TYPE_TOUCH) && charts[H.hoverChartIndex]) {
	                        func(e);
	                        p = charts[H.hoverChartIndex].pointer;
	                        p[method]({
	                            type: wktype,
	                            target: e.currentTarget,
	                            preventDefault: noop,
	                            touches: getWebkitTouches()
	                        });
	                    }
	                };

	            /**
	             * Extend the Pointer prototype with methods for each event handler and more
	             */
	            extend(Pointer.prototype, /** @lends Pointer.prototype */ {
	                onContainerPointerDown: function(e) {
	                    translateMSPointer(e, 'onContainerTouchStart', 'touchstart', function(e) {
	                        touches[e.pointerId] = {
	                            pageX: e.pageX,
	                            pageY: e.pageY,
	                            target: e.currentTarget
	                        };
	                    });
	                },
	                onContainerPointerMove: function(e) {
	                    translateMSPointer(e, 'onContainerTouchMove', 'touchmove', function(e) {
	                        touches[e.pointerId] = {
	                            pageX: e.pageX,
	                            pageY: e.pageY
	                        };
	                        if (!touches[e.pointerId].target) {
	                            touches[e.pointerId].target = e.currentTarget;
	                        }
	                    });
	                },
	                onDocumentPointerUp: function(e) {
	                    translateMSPointer(e, 'onDocumentTouchEnd', 'touchend', function(e) {
	                        delete touches[e.pointerId];
	                    });
	                },

	                /**
	                 * Add or remove the MS Pointer specific events
	                 */
	                batchMSEvents: function(fn) {
	                    fn(this.chart.container, hasPointerEvent ? 'pointerdown' : 'MSPointerDown', this.onContainerPointerDown);
	                    fn(this.chart.container, hasPointerEvent ? 'pointermove' : 'MSPointerMove', this.onContainerPointerMove);
	                    fn(doc, hasPointerEvent ? 'pointerup' : 'MSPointerUp', this.onDocumentPointerUp);
	                }
	            });

	            // Disable default IE actions for pinch and such on chart element
	            wrap(Pointer.prototype, 'init', function(proceed, chart, options) {
	                proceed.call(this, chart, options);
	                if (this.hasZoom) { // #4014
	                    css(chart.container, {
	                        '-ms-touch-action': 'none',
	                        'touch-action': 'none'
	                    });
	                }
	            });

	            // Add IE specific touch events to chart
	            wrap(Pointer.prototype, 'setDOMEvents', function(proceed) {
	                proceed.apply(this);
	                if (this.hasZoom || this.followTouchMove) {
	                    this.batchMSEvents(addEvent);
	                }
	            });
	            // Destroy MS events also
	            wrap(Pointer.prototype, 'destroy', function(proceed) {
	                this.batchMSEvents(removeEvent);
	                proceed.call(this);
	            });
	        }

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var Legend,

	            addEvent = H.addEvent,
	            css = H.css,
	            discardElement = H.discardElement,
	            defined = H.defined,
	            each = H.each,
	            extend = H.extend,
	            isFirefox = H.isFirefox,
	            marginNames = H.marginNames,
	            merge = H.merge,
	            pick = H.pick,
	            setAnimation = H.setAnimation,
	            stableSort = H.stableSort,
	            win = H.win,
	            wrap = H.wrap;
	        /**
	         * The overview of the chart's series.
	         * @class
	         */
	        Legend = H.Legend = function(chart, options) {
	            this.init(chart, options);
	        };

	        Legend.prototype = {

	            /**
	             * Initialize the legend
	             */
	            init: function(chart, options) {

	                this.chart = chart;

	                this.setOptions(options);

	                if (options.enabled) {

	                    // Render it
	                    this.render();

	                    // move checkboxes
	                    addEvent(this.chart, 'endResize', function() {
	                        this.legend.positionCheckboxes();
	                    });
	                }
	            },

	            setOptions: function(options) {

	                var padding = pick(options.padding, 8);

	                this.options = options;


	                this.itemStyle = options.itemStyle;
	                this.itemHiddenStyle = merge(this.itemStyle, options.itemHiddenStyle);

	                this.itemMarginTop = options.itemMarginTop || 0;
	                this.padding = padding;
	                this.initialItemX = padding;
	                this.initialItemY = padding - 5; // 5 is the number of pixels above the text
	                this.maxItemWidth = 0;
	                this.itemHeight = 0;
	                this.symbolWidth = pick(options.symbolWidth, 16);
	                this.pages = [];

	            },

	            /**
	             * Update the legend with new options. Equivalent to running chart.update with a legend
	             * configuration option.
	             * @param {Object} options Legend options
	             * @param {Boolean} redraw Whether to redraw the chart, defaults to true.
	             */
	            update: function(options, redraw) {
	                var chart = this.chart;

	                this.setOptions(merge(true, this.options, options));
	                this.destroy();
	                chart.isDirtyLegend = chart.isDirtyBox = true;
	                if (pick(redraw, true)) {
	                    chart.redraw();
	                }
	            },

	            /**
	             * Set the colors for the legend item
	             * @param {Object} item A Series or Point instance
	             * @param {Object} visible Dimmed or colored
	             */
	            colorizeItem: function(item, visible) {
	                item.legendGroup[visible ? 'removeClass' : 'addClass']('highcharts-legend-item-hidden');


	                var legend = this,
	                    options = legend.options,
	                    legendItem = item.legendItem,
	                    legendLine = item.legendLine,
	                    legendSymbol = item.legendSymbol,
	                    hiddenColor = legend.itemHiddenStyle.color,
	                    textColor = visible ? options.itemStyle.color : hiddenColor,
	                    symbolColor = visible ? (item.color || hiddenColor) : hiddenColor,
	                    markerOptions = item.options && item.options.marker,
	                    symbolAttr = {
	                        fill: symbolColor
	                    },
	                    key;

	                if (legendItem) {
	                    legendItem.css({
	                        fill: textColor,
	                        color: textColor
	                    }); // color for #1553, oldIE
	                }
	                if (legendLine) {
	                    legendLine.attr({
	                        stroke: symbolColor
	                    });
	                }

	                if (legendSymbol) {

	                    // Apply marker options
	                    if (markerOptions && legendSymbol.isMarker) { // #585
	                        //symbolAttr.stroke = symbolColor;
	                        symbolAttr = item.pointAttribs();
	                        if (!visible) {
	                            for (key in symbolAttr) {
	                                symbolAttr[key] = hiddenColor;
	                            }
	                        }
	                    }

	                    legendSymbol.attr(symbolAttr);
	                }

	            },

	            /**
	             * Position the legend item
	             * @param {Object} item A Series or Point instance
	             */
	            positionItem: function(item) {
	                var legend = this,
	                    options = legend.options,
	                    symbolPadding = options.symbolPadding,
	                    ltr = !options.rtl,
	                    legendItemPos = item._legendItemPos,
	                    itemX = legendItemPos[0],
	                    itemY = legendItemPos[1],
	                    checkbox = item.checkbox,
	                    legendGroup = item.legendGroup;

	                if (legendGroup && legendGroup.element) {
	                    legendGroup.translate(
	                        ltr ? itemX : legend.legendWidth - itemX - 2 * symbolPadding - 4,
	                        itemY
	                    );
	                }

	                if (checkbox) {
	                    checkbox.x = itemX;
	                    checkbox.y = itemY;
	                }
	            },

	            /**
	             * Destroy a single legend item
	             * @param {Object} item The series or point
	             */
	            destroyItem: function(item) {
	                var checkbox = item.checkbox;

	                // destroy SVG elements
	                each(['legendItem', 'legendLine', 'legendSymbol', 'legendGroup'], function(key) {
	                    if (item[key]) {
	                        item[key] = item[key].destroy();
	                    }
	                });

	                if (checkbox) {
	                    discardElement(item.checkbox);
	                }
	            },

	            /**
	             * Destroys the legend.
	             */
	            destroy: function() {
	                function destroyItems(key) {
	                    if (this[key]) {
	                        this[key] = this[key].destroy();
	                    }
	                }

	                // Destroy items
	                each(this.getAllItems(), function(item) {
	                    each(['legendItem', 'legendGroup'], destroyItems, item);
	                });

	                each(['box', 'title', 'group'], destroyItems, this);
	                this.display = null; // Reset in .render on update.
	            },

	            /**
	             * Position the checkboxes after the width is determined
	             */
	            positionCheckboxes: function(scrollOffset) {
	                var alignAttr = this.group && this.group.alignAttr,
	                    translateY,
	                    clipHeight = this.clipHeight || this.legendHeight,
	                    titleHeight = this.titleHeight;

	                if (alignAttr) {
	                    translateY = alignAttr.translateY;
	                    each(this.allItems, function(item) {
	                        var checkbox = item.checkbox,
	                            top;

	                        if (checkbox) {
	                            top = translateY + titleHeight + checkbox.y + (scrollOffset || 0) + 3;
	                            css(checkbox, {
	                                left: (alignAttr.translateX + item.checkboxOffset + checkbox.x - 20) + 'px',
	                                top: top + 'px',
	                                display: top > translateY - 6 && top < translateY + clipHeight - 6 ? '' : 'none'
	                            });
	                        }
	                    });
	                }
	            },

	            /**
	             * Render the legend title on top of the legend
	             */
	            renderTitle: function() {
	                var options = this.options,
	                    padding = this.padding,
	                    titleOptions = options.title,
	                    titleHeight = 0,
	                    bBox;

	                if (titleOptions.text) {
	                    if (!this.title) {
	                        this.title = this.chart.renderer.label(titleOptions.text, padding - 3, padding - 4, null, null, null, null, null, 'legend-title')
	                            .attr({
	                                zIndex: 1
	                            })

	                        .css(titleOptions.style)

	                        .add(this.group);
	                    }
	                    bBox = this.title.getBBox();
	                    titleHeight = bBox.height;
	                    this.offsetWidth = bBox.width; // #1717
	                    this.contentGroup.attr({
	                        translateY: titleHeight
	                    });
	                }
	                this.titleHeight = titleHeight;
	            },

	            /**
	             * Set the legend item text
	             */
	            setText: function(item) {
	                var options = this.options;
	                item.legendItem.attr({
	                    text: options.labelFormat ? H.format(options.labelFormat, item) : options.labelFormatter.call(item)
	                });
	            },

	            /**
	             * Render a single specific legend item
	             * @param {Object} item A series or point
	             */
	            renderItem: function(item) {
	                var legend = this,
	                    chart = legend.chart,
	                    renderer = chart.renderer,
	                    options = legend.options,
	                    horizontal = options.layout === 'horizontal',
	                    symbolWidth = legend.symbolWidth,
	                    symbolPadding = options.symbolPadding,

	                    itemStyle = legend.itemStyle,
	                    itemHiddenStyle = legend.itemHiddenStyle,

	                    padding = legend.padding,
	                    itemDistance = horizontal ? pick(options.itemDistance, 20) : 0,
	                    ltr = !options.rtl,
	                    itemHeight,
	                    widthOption = options.width,
	                    itemMarginBottom = options.itemMarginBottom || 0,
	                    itemMarginTop = legend.itemMarginTop,
	                    initialItemX = legend.initialItemX,
	                    bBox,
	                    itemWidth,
	                    li = item.legendItem,
	                    isSeries = !item.series,
	                    series = !isSeries && item.series.drawLegendSymbol ? item.series : item,
	                    seriesOptions = series.options,
	                    showCheckbox = legend.createCheckboxForItem && seriesOptions && seriesOptions.showCheckbox,
	                    useHTML = options.useHTML,
	                    fontSize = 12;

	                if (!li) { // generate it once, later move it

	                    // Generate the group box
	                    // A group to hold the symbol and text. Text is to be appended in Legend class.
	                    item.legendGroup = renderer.g('legend-item')
	                        .addClass('highcharts-' + series.type + '-series highcharts-color-' + item.colorIndex +
	                            (item.options.className ? ' ' + item.options.className : '') +
	                            (isSeries ? ' highcharts-series-' + item.index : '')
	                        )
	                        .attr({
	                            zIndex: 1
	                        })
	                        .add(legend.scrollGroup);

	                    // Generate the list item text and add it to the group
	                    item.legendItem = li = renderer.text(
	                        '',
	                        ltr ? symbolWidth + symbolPadding : -symbolPadding,
	                        legend.baseline || 0,
	                        useHTML
	                    )

	                    .css(merge(item.visible ? itemStyle : itemHiddenStyle)) // merge to prevent modifying original (#1021)

	                    .attr({
	                            align: ltr ? 'left' : 'right',
	                            zIndex: 2
	                        })
	                        .add(item.legendGroup);

	                    // Get the baseline for the first item - the font size is equal for all
	                    if (!legend.baseline) {

	                        fontSize = itemStyle.fontSize;

	                        legend.fontMetrics = renderer.fontMetrics(
	                            fontSize,
	                            li
	                        );
	                        legend.baseline = legend.fontMetrics.f + 3 + itemMarginTop;
	                        li.attr('y', legend.baseline);
	                    }

	                    // Draw the legend symbol inside the group box
	                    legend.symbolHeight = options.symbolHeight || legend.fontMetrics.f;
	                    series.drawLegendSymbol(legend, item);

	                    if (legend.setItemEvents) {
	                        legend.setItemEvents(item, li, useHTML);
	                    }

	                    // add the HTML checkbox on top
	                    if (showCheckbox) {
	                        legend.createCheckboxForItem(item);
	                    }
	                }

	                // Colorize the items
	                legend.colorizeItem(item, item.visible);

	                // Always update the text
	                legend.setText(item);

	                // calculate the positions for the next line
	                bBox = li.getBBox();

	                itemWidth = item.checkboxOffset =
	                    options.itemWidth ||
	                    item.legendItemWidth ||
	                    symbolWidth + symbolPadding + bBox.width + itemDistance + (showCheckbox ? 20 : 0);
	                legend.itemHeight = itemHeight = Math.round(item.legendItemHeight || bBox.height);

	                // if the item exceeds the width, start a new line
	                if (horizontal && legend.itemX - initialItemX + itemWidth >
	                    (widthOption || (chart.chartWidth - 2 * padding - initialItemX - options.x))) {
	                    legend.itemX = initialItemX;
	                    legend.itemY += itemMarginTop + legend.lastLineHeight + itemMarginBottom;
	                    legend.lastLineHeight = 0; // reset for next line (#915, #3976)
	                }

	                // If the item exceeds the height, start a new column
	                /*if (!horizontal && legend.itemY + options.y + itemHeight > chart.chartHeight - spacingTop - spacingBottom) {
	                	legend.itemY = legend.initialItemY;
	                	legend.itemX += legend.maxItemWidth;
	                	legend.maxItemWidth = 0;
	                }*/

	                // Set the edge positions
	                legend.maxItemWidth = Math.max(legend.maxItemWidth, itemWidth);
	                legend.lastItemY = itemMarginTop + legend.itemY + itemMarginBottom;
	                legend.lastLineHeight = Math.max(itemHeight, legend.lastLineHeight); // #915

	                // cache the position of the newly generated or reordered items
	                item._legendItemPos = [legend.itemX, legend.itemY];

	                // advance
	                if (horizontal) {
	                    legend.itemX += itemWidth;

	                } else {
	                    legend.itemY += itemMarginTop + itemHeight + itemMarginBottom;
	                    legend.lastLineHeight = itemHeight;
	                }

	                // the width of the widest item
	                legend.offsetWidth = widthOption || Math.max(
	                    (horizontal ? legend.itemX - initialItemX - itemDistance : itemWidth) + padding,
	                    legend.offsetWidth
	                );
	            },

	            /**
	             * Get all items, which is one item per series for normal series and one item per point
	             * for pie series.
	             */
	            getAllItems: function() {
	                var allItems = [];
	                each(this.chart.series, function(series) {
	                    var seriesOptions = series && series.options;

	                    // Handle showInLegend. If the series is linked to another series, defaults to false.
	                    if (series && pick(seriesOptions.showInLegend, !defined(seriesOptions.linkedTo) ? undefined : false, true)) {

	                        // Use points or series for the legend item depending on legendType
	                        allItems = allItems.concat(
	                            series.legendItems ||
	                            (seriesOptions.legendType === 'point' ?
	                                series.data :
	                                series)
	                        );
	                    }
	                });
	                return allItems;
	            },

	            /**
	             * Adjust the chart margins by reserving space for the legend on only one side
	             * of the chart. If the position is set to a corner, top or bottom is reserved
	             * for horizontal legends and left or right for vertical ones.
	             */
	            adjustMargins: function(margin, spacing) {
	                var chart = this.chart,
	                    options = this.options,
	                    // Use the first letter of each alignment option in order to detect the side
	                    alignment = options.align.charAt(0) + options.verticalAlign.charAt(0) + options.layout.charAt(0); // #4189 - use charAt(x) notation instead of [x] for IE7

	                if (!options.floating) {

	                    each([
	                        /(lth|ct|rth)/,
	                        /(rtv|rm|rbv)/,
	                        /(rbh|cb|lbh)/,
	                        /(lbv|lm|ltv)/
	                    ], function(alignments, side) {
	                        if (alignments.test(alignment) && !defined(margin[side])) {
	                            // Now we have detected on which side of the chart we should reserve space for the legend
	                            chart[marginNames[side]] = Math.max(
	                                chart[marginNames[side]],
	                                chart.legend[(side + 1) % 2 ? 'legendHeight' : 'legendWidth'] + [1, -1, -1, 1][side] * options[(side % 2) ? 'x' : 'y'] +
	                                pick(options.margin, 12) +
	                                spacing[side]
	                            );
	                        }
	                    });
	                }
	            },

	            /**
	             * Render the legend. This method can be called both before and after
	             * chart.render. If called after, it will only rearrange items instead
	             * of creating new ones.
	             */
	            render: function() {
	                var legend = this,
	                    chart = legend.chart,
	                    renderer = chart.renderer,
	                    legendGroup = legend.group,
	                    allItems,
	                    display,
	                    legendWidth,
	                    legendHeight,
	                    box = legend.box,
	                    options = legend.options,
	                    padding = legend.padding;

	                legend.itemX = legend.initialItemX;
	                legend.itemY = legend.initialItemY;
	                legend.offsetWidth = 0;
	                legend.lastItemY = 0;

	                if (!legendGroup) {
	                    legend.group = legendGroup = renderer.g('legend')
	                        .attr({
	                            zIndex: 7
	                        })
	                        .add();
	                    legend.contentGroup = renderer.g()
	                        .attr({
	                            zIndex: 1
	                        }) // above background
	                        .add(legendGroup);
	                    legend.scrollGroup = renderer.g()
	                        .add(legend.contentGroup);
	                }

	                legend.renderTitle();

	                // add each series or point
	                allItems = legend.getAllItems();

	                // sort by legendIndex
	                stableSort(allItems, function(a, b) {
	                    return ((a.options && a.options.legendIndex) || 0) - ((b.options && b.options.legendIndex) || 0);
	                });

	                // reversed legend
	                if (options.reversed) {
	                    allItems.reverse();
	                }

	                legend.allItems = allItems;
	                legend.display = display = !!allItems.length;

	                // render the items
	                legend.lastLineHeight = 0;
	                each(allItems, function(item) {
	                    legend.renderItem(item);
	                });

	                // Get the box
	                legendWidth = (options.width || legend.offsetWidth) + padding;
	                legendHeight = legend.lastItemY + legend.lastLineHeight + legend.titleHeight;
	                legendHeight = legend.handleOverflow(legendHeight);
	                legendHeight += padding;

	                // Draw the border and/or background
	                if (!box) {
	                    legend.box = box = renderer.rect()
	                        .addClass('highcharts-legend-box')
	                        .attr({
	                            r: options.borderRadius
	                        })
	                        .add(legendGroup);
	                    box.isNew = true;
	                }


	                // Presentational
	                box
	                    .attr({
	                        stroke: options.borderColor,
	                        'stroke-width': options.borderWidth || 0,
	                        fill: options.backgroundColor || 'none'
	                    })
	                    .shadow(options.shadow);


	                if (legendWidth > 0 && legendHeight > 0) {
	                    box[box.isNew ? 'attr' : 'animate'](
	                        box.crisp({
	                            x: 0,
	                            y: 0,
	                            width: legendWidth,
	                            height: legendHeight
	                        }, box.strokeWidth())
	                    );
	                    box.isNew = false;
	                }

	                // hide the border if no items
	                box[display ? 'show' : 'hide']();



	                legend.legendWidth = legendWidth;
	                legend.legendHeight = legendHeight;

	                // Now that the legend width and height are established, put the items in the
	                // final position
	                each(allItems, function(item) {
	                    legend.positionItem(item);
	                });

	                // 1.x compatibility: positioning based on style
	                /*var props = ['left', 'right', 'top', 'bottom'],
	                	prop,
	                	i = 4;
	                while (i--) {
	                	prop = props[i];
	                	if (options.style[prop] && options.style[prop] !== 'auto') {
	                		options[i < 2 ? 'align' : 'verticalAlign'] = prop;
	                		options[i < 2 ? 'x' : 'y'] = pInt(options.style[prop]) * (i % 2 ? -1 : 1);
	                	}
	                }*/

	                if (display) {
	                    legendGroup.align(extend({
	                        width: legendWidth,
	                        height: legendHeight
	                    }, options), true, 'spacingBox');
	                }

	                if (!chart.isResizing) {
	                    this.positionCheckboxes();
	                }
	            },

	            /**
	             * Set up the overflow handling by adding navigation with up and down arrows below the
	             * legend.
	             */
	            handleOverflow: function(legendHeight) {
	                var legend = this,
	                    chart = this.chart,
	                    renderer = chart.renderer,
	                    options = this.options,
	                    optionsY = options.y,
	                    alignTop = options.verticalAlign === 'top',
	                    spaceHeight = chart.spacingBox.height + (alignTop ? -optionsY : optionsY) - this.padding,
	                    maxHeight = options.maxHeight,
	                    clipHeight,
	                    clipRect = this.clipRect,
	                    navOptions = options.navigation,
	                    animation = pick(navOptions.animation, true),
	                    arrowSize = navOptions.arrowSize || 12,
	                    nav = this.nav,
	                    pages = this.pages,
	                    padding = this.padding,
	                    lastY,
	                    allItems = this.allItems,
	                    clipToHeight = function(height) {
	                        if (height) {
	                            clipRect.attr({
	                                height: height
	                            });
	                        } else if (clipRect) { // Reset (#5912)
	                            legend.clipRect = clipRect.destroy();
	                            legend.contentGroup.clip();
	                        }

	                        // useHTML
	                        if (legend.contentGroup.div) {
	                            legend.contentGroup.div.style.clip = height ?
	                                'rect(' + padding + 'px,9999px,' +
	                                (padding + height) + 'px,0)' :
	                                'auto';
	                        }
	                    };


	                // Adjust the height
	                if (options.layout === 'horizontal' && options.verticalAlign !== 'middle' && !options.floating) {
	                    spaceHeight /= 2;
	                }
	                if (maxHeight) {
	                    spaceHeight = Math.min(spaceHeight, maxHeight);
	                }

	                // Reset the legend height and adjust the clipping rectangle
	                pages.length = 0;
	                if (legendHeight > spaceHeight && navOptions.enabled !== false) {

	                    this.clipHeight = clipHeight = Math.max(spaceHeight - 20 - this.titleHeight - padding, 0);
	                    this.currentPage = pick(this.currentPage, 1);
	                    this.fullHeight = legendHeight;

	                    // Fill pages with Y positions so that the top of each a legend item defines
	                    // the scroll top for each page (#2098)
	                    each(allItems, function(item, i) {
	                        var y = item._legendItemPos[1],
	                            h = Math.round(item.legendItem.getBBox().height),
	                            len = pages.length;

	                        if (!len || (y - pages[len - 1] > clipHeight && (lastY || y) !== pages[len - 1])) {
	                            pages.push(lastY || y);
	                            len++;
	                        }

	                        if (i === allItems.length - 1 && y + h - pages[len - 1] > clipHeight) {
	                            pages.push(y);
	                        }
	                        if (y !== lastY) {
	                            lastY = y;
	                        }
	                    });

	                    // Only apply clipping if needed. Clipping causes blurred legend in PDF export (#1787)
	                    if (!clipRect) {
	                        clipRect = legend.clipRect = renderer.clipRect(0, padding, 9999, 0);
	                        legend.contentGroup.clip(clipRect);
	                    }

	                    clipToHeight(clipHeight);

	                    // Add navigation elements
	                    if (!nav) {
	                        this.nav = nav = renderer.g().attr({
	                            zIndex: 1
	                        }).add(this.group);
	                        this.up = renderer.symbol('triangle', 0, 0, arrowSize, arrowSize)
	                            .on('click', function() {
	                                legend.scroll(-1, animation);
	                            })
	                            .add(nav);
	                        this.pager = renderer.text('', 15, 10)
	                            .addClass('highcharts-legend-navigation')

	                        .css(navOptions.style)

	                        .add(nav);
	                        this.down = renderer.symbol('triangle-down', 0, 0, arrowSize, arrowSize)
	                            .on('click', function() {
	                                legend.scroll(1, animation);
	                            })
	                            .add(nav);
	                    }

	                    // Set initial position
	                    legend.scroll(0);

	                    legendHeight = spaceHeight;

	                    // Reset
	                } else if (nav) {
	                    clipToHeight();
	                    nav.hide();
	                    this.scrollGroup.attr({
	                        translateY: 1
	                    });
	                    this.clipHeight = 0; // #1379
	                }

	                return legendHeight;
	            },

	            /**
	             * Scroll the legend by a number of pages
	             * @param {Object} scrollBy
	             * @param {Object} animation
	             */
	            scroll: function(scrollBy, animation) {
	                var pages = this.pages,
	                    pageCount = pages.length,
	                    currentPage = this.currentPage + scrollBy,
	                    clipHeight = this.clipHeight,
	                    navOptions = this.options.navigation,
	                    pager = this.pager,
	                    padding = this.padding,
	                    scrollOffset;

	                // When resizing while looking at the last page
	                if (currentPage > pageCount) {
	                    currentPage = pageCount;
	                }

	                if (currentPage > 0) {

	                    if (animation !== undefined) {
	                        setAnimation(animation, this.chart);
	                    }

	                    this.nav.attr({
	                        translateX: padding,
	                        translateY: clipHeight + this.padding + 7 + this.titleHeight,
	                        visibility: 'visible'
	                    });
	                    this.up.attr({
	                        'class': currentPage === 1 ? 'highcharts-legend-nav-inactive' : 'highcharts-legend-nav-active'
	                    });
	                    pager.attr({
	                        text: currentPage + '/' + pageCount
	                    });
	                    this.down.attr({
	                        'x': 18 + this.pager.getBBox().width, // adjust to text width
	                        'class': currentPage === pageCount ? 'highcharts-legend-nav-inactive' : 'highcharts-legend-nav-active'
	                    });


	                    this.up
	                        .attr({
	                            fill: currentPage === 1 ? navOptions.inactiveColor : navOptions.activeColor
	                        })
	                        .css({
	                            cursor: currentPage === 1 ? 'default' : 'pointer'
	                        });
	                    this.down
	                        .attr({
	                            fill: currentPage === pageCount ? navOptions.inactiveColor : navOptions.activeColor
	                        })
	                        .css({
	                            cursor: currentPage === pageCount ? 'default' : 'pointer'
	                        });


	                    scrollOffset = -pages[currentPage - 1] + this.initialItemY;

	                    this.scrollGroup.animate({
	                        translateY: scrollOffset
	                    });

	                    this.currentPage = currentPage;
	                    this.positionCheckboxes(scrollOffset);
	                }

	            }

	        };

	        /*
	         * LegendSymbolMixin
	         */

	        H.LegendSymbolMixin = {

	            /**
	             * Get the series' symbol in the legend
	             *
	             * @param {Object} legend The legend object
	             * @param {Object} item The series (this) or point
	             */
	            drawRectangle: function(legend, item) {
	                var options = legend.options,
	                    symbolHeight = legend.symbolHeight,
	                    square = options.squareSymbol,
	                    symbolWidth = square ? symbolHeight : legend.symbolWidth;

	                item.legendSymbol = this.chart.renderer.rect(
	                        square ? (legend.symbolWidth - symbolHeight) / 2 : 0,
	                        legend.baseline - symbolHeight + 1, // #3988
	                        symbolWidth,
	                        symbolHeight,
	                        pick(legend.options.symbolRadius, symbolHeight / 2)
	                    )
	                    .addClass('highcharts-point')
	                    .attr({
	                        zIndex: 3
	                    }).add(item.legendGroup);

	            },

	            /**
	             * Get the series' symbol in the legend. This method should be overridable to create custom
	             * symbols through Highcharts.seriesTypes[type].prototype.drawLegendSymbols.
	             *
	             * @param {Object} legend The legend object
	             */
	            drawLineMarker: function(legend) {

	                var options = this.options,
	                    markerOptions = options.marker,
	                    radius,
	                    legendSymbol,
	                    symbolWidth = legend.symbolWidth,
	                    symbolHeight = legend.symbolHeight,
	                    generalRadius = symbolHeight / 2,
	                    renderer = this.chart.renderer,
	                    legendItemGroup = this.legendGroup,
	                    verticalCenter = legend.baseline - Math.round(legend.fontMetrics.b * 0.3),
	                    attr = {};

	                // Draw the line

	                attr = {
	                    'stroke-width': options.lineWidth || 0
	                };
	                if (options.dashStyle) {
	                    attr.dashstyle = options.dashStyle;
	                }


	                this.legendLine = renderer.path([
	                        'M',
	                        0,
	                        verticalCenter,
	                        'L',
	                        symbolWidth,
	                        verticalCenter
	                    ])
	                    .addClass('highcharts-graph')
	                    .attr(attr)
	                    .add(legendItemGroup);

	                // Draw the marker
	                if (markerOptions && markerOptions.enabled !== false) {

	                    // Do not allow the marker to be larger than the symbolHeight
	                    radius = Math.min(
	                        pick(markerOptions.radius, generalRadius),
	                        generalRadius
	                    );

	                    // Restrict symbol markers size
	                    if (this.symbol.indexOf('url') === 0) {
	                        markerOptions = merge(markerOptions, {
	                            width: symbolHeight,
	                            height: symbolHeight
	                        });
	                        radius = 0;
	                    }

	                    this.legendSymbol = legendSymbol = renderer.symbol(
	                            this.symbol,
	                            (symbolWidth / 2) - radius,
	                            verticalCenter - radius,
	                            2 * radius,
	                            2 * radius,
	                            markerOptions
	                        )
	                        .addClass('highcharts-point')
	                        .add(legendItemGroup);
	                    legendSymbol.isMarker = true;
	                }
	            }
	        };

	        // Workaround for #2030, horizontal legend items not displaying in IE11 Preview,
	        // and for #2580, a similar drawing flaw in Firefox 26.
	        // Explore if there's a general cause for this. The problem may be related
	        // to nested group elements, as the legend item texts are within 4 group elements.
	        if (/Trident\/7\.0/.test(win.navigator.userAgent) || isFirefox) {
	            wrap(Legend.prototype, 'positionItem', function(proceed, item) {
	                var legend = this,
	                    runPositionItem = function() { // If chart destroyed in sync, this is undefined (#2030)
	                        if (item._legendItemPos) {
	                            proceed.call(legend, item);
	                        }
	                    };

	                // Do it now, for export and to get checkbox placement
	                runPositionItem();

	                // Do it after to work around the core issue
	                setTimeout(runPositionItem);
	            });
	        }

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            animate = H.animate,
	            animObject = H.animObject,
	            attr = H.attr,
	            doc = H.doc,
	            Axis = H.Axis, // @todo add as requirement
	            createElement = H.createElement,
	            defaultOptions = H.defaultOptions,
	            discardElement = H.discardElement,
	            charts = H.charts,
	            css = H.css,
	            defined = H.defined,
	            each = H.each,
	            extend = H.extend,
	            find = H.find,
	            fireEvent = H.fireEvent,
	            getStyle = H.getStyle,
	            grep = H.grep,
	            isNumber = H.isNumber,
	            isObject = H.isObject,
	            isString = H.isString,
	            Legend = H.Legend, // @todo add as requirement
	            marginNames = H.marginNames,
	            merge = H.merge,
	            Pointer = H.Pointer, // @todo add as requirement
	            pick = H.pick,
	            pInt = H.pInt,
	            removeEvent = H.removeEvent,
	            seriesTypes = H.seriesTypes,
	            splat = H.splat,
	            svg = H.svg,
	            syncTimeout = H.syncTimeout,
	            win = H.win,
	            Renderer = H.Renderer;
	        /**
	         * The Chart class.
	         * @class Highcharts.Chart
	         * @memberOf Highcharts
	         * @param {String|HTMLDOMElement} renderTo - The DOM element to render to, or its
	         * id.
	         * @param {ChartOptions} options - The chart options structure.
	         * @param {Function} callback - Function to run when the chart has loaded.
	         */
	        var Chart = H.Chart = function() {
	            this.getArgs.apply(this, arguments);
	        };

	        H.chart = function(a, b, c) {
	            return new Chart(a, b, c);
	        };

	        Chart.prototype = {

	            /**
	             * Hook for modules
	             */
	            callbacks: [],

	            /**
	             * Handle the arguments passed to the constructor
	             * @returns {Array} Arguments without renderTo
	             */
	            getArgs: function() {
	                var args = [].slice.call(arguments);

	                // Remove the optional first argument, renderTo, and
	                // set it on this.
	                if (isString(args[0]) || args[0].nodeName) {
	                    this.renderTo = args.shift();
	                }
	                this.init(args[0], args[1]);
	            },

	            /**
	             * Initialize the chart
	             */
	            init: function(userOptions, callback) {

	                // Handle regular options
	                var options,
	                    seriesOptions = userOptions.series; // skip merging data points to increase performance

	                userOptions.series = null;
	                options = merge(defaultOptions, userOptions); // do the merge
	                options.series = userOptions.series = seriesOptions; // set back the series data
	                this.userOptions = userOptions;
	                this.respRules = [];

	                var optionsChart = options.chart;

	                var chartEvents = optionsChart.events;

	                this.margin = [];
	                this.spacing = [];

	                //this.runChartClick = chartEvents && !!chartEvents.click;
	                this.bounds = {
	                    h: {},
	                    v: {}
	                }; // Pixel data bounds for touch zoom

	                this.callback = callback;
	                this.isResizing = 0;
	                this.options = options;
	                //chartTitleOptions = undefined;
	                //chartSubtitleOptions = undefined;

	                this.axes = [];
	                this.series = [];
	                this.hasCartesianSeries = optionsChart.showAxes;
	                //this.axisOffset = undefined;
	                //this.inverted = undefined;
	                //this.loadingShown = undefined;
	                //this.container = undefined;
	                //this.chartWidth = undefined;
	                //this.chartHeight = undefined;
	                //this.marginRight = undefined;
	                //this.marginBottom = undefined;
	                //this.containerWidth = undefined;
	                //this.containerHeight = undefined;
	                //this.oldChartWidth = undefined;
	                //this.oldChartHeight = undefined;

	                //this.renderTo = undefined;
	                //this.renderToClone = undefined;

	                //this.spacingBox = undefined

	                //this.legend = undefined;

	                // Elements
	                //this.chartBackground = undefined;
	                //this.plotBackground = undefined;
	                //this.plotBGImage = undefined;
	                //this.plotBorder = undefined;
	                //this.loadingDiv = undefined;
	                //this.loadingSpan = undefined;

	                var chart = this,
	                    eventType;

	                // Add the chart to the global lookup
	                chart.index = charts.length;
	                charts.push(chart);
	                H.chartCount++;

	                // Chart event handlers
	                if (chartEvents) {
	                    for (eventType in chartEvents) {
	                        addEvent(chart, eventType, chartEvents[eventType]);
	                    }
	                }

	                chart.xAxis = [];
	                chart.yAxis = [];

	                chart.pointCount = chart.colorCounter = chart.symbolCounter = 0;

	                chart.firstRender();
	            },

	            /**
	             * Initialize an individual series, called internally before render time
	             */
	            initSeries: function(options) {
	                var chart = this,
	                    optionsChart = chart.options.chart,
	                    type = options.type || optionsChart.type || optionsChart.defaultSeriesType,
	                    series,
	                    Constr = seriesTypes[type];

	                // No such series type
	                if (!Constr) {
	                    H.error(17, true);
	                }

	                series = new Constr();
	                series.init(this, options);
	                return series;
	            },

	            /**
	             * Order all series above a given index. When series are added and ordered
	             * by configuration, only the last series is handled (#248, #1123, #2456,
	             * #6112). This function is called on series initialization and destroy.
	             *
	             * @param {number} fromIndex - If this is given, only the series above this
	             *    index are handled.
	             */
	            orderSeries: function(fromIndex) {
	                var series = this.series,
	                    i = fromIndex || 0;
	                for (; i < series.length; i++) {
	                    if (series[i]) {
	                        series[i].index = i;
	                        series[i].name = series[i].name ||
	                            'Series ' + (series[i].index + 1);
	                    }
	                }
	            },

	            /**
	             * Check whether a given point is within the plot area
	             *
	             * @param {Number} plotX Pixel x relative to the plot area
	             * @param {Number} plotY Pixel y relative to the plot area
	             * @param {Boolean} inverted Whether the chart is inverted
	             */
	            isInsidePlot: function(plotX, plotY, inverted) {
	                var x = inverted ? plotY : plotX,
	                    y = inverted ? plotX : plotY;

	                return x >= 0 &&
	                    x <= this.plotWidth &&
	                    y >= 0 &&
	                    y <= this.plotHeight;
	            },

	            /**
	             * Redraw legend, axes or series based on updated data
	             *
	             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	             *	configuration
	             */
	            redraw: function(animation) {
	                var chart = this,
	                    axes = chart.axes,
	                    series = chart.series,
	                    pointer = chart.pointer,
	                    legend = chart.legend,
	                    redrawLegend = chart.isDirtyLegend,
	                    hasStackedSeries,
	                    hasDirtyStacks,
	                    hasCartesianSeries = chart.hasCartesianSeries,
	                    isDirtyBox = chart.isDirtyBox,
	                    seriesLength = series.length,
	                    i = seriesLength,
	                    serie,
	                    renderer = chart.renderer,
	                    isHiddenChart = renderer.isHidden(),
	                    afterRedraw = [];

	                // Handle responsive rules, not only on resize (#6130)
	                if (chart.setResponsive) {
	                    chart.setResponsive(false);
	                }

	                H.setAnimation(animation, chart);

	                if (isHiddenChart) {
	                    chart.cloneRenderTo();
	                }

	                // Adjust title layout (reflow multiline text)
	                chart.layOutTitles();

	                // link stacked series
	                while (i--) {
	                    serie = series[i];

	                    if (serie.options.stacking) {
	                        hasStackedSeries = true;

	                        if (serie.isDirty) {
	                            hasDirtyStacks = true;
	                            break;
	                        }
	                    }
	                }
	                if (hasDirtyStacks) { // mark others as dirty
	                    i = seriesLength;
	                    while (i--) {
	                        serie = series[i];
	                        if (serie.options.stacking) {
	                            serie.isDirty = true;
	                        }
	                    }
	                }

	                // Handle updated data in the series
	                each(series, function(serie) {
	                    if (serie.isDirty) {
	                        if (serie.options.legendType === 'point') {
	                            if (serie.updateTotals) {
	                                serie.updateTotals();
	                            }
	                            redrawLegend = true;
	                        }
	                    }
	                    if (serie.isDirtyData) {
	                        fireEvent(serie, 'updatedData');
	                    }
	                });

	                // handle added or removed series
	                if (redrawLegend && legend.options.enabled) { // series or pie points are added or removed
	                    // draw legend graphics
	                    legend.render();

	                    chart.isDirtyLegend = false;
	                }

	                // reset stacks
	                if (hasStackedSeries) {
	                    chart.getStacks();
	                }


	                if (hasCartesianSeries) {
	                    // set axes scales
	                    each(axes, function(axis) {
	                        axis.updateNames();
	                        axis.setScale();
	                    });
	                }

	                chart.getMargins(); // #3098

	                if (hasCartesianSeries) {
	                    // If one axis is dirty, all axes must be redrawn (#792, #2169)
	                    each(axes, function(axis) {
	                        if (axis.isDirty) {
	                            isDirtyBox = true;
	                        }
	                    });

	                    // redraw axes
	                    each(axes, function(axis) {

	                        // Fire 'afterSetExtremes' only if extremes are set
	                        var key = axis.min + ',' + axis.max;
	                        if (axis.extKey !== key) { // #821, #4452
	                            axis.extKey = key;
	                            afterRedraw.push(function() { // prevent a recursive call to chart.redraw() (#1119)
	                                fireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes())); // #747, #751
	                                delete axis.eventArgs;
	                            });
	                        }
	                        if (isDirtyBox || hasStackedSeries) {
	                            axis.redraw();
	                        }
	                    });
	                }

	                // the plot areas size has changed
	                if (isDirtyBox) {
	                    chart.drawChartBox();
	                }

	                // Fire an event before redrawing series, used by the boost module to
	                // clear previous series renderings.
	                fireEvent(chart, 'predraw');

	                // redraw affected series
	                each(series, function(serie) {
	                    if ((isDirtyBox || serie.isDirty) && serie.visible) {
	                        serie.redraw();
	                    }
	                    // Set it here, otherwise we will have unlimited 'updatedData' calls
	                    // for a hidden series after setData(). Fixes #6012
	                    serie.isDirtyData = false;
	                });

	                // move tooltip or reset
	                if (pointer) {
	                    pointer.reset(true);
	                }

	                // redraw if canvas
	                renderer.draw();

	                // Fire the events
	                fireEvent(chart, 'redraw');
	                fireEvent(chart, 'render');

	                if (isHiddenChart) {
	                    chart.cloneRenderTo(true);
	                }

	                // Fire callbacks that are put on hold until after the redraw
	                each(afterRedraw, function(callback) {
	                    callback.call();
	                });
	            },

	            /**
	             * Get an axis, series or point object by id.
	             * @param id {String} The id as given in the configuration options
	             */
	            get: function(id) {

	                var ret,
	                    series = this.series,
	                    i;

	                function itemById(item) {
	                    return item.id === id || (item.options && item.options.id === id);
	                }

	                ret =
	                    // Search axes
	                    find(this.axes, itemById) ||

	                    // Search series
	                    find(this.series, itemById);

	                // Search points
	                for (i = 0; !ret && i < series.length; i++) {
	                    ret = find(series[i].points || [], itemById);
	                }

	                return ret;
	            },

	            /**
	             * Create the Axis instances based on the config options
	             */
	            getAxes: function() {
	                var chart = this,
	                    options = this.options,
	                    xAxisOptions = options.xAxis = splat(options.xAxis || {}),
	                    yAxisOptions = options.yAxis = splat(options.yAxis || {}),
	                    optionsArray;

	                // make sure the options are arrays and add some members
	                each(xAxisOptions, function(axis, i) {
	                    axis.index = i;
	                    axis.isX = true;
	                });

	                each(yAxisOptions, function(axis, i) {
	                    axis.index = i;
	                });

	                // concatenate all axis options into one array
	                optionsArray = xAxisOptions.concat(yAxisOptions);

	                each(optionsArray, function(axisOptions) {
	                    new Axis(chart, axisOptions); // eslint-disable-line no-new
	                });
	            },


	            /**
	             * Get the currently selected points from all series
	             */
	            getSelectedPoints: function() {
	                var points = [];
	                each(this.series, function(serie) {
	                    points = points.concat(grep(serie.points || [], function(point) {
	                        return point.selected;
	                    }));
	                });
	                return points;
	            },

	            /**
	             * Get the currently selected series
	             */
	            getSelectedSeries: function() {
	                return grep(this.series, function(serie) {
	                    return serie.selected;
	                });
	            },

	            /**
	             * Show the title and subtitle of the chart
	             *
	             * @param titleOptions {Object} New title options
	             * @param subtitleOptions {Object} New subtitle options
	             *
	             */
	            setTitle: function(titleOptions, subtitleOptions, redraw) {
	                var chart = this,
	                    options = chart.options,
	                    chartTitleOptions,
	                    chartSubtitleOptions;

	                chartTitleOptions = options.title = merge(

	                    // Default styles
	                    {
	                        style: {
	                            color: '#333333',
	                            fontSize: options.isStock ? '16px' : '18px' // #2944
	                        }
	                    },

	                    options.title,
	                    titleOptions
	                );
	                chartSubtitleOptions = options.subtitle = merge(

	                    // Default styles
	                    {
	                        style: {
	                            color: '#666666'
	                        }
	                    },

	                    options.subtitle,
	                    subtitleOptions
	                );

	                // add title and subtitle
	                each([
	                    ['title', titleOptions, chartTitleOptions],
	                    ['subtitle', subtitleOptions, chartSubtitleOptions]
	                ], function(arr, i) {
	                    var name = arr[0],
	                        title = chart[name],
	                        titleOptions = arr[1],
	                        chartTitleOptions = arr[2];

	                    if (title && titleOptions) {
	                        chart[name] = title = title.destroy(); // remove old
	                    }

	                    if (chartTitleOptions && chartTitleOptions.text && !title) {
	                        chart[name] = chart.renderer.text(
	                                chartTitleOptions.text,
	                                0,
	                                0,
	                                chartTitleOptions.useHTML
	                            )
	                            .attr({
	                                align: chartTitleOptions.align,
	                                'class': 'highcharts-' + name,
	                                zIndex: chartTitleOptions.zIndex || 4
	                            })
	                            .add();

	                        // Update methods, shortcut to Chart.setTitle
	                        chart[name].update = function(o) {
	                            chart.setTitle(!i && o, i && o);
	                        };


	                        // Presentational
	                        chart[name].css(chartTitleOptions.style);


	                    }
	                });
	                chart.layOutTitles(redraw);
	            },

	            /**
	             * Lay out the chart titles and cache the full offset height for use in getMargins
	             */
	            layOutTitles: function(redraw) {
	                var titleOffset = 0,
	                    requiresDirtyBox,
	                    renderer = this.renderer,
	                    spacingBox = this.spacingBox;

	                // Lay out the title and the subtitle respectively
	                each(['title', 'subtitle'], function(key) {
	                    var title = this[key],
	                        titleOptions = this.options[key],
	                        titleSize;

	                    if (title) {

	                        titleSize = titleOptions.style.fontSize;

	                        titleSize = renderer.fontMetrics(titleSize, title).b;

	                        title
	                            .css({
	                                width: (titleOptions.width || spacingBox.width + titleOptions.widthAdjust) + 'px'
	                            })
	                            .align(extend({
	                                y: titleOffset + titleSize + (key === 'title' ? -3 : 2)
	                            }, titleOptions), false, 'spacingBox');

	                        if (!titleOptions.floating && !titleOptions.verticalAlign) {
	                            titleOffset = Math.ceil(titleOffset + title.getBBox().height);
	                        }
	                    }
	                }, this);

	                requiresDirtyBox = this.titleOffset !== titleOffset;
	                this.titleOffset = titleOffset; // used in getMargins

	                if (!this.isDirtyBox && requiresDirtyBox) {
	                    this.isDirtyBox = requiresDirtyBox;
	                    // Redraw if necessary (#2719, #2744)
	                    if (this.hasRendered && pick(redraw, true) && this.isDirtyBox) {
	                        this.redraw();
	                    }
	                }
	            },

	            /**
	             * Get chart width and height according to options and container size
	             */
	            getChartSize: function() {
	                var chart = this,
	                    optionsChart = chart.options.chart,
	                    widthOption = optionsChart.width,
	                    heightOption = optionsChart.height,
	                    renderTo = chart.renderToClone || chart.renderTo;

	                // Get inner width and height
	                if (!defined(widthOption)) {
	                    chart.containerWidth = getStyle(renderTo, 'width');
	                }
	                if (!defined(heightOption)) {
	                    chart.containerHeight = getStyle(renderTo, 'height');
	                }

	                chart.chartWidth = Math.max( // #1393
	                    0,
	                    widthOption || chart.containerWidth || 600 // #1460
	                );
	                chart.chartHeight = Math.max(
	                    0,
	                    heightOption || chart.containerHeight || 400
	                );
	            },

	            /**
	             * Create a clone of the chart's renderTo div and place it outside the viewport to allow
	             * size computation on chart.render and chart.redraw
	             */
	            cloneRenderTo: function(revert) {
	                var clone = this.renderToClone,
	                    container = this.container;

	                // Destroy the clone and bring the container back to the real renderTo div
	                if (revert) {
	                    if (clone) {
	                        while (clone.childNodes.length) { // #5231
	                            this.renderTo.appendChild(clone.firstChild);
	                        }
	                        discardElement(clone);
	                        delete this.renderToClone;
	                    }

	                    // Set up the clone
	                } else {
	                    if (container && container.parentNode === this.renderTo) {
	                        this.renderTo.removeChild(container); // do not clone this
	                    }
	                    this.renderToClone = clone = this.renderTo.cloneNode(0);
	                    css(clone, {
	                        position: 'absolute',
	                        top: '-9999px',
	                        display: 'block' // #833
	                    });
	                    if (clone.style.setProperty) { // #2631
	                        clone.style.setProperty('display', 'block', 'important');
	                    }
	                    doc.body.appendChild(clone);
	                    if (container) {
	                        clone.appendChild(container);
	                    }
	                }
	            },

	            /**
	             * Setter for the chart class name
	             */
	            setClassName: function(className) {
	                this.container.className = 'highcharts-container ' + (className || '');
	            },

	            /**
	             * Get the containing element, determine the size and create the inner container
	             * div to hold the chart
	             */
	            getContainer: function() {
	                var chart = this,
	                    container,
	                    options = chart.options,
	                    optionsChart = options.chart,
	                    chartWidth,
	                    chartHeight,
	                    renderTo = chart.renderTo,
	                    indexAttrName = 'data-highcharts-chart',
	                    oldChartIndex,
	                    Ren,
	                    containerId = H.uniqueKey(),
	                    containerStyle,
	                    key;

	                if (!renderTo) {
	                    chart.renderTo = renderTo = optionsChart.renderTo;
	                }

	                if (isString(renderTo)) {
	                    chart.renderTo = renderTo = doc.getElementById(renderTo);
	                }

	                // Display an error if the renderTo is wrong
	                if (!renderTo) {
	                    H.error(13, true);
	                }

	                // If the container already holds a chart, destroy it. The check for hasRendered is there
	                // because web pages that are saved to disk from the browser, will preserve the data-highcharts-chart
	                // attribute and the SVG contents, but not an interactive chart. So in this case,
	                // charts[oldChartIndex] will point to the wrong chart if any (#2609).
	                oldChartIndex = pInt(attr(renderTo, indexAttrName));
	                if (isNumber(oldChartIndex) && charts[oldChartIndex] && charts[oldChartIndex].hasRendered) {
	                    charts[oldChartIndex].destroy();
	                }

	                // Make a reference to the chart from the div
	                attr(renderTo, indexAttrName, chart.index);

	                // remove previous chart
	                renderTo.innerHTML = '';

	                // If the container doesn't have an offsetWidth, it has or is a child of
	                // a node that has display:none. We need to temporarily move it out to a
	                // visible state to determine the size, else the legend and tooltips
	                // won't render properly. The skipClone option is used in sparklines as
	                // a micro optimization, saving about 1-2 ms each chart.
	                if (!optionsChart.skipClone && !renderTo.offsetWidth) {
	                    chart.cloneRenderTo();
	                }

	                // get the width and height
	                chart.getChartSize();
	                chartWidth = chart.chartWidth;
	                chartHeight = chart.chartHeight;

	                // Create the inner container

	                containerStyle = extend({
	                    position: 'relative',
	                    overflow: 'hidden', // needed for context menu (avoid scrollbars) and
	                    // content overflow in IE
	                    width: chartWidth + 'px',
	                    height: chartHeight + 'px',
	                    textAlign: 'left',
	                    lineHeight: 'normal', // #427
	                    zIndex: 0, // #1072
	                    '-webkit-tap-highlight-color': 'rgba(0,0,0,0)'
	                }, optionsChart.style);

	                chart.container = container = createElement(
	                    'div', {
	                        id: containerId
	                    },
	                    containerStyle,
	                    chart.renderToClone || renderTo
	                );

	                // cache the cursor (#1650)
	                chart._cursor = container.style.cursor;

	                // Initialize the renderer
	                Ren = H[optionsChart.renderer] || Renderer;
	                chart.renderer = new Ren(
	                    container,
	                    chartWidth,
	                    chartHeight,
	                    null,
	                    optionsChart.forExport,
	                    options.exporting && options.exporting.allowHTML
	                );


	                chart.setClassName(optionsChart.className);

	                chart.renderer.setStyle(optionsChart.style);


	                // Add a reference to the charts index
	                chart.renderer.chartIndex = chart.index;
	            },

	            /**
	             * Calculate margins by rendering axis labels in a preliminary position. Title,
	             * subtitle and legend have already been rendered at this stage, but will be
	             * moved into their final positions
	             */
	            getMargins: function(skipAxes) {
	                var chart = this,
	                    spacing = chart.spacing,
	                    margin = chart.margin,
	                    titleOffset = chart.titleOffset;

	                chart.resetMargins();

	                // Adjust for title and subtitle
	                if (titleOffset && !defined(margin[0])) {
	                    chart.plotTop = Math.max(chart.plotTop, titleOffset + chart.options.title.margin + spacing[0]);
	                }

	                // Adjust for legend
	                if (chart.legend.display) {
	                    chart.legend.adjustMargins(margin, spacing);
	                }

	                // adjust for scroller
	                if (chart.extraMargin) {
	                    chart[chart.extraMargin.type] = (chart[chart.extraMargin.type] || 0) + chart.extraMargin.value;
	                }
	                if (chart.extraTopMargin) {
	                    chart.plotTop += chart.extraTopMargin;
	                }
	                if (!skipAxes) {
	                    this.getAxisMargins();
	                }
	            },

	            getAxisMargins: function() {

	                var chart = this,
	                    axisOffset = chart.axisOffset = [0, 0, 0, 0], // top, right, bottom, left
	                    margin = chart.margin;

	                // pre-render axes to get labels offset width
	                if (chart.hasCartesianSeries) {
	                    each(chart.axes, function(axis) {
	                        if (axis.visible) {
	                            axis.getOffset();
	                        }
	                    });
	                }

	                // Add the axis offsets
	                each(marginNames, function(m, side) {
	                    if (!defined(margin[side])) {
	                        chart[m] += axisOffset[side];
	                    }
	                });

	                chart.setChartSize();

	            },

	            /**
	             * Resize the chart to its container if size is not explicitly set
	             */
	            reflow: function(e) {
	                var chart = this,
	                    optionsChart = chart.options.chart,
	                    renderTo = chart.renderTo,
	                    hasUserWidth = defined(optionsChart.width),
	                    width = optionsChart.width || getStyle(renderTo, 'width'),
	                    height = optionsChart.height || getStyle(renderTo, 'height'),
	                    target = e ? e.target : win;

	                // Width and height checks for display:none. Target is doc in IE8 and Opera,
	                // win in Firefox, Chrome and IE9.
	                if (!hasUserWidth && !chart.isPrinting && width && height && (target === win || target === doc)) { // #1093
	                    if (width !== chart.containerWidth || height !== chart.containerHeight) {
	                        clearTimeout(chart.reflowTimeout);
	                        // When called from window.resize, e is set, else it's called directly (#2224)
	                        chart.reflowTimeout = syncTimeout(function() {
	                            if (chart.container) { // It may have been destroyed in the meantime (#1257)
	                                chart.setSize(undefined, undefined, false);
	                            }
	                        }, e ? 100 : 0);
	                    }
	                    chart.containerWidth = width;
	                    chart.containerHeight = height;
	                }
	            },

	            /**
	             * Add the event handlers necessary for auto resizing
	             */
	            initReflow: function() {
	                var chart = this,
	                    unbind;

	                unbind = addEvent(win, 'resize', function(e) {
	                    chart.reflow(e);
	                });
	                addEvent(chart, 'destroy', unbind);

	                // The following will add listeners to re-fit the chart before and after
	                // printing (#2284). However it only works in WebKit. Should have worked
	                // in Firefox, but not supported in IE.
	                /*
	                if (win.matchMedia) {
	                	win.matchMedia('print').addListener(function reflow() {
	                		chart.reflow();
	                	});
	                }
	                */
	            },

	            /**
	             * Resize the chart to a given width and height
	             * @param {Number} width
	             * @param {Number} height
	             * @param {Object|Boolean} animation
	             */
	            setSize: function(width, height, animation) {
	                var chart = this,
	                    renderer = chart.renderer,
	                    globalAnimation;

	                // Handle the isResizing counter
	                chart.isResizing += 1;

	                // set the animation for the current process
	                H.setAnimation(animation, chart);

	                chart.oldChartHeight = chart.chartHeight;
	                chart.oldChartWidth = chart.chartWidth;
	                if (width !== undefined) {
	                    chart.options.chart.width = width;
	                }
	                if (height !== undefined) {
	                    chart.options.chart.height = height;
	                }
	                chart.getChartSize();

	                // Resize the container with the global animation applied if enabled (#2503)

	                globalAnimation = renderer.globalAnimation;
	                (globalAnimation ? animate : css)(chart.container, {
	                    width: chart.chartWidth + 'px',
	                    height: chart.chartHeight + 'px'
	                }, globalAnimation);


	                chart.setChartSize(true);
	                renderer.setSize(chart.chartWidth, chart.chartHeight, animation);

	                // handle axes
	                each(chart.axes, function(axis) {
	                    axis.isDirty = true;
	                    axis.setScale();
	                });

	                chart.isDirtyLegend = true; // force legend redraw
	                chart.isDirtyBox = true; // force redraw of plot and chart border

	                chart.layOutTitles(); // #2857
	                chart.getMargins();

	                chart.redraw(animation);


	                chart.oldChartHeight = null;
	                fireEvent(chart, 'resize');

	                // Fire endResize and set isResizing back. If animation is disabled, fire without delay
	                syncTimeout(function() {
	                    if (chart) {
	                        fireEvent(chart, 'endResize', null, function() {
	                            chart.isResizing -= 1;
	                        });
	                    }
	                }, animObject(globalAnimation).duration);
	            },

	            /**
	             * Set the public chart properties. This is done before and after the pre-render
	             * to determine margin sizes
	             */
	            setChartSize: function(skipAxes) {
	                var chart = this,
	                    inverted = chart.inverted,
	                    renderer = chart.renderer,
	                    chartWidth = chart.chartWidth,
	                    chartHeight = chart.chartHeight,
	                    optionsChart = chart.options.chart,
	                    spacing = chart.spacing,
	                    clipOffset = chart.clipOffset,
	                    clipX,
	                    clipY,
	                    plotLeft,
	                    plotTop,
	                    plotWidth,
	                    plotHeight,
	                    plotBorderWidth;

	                chart.plotLeft = plotLeft = Math.round(chart.plotLeft);
	                chart.plotTop = plotTop = Math.round(chart.plotTop);
	                chart.plotWidth = plotWidth = Math.max(0, Math.round(chartWidth - plotLeft - chart.marginRight));
	                chart.plotHeight = plotHeight = Math.max(0, Math.round(chartHeight - plotTop - chart.marginBottom));

	                chart.plotSizeX = inverted ? plotHeight : plotWidth;
	                chart.plotSizeY = inverted ? plotWidth : plotHeight;

	                chart.plotBorderWidth = optionsChart.plotBorderWidth || 0;

	                // Set boxes used for alignment
	                chart.spacingBox = renderer.spacingBox = {
	                    x: spacing[3],
	                    y: spacing[0],
	                    width: chartWidth - spacing[3] - spacing[1],
	                    height: chartHeight - spacing[0] - spacing[2]
	                };
	                chart.plotBox = renderer.plotBox = {
	                    x: plotLeft,
	                    y: plotTop,
	                    width: plotWidth,
	                    height: plotHeight
	                };

	                plotBorderWidth = 2 * Math.floor(chart.plotBorderWidth / 2);
	                clipX = Math.ceil(Math.max(plotBorderWidth, clipOffset[3]) / 2);
	                clipY = Math.ceil(Math.max(plotBorderWidth, clipOffset[0]) / 2);
	                chart.clipBox = {
	                    x: clipX,
	                    y: clipY,
	                    width: Math.floor(chart.plotSizeX - Math.max(plotBorderWidth, clipOffset[1]) / 2 - clipX),
	                    height: Math.max(0, Math.floor(chart.plotSizeY - Math.max(plotBorderWidth, clipOffset[2]) / 2 - clipY))
	                };

	                if (!skipAxes) {
	                    each(chart.axes, function(axis) {
	                        axis.setAxisSize();
	                        axis.setAxisTranslation();
	                    });
	                }
	            },

	            /**
	             * Initial margins before auto size margins are applied
	             */
	            resetMargins: function() {
	                var chart = this,
	                    chartOptions = chart.options.chart;

	                // Create margin and spacing array
	                each(['margin', 'spacing'], function splashArrays(target) {
	                    var value = chartOptions[target],
	                        values = isObject(value) ? value : [value, value, value, value];

	                    each(['Top', 'Right', 'Bottom', 'Left'], function(sideName, side) {
	                        chart[target][side] = pick(chartOptions[target + sideName], values[side]);
	                    });
	                });

	                // Set margin names like chart.plotTop, chart.plotLeft, chart.marginRight, chart.marginBottom.
	                each(marginNames, function(m, side) {
	                    chart[m] = pick(chart.margin[side], chart.spacing[side]);
	                });
	                chart.axisOffset = [0, 0, 0, 0]; // top, right, bottom, left
	                chart.clipOffset = [0, 0, 0, 0];
	            },

	            /**
	             * Draw the borders and backgrounds for chart and plot area
	             */
	            drawChartBox: function() {
	                var chart = this,
	                    optionsChart = chart.options.chart,
	                    renderer = chart.renderer,
	                    chartWidth = chart.chartWidth,
	                    chartHeight = chart.chartHeight,
	                    chartBackground = chart.chartBackground,
	                    plotBackground = chart.plotBackground,
	                    plotBorder = chart.plotBorder,
	                    chartBorderWidth,

	                    plotBGImage = chart.plotBGImage,
	                    chartBackgroundColor = optionsChart.backgroundColor,
	                    plotBackgroundColor = optionsChart.plotBackgroundColor,
	                    plotBackgroundImage = optionsChart.plotBackgroundImage,

	                    mgn,
	                    bgAttr,
	                    plotLeft = chart.plotLeft,
	                    plotTop = chart.plotTop,
	                    plotWidth = chart.plotWidth,
	                    plotHeight = chart.plotHeight,
	                    plotBox = chart.plotBox,
	                    clipRect = chart.clipRect,
	                    clipBox = chart.clipBox,
	                    verb = 'animate';

	                // Chart area
	                if (!chartBackground) {
	                    chart.chartBackground = chartBackground = renderer.rect()
	                        .addClass('highcharts-background')
	                        .add();
	                    verb = 'attr';
	                }


	                // Presentational
	                chartBorderWidth = optionsChart.borderWidth || 0;
	                mgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);

	                bgAttr = {
	                    fill: chartBackgroundColor || 'none'
	                };

	                if (chartBorderWidth || chartBackground['stroke-width']) { // #980
	                    bgAttr.stroke = optionsChart.borderColor;
	                    bgAttr['stroke-width'] = chartBorderWidth;
	                }
	                chartBackground
	                    .attr(bgAttr)
	                    .shadow(optionsChart.shadow);

	                chartBackground[verb]({
	                    x: mgn / 2,
	                    y: mgn / 2,
	                    width: chartWidth - mgn - chartBorderWidth % 2,
	                    height: chartHeight - mgn - chartBorderWidth % 2,
	                    r: optionsChart.borderRadius
	                });

	                // Plot background
	                verb = 'animate';
	                if (!plotBackground) {
	                    verb = 'attr';
	                    chart.plotBackground = plotBackground = renderer.rect()
	                        .addClass('highcharts-plot-background')
	                        .add();
	                }
	                plotBackground[verb](plotBox);


	                // Presentational attributes for the background
	                plotBackground
	                    .attr({
	                        fill: plotBackgroundColor || 'none'
	                    })
	                    .shadow(optionsChart.plotShadow);

	                // Create the background image
	                if (plotBackgroundImage) {
	                    if (!plotBGImage) {
	                        chart.plotBGImage = renderer.image(plotBackgroundImage, plotLeft, plotTop, plotWidth, plotHeight)
	                            .add();
	                    } else {
	                        plotBGImage.animate(plotBox);
	                    }
	                }


	                // Plot clip
	                if (!clipRect) {
	                    chart.clipRect = renderer.clipRect(clipBox);
	                } else {
	                    clipRect.animate({
	                        width: clipBox.width,
	                        height: clipBox.height
	                    });
	                }

	                // Plot area border
	                verb = 'animate';
	                if (!plotBorder) {
	                    verb = 'attr';
	                    chart.plotBorder = plotBorder = renderer.rect()
	                        .addClass('highcharts-plot-border')
	                        .attr({
	                            zIndex: 1 // Above the grid
	                        })
	                        .add();
	                }


	                // Presentational
	                plotBorder.attr({
	                    stroke: optionsChart.plotBorderColor,
	                    'stroke-width': optionsChart.plotBorderWidth || 0,
	                    fill: 'none'
	                });


	                plotBorder[verb](plotBorder.crisp({
	                    x: plotLeft,
	                    y: plotTop,
	                    width: plotWidth,
	                    height: plotHeight
	                }, -plotBorder.strokeWidth())); //#3282 plotBorder should be negative;

	                // reset
	                chart.isDirtyBox = false;
	            },

	            /**
	             * Detect whether a certain chart property is needed based on inspecting its options
	             * and series. This mainly applies to the chart.inverted property, and in extensions to
	             * the chart.angular and chart.polar properties.
	             */
	            propFromSeries: function() {
	                var chart = this,
	                    optionsChart = chart.options.chart,
	                    klass,
	                    seriesOptions = chart.options.series,
	                    i,
	                    value;


	                each(['inverted', 'angular', 'polar'], function(key) {

	                    // The default series type's class
	                    klass = seriesTypes[optionsChart.type || optionsChart.defaultSeriesType];

	                    // Get the value from available chart-wide properties
	                    value =
	                        optionsChart[key] || // It is set in the options
	                        (klass && klass.prototype[key]); // The default series class requires it

	                    // 4. Check if any the chart's series require it
	                    i = seriesOptions && seriesOptions.length;
	                    while (!value && i--) {
	                        klass = seriesTypes[seriesOptions[i].type];
	                        if (klass && klass.prototype[key]) {
	                            value = true;
	                        }
	                    }

	                    // Set the chart property
	                    chart[key] = value;
	                });

	            },

	            /**
	             * Link two or more series together. This is done initially from Chart.render,
	             * and after Chart.addSeries and Series.remove.
	             */
	            linkSeries: function() {
	                var chart = this,
	                    chartSeries = chart.series;

	                // Reset links
	                each(chartSeries, function(series) {
	                    series.linkedSeries.length = 0;
	                });

	                // Apply new links
	                each(chartSeries, function(series) {
	                    var linkedTo = series.options.linkedTo;
	                    if (isString(linkedTo)) {
	                        if (linkedTo === ':previous') {
	                            linkedTo = chart.series[series.index - 1];
	                        } else {
	                            linkedTo = chart.get(linkedTo);
	                        }
	                        if (linkedTo && linkedTo.linkedParent !== series) { // #3341 avoid mutual linking
	                            linkedTo.linkedSeries.push(series);
	                            series.linkedParent = linkedTo;
	                            series.visible = pick(series.options.visible, linkedTo.options.visible, series.visible); // #3879
	                        }
	                    }
	                });
	            },

	            /**
	             * Render series for the chart
	             */
	            renderSeries: function() {
	                each(this.series, function(serie) {
	                    serie.translate();
	                    serie.render();
	                });
	            },

	            /**
	             * Render labels for the chart
	             */
	            renderLabels: function() {
	                var chart = this,
	                    labels = chart.options.labels;
	                if (labels.items) {
	                    each(labels.items, function(label) {
	                        var style = extend(labels.style, label.style),
	                            x = pInt(style.left) + chart.plotLeft,
	                            y = pInt(style.top) + chart.plotTop + 12;

	                        // delete to prevent rewriting in IE
	                        delete style.left;
	                        delete style.top;

	                        chart.renderer.text(
	                                label.html,
	                                x,
	                                y
	                            )
	                            .attr({
	                                zIndex: 2
	                            })
	                            .css(style)
	                            .add();

	                    });
	                }
	            },

	            /**
	             * Render all graphics for the chart
	             */
	            render: function() {
	                var chart = this,
	                    axes = chart.axes,
	                    renderer = chart.renderer,
	                    options = chart.options,
	                    tempWidth,
	                    tempHeight,
	                    redoHorizontal,
	                    redoVertical;

	                // Title
	                chart.setTitle();


	                // Legend
	                chart.legend = new Legend(chart, options.legend);

	                // Get stacks
	                if (chart.getStacks) {
	                    chart.getStacks();
	                }

	                // Get chart margins
	                chart.getMargins(true);
	                chart.setChartSize();

	                // Record preliminary dimensions for later comparison
	                tempWidth = chart.plotWidth;
	                tempHeight = chart.plotHeight = chart.plotHeight - 21; // 21 is the most common correction for X axis labels

	                // Get margins by pre-rendering axes
	                each(axes, function(axis) {
	                    axis.setScale();
	                });
	                chart.getAxisMargins();

	                // If the plot area size has changed significantly, calculate tick positions again
	                redoHorizontal = tempWidth / chart.plotWidth > 1.1;
	                redoVertical = tempHeight / chart.plotHeight > 1.05; // Height is more sensitive

	                if (redoHorizontal || redoVertical) {

	                    each(axes, function(axis) {
	                        if ((axis.horiz && redoHorizontal) || (!axis.horiz && redoVertical)) {
	                            axis.setTickInterval(true); // update to reflect the new margins
	                        }
	                    });
	                    chart.getMargins(); // second pass to check for new labels
	                }

	                // Draw the borders and backgrounds
	                chart.drawChartBox();


	                // Axes
	                if (chart.hasCartesianSeries) {
	                    each(axes, function(axis) {
	                        if (axis.visible) {
	                            axis.render();
	                        }
	                    });
	                }

	                // The series
	                if (!chart.seriesGroup) {
	                    chart.seriesGroup = renderer.g('series-group')
	                        .attr({
	                            zIndex: 3
	                        })
	                        .add();
	                }
	                chart.renderSeries();

	                // Labels
	                chart.renderLabels();

	                // Credits
	                chart.addCredits();

	                // Handle responsiveness
	                if (chart.setResponsive) {
	                    chart.setResponsive();
	                }

	                // Set flag
	                chart.hasRendered = true;

	            },

	            /**
	             * Show chart credits based on config options
	             */
	            addCredits: function(credits) {
	                var chart = this;

	                credits = merge(true, this.options.credits, credits);
	                if (credits.enabled && !this.credits) {
	                    this.credits = this.renderer.text(
	                            credits.text + (this.mapCredits || ''),
	                            0,
	                            0
	                        )
	                        .addClass('highcharts-credits')
	                        .on('click', function() {
	                            if (credits.href) {
	                                win.location.href = credits.href;
	                            }
	                        })
	                        .attr({
	                            align: credits.position.align,
	                            zIndex: 8
	                        })

	                    .css(credits.style)

	                    .add()
	                        .align(credits.position);

	                    // Dynamically update
	                    this.credits.update = function(options) {
	                        chart.credits = chart.credits.destroy();
	                        chart.addCredits(options);
	                    };
	                }
	            },

	            /**
	             * Clean up memory usage
	             */
	            destroy: function() {
	                var chart = this,
	                    axes = chart.axes,
	                    series = chart.series,
	                    container = chart.container,
	                    i,
	                    parentNode = container && container.parentNode;

	                // fire the chart.destoy event
	                fireEvent(chart, 'destroy');

	                // Delete the chart from charts lookup array
	                charts[chart.index] = undefined;
	                H.chartCount--;
	                chart.renderTo.removeAttribute('data-highcharts-chart');

	                // remove events
	                removeEvent(chart);

	                // ==== Destroy collections:
	                // Destroy axes
	                i = axes.length;
	                while (i--) {
	                    axes[i] = axes[i].destroy();
	                }

	                // Destroy scroller & scroller series before destroying base series
	                if (this.scroller && this.scroller.destroy) {
	                    this.scroller.destroy();
	                }

	                // Destroy each series
	                i = series.length;
	                while (i--) {
	                    series[i] = series[i].destroy();
	                }

	                // ==== Destroy chart properties:
	                each([
	                    'title', 'subtitle', 'chartBackground', 'plotBackground',
	                    'plotBGImage', 'plotBorder', 'seriesGroup', 'clipRect', 'credits',
	                    'pointer', 'rangeSelector', 'legend', 'resetZoomButton', 'tooltip',
	                    'renderer'
	                ], function(name) {
	                    var prop = chart[name];

	                    if (prop && prop.destroy) {
	                        chart[name] = prop.destroy();
	                    }
	                });

	                // remove container and all SVG
	                if (container) { // can break in IE when destroyed before finished loading
	                    container.innerHTML = '';
	                    removeEvent(container);
	                    if (parentNode) {
	                        discardElement(container);
	                    }

	                }

	                // clean it all up
	                for (i in chart) {
	                    delete chart[i];
	                }

	            },


	            /**
	             * VML namespaces can't be added until after complete. Listening
	             * for Perini's doScroll hack is not enough.
	             */
	            isReadyToRender: function() {
	                var chart = this;

	                // Note: win == win.top is required
	                if ((!svg && (win == win.top && doc.readyState !== 'complete'))) { // eslint-disable-line eqeqeq
	                    doc.attachEvent('onreadystatechange', function() {
	                        doc.detachEvent('onreadystatechange', chart.firstRender);
	                        if (doc.readyState === 'complete') {
	                            chart.firstRender();
	                        }
	                    });
	                    return false;
	                }
	                return true;
	            },

	            /**
	             * Prepare for first rendering after all data are loaded
	             */
	            firstRender: function() {
	                var chart = this,
	                    options = chart.options;

	                // Check whether the chart is ready to render
	                if (!chart.isReadyToRender()) {
	                    return;
	                }

	                // Create the container
	                chart.getContainer();

	                // Run an early event after the container and renderer are established
	                fireEvent(chart, 'init');


	                chart.resetMargins();
	                chart.setChartSize();

	                // Set the common chart properties (mainly invert) from the given series
	                chart.propFromSeries();

	                // get axes
	                chart.getAxes();

	                // Initialize the series
	                each(options.series || [], function(serieOptions) {
	                    chart.initSeries(serieOptions);
	                });

	                chart.linkSeries();

	                // Run an event after axes and series are initialized, but before render. At this stage,
	                // the series data is indexed and cached in the xData and yData arrays, so we can access
	                // those before rendering. Used in Highstock.
	                fireEvent(chart, 'beforeRender');

	                // depends on inverted and on margins being set
	                if (Pointer) {
	                    chart.pointer = new Pointer(chart, options);
	                }

	                chart.render();

	                // Fire the load event if there are no external images
	                if (!chart.renderer.imgCount && chart.onload) {
	                    chart.onload();
	                }

	                // If the chart was rendered outside the top container, put it back in (#3679)
	                chart.cloneRenderTo(true);

	            },

	            /** 
	             * On chart load
	             */
	            onload: function() {

	                // Run callbacks
	                each([this.callback].concat(this.callbacks), function(fn) {
	                    if (fn && this.index !== undefined) { // Chart destroyed in its own callback (#3600)
	                        fn.apply(this, [this]);
	                    }
	                }, this);

	                fireEvent(this, 'load');
	                fireEvent(this, 'render');


	                // Set up auto resize, check for not destroyed (#6068)
	                if (defined(this.index) && this.options.chart.reflow !== false) {
	                    this.initReflow();
	                }

	                // Don't run again
	                this.onload = null;
	            }

	        }; // end Chart

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var Point,

	            each = H.each,
	            extend = H.extend,
	            erase = H.erase,
	            fireEvent = H.fireEvent,
	            format = H.format,
	            isArray = H.isArray,
	            isNumber = H.isNumber,
	            pick = H.pick,
	            removeEvent = H.removeEvent;

	        /**
	         * The Point object. The point objects are generated from the series.data 
	         * configuration objects or raw numbers. They can be accessed from the
	         * Series.points array.
	         * @constructor Point
	         */
	        Point = H.Point = function() {};
	        Point.prototype = {

	            /**
	             * Initialize the point. Called internally based on the series.data option.
	             * @function #init
	             * @memberOf Point
	             * @param {Object} series The series object containing this point.
	             * @param {Object} options The data in either number, array or object
	             *        format.
	             * @param {Number} x Optionally, the X value of the.
	             * @returns {Object} The Point instance.
	             */
	            init: function(series, options, x) {

	                var point = this,
	                    colors,
	                    colorCount = series.chart.options.chart.colorCount,
	                    colorIndex;

	                point.series = series;

	                point.color = series.color; // #3445

	                point.applyOptions(options, x);

	                if (series.options.colorByPoint) {

	                    colors = series.options.colors || series.chart.options.colors;
	                    point.color = point.color || colors[series.colorCounter];
	                    colorCount = colors.length;

	                    colorIndex = series.colorCounter;
	                    series.colorCounter++;
	                    // loop back to zero
	                    if (series.colorCounter === colorCount) {
	                        series.colorCounter = 0;
	                    }
	                } else {
	                    colorIndex = series.colorIndex;
	                }
	                point.colorIndex = pick(point.colorIndex, colorIndex);

	                series.chart.pointCount++;
	                return point;
	            },
	            /**
	             * Apply the options containing the x and y data and possible some extra
	             * properties. Called on point init or from point.update.
	             *
	             * @function #applyOptions
	             * @memberOf Point
	             * @param {Object} options The point options as defined in series.data.
	             * @param {Number} x Optionally, the X value.
	             * @returns {Object} The Point instance.
	             */
	            applyOptions: function(options, x) {
	                var point = this,
	                    series = point.series,
	                    pointValKey = series.options.pointValKey || series.pointValKey;

	                options = Point.prototype.optionsToObject.call(this, options);

	                // copy options directly to point
	                extend(point, options);
	                point.options = point.options ? extend(point.options, options) : options;

	                // Since options are copied into the Point instance, some accidental options must be shielded (#5681)
	                if (options.group) {
	                    delete point.group;
	                }

	                // For higher dimension series types. For instance, for ranges, point.y is mapped to point.low.
	                if (pointValKey) {
	                    point.y = point[pointValKey];
	                }
	                point.isNull = pick(
	                    point.isValid && !point.isValid(),
	                    point.x === null || !isNumber(point.y, true)
	                ); // #3571, check for NaN

	                // The point is initially selected by options (#5777)
	                if (point.selected) {
	                    point.state = 'select';
	                }

	                // If no x is set by now, get auto incremented value. All points must have an
	                // x value, however the y value can be null to create a gap in the series
	                if ('name' in point && x === undefined && series.xAxis && series.xAxis.hasNames) {
	                    point.x = series.xAxis.nameToX(point);
	                }
	                if (point.x === undefined && series) {
	                    if (x === undefined) {
	                        point.x = series.autoIncrement(point);
	                    } else {
	                        point.x = x;
	                    }
	                }

	                return point;
	            },

	            /**
	             * Transform number or array configs into objects
	             */
	            optionsToObject: function(options) {
	                var ret = {},
	                    series = this.series,
	                    keys = series.options.keys,
	                    pointArrayMap = keys || series.pointArrayMap || ['y'],
	                    valueCount = pointArrayMap.length,
	                    firstItemType,
	                    i = 0,
	                    j = 0;

	                if (isNumber(options) || options === null) {
	                    ret[pointArrayMap[0]] = options;

	                } else if (isArray(options)) {
	                    // with leading x value
	                    if (!keys && options.length > valueCount) {
	                        firstItemType = typeof options[0];
	                        if (firstItemType === 'string') {
	                            ret.name = options[0];
	                        } else if (firstItemType === 'number') {
	                            ret.x = options[0];
	                        }
	                        i++;
	                    }
	                    while (j < valueCount) {
	                        if (!keys || options[i] !== undefined) { // Skip undefined positions for keys
	                            ret[pointArrayMap[j]] = options[i];
	                        }
	                        i++;
	                        j++;
	                    }
	                } else if (typeof options === 'object') {
	                    ret = options;

	                    // This is the fastest way to detect if there are individual point dataLabels that need
	                    // to be considered in drawDataLabels. These can only occur in object configs.
	                    if (options.dataLabels) {
	                        series._hasPointLabels = true;
	                    }

	                    // Same approach as above for markers
	                    if (options.marker) {
	                        series._hasPointMarkers = true;
	                    }
	                }
	                return ret;
	            },

	            /**
	             * Get the CSS class names for individual points
	             * @returns {String} The class name
	             */
	            getClassName: function() {
	                return 'highcharts-point' +
	                    (this.selected ? ' highcharts-point-select' : '') +
	                    (this.negative ? ' highcharts-negative' : '') +
	                    (this.isNull ? ' highcharts-null-point' : '') +
	                    (this.colorIndex !== undefined ? ' highcharts-color-' +
	                        this.colorIndex : '') +
	                    (this.options.className ? ' ' + this.options.className : '') +
	                    (this.zone && this.zone.className ? ' ' +
	                        this.zone.className.replace('highcharts-negative', '') : '');
	            },

	            /**
	             * Return the zone that the point belongs to
	             */
	            getZone: function() {
	                var series = this.series,
	                    zones = series.zones,
	                    zoneAxis = series.zoneAxis || 'y',
	                    i = 0,
	                    zone;

	                zone = zones[i];
	                while (this[zoneAxis] >= zone.value) {
	                    zone = zones[++i];
	                }

	                if (zone && zone.color && !this.options.color) {
	                    this.color = zone.color;
	                }

	                return zone;
	            },

	            /**
	             * Destroy a point to clear memory. Its reference still stays in series.data.
	             */
	            destroy: function() {
	                var point = this,
	                    series = point.series,
	                    chart = series.chart,
	                    hoverPoints = chart.hoverPoints,
	                    prop;

	                chart.pointCount--;

	                if (hoverPoints) {
	                    point.setState();
	                    erase(hoverPoints, point);
	                    if (!hoverPoints.length) {
	                        chart.hoverPoints = null;
	                    }

	                }
	                if (point === chart.hoverPoint) {
	                    point.onMouseOut();
	                }

	                // remove all events
	                if (point.graphic || point.dataLabel) { // removeEvent and destroyElements are performance expensive
	                    removeEvent(point);
	                    point.destroyElements();
	                }

	                if (point.legendItem) { // pies have legend items
	                    chart.legend.destroyItem(point);
	                }

	                for (prop in point) {
	                    point[prop] = null;
	                }


	            },

	            /**
	             * Destroy SVG elements associated with the point
	             */
	            destroyElements: function() {
	                var point = this,
	                    props = ['graphic', 'dataLabel', 'dataLabelUpper', 'connector', 'shadowGroup'],
	                    prop,
	                    i = 6;
	                while (i--) {
	                    prop = props[i];
	                    if (point[prop]) {
	                        point[prop] = point[prop].destroy();
	                    }
	                }
	            },

	            /**
	             * Return the configuration hash needed for the data label and tooltip formatters
	             */
	            getLabelConfig: function() {
	                return {
	                    x: this.category,
	                    y: this.y,
	                    color: this.color,
	                    colorIndex: this.colorIndex,
	                    key: this.name || this.category,
	                    series: this.series,
	                    point: this,
	                    percentage: this.percentage,
	                    total: this.total || this.stackTotal
	                };
	            },

	            /**
	             * Extendable method for formatting each point's tooltip line
	             *
	             * @return {String} A string to be concatenated in to the common tooltip text
	             */
	            tooltipFormatter: function(pointFormat) {

	                // Insert options for valueDecimals, valuePrefix, and valueSuffix
	                var series = this.series,
	                    seriesTooltipOptions = series.tooltipOptions,
	                    valueDecimals = pick(seriesTooltipOptions.valueDecimals, ''),
	                    valuePrefix = seriesTooltipOptions.valuePrefix || '',
	                    valueSuffix = seriesTooltipOptions.valueSuffix || '';

	                // Loop over the point array map and replace unformatted values with sprintf formatting markup
	                each(series.pointArrayMap || ['y'], function(key) {
	                    key = '{point.' + key; // without the closing bracket
	                    if (valuePrefix || valueSuffix) {
	                        pointFormat = pointFormat.replace(key + '}', valuePrefix + key + '}' + valueSuffix);
	                    }
	                    pointFormat = pointFormat.replace(key + '}', key + ':,.' + valueDecimals + 'f}');
	                });

	                return format(pointFormat, {
	                    point: this,
	                    series: this.series
	                });
	            },

	            /**
	             * Fire an event on the Point object.
	             * @param {String} eventType
	             * @param {Object} eventArgs Additional event arguments
	             * @param {Function} defaultFunction Default event handler
	             */
	            firePointEvent: function(eventType, eventArgs, defaultFunction) {
	                var point = this,
	                    series = this.series,
	                    seriesOptions = series.options;

	                // load event handlers on demand to save time on mouseover/out
	                if (seriesOptions.point.events[eventType] || (point.options && point.options.events && point.options.events[eventType])) {
	                    this.importEvents();
	                }

	                // add default handler if in selection mode
	                if (eventType === 'click' && seriesOptions.allowPointSelect) {
	                    defaultFunction = function(event) {
	                        // Control key is for Windows, meta (= Cmd key) for Mac, Shift for Opera
	                        if (point.select) { // Could be destroyed by prior event handlers (#2911)
	                            point.select(null, event.ctrlKey || event.metaKey || event.shiftKey);
	                        }
	                    };
	                }

	                fireEvent(this, eventType, eventArgs, defaultFunction);
	            },
	            visible: true
	        };

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            animObject = H.animObject,
	            arrayMax = H.arrayMax,
	            arrayMin = H.arrayMin,
	            correctFloat = H.correctFloat,
	            Date = H.Date,
	            defaultOptions = H.defaultOptions,
	            defaultPlotOptions = H.defaultPlotOptions,
	            defined = H.defined,
	            each = H.each,
	            erase = H.erase,
	            extend = H.extend,
	            fireEvent = H.fireEvent,
	            grep = H.grep,
	            isArray = H.isArray,
	            isNumber = H.isNumber,
	            isString = H.isString,
	            LegendSymbolMixin = H.LegendSymbolMixin, // @todo add as a requirement
	            merge = H.merge,
	            pick = H.pick,
	            Point = H.Point, // @todo  add as a requirement
	            removeEvent = H.removeEvent,
	            splat = H.splat,
	            SVGElement = H.SVGElement,
	            syncTimeout = H.syncTimeout,
	            win = H.win;

	        /**
	         * The base function which all other series types inherit from. The data in the series is stored
	         * in various arrays.
	         *
	         * - First, series.options.data contains all the original config options for
	         * each point whether added by options or methods like series.addPoint.
	         * - Next, series.data contains those values converted to points, but in case the series data length
	         * exceeds the cropThreshold, or if the data is grouped, series.data doesn't contain all the points. It
	         * only contains the points that have been created on demand.
	         * - Then there's series.points that contains all currently visible point objects. In case of cropping,
	         * the cropped-away points are not part of this array. The series.points array starts at series.cropStart
	         * compared to series.data and series.options.data. If however the series data is grouped, these can't
	         * be correlated one to one.
	         * - series.xData and series.processedXData contain clean x values, equivalent to series.data and series.points.
	         * - series.yData and series.processedYData contain clean y values, equivalent to series.data and series.points.
	         *
	         * @constructor Series
	         * @param {Object} chart - The chart instance.
	         * @param {Object} options - The series options.
	         */
	        H.Series = H.seriesType('line', null, { // base series options

	            //cursor: 'default',
	            //dashStyle: null,
	            //linecap: 'round',
	            lineWidth: 2,
	            //shadow: false,

	            allowPointSelect: false,
	            showCheckbox: false,
	            animation: {
	                duration: 1000
	            },
	            //clip: true,
	            //connectNulls: false,
	            //enableMouseTracking: true,
	            events: {},
	            //legendIndex: 0,
	            // stacking: null,
	            marker: {

	                lineWidth: 0,
	                lineColor: '#ffffff',
	                //fillColor: null,

	                //enabled: true,
	                //symbol: null,
	                radius: 4,
	                states: { // states for a single point
	                    hover: {
	                        animation: {
	                            duration: 50
	                        },
	                        enabled: true,
	                        radiusPlus: 2,

	                        lineWidthPlus: 1

	                    },

	                    select: {
	                        fillColor: '#cccccc',
	                        lineColor: '#000000',
	                        lineWidth: 2
	                    }

	                }
	            },
	            point: {
	                events: {}
	            },
	            dataLabels: {
	                align: 'center',
	                // defer: true,
	                // enabled: false,
	                formatter: function() {
	                    return this.y === null ? '' : H.numberFormat(this.y, -1);
	                },

	                style: {
	                    fontSize: '11px',
	                    fontWeight: 'bold',
	                    color: 'contrast',
	                    textOutline: '1px contrast'
	                },
	                // backgroundColor: undefined,
	                // borderColor: undefined,
	                // borderWidth: undefined,
	                // shadow: false

	                verticalAlign: 'bottom', // above singular point
	                x: 0,
	                y: 0,
	                // borderRadius: undefined,
	                padding: 5
	            },
	            cropThreshold: 300, // draw points outside the plot area when the number of points is less than this
	            pointRange: 0,
	            //pointStart: 0,
	            //pointInterval: 1,
	            //showInLegend: null, // auto: true for standalone series, false for linked series
	            softThreshold: true,
	            states: { // states for the entire series
	                hover: {
	                    //enabled: false,
	                    lineWidthPlus: 1,
	                    marker: {
	                        // lineWidth: base + 1,
	                        // radius: base + 1
	                    },
	                    halo: {
	                        size: 10,

	                        opacity: 0.25

	                    }
	                },
	                select: {
	                    marker: {}
	                }
	            },
	            stickyTracking: true,
	            //tooltip: {
	            //pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b>'
	            //valueDecimals: null,
	            //xDateFormat: '%A, %b %e, %Y',
	            //valuePrefix: '',
	            //ySuffix: ''
	            //}
	            turboThreshold: 1000
	                // zIndex: null


	        }, /** @lends Series.prototype */ {
	            isCartesian: true,
	            pointClass: Point,
	            sorted: true, // requires the data to be sorted
	            requireSorting: true,
	            directTouch: false,
	            axisTypes: ['xAxis', 'yAxis'],
	            colorCounter: 0,
	            parallelArrays: ['x', 'y'], // each point's x and y values are stored in this.xData and this.yData
	            coll: 'series',
	            init: function(chart, options) {
	                var series = this,
	                    eventType,
	                    events,
	                    chartSeries = chart.series,
	                    lastSeries;

	                series.chart = chart;
	                series.options = options = series.setOptions(options); // merge with plotOptions
	                series.linkedSeries = [];

	                // bind the axes
	                series.bindAxes();

	                // set some variables
	                extend(series, {
	                    name: options.name,
	                    state: '',
	                    visible: options.visible !== false, // true by default
	                    selected: options.selected === true // false by default
	                });

	                // register event listeners
	                events = options.events;
	                for (eventType in events) {
	                    addEvent(series, eventType, events[eventType]);
	                }
	                if (
	                    (events && events.click) ||
	                    (options.point && options.point.events && options.point.events.click) ||
	                    options.allowPointSelect
	                ) {
	                    chart.runTrackerClick = true;
	                }

	                series.getColor();
	                series.getSymbol();

	                // Set the data
	                each(series.parallelArrays, function(key) {
	                    series[key + 'Data'] = [];
	                });
	                series.setData(options.data, false);

	                // Mark cartesian
	                if (series.isCartesian) {
	                    chart.hasCartesianSeries = true;
	                }

	                // Get the index and register the series in the chart. The index is one
	                // more than the current latest series index (#5960).
	                if (chartSeries.length) {
	                    lastSeries = chartSeries[chartSeries.length - 1];
	                }
	                series._i = pick(lastSeries && lastSeries._i, -1) + 1;

	                // Insert the series and re-order all series above the insertion point.
	                chart.orderSeries(this.insert(chartSeries));
	            },

	            /**
	             * Insert the series in a collection with other series, either the chart
	             * series or yAxis series, in the correct order according to the index 
	             * option.
	             * @param  {Array} collection A collection of series.
	             * @returns {Number} The index of the series in the collection.
	             */
	            insert: function(collection) {
	                var indexOption = this.options.index,
	                    i;

	                // Insert by index option
	                if (isNumber(indexOption)) {
	                    i = collection.length;
	                    while (i--) {
	                        // Loop down until the interted element has higher index
	                        if (indexOption >=
	                            pick(collection[i].options.index, collection[i]._i)) {
	                            collection.splice(i + 1, 0, this);
	                            break;
	                        }
	                    }
	                    if (i === -1) {
	                        collection.unshift(this);
	                    }
	                    i = i + 1;

	                    // Or just push it to the end
	                } else {
	                    collection.push(this);
	                }
	                return pick(i, collection.length - 1);
	            },

	            /**
	             * Set the xAxis and yAxis properties of cartesian series, and register the
	             * series in the `axis.series` array.
	             *
	             * @function #bindAxes
	             * @memberOf Series
	             * @returns {void}
	             */
	            bindAxes: function() {
	                var series = this,
	                    seriesOptions = series.options,
	                    chart = series.chart,
	                    axisOptions;

	                each(series.axisTypes || [], function(AXIS) { // repeat for xAxis and yAxis

	                    each(chart[AXIS], function(axis) { // loop through the chart's axis objects
	                        axisOptions = axis.options;

	                        // apply if the series xAxis or yAxis option mathches the number of the
	                        // axis, or if undefined, use the first axis
	                        if ((seriesOptions[AXIS] === axisOptions.index) ||
	                            (seriesOptions[AXIS] !== undefined && seriesOptions[AXIS] === axisOptions.id) ||
	                            (seriesOptions[AXIS] === undefined && axisOptions.index === 0)) {

	                            // register this series in the axis.series lookup
	                            series.insert(axis.series);

	                            // set this series.xAxis or series.yAxis reference
	                            series[AXIS] = axis;

	                            // mark dirty for redraw
	                            axis.isDirty = true;
	                        }
	                    });

	                    // The series needs an X and an Y axis
	                    if (!series[AXIS] && series.optionalAxis !== AXIS) {
	                        H.error(18, true);
	                    }

	                });
	            },

	            /**
	             * For simple series types like line and column, the data values are held in arrays like
	             * xData and yData for quick lookup to find extremes and more. For multidimensional series
	             * like bubble and map, this can be extended with arrays like zData and valueData by
	             * adding to the series.parallelArrays array.
	             */
	            updateParallelArrays: function(point, i) {
	                var series = point.series,
	                    args = arguments,
	                    fn = isNumber(i) ?
	                    // Insert the value in the given position
	                    function(key) {
	                        var val = key === 'y' && series.toYData ? series.toYData(point) : point[key];
	                        series[key + 'Data'][i] = val;
	                    } :
	                    // Apply the method specified in i with the following arguments as arguments
	                    function(key) {
	                        Array.prototype[i].apply(series[key + 'Data'], Array.prototype.slice.call(args, 2));
	                    };

	                each(series.parallelArrays, fn);
	            },

	            /**
	             * Return an auto incremented x value based on the pointStart and pointInterval options.
	             * This is only used if an x value is not given for the point that calls autoIncrement.
	             */
	            autoIncrement: function() {

	                var options = this.options,
	                    xIncrement = this.xIncrement,
	                    date,
	                    pointInterval,
	                    pointIntervalUnit = options.pointIntervalUnit;

	                xIncrement = pick(xIncrement, options.pointStart, 0);

	                this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);

	                // Added code for pointInterval strings
	                if (pointIntervalUnit) {
	                    date = new Date(xIncrement);

	                    if (pointIntervalUnit === 'day') {
	                        date = +date[Date.hcSetDate](date[Date.hcGetDate]() + pointInterval);
	                    } else if (pointIntervalUnit === 'month') {
	                        date = +date[Date.hcSetMonth](date[Date.hcGetMonth]() + pointInterval);
	                    } else if (pointIntervalUnit === 'year') {
	                        date = +date[Date.hcSetFullYear](date[Date.hcGetFullYear]() + pointInterval);
	                    }
	                    pointInterval = date - xIncrement;

	                }

	                this.xIncrement = xIncrement + pointInterval;
	                return xIncrement;
	            },

	            /**
	             * Set the series options by merging from the options tree
	             * @param {Object} itemOptions
	             */
	            setOptions: function(itemOptions) {
	                var chart = this.chart,
	                    chartOptions = chart.options,
	                    plotOptions = chartOptions.plotOptions,
	                    userOptions = chart.userOptions || {},
	                    userPlotOptions = userOptions.plotOptions || {},
	                    typeOptions = plotOptions[this.type],
	                    options,
	                    zones;

	                this.userOptions = itemOptions;

	                // General series options take precedence over type options because otherwise, default
	                // type options like column.animation would be overwritten by the general option.
	                // But issues have been raised here (#3881), and the solution may be to distinguish
	                // between default option and userOptions like in the tooltip below.
	                options = merge(
	                    typeOptions,
	                    plotOptions.series,
	                    itemOptions
	                );

	                // The tooltip options are merged between global and series specific options
	                this.tooltipOptions = merge(
	                    defaultOptions.tooltip,
	                    defaultOptions.plotOptions[this.type].tooltip,
	                    userOptions.tooltip,
	                    userPlotOptions.series && userPlotOptions.series.tooltip,
	                    userPlotOptions[this.type] && userPlotOptions[this.type].tooltip,
	                    itemOptions.tooltip
	                );

	                // Delete marker object if not allowed (#1125)
	                if (typeOptions.marker === null) {
	                    delete options.marker;
	                }

	                // Handle color zones
	                this.zoneAxis = options.zoneAxis;
	                zones = this.zones = (options.zones || []).slice();
	                if ((options.negativeColor || options.negativeFillColor) && !options.zones) {
	                    zones.push({
	                        value: options[this.zoneAxis + 'Threshold'] || options.threshold || 0,
	                        className: 'highcharts-negative',

	                        color: options.negativeColor,
	                        fillColor: options.negativeFillColor

	                    });
	                }
	                if (zones.length) { // Push one extra zone for the rest
	                    if (defined(zones[zones.length - 1].value)) {
	                        zones.push({

	                            color: this.color,
	                            fillColor: this.fillColor

	                        });
	                    }
	                }
	                return options;
	            },

	            getCyclic: function(prop, value, defaults) {
	                var i,
	                    chart = this.chart,
	                    userOptions = this.userOptions,
	                    indexName = prop + 'Index',
	                    counterName = prop + 'Counter',
	                    len = defaults ? defaults.length : pick(
	                        chart.options.chart[prop + 'Count'],
	                        chart[prop + 'Count']
	                    ),
	                    setting;

	                if (!value) {
	                    // Pick up either the colorIndex option, or the _colorIndex after Series.update()
	                    setting = pick(userOptions[indexName], userOptions['_' + indexName]);
	                    if (defined(setting)) { // after Series.update()
	                        i = setting;
	                    } else {
	                        // #6138
	                        if (!chart.series.length) {
	                            chart[counterName] = 0;
	                        }
	                        userOptions['_' + indexName] = i = chart[counterName] % len;
	                        chart[counterName] += 1;
	                    }
	                    if (defaults) {
	                        value = defaults[i];
	                    }
	                }
	                // Set the colorIndex
	                if (i !== undefined) {
	                    this[indexName] = i;
	                }
	                this[prop] = value;
	            },

	            /**
	             * Get the series' color
	             */

	            getColor: function() {
	                if (this.options.colorByPoint) {
	                    this.options.color = null; // #4359, selected slice got series.color even when colorByPoint was set.
	                } else {
	                    this.getCyclic('color', this.options.color || defaultPlotOptions[this.type].color, this.chart.options.colors);
	                }
	            },

	            /**
	             * Get the series' symbol
	             */
	            getSymbol: function() {
	                var seriesMarkerOption = this.options.marker;

	                this.getCyclic('symbol', seriesMarkerOption.symbol, this.chart.options.symbols);
	            },

	            drawLegendSymbol: LegendSymbolMixin.drawLineMarker,

	            /**
	             * Replace the series data with a new set of data
	             * @param {Object} data
	             * @param {Object} redraw
	             */
	            setData: function(data, redraw, animation, updatePoints) {
	                var series = this,
	                    oldData = series.points,
	                    oldDataLength = (oldData && oldData.length) || 0,
	                    dataLength,
	                    options = series.options,
	                    chart = series.chart,
	                    firstPoint = null,
	                    xAxis = series.xAxis,
	                    i,
	                    turboThreshold = options.turboThreshold,
	                    pt,
	                    xData = this.xData,
	                    yData = this.yData,
	                    pointArrayMap = series.pointArrayMap,
	                    valueCount = pointArrayMap && pointArrayMap.length;

	                data = data || [];
	                dataLength = data.length;
	                redraw = pick(redraw, true);

	                // If the point count is the same as is was, just run Point.update which is
	                // cheaper, allows animation, and keeps references to points.
	                if (updatePoints !== false && dataLength && oldDataLength === dataLength && !series.cropped && !series.hasGroupedData && series.visible) {
	                    each(data, function(point, i) {
	                        // .update doesn't exist on a linked, hidden series (#3709)
	                        if (oldData[i].update && point !== options.data[i]) {
	                            oldData[i].update(point, false, null, false);
	                        }
	                    });

	                } else {

	                    // Reset properties
	                    series.xIncrement = null;

	                    series.colorCounter = 0; // for series with colorByPoint (#1547)

	                    // Update parallel arrays
	                    each(this.parallelArrays, function(key) {
	                        series[key + 'Data'].length = 0;
	                    });

	                    // In turbo mode, only one- or twodimensional arrays of numbers are allowed. The
	                    // first value is tested, and we assume that all the rest are defined the same
	                    // way. Although the 'for' loops are similar, they are repeated inside each
	                    // if-else conditional for max performance.
	                    if (turboThreshold && dataLength > turboThreshold) {

	                        // find the first non-null point
	                        i = 0;
	                        while (firstPoint === null && i < dataLength) {
	                            firstPoint = data[i];
	                            i++;
	                        }


	                        if (isNumber(firstPoint)) { // assume all points are numbers
	                            for (i = 0; i < dataLength; i++) {
	                                xData[i] = this.autoIncrement();
	                                yData[i] = data[i];
	                            }
	                        } else if (isArray(firstPoint)) { // assume all points are arrays
	                            if (valueCount) { // [x, low, high] or [x, o, h, l, c]
	                                for (i = 0; i < dataLength; i++) {
	                                    pt = data[i];
	                                    xData[i] = pt[0];
	                                    yData[i] = pt.slice(1, valueCount + 1);
	                                }
	                            } else { // [x, y]
	                                for (i = 0; i < dataLength; i++) {
	                                    pt = data[i];
	                                    xData[i] = pt[0];
	                                    yData[i] = pt[1];
	                                }
	                            }
	                        } else {
	                            H.error(12); // Highcharts expects configs to be numbers or arrays in turbo mode
	                        }
	                    } else {
	                        for (i = 0; i < dataLength; i++) {
	                            if (data[i] !== undefined) { // stray commas in oldIE
	                                pt = {
	                                    series: series
	                                };
	                                series.pointClass.prototype.applyOptions.apply(pt, [data[i]]);
	                                series.updateParallelArrays(pt, i);
	                            }
	                        }
	                    }

	                    // Forgetting to cast strings to numbers is a common caveat when handling CSV or JSON
	                    if (isString(yData[0])) {
	                        H.error(14, true);
	                    }

	                    series.data = [];
	                    series.options.data = series.userOptions.data = data;

	                    // destroy old points
	                    i = oldDataLength;
	                    while (i--) {
	                        if (oldData[i] && oldData[i].destroy) {
	                            oldData[i].destroy();
	                        }
	                    }

	                    // reset minRange (#878)
	                    if (xAxis) {
	                        xAxis.minRange = xAxis.userMinRange;
	                    }

	                    // redraw
	                    series.isDirty = chart.isDirtyBox = true;
	                    series.isDirtyData = !!oldData;
	                    animation = false;
	                }

	                // Typically for pie series, points need to be processed and generated
	                // prior to rendering the legend
	                if (options.legendType === 'point') {
	                    this.processData();
	                    this.generatePoints();
	                }

	                if (redraw) {
	                    chart.redraw(animation);
	                }
	            },

	            /**
	             * Process the data by cropping away unused data points if the series is longer
	             * than the crop threshold. This saves computing time for large series.
	             */
	            processData: function(force) {
	                var series = this,
	                    processedXData = series.xData, // copied during slice operation below
	                    processedYData = series.yData,
	                    dataLength = processedXData.length,
	                    croppedData,
	                    cropStart = 0,
	                    cropped,
	                    distance,
	                    closestPointRange,
	                    xAxis = series.xAxis,
	                    i, // loop variable
	                    options = series.options,
	                    cropThreshold = options.cropThreshold,
	                    getExtremesFromAll = series.getExtremesFromAll || options.getExtremesFromAll, // #4599
	                    isCartesian = series.isCartesian,
	                    xExtremes,
	                    val2lin = xAxis && xAxis.val2lin,
	                    isLog = xAxis && xAxis.isLog,
	                    min,
	                    max;

	                // If the series data or axes haven't changed, don't go through this. Return false to pass
	                // the message on to override methods like in data grouping.
	                if (isCartesian && !series.isDirty && !xAxis.isDirty && !series.yAxis.isDirty && !force) {
	                    return false;
	                }

	                if (xAxis) {
	                    xExtremes = xAxis.getExtremes(); // corrected for log axis (#3053)
	                    min = xExtremes.min;
	                    max = xExtremes.max;
	                }

	                // optionally filter out points outside the plot area
	                if (isCartesian && series.sorted && !getExtremesFromAll && (!cropThreshold || dataLength > cropThreshold || series.forceCrop)) {

	                    // it's outside current extremes
	                    if (processedXData[dataLength - 1] < min || processedXData[0] > max) {
	                        processedXData = [];
	                        processedYData = [];

	                        // only crop if it's actually spilling out
	                    } else if (processedXData[0] < min || processedXData[dataLength - 1] > max) {
	                        croppedData = this.cropData(series.xData, series.yData, min, max);
	                        processedXData = croppedData.xData;
	                        processedYData = croppedData.yData;
	                        cropStart = croppedData.start;
	                        cropped = true;
	                    }
	                }


	                // Find the closest distance between processed points
	                i = processedXData.length || 1;
	                while (--i) {
	                    distance = isLog ?
	                        val2lin(processedXData[i]) - val2lin(processedXData[i - 1]) :
	                        processedXData[i] - processedXData[i - 1];

	                    if (distance > 0 && (closestPointRange === undefined || distance < closestPointRange)) {
	                        closestPointRange = distance;

	                        // Unsorted data is not supported by the line tooltip, as well as data grouping and
	                        // navigation in Stock charts (#725) and width calculation of columns (#1900)
	                    } else if (distance < 0 && series.requireSorting) {
	                        H.error(15);
	                    }
	                }

	                // Record the properties
	                series.cropped = cropped; // undefined or true
	                series.cropStart = cropStart;
	                series.processedXData = processedXData;
	                series.processedYData = processedYData;

	                series.closestPointRange = closestPointRange;

	            },

	            /**
	             * Iterate over xData and crop values between min and max. Returns object containing crop start/end
	             * cropped xData with corresponding part of yData, dataMin and dataMax within the cropped range
	             */
	            cropData: function(xData, yData, min, max) {
	                var dataLength = xData.length,
	                    cropStart = 0,
	                    cropEnd = dataLength,
	                    cropShoulder = pick(this.cropShoulder, 1), // line-type series need one point outside
	                    i,
	                    j;

	                // iterate up to find slice start
	                for (i = 0; i < dataLength; i++) {
	                    if (xData[i] >= min) {
	                        cropStart = Math.max(0, i - cropShoulder);
	                        break;
	                    }
	                }

	                // proceed to find slice end
	                for (j = i; j < dataLength; j++) {
	                    if (xData[j] > max) {
	                        cropEnd = j + cropShoulder;
	                        break;
	                    }
	                }

	                return {
	                    xData: xData.slice(cropStart, cropEnd),
	                    yData: yData.slice(cropStart, cropEnd),
	                    start: cropStart,
	                    end: cropEnd
	                };
	            },


	            /**
	             * Generate the data point after the data has been processed by cropping away
	             * unused points and optionally grouped in Highcharts Stock.
	             */
	            generatePoints: function() {
	                var series = this,
	                    options = series.options,
	                    dataOptions = options.data,
	                    data = series.data,
	                    dataLength,
	                    processedXData = series.processedXData,
	                    processedYData = series.processedYData,
	                    PointClass = series.pointClass,
	                    processedDataLength = processedXData.length,
	                    cropStart = series.cropStart || 0,
	                    cursor,
	                    hasGroupedData = series.hasGroupedData,
	                    point,
	                    points = [],
	                    i;

	                if (!data && !hasGroupedData) {
	                    var arr = [];
	                    arr.length = dataOptions.length;
	                    data = series.data = arr;
	                }

	                for (i = 0; i < processedDataLength; i++) {
	                    cursor = cropStart + i;
	                    if (!hasGroupedData) {
	                        point = data[cursor];
	                        if (!point && dataOptions[cursor] !== undefined) { // #970
	                            data[cursor] = point = (new PointClass()).init(series, dataOptions[cursor], processedXData[i]);
	                        }
	                    } else {
	                        // splat the y data in case of ohlc data array
	                        point = (new PointClass()).init(series, [processedXData[i]].concat(splat(processedYData[i])));
	                        point.dataGroup = series.groupMap[i];
	                    }
	                    point.index = cursor; // For faster access in Point.update
	                    points[i] = point;
	                }

	                // Hide cropped-away points - this only runs when the number of points is above cropThreshold, or when
	                // swithching view from non-grouped data to grouped data (#637)
	                if (data && (processedDataLength !== (dataLength = data.length) || hasGroupedData)) {
	                    for (i = 0; i < dataLength; i++) {
	                        if (i === cropStart && !hasGroupedData) { // when has grouped data, clear all points
	                            i += processedDataLength;
	                        }
	                        if (data[i]) {
	                            data[i].destroyElements();
	                            data[i].plotX = undefined; // #1003
	                        }
	                    }
	                }

	                series.data = data;
	                series.points = points;
	            },

	            /**
	             * Calculate Y extremes for visible data
	             */
	            getExtremes: function(yData) {
	                var xAxis = this.xAxis,
	                    yAxis = this.yAxis,
	                    xData = this.processedXData,
	                    yDataLength,
	                    activeYData = [],
	                    activeCounter = 0,
	                    xExtremes = xAxis.getExtremes(), // #2117, need to compensate for log X axis
	                    xMin = xExtremes.min,
	                    xMax = xExtremes.max,
	                    validValue,
	                    withinRange,
	                    x,
	                    y,
	                    i,
	                    j;

	                yData = yData || this.stackedYData || this.processedYData || [];
	                yDataLength = yData.length;

	                for (i = 0; i < yDataLength; i++) {

	                    x = xData[i];
	                    y = yData[i];

	                    // For points within the visible range, including the first point outside the
	                    // visible range, consider y extremes
	                    validValue = (isNumber(y, true) || isArray(y)) && (!yAxis.isLog || (y.length || y > 0));
	                    withinRange = this.getExtremesFromAll || this.options.getExtremesFromAll || this.cropped ||
	                        ((xData[i + 1] || x) >= xMin && (xData[i - 1] || x) <= xMax);

	                    if (validValue && withinRange) {

	                        j = y.length;
	                        if (j) { // array, like ohlc or range data
	                            while (j--) {
	                                if (y[j] !== null) {
	                                    activeYData[activeCounter++] = y[j];
	                                }
	                            }
	                        } else {
	                            activeYData[activeCounter++] = y;
	                        }
	                    }
	                }
	                this.dataMin = arrayMin(activeYData);
	                this.dataMax = arrayMax(activeYData);
	            },

	            /**
	             * Translate data points from raw data values to chart specific positioning
	             * data needed later in drawPoints, drawGraph and drawTracker.
	             *
	             * @function #translate
	             * @memberOf Series
	             * @returns {void}
	             */
	            translate: function() {
	                if (!this.processedXData) { // hidden series
	                    this.processData();
	                }
	                this.generatePoints();
	                var series = this,
	                    options = series.options,
	                    stacking = options.stacking,
	                    xAxis = series.xAxis,
	                    categories = xAxis.categories,
	                    yAxis = series.yAxis,
	                    points = series.points,
	                    dataLength = points.length,
	                    hasModifyValue = !!series.modifyValue,
	                    i,
	                    pointPlacement = options.pointPlacement,
	                    dynamicallyPlaced = pointPlacement === 'between' || isNumber(pointPlacement),
	                    threshold = options.threshold,
	                    stackThreshold = options.startFromThreshold ? threshold : 0,
	                    plotX,
	                    plotY,
	                    lastPlotX,
	                    stackIndicator,
	                    closestPointRangePx = Number.MAX_VALUE;

	                // Point placement is relative to each series pointRange (#5889)
	                if (pointPlacement === 'between') {
	                    pointPlacement = 0.5;
	                }
	                if (isNumber(pointPlacement)) {
	                    pointPlacement *= pick(options.pointRange || xAxis.pointRange);
	                }

	                // Translate each point
	                for (i = 0; i < dataLength; i++) {
	                    var point = points[i],
	                        xValue = point.x,
	                        yValue = point.y,
	                        yBottom = point.low,
	                        stack = stacking && yAxis.stacks[(series.negStacks && yValue < (stackThreshold ? 0 : threshold) ? '-' : '') + series.stackKey],
	                        pointStack,
	                        stackValues;

	                    // Discard disallowed y values for log axes (#3434)
	                    if (yAxis.isLog && yValue !== null && yValue <= 0) {
	                        point.isNull = true;
	                    }

	                    // Get the plotX translation
	                    point.plotX = plotX = correctFloat( // #5236
	                        Math.min(Math.max(-1e5, xAxis.translate(
	                            xValue,
	                            0,
	                            0,
	                            0,
	                            1,
	                            pointPlacement,
	                            this.type === 'flags'
	                        )), 1e5) // #3923
	                    );

	                    // Calculate the bottom y value for stacked series
	                    if (stacking && series.visible && !point.isNull && stack && stack[xValue]) {
	                        stackIndicator = series.getStackIndicator(stackIndicator, xValue, series.index);
	                        pointStack = stack[xValue];
	                        stackValues = pointStack.points[stackIndicator.key];
	                        yBottom = stackValues[0];
	                        yValue = stackValues[1];

	                        if (yBottom === stackThreshold && stackIndicator.key === stack[xValue].base) {
	                            yBottom = pick(threshold, yAxis.min);
	                        }
	                        if (yAxis.isLog && yBottom <= 0) { // #1200, #1232
	                            yBottom = null;
	                        }

	                        point.total = point.stackTotal = pointStack.total;
	                        point.percentage = pointStack.total && (point.y / pointStack.total * 100);
	                        point.stackY = yValue;

	                        // Place the stack label
	                        pointStack.setOffset(series.pointXOffset || 0, series.barW || 0);

	                    }

	                    // Set translated yBottom or remove it
	                    point.yBottom = defined(yBottom) ?
	                        yAxis.translate(yBottom, 0, 1, 0, 1) :
	                        null;

	                    // general hook, used for Highstock compare mode
	                    if (hasModifyValue) {
	                        yValue = series.modifyValue(yValue, point);
	                    }

	                    // Set the the plotY value, reset it for redraws
	                    point.plotY = plotY = (typeof yValue === 'number' && yValue !== Infinity) ?
	                        Math.min(Math.max(-1e5, yAxis.translate(yValue, 0, 1, 0, 1)), 1e5) : // #3201
	                        undefined;

	                    point.isInside = plotY !== undefined && plotY >= 0 && plotY <= yAxis.len && // #3519
	                        plotX >= 0 && plotX <= xAxis.len;


	                    // Set client related positions for mouse tracking
	                    point.clientX = dynamicallyPlaced ? correctFloat(xAxis.translate(xValue, 0, 0, 0, 1, pointPlacement)) : plotX; // #1514, #5383, #5518

	                    point.negative = point.y < (threshold || 0);

	                    // some API data
	                    point.category = categories && categories[point.x] !== undefined ?
	                        categories[point.x] : point.x;

	                    // Determine auto enabling of markers (#3635, #5099)
	                    if (!point.isNull) {
	                        if (lastPlotX !== undefined) {
	                            closestPointRangePx = Math.min(closestPointRangePx, Math.abs(plotX - lastPlotX));
	                        }
	                        lastPlotX = plotX;
	                    }

	                    // Find point zone
	                    point.zone = this.zones.length && point.getZone();
	                }
	                series.closestPointRangePx = closestPointRangePx;
	            },

	            /**
	             * Return the series points with null points filtered out
	             */
	            getValidPoints: function(points, insideOnly) {
	                var chart = this.chart;
	                return grep(points || this.points || [], function isValidPoint(point) { // #3916, #5029
	                    if (insideOnly && !chart.isInsidePlot(point.plotX, point.plotY, chart.inverted)) { // #5085
	                        return false;
	                    }
	                    return !point.isNull;
	                });
	            },

	            /**
	             * Set the clipping for the series. For animated series it is called twice, first to initiate
	             * animating the clip then the second time without the animation to set the final clip.
	             */
	            setClip: function(animation) {
	                var chart = this.chart,
	                    options = this.options,
	                    renderer = chart.renderer,
	                    inverted = chart.inverted,
	                    seriesClipBox = this.clipBox,
	                    clipBox = seriesClipBox || chart.clipBox,
	                    sharedClipKey = this.sharedClipKey || ['_sharedClip', animation && animation.duration, animation && animation.easing, clipBox.height, options.xAxis, options.yAxis].join(','), // #4526
	                    clipRect = chart[sharedClipKey],
	                    markerClipRect = chart[sharedClipKey + 'm'];

	                // If a clipping rectangle with the same properties is currently present in the chart, use that.
	                if (!clipRect) {

	                    // When animation is set, prepare the initial positions
	                    if (animation) {
	                        clipBox.width = 0;

	                        chart[sharedClipKey + 'm'] = markerClipRect = renderer.clipRect(-99, // include the width of the first marker
	                            inverted ? -chart.plotLeft : -chart.plotTop,
	                            99,
	                            inverted ? chart.chartWidth : chart.chartHeight
	                        );
	                    }
	                    chart[sharedClipKey] = clipRect = renderer.clipRect(clipBox);
	                    // Create hashmap for series indexes
	                    clipRect.count = {
	                        length: 0
	                    };

	                }
	                if (animation) {
	                    if (!clipRect.count[this.index]) {
	                        clipRect.count[this.index] = true;
	                        clipRect.count.length += 1;
	                    }
	                }

	                if (options.clip !== false) {
	                    this.group.clip(animation || seriesClipBox ? clipRect : chart.clipRect);
	                    this.markerGroup.clip(markerClipRect);
	                    this.sharedClipKey = sharedClipKey;
	                }

	                // Remove the shared clipping rectangle when all series are shown
	                if (!animation) {
	                    if (clipRect.count[this.index]) {
	                        delete clipRect.count[this.index];
	                        clipRect.count.length -= 1;
	                    }

	                    if (clipRect.count.length === 0 && sharedClipKey && chart[sharedClipKey]) {
	                        if (!seriesClipBox) {
	                            chart[sharedClipKey] = chart[sharedClipKey].destroy();
	                        }
	                        if (chart[sharedClipKey + 'm']) {
	                            this.markerGroup.clip();
	                            chart[sharedClipKey + 'm'] = chart[sharedClipKey + 'm'].destroy();
	                        }
	                    }
	                }
	            },

	            /**
	             * Animate in the series
	             */
	            animate: function(init) {
	                var series = this,
	                    chart = series.chart,
	                    clipRect,
	                    animation = animObject(series.options.animation),
	                    sharedClipKey;

	                // Initialize the animation. Set up the clipping rectangle.
	                if (init) {

	                    series.setClip(animation);

	                    // Run the animation
	                } else {
	                    sharedClipKey = this.sharedClipKey;
	                    clipRect = chart[sharedClipKey];
	                    if (clipRect) {
	                        clipRect.animate({
	                            width: chart.plotSizeX
	                        }, animation);
	                    }
	                    if (chart[sharedClipKey + 'm']) {
	                        chart[sharedClipKey + 'm'].animate({
	                            width: chart.plotSizeX + 99
	                        }, animation);
	                    }

	                    // Delete this function to allow it only once
	                    series.animate = null;

	                }
	            },

	            /**
	             * This runs after animation to land on the final plot clipping
	             */
	            afterAnimate: function() {
	                this.setClip();
	                fireEvent(this, 'afterAnimate');
	            },

	            /**
	             * Draw the markers.
	             *
	             * @function #drawPoints
	             * @memberOf Series
	             * @returns {void}
	             */
	            drawPoints: function() {
	                var series = this,
	                    points = series.points,
	                    chart = series.chart,
	                    plotY,
	                    i,
	                    point,
	                    symbol,
	                    graphic,
	                    options = series.options,
	                    seriesMarkerOptions = options.marker,
	                    pointMarkerOptions,
	                    hasPointMarker,
	                    enabled,
	                    isInside,
	                    markerGroup = series.markerGroup,
	                    xAxis = series.xAxis,
	                    markerAttribs,
	                    globallyEnabled = pick(
	                        seriesMarkerOptions.enabled,
	                        xAxis.isRadial ? true : null,
	                        series.closestPointRangePx > 2 * seriesMarkerOptions.radius
	                    );

	                if (seriesMarkerOptions.enabled !== false || series._hasPointMarkers) {

	                    for (i = 0; i < points.length; i++) {
	                        point = points[i];
	                        plotY = point.plotY;
	                        graphic = point.graphic;
	                        pointMarkerOptions = point.marker || {};
	                        hasPointMarker = !!point.marker;
	                        enabled = (globallyEnabled && pointMarkerOptions.enabled === undefined) || pointMarkerOptions.enabled;
	                        isInside = point.isInside;

	                        // only draw the point if y is defined
	                        if (enabled && isNumber(plotY) && point.y !== null) {

	                            // Shortcuts
	                            symbol = pick(pointMarkerOptions.symbol, series.symbol);
	                            point.hasImage = symbol.indexOf('url') === 0;

	                            markerAttribs = series.markerAttribs(
	                                point,
	                                point.selected && 'select'
	                            );

	                            if (graphic) { // update
	                                graphic[isInside ? 'show' : 'hide'](true) // Since the marker group isn't clipped, each individual marker must be toggled
	                                    .animate(markerAttribs);
	                            } else if (isInside && (markerAttribs.width > 0 || point.hasImage)) {
	                                point.graphic = graphic = chart.renderer.symbol(
	                                        symbol,
	                                        markerAttribs.x,
	                                        markerAttribs.y,
	                                        markerAttribs.width,
	                                        markerAttribs.height,
	                                        hasPointMarker ? pointMarkerOptions : seriesMarkerOptions
	                                    )
	                                    .add(markerGroup);
	                            }


	                            // Presentational attributes
	                            if (graphic) {
	                                graphic.attr(series.pointAttribs(point, point.selected && 'select'));
	                            }


	                            if (graphic) {
	                                graphic.addClass(point.getClassName(), true);
	                            }

	                        } else if (graphic) {
	                            point.graphic = graphic.destroy(); // #1269
	                        }
	                    }
	                }

	            },

	            /**
	             * Get non-presentational attributes for the point.
	             */
	            markerAttribs: function(point, state) {
	                var seriesMarkerOptions = this.options.marker,
	                    seriesStateOptions,
	                    pointMarkerOptions = point.marker || {},
	                    pointStateOptions,
	                    radius = pick(
	                        pointMarkerOptions.radius,
	                        seriesMarkerOptions.radius
	                    ),
	                    attribs;

	                // Handle hover and select states
	                if (state) {
	                    seriesStateOptions = seriesMarkerOptions.states[state];
	                    pointStateOptions = pointMarkerOptions.states &&
	                        pointMarkerOptions.states[state];

	                    radius = pick(
	                        pointStateOptions && pointStateOptions.radius,
	                        seriesStateOptions && seriesStateOptions.radius,
	                        radius + (seriesStateOptions && seriesStateOptions.radiusPlus || 0)
	                    );
	                }

	                if (point.hasImage) {
	                    radius = 0; // and subsequently width and height is not set
	                }

	                attribs = {
	                    x: Math.floor(point.plotX) - radius, // Math.floor for #1843
	                    y: point.plotY - radius
	                };

	                if (radius) {
	                    attribs.width = attribs.height = 2 * radius;
	                }

	                return attribs;

	            },


	            /**
	             * Get presentational attributes for marker-based series (line, spline, scatter, bubble, mappoint...)
	             */
	            pointAttribs: function(point, state) {
	                var seriesMarkerOptions = this.options.marker,
	                    seriesStateOptions,
	                    pointOptions = point && point.options,
	                    pointMarkerOptions = (pointOptions && pointOptions.marker) || {},
	                    pointStateOptions,
	                    color = this.color,
	                    pointColorOption = pointOptions && pointOptions.color,
	                    pointColor = point && point.color,
	                    strokeWidth = pick(
	                        pointMarkerOptions.lineWidth,
	                        seriesMarkerOptions.lineWidth
	                    ),
	                    zoneColor = point && point.zone && point.zone.color,
	                    fill,
	                    stroke;

	                color = pointColorOption || zoneColor || pointColor || color;
	                fill = pointMarkerOptions.fillColor || seriesMarkerOptions.fillColor || color;
	                stroke = pointMarkerOptions.lineColor || seriesMarkerOptions.lineColor || color;

	                // Handle hover and select states
	                if (state) {
	                    seriesStateOptions = seriesMarkerOptions.states[state];
	                    pointStateOptions = (pointMarkerOptions.states && pointMarkerOptions.states[state]) || {};
	                    strokeWidth = pick(
	                        pointStateOptions.lineWidth,
	                        seriesStateOptions.lineWidth,
	                        strokeWidth + pick(
	                            pointStateOptions.lineWidthPlus,
	                            seriesStateOptions.lineWidthPlus,
	                            0
	                        )
	                    );
	                    fill = pointStateOptions.fillColor || seriesStateOptions.fillColor || fill;
	                    stroke = pointStateOptions.lineColor || seriesStateOptions.lineColor || stroke;
	                }

	                return {
	                    'stroke': stroke,
	                    'stroke-width': strokeWidth,
	                    'fill': fill
	                };
	            },

	            /**
	             * Clear DOM objects and free up memory
	             */
	            destroy: function() {
	                var series = this,
	                    chart = series.chart,
	                    issue134 = /AppleWebKit\/533/.test(win.navigator.userAgent),
	                    destroy,
	                    i,
	                    data = series.data || [],
	                    point,
	                    prop,
	                    axis;

	                // add event hook
	                fireEvent(series, 'destroy');

	                // remove all events
	                removeEvent(series);

	                // erase from axes
	                each(series.axisTypes || [], function(AXIS) {
	                    axis = series[AXIS];
	                    if (axis && axis.series) {
	                        erase(axis.series, series);
	                        axis.isDirty = axis.forceRedraw = true;
	                    }
	                });

	                // remove legend items
	                if (series.legendItem) {
	                    series.chart.legend.destroyItem(series);
	                }

	                // destroy all points with their elements
	                i = data.length;
	                while (i--) {
	                    point = data[i];
	                    if (point && point.destroy) {
	                        point.destroy();
	                    }
	                }
	                series.points = null;

	                // Clear the animation timeout if we are destroying the series during initial animation
	                clearTimeout(series.animationTimeout);

	                // Destroy all SVGElements associated to the series
	                for (prop in series) {
	                    if (series[prop] instanceof SVGElement && !series[prop].survive) { // Survive provides a hook for not destroying

	                        // issue 134 workaround
	                        destroy = issue134 && prop === 'group' ?
	                            'hide' :
	                            'destroy';

	                        series[prop][destroy]();
	                    }
	                }

	                // remove from hoverSeries
	                if (chart.hoverSeries === series) {
	                    chart.hoverSeries = null;
	                }
	                erase(chart.series, series);
	                chart.orderSeries();

	                // clear all members
	                for (prop in series) {
	                    delete series[prop];
	                }
	            },

	            /**
	             * Get the graph path
	             */
	            getGraphPath: function(points, nullsAsZeroes, connectCliffs) {
	                var series = this,
	                    options = series.options,
	                    step = options.step,
	                    reversed,
	                    graphPath = [],
	                    xMap = [],
	                    gap;

	                points = points || series.points;

	                // Bottom of a stack is reversed
	                reversed = points.reversed;
	                if (reversed) {
	                    points.reverse();
	                }
	                // Reverse the steps (#5004)
	                step = {
	                    right: 1,
	                    center: 2
	                }[step] || (step && 3);
	                if (step && reversed) {
	                    step = 4 - step;
	                }

	                // Remove invalid points, especially in spline (#5015)
	                if (options.connectNulls && !nullsAsZeroes && !connectCliffs) {
	                    points = this.getValidPoints(points);
	                }

	                // Build the line
	                each(points, function(point, i) {

	                    var plotX = point.plotX,
	                        plotY = point.plotY,
	                        lastPoint = points[i - 1],
	                        pathToPoint; // the path to this point from the previous

	                    if ((point.leftCliff || (lastPoint && lastPoint.rightCliff)) && !connectCliffs) {
	                        gap = true; // ... and continue
	                    }

	                    // Line series, nullsAsZeroes is not handled
	                    if (point.isNull && !defined(nullsAsZeroes) && i > 0) {
	                        gap = !options.connectNulls;

	                        // Area series, nullsAsZeroes is set
	                    } else if (point.isNull && !nullsAsZeroes) {
	                        gap = true;

	                    } else {

	                        if (i === 0 || gap) {
	                            pathToPoint = ['M', point.plotX, point.plotY];

	                        } else if (series.getPointSpline) { // generate the spline as defined in the SplineSeries object

	                            pathToPoint = series.getPointSpline(points, point, i);

	                        } else if (step) {

	                            if (step === 1) { // right
	                                pathToPoint = [
	                                    'L',
	                                    lastPoint.plotX,
	                                    plotY
	                                ];

	                            } else if (step === 2) { // center
	                                pathToPoint = [
	                                    'L',
	                                    (lastPoint.plotX + plotX) / 2,
	                                    lastPoint.plotY,
	                                    'L',
	                                    (lastPoint.plotX + plotX) / 2,
	                                    plotY
	                                ];

	                            } else {
	                                pathToPoint = [
	                                    'L',
	                                    plotX,
	                                    lastPoint.plotY
	                                ];
	                            }
	                            pathToPoint.push('L', plotX, plotY);

	                        } else {
	                            // normal line to next point
	                            pathToPoint = [
	                                'L',
	                                plotX,
	                                plotY
	                            ];
	                        }

	                        // Prepare for animation. When step is enabled, there are two path nodes for each x value.
	                        xMap.push(point.x);
	                        if (step) {
	                            xMap.push(point.x);
	                        }

	                        graphPath.push.apply(graphPath, pathToPoint);
	                        gap = false;
	                    }
	                });

	                graphPath.xMap = xMap;
	                series.graphPath = graphPath;

	                return graphPath;

	            },

	            /**
	             * Draw the actual graph
	             */
	            drawGraph: function() {
	                var series = this,
	                    options = this.options,
	                    graphPath = (this.gappedPath || this.getGraphPath).call(this),
	                    props = [
	                        [
	                            'graph',
	                            'highcharts-graph',

	                            options.lineColor || this.color,
	                            options.dashStyle

	                        ]
	                    ];

	                // Add the zone properties if any
	                each(this.zones, function(zone, i) {
	                    props.push([
	                        'zone-graph-' + i,
	                        'highcharts-graph highcharts-zone-graph-' + i + ' ' + (zone.className || ''),

	                        zone.color || series.color,
	                        zone.dashStyle || options.dashStyle

	                    ]);
	                });

	                // Draw the graph
	                each(props, function(prop, i) {
	                    var graphKey = prop[0],
	                        graph = series[graphKey],
	                        attribs;

	                    if (graph) {
	                        graph.endX = graphPath.xMap;
	                        graph.animate({
	                            d: graphPath
	                        });

	                    } else if (graphPath.length) { // #1487

	                        series[graphKey] = series.chart.renderer.path(graphPath)
	                            .addClass(prop[1])
	                            .attr({
	                                zIndex: 1
	                            }) // #1069
	                            .add(series.group);


	                        attribs = {
	                            'stroke': prop[2],
	                            'stroke-width': options.lineWidth,
	                            'fill': (series.fillGraph && series.color) || 'none' // Polygon series use filled graph
	                        };

	                        if (prop[3]) {
	                            attribs.dashstyle = prop[3];
	                        } else if (options.linecap !== 'square') {
	                            attribs['stroke-linecap'] = attribs['stroke-linejoin'] = 'round';
	                        }

	                        graph = series[graphKey]
	                            .attr(attribs)
	                            .shadow((i < 2) && options.shadow); // add shadow to normal series (0) or to first zone (1) #3932

	                    }

	                    // Helpers for animation
	                    if (graph) {
	                        graph.startX = graphPath.xMap;
	                        //graph.shiftUnit = options.step ? 2 : 1;
	                        graph.isArea = graphPath.isArea; // For arearange animation
	                    }
	                });
	            },

	            /**
	             * Clip the graphs into the positive and negative coloured graphs
	             */
	            applyZones: function() {
	                var series = this,
	                    chart = this.chart,
	                    renderer = chart.renderer,
	                    zones = this.zones,
	                    translatedFrom,
	                    translatedTo,
	                    clips = this.clips || [],
	                    clipAttr,
	                    graph = this.graph,
	                    area = this.area,
	                    chartSizeMax = Math.max(chart.chartWidth, chart.chartHeight),
	                    axis = this[(this.zoneAxis || 'y') + 'Axis'],
	                    extremes,
	                    reversed,
	                    inverted = chart.inverted,
	                    horiz,
	                    pxRange,
	                    pxPosMin,
	                    pxPosMax,
	                    ignoreZones = false;

	                if (zones.length && (graph || area) && axis && axis.min !== undefined) {
	                    reversed = axis.reversed;
	                    horiz = axis.horiz;
	                    // The use of the Color Threshold assumes there are no gaps
	                    // so it is safe to hide the original graph and area
	                    if (graph) {
	                        graph.hide();
	                    }
	                    if (area) {
	                        area.hide();
	                    }

	                    // Create the clips
	                    extremes = axis.getExtremes();
	                    each(zones, function(threshold, i) {

	                        translatedFrom = reversed ?
	                            (horiz ? chart.plotWidth : 0) :
	                            (horiz ? 0 : axis.toPixels(extremes.min));
	                        translatedFrom = Math.min(Math.max(pick(translatedTo, translatedFrom), 0), chartSizeMax);
	                        translatedTo = Math.min(Math.max(Math.round(axis.toPixels(pick(threshold.value, extremes.max), true)), 0), chartSizeMax);

	                        if (ignoreZones) {
	                            translatedFrom = translatedTo = axis.toPixels(extremes.max);
	                        }

	                        pxRange = Math.abs(translatedFrom - translatedTo);
	                        pxPosMin = Math.min(translatedFrom, translatedTo);
	                        pxPosMax = Math.max(translatedFrom, translatedTo);
	                        if (axis.isXAxis) {
	                            clipAttr = {
	                                x: inverted ? pxPosMax : pxPosMin,
	                                y: 0,
	                                width: pxRange,
	                                height: chartSizeMax
	                            };
	                            if (!horiz) {
	                                clipAttr.x = chart.plotHeight - clipAttr.x;
	                            }
	                        } else {
	                            clipAttr = {
	                                x: 0,
	                                y: inverted ? pxPosMax : pxPosMin,
	                                width: chartSizeMax,
	                                height: pxRange
	                            };
	                            if (horiz) {
	                                clipAttr.y = chart.plotWidth - clipAttr.y;
	                            }
	                        }


	                        /// VML SUPPPORT
	                        if (inverted && renderer.isVML) {
	                            if (axis.isXAxis) {
	                                clipAttr = {
	                                    x: 0,
	                                    y: reversed ? pxPosMin : pxPosMax,
	                                    height: clipAttr.width,
	                                    width: chart.chartWidth
	                                };
	                            } else {
	                                clipAttr = {
	                                    x: clipAttr.y - chart.plotLeft - chart.spacingBox.x,
	                                    y: 0,
	                                    width: clipAttr.height,
	                                    height: chart.chartHeight
	                                };
	                            }
	                        }
	                        /// END OF VML SUPPORT


	                        if (clips[i]) {
	                            clips[i].animate(clipAttr);
	                        } else {
	                            clips[i] = renderer.clipRect(clipAttr);

	                            if (graph) {
	                                series['zone-graph-' + i].clip(clips[i]);
	                            }

	                            if (area) {
	                                series['zone-area-' + i].clip(clips[i]);
	                            }
	                        }
	                        // if this zone extends out of the axis, ignore the others
	                        ignoreZones = threshold.value > extremes.max;
	                    });
	                    this.clips = clips;
	                }
	            },

	            /**
	             * Initialize and perform group inversion on series.group and series.markerGroup
	             */
	            invertGroups: function(inverted) {
	                var series = this,
	                    chart = series.chart,
	                    remover;

	                function setInvert() {
	                    each(['group', 'markerGroup'], function(groupName) {
	                        if (series[groupName]) {
	                            series[groupName].width = series.yAxis.len;
	                            series[groupName].height = series.xAxis.len;
	                            series[groupName].invert(inverted);
	                        }
	                    });
	                }

	                // Pie, go away (#1736)
	                if (!series.xAxis) {
	                    return;
	                }

	                // A fixed size is needed for inversion to work
	                remover = addEvent(chart, 'resize', setInvert);
	                addEvent(series, 'destroy', remover);

	                // Do it now
	                setInvert(inverted); // do it now

	                // On subsequent render and redraw, just do setInvert without setting up events again
	                series.invertGroups = setInvert;
	            },

	            /**
	             * General abstraction for creating plot groups like series.group, series.dataLabelsGroup and
	             * series.markerGroup. On subsequent calls, the group will only be adjusted to the updated plot size.
	             */
	            plotGroup: function(prop, name, visibility, zIndex, parent) {
	                var group = this[prop],
	                    isNew = !group;

	                // Generate it on first call
	                if (isNew) {
	                    this[prop] = group = this.chart.renderer.g(name)
	                        .attr({
	                            zIndex: zIndex || 0.1 // IE8 and pointer logic use this
	                        })
	                        .add(parent);

	                    group.addClass('highcharts-series-' + this.index + ' highcharts-' + this.type + '-series highcharts-color-' + this.colorIndex +
	                        ' ' + (this.options.className || ''));
	                }

	                // Place it on first and subsequent (redraw) calls
	                group.attr({
	                    visibility: visibility
	                })[isNew ? 'attr' : 'animate'](this.getPlotBox());
	                return group;
	            },

	            /**
	             * Get the translation and scale for the plot area of this series
	             */
	            getPlotBox: function() {
	                var chart = this.chart,
	                    xAxis = this.xAxis,
	                    yAxis = this.yAxis;

	                // Swap axes for inverted (#2339)
	                if (chart.inverted) {
	                    xAxis = yAxis;
	                    yAxis = this.xAxis;
	                }
	                return {
	                    translateX: xAxis ? xAxis.left : chart.plotLeft,
	                    translateY: yAxis ? yAxis.top : chart.plotTop,
	                    scaleX: 1, // #1623
	                    scaleY: 1
	                };
	            },

	            /**
	             * Render the graph and markers
	             */
	            render: function() {
	                var series = this,
	                    chart = series.chart,
	                    group,
	                    options = series.options,
	                    // Animation doesn't work in IE8 quirks when the group div is hidden,
	                    // and looks bad in other oldIE
	                    animDuration = !!series.animate && chart.renderer.isSVG && animObject(options.animation).duration,
	                    visibility = series.visible ? 'inherit' : 'hidden', // #2597
	                    zIndex = options.zIndex,
	                    hasRendered = series.hasRendered,
	                    chartSeriesGroup = chart.seriesGroup,
	                    inverted = chart.inverted;

	                // the group
	                group = series.plotGroup(
	                    'group',
	                    'series',
	                    visibility,
	                    zIndex,
	                    chartSeriesGroup
	                );

	                series.markerGroup = series.plotGroup(
	                    'markerGroup',
	                    'markers',
	                    visibility,
	                    zIndex,
	                    chartSeriesGroup
	                );

	                // initiate the animation
	                if (animDuration) {
	                    series.animate(true);
	                }

	                // SVGRenderer needs to know this before drawing elements (#1089, #1795)
	                group.inverted = series.isCartesian ? inverted : false;

	                // draw the graph if any
	                if (series.drawGraph) {
	                    series.drawGraph();
	                    series.applyZones();
	                }

	                /*		each(series.points, function (point) {
	                			if (point.redraw) {
	                				point.redraw();
	                			}
	                		});*/

	                // draw the data labels (inn pies they go before the points)
	                if (series.drawDataLabels) {
	                    series.drawDataLabels();
	                }

	                // draw the points
	                if (series.visible) {
	                    series.drawPoints();
	                }


	                // draw the mouse tracking area
	                if (series.drawTracker && series.options.enableMouseTracking !== false) {
	                    series.drawTracker();
	                }

	                // Handle inverted series and tracker groups
	                series.invertGroups(inverted);

	                // Initial clipping, must be defined after inverting groups for VML. Applies to columns etc. (#3839).
	                if (options.clip !== false && !series.sharedClipKey && !hasRendered) {
	                    group.clip(chart.clipRect);
	                }

	                // Run the animation
	                if (animDuration) {
	                    series.animate();
	                }

	                // Call the afterAnimate function on animation complete (but don't overwrite the animation.complete option
	                // which should be available to the user).
	                if (!hasRendered) {
	                    series.animationTimeout = syncTimeout(function() {
	                        series.afterAnimate();
	                    }, animDuration);
	                }

	                series.isDirty = false; // means data is in accordance with what you see
	                // (See #322) series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see
	                series.hasRendered = true;
	            },

	            /**
	             * Redraw the series after an update in the axes.
	             */
	            redraw: function() {
	                var series = this,
	                    chart = series.chart,
	                    wasDirty = series.isDirty || series.isDirtyData, // cache it here as it is set to false in render, but used after
	                    group = series.group,
	                    xAxis = series.xAxis,
	                    yAxis = series.yAxis;

	                // reposition on resize
	                if (group) {
	                    if (chart.inverted) {
	                        group.attr({
	                            width: chart.plotWidth,
	                            height: chart.plotHeight
	                        });
	                    }

	                    group.animate({
	                        translateX: pick(xAxis && xAxis.left, chart.plotLeft),
	                        translateY: pick(yAxis && yAxis.top, chart.plotTop)
	                    });
	                }

	                series.translate();
	                series.render();
	                if (wasDirty) { // #3868, #3945
	                    delete this.kdTree;
	                }
	            },

	            /**
	             * KD Tree && PointSearching Implementation
	             */

	            kdDimensions: 1,
	            kdAxisArray: ['clientX', 'plotY'],

	            searchPoint: function(e, compareX) {
	                var series = this,
	                    xAxis = series.xAxis,
	                    yAxis = series.yAxis,
	                    inverted = series.chart.inverted;

	                return this.searchKDTree({
	                    clientX: inverted ? xAxis.len - e.chartY + xAxis.pos : e.chartX - xAxis.pos,
	                    plotY: inverted ? yAxis.len - e.chartX + yAxis.pos : e.chartY - yAxis.pos
	                }, compareX);
	            },

	            /**
	             * Build the k-d-tree that is used by mouse and touch interaction to get the
	             * closest point. Line-like series typically have a one-dimensional tree 
	             * where points are searched along the X axis, while scatter-like series
	             * typically search in two dimensions, X and Y.
	             */
	            buildKDTree: function() {

	                // Prevent multiple k-d-trees from being built simultaneously (#6235)
	                this.buildingKdTree = true;

	                var series = this,
	                    dimensions = series.kdDimensions;

	                // Internal function
	                function _kdtree(points, depth, dimensions) {
	                    var axis,
	                        median,
	                        length = points && points.length;

	                    if (length) {

	                        // alternate between the axis
	                        axis = series.kdAxisArray[depth % dimensions];

	                        // sort point array
	                        points.sort(function(a, b) {
	                            return a[axis] - b[axis];
	                        });

	                        median = Math.floor(length / 2);

	                        // build and return nod
	                        return {
	                            point: points[median],
	                            left: _kdtree(points.slice(0, median), depth + 1, dimensions),
	                            right: _kdtree(points.slice(median + 1), depth + 1, dimensions)
	                        };

	                    }
	                }

	                // Start the recursive build process with a clone of the points array and null points filtered out (#3873)
	                function startRecursive() {
	                    series.kdTree = _kdtree(
	                        series.getValidPoints(
	                            null, !series.directTouch // For line-type series restrict to plot area, but column-type series not (#3916, #4511)
	                        ),
	                        dimensions,
	                        dimensions
	                    );
	                    series.buildingKdTree = false;
	                }
	                delete series.kdTree;

	                // For testing tooltips, don't build async
	                syncTimeout(startRecursive, series.options.kdNow ? 0 : 1);
	            },

	            searchKDTree: function(point, compareX) {
	                var series = this,
	                    kdX = this.kdAxisArray[0],
	                    kdY = this.kdAxisArray[1],
	                    kdComparer = compareX ? 'distX' : 'dist';

	                // Set the one and two dimensional distance on the point object
	                function setDistance(p1, p2) {
	                    var x = (defined(p1[kdX]) && defined(p2[kdX])) ? Math.pow(p1[kdX] - p2[kdX], 2) : null,
	                        y = (defined(p1[kdY]) && defined(p2[kdY])) ? Math.pow(p1[kdY] - p2[kdY], 2) : null,
	                        r = (x || 0) + (y || 0);

	                    p2.dist = defined(r) ? Math.sqrt(r) : Number.MAX_VALUE;
	                    p2.distX = defined(x) ? Math.sqrt(x) : Number.MAX_VALUE;
	                }

	                function _search(search, tree, depth, dimensions) {
	                    var point = tree.point,
	                        axis = series.kdAxisArray[depth % dimensions],
	                        tdist,
	                        sideA,
	                        sideB,
	                        ret = point,
	                        nPoint1,
	                        nPoint2;

	                    setDistance(search, point);

	                    // Pick side based on distance to splitting point
	                    tdist = search[axis] - point[axis];
	                    sideA = tdist < 0 ? 'left' : 'right';
	                    sideB = tdist < 0 ? 'right' : 'left';

	                    // End of tree
	                    if (tree[sideA]) {
	                        nPoint1 = _search(search, tree[sideA], depth + 1, dimensions);

	                        ret = (nPoint1[kdComparer] < ret[kdComparer] ? nPoint1 : point);
	                    }
	                    if (tree[sideB]) {
	                        // compare distance to current best to splitting point to decide wether to check side B or not
	                        if (Math.sqrt(tdist * tdist) < ret[kdComparer]) {
	                            nPoint2 = _search(search, tree[sideB], depth + 1, dimensions);
	                            ret = (nPoint2[kdComparer] < ret[kdComparer] ? nPoint2 : ret);
	                        }
	                    }

	                    return ret;
	                }

	                if (!this.kdTree && !this.buildingKdTree) {
	                    this.buildKDTree();
	                }

	                if (this.kdTree) {
	                    return _search(point,
	                        this.kdTree, this.kdDimensions, this.kdDimensions);
	                }
	            }

	        }); // end Series prototype

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var Axis = H.Axis,
	            Chart = H.Chart,
	            correctFloat = H.correctFloat,
	            defined = H.defined,
	            destroyObjectProperties = H.destroyObjectProperties,
	            each = H.each,
	            format = H.format,
	            pick = H.pick,
	            Series = H.Series;

	        /**
	         * The class for stacks. Each stack, on a specific X value and either negative
	         * or positive, has its own stack item.
	         *
	         * @class
	         */
	        function StackItem(axis, options, isNegative, x, stackOption) {

	            var inverted = axis.chart.inverted;

	            this.axis = axis;

	            // Tells if the stack is negative
	            this.isNegative = isNegative;

	            // Save the options to be able to style the label
	            this.options = options;

	            // Save the x value to be able to position the label later
	            this.x = x;

	            // Initialize total value
	            this.total = null;

	            // This will keep each points' extremes stored by series.index and point 
	            // index
	            this.points = {};

	            // Save the stack option on the series configuration object, and whether to 
	            // treat it as percent
	            this.stack = stackOption;
	            this.leftCliff = 0;
	            this.rightCliff = 0;

	            // The align options and text align varies on whether the stack is negative 
	            // and if the chart is inverted or not.
	            // First test the user supplied value, then use the dynamic.
	            this.alignOptions = {
	                align: options.align ||
	                    (inverted ? (isNegative ? 'left' : 'right') : 'center'),
	                verticalAlign: options.verticalAlign ||
	                    (inverted ? 'middle' : (isNegative ? 'bottom' : 'top')),
	                y: pick(options.y, inverted ? 4 : (isNegative ? 14 : -6)),
	                x: pick(options.x, inverted ? (isNegative ? -6 : 6) : 0)
	            };

	            this.textAlign = options.textAlign ||
	                (inverted ? (isNegative ? 'right' : 'left') : 'center');
	        }

	        StackItem.prototype = {
	            destroy: function() {
	                destroyObjectProperties(this, this.axis);
	            },

	            /**
	             * Renders the stack total label and adds it to the stack label group.
	             */
	            render: function(group) {
	                var options = this.options,
	                    formatOption = options.format,
	                    str = formatOption ?
	                    format(formatOption, this) :
	                    options.formatter.call(this); // format the text in the label

	                // Change the text to reflect the new total and set visibility to hidden
	                // in case the serie is hidden
	                if (this.label) {
	                    this.label.attr({
	                        text: str,
	                        visibility: 'hidden'
	                    });
	                    // Create new label
	                } else {
	                    this.label =
	                        this.axis.chart.renderer.text(str, null, null, options.useHTML)
	                        .css(options.style)
	                        .attr({
	                            align: this.textAlign,
	                            rotation: options.rotation,
	                            visibility: 'hidden' // hidden until setOffset is called
	                        })
	                        .add(group); // add to the labels-group
	                }
	            },

	            /**
	             * Sets the offset that the stack has from the x value and repositions the
	             * label.
	             */
	            setOffset: function(xOffset, xWidth) {
	                var stackItem = this,
	                    axis = stackItem.axis,
	                    chart = axis.chart,
	                    inverted = chart.inverted,
	                    reversed = axis.reversed,
	                    neg = (this.isNegative && !reversed) ||
	                    (!this.isNegative && reversed), // #4056
	                    // stack value translated mapped to chart coordinates
	                    y = axis.translate(
	                        axis.usePercentage ? 100 : this.total,
	                        0,
	                        0,
	                        0,
	                        1
	                    ),
	                    yZero = axis.translate(0), // stack origin
	                    h = Math.abs(y - yZero), // stack height
	                    x = chart.xAxis[0].translate(this.x) + xOffset, // stack x position
	                    plotHeight = chart.plotHeight,
	                    stackBox = { // this is the box for the complete stack
	                        x: inverted ? (neg ? y : y - h) : x,
	                        y: inverted ?
	                            plotHeight - x - xWidth : (neg ? (plotHeight - y - h) :
	                                plotHeight - y),
	                        width: inverted ? h : xWidth,
	                        height: inverted ? xWidth : h
	                    },
	                    label = this.label,
	                    alignAttr;

	                if (label) {
	                    // Align the label to the box
	                    label.align(this.alignOptions, null, stackBox);

	                    // Set visibility (#678)
	                    alignAttr = label.alignAttr;
	                    label[
	                        this.options.crop === false || chart.isInsidePlot(
	                            alignAttr.x,
	                            alignAttr.y
	                        ) ? 'show' : 'hide'](true);
	                }
	            }
	        };

	        /**
	         * Generate stacks for each series and calculate stacks total values
	         */
	        Chart.prototype.getStacks = function() {
	            var chart = this;

	            // reset stacks for each yAxis
	            each(chart.yAxis, function(axis) {
	                if (axis.stacks && axis.hasVisibleSeries) {
	                    axis.oldStacks = axis.stacks;
	                }
	            });

	            each(chart.series, function(series) {
	                if (series.options.stacking && (series.visible === true ||
	                        chart.options.chart.ignoreHiddenSeries === false)) {
	                    series.stackKey = series.type + pick(series.options.stack, '');
	                }
	            });
	        };


	        // Stacking methods defined on the Axis prototype

	        /**
	         * Build the stacks from top down
	         */
	        Axis.prototype.buildStacks = function() {
	            var axisSeries = this.series,
	                series,
	                reversedStacks = pick(this.options.reversedStacks, true),
	                len = axisSeries.length,
	                i;
	            if (!this.isXAxis) {
	                this.usePercentage = false;
	                i = len;
	                while (i--) {
	                    axisSeries[reversedStacks ? i : len - i - 1].setStackedPoints();
	                }

	                i = len;
	                while (i--) {
	                    series = axisSeries[reversedStacks ? i : len - i - 1];
	                    if (series.setStackCliffs) {
	                        series.setStackCliffs();
	                    }
	                }
	                // Loop up again to compute percent stack
	                if (this.usePercentage) {
	                    for (i = 0; i < len; i++) {
	                        axisSeries[i].setPercentStacks();
	                    }
	                }
	            }
	        };

	        Axis.prototype.renderStackTotals = function() {
	            var axis = this,
	                chart = axis.chart,
	                renderer = chart.renderer,
	                stacks = axis.stacks,
	                stackKey,
	                oneStack,
	                stackCategory,
	                stackTotalGroup = axis.stackTotalGroup;

	            // Create a separate group for the stack total labels
	            if (!stackTotalGroup) {
	                axis.stackTotalGroup = stackTotalGroup =
	                    renderer.g('stack-labels')
	                    .attr({
	                        visibility: 'visible',
	                        zIndex: 6
	                    })
	                    .add();
	            }

	            // plotLeft/Top will change when y axis gets wider so we need to translate
	            // the stackTotalGroup at every render call. See bug #506 and #516
	            stackTotalGroup.translate(chart.plotLeft, chart.plotTop);

	            // Render each stack total
	            for (stackKey in stacks) {
	                oneStack = stacks[stackKey];
	                for (stackCategory in oneStack) {
	                    oneStack[stackCategory].render(stackTotalGroup);
	                }
	            }
	        };

	        /**
	         * Set all the stacks to initial states and destroy unused ones.
	         */
	        Axis.prototype.resetStacks = function() {
	            var stacks = this.stacks,
	                type,
	                i;
	            if (!this.isXAxis) {
	                for (type in stacks) {
	                    for (i in stacks[type]) {

	                        // Clean up memory after point deletion (#1044, #4320)
	                        if (stacks[type][i].touched < this.stacksTouched) {
	                            stacks[type][i].destroy();
	                            delete stacks[type][i];

	                            // Reset stacks
	                        } else {
	                            stacks[type][i].total = null;
	                            stacks[type][i].cum = null;
	                        }
	                    }
	                }
	            }
	        };

	        Axis.prototype.cleanStacks = function() {
	            var stacks, type, i;

	            if (!this.isXAxis) {
	                if (this.oldStacks) {
	                    stacks = this.stacks = this.oldStacks;
	                }

	                // reset stacks
	                for (type in stacks) {
	                    for (i in stacks[type]) {
	                        stacks[type][i].cum = stacks[type][i].total;
	                    }
	                }
	            }
	        };


	        // Stacking methods defnied for Series prototype

	        /**
	         * Adds series' points value to corresponding stack
	         */
	        Series.prototype.setStackedPoints = function() {
	            if (!this.options.stacking || (this.visible !== true &&
	                    this.chart.options.chart.ignoreHiddenSeries !== false)) {
	                return;
	            }

	            var series = this,
	                xData = series.processedXData,
	                yData = series.processedYData,
	                stackedYData = [],
	                yDataLength = yData.length,
	                seriesOptions = series.options,
	                threshold = seriesOptions.threshold,
	                stackThreshold = seriesOptions.startFromThreshold ? threshold : 0,
	                stackOption = seriesOptions.stack,
	                stacking = seriesOptions.stacking,
	                stackKey = series.stackKey,
	                negKey = '-' + stackKey,
	                negStacks = series.negStacks,
	                yAxis = series.yAxis,
	                stacks = yAxis.stacks,
	                oldStacks = yAxis.oldStacks,
	                stackIndicator,
	                isNegative,
	                stack,
	                other,
	                key,
	                pointKey,
	                i,
	                x,
	                y;


	            yAxis.stacksTouched += 1;

	            // loop over the non-null y values and read them into a local array
	            for (i = 0; i < yDataLength; i++) {
	                x = xData[i];
	                y = yData[i];
	                stackIndicator = series.getStackIndicator(
	                    stackIndicator,
	                    x,
	                    series.index
	                );
	                pointKey = stackIndicator.key;
	                // Read stacked values into a stack based on the x value,
	                // the sign of y and the stack key. Stacking is also handled for null
	                // values (#739)
	                isNegative = negStacks && y < (stackThreshold ? 0 : threshold);
	                key = isNegative ? negKey : stackKey;

	                // Create empty object for this stack if it doesn't exist yet
	                if (!stacks[key]) {
	                    stacks[key] = {};
	                }

	                // Initialize StackItem for this x
	                if (!stacks[key][x]) {
	                    if (oldStacks[key] && oldStacks[key][x]) {
	                        stacks[key][x] = oldStacks[key][x];
	                        stacks[key][x].total = null;
	                    } else {
	                        stacks[key][x] = new StackItem(
	                            yAxis,
	                            yAxis.options.stackLabels,
	                            isNegative,
	                            x,
	                            stackOption
	                        );
	                    }
	                }

	                // If the StackItem doesn't exist, create it first
	                stack = stacks[key][x];
	                if (y !== null) {
	                    stack.points[pointKey] = stack.points[series.index] = [pick(stack.cum, stackThreshold)];

	                    // Record the base of the stack
	                    if (!defined(stack.cum)) {
	                        stack.base = pointKey;
	                    }
	                    stack.touched = yAxis.stacksTouched;


	                    // In area charts, if there are multiple points on the same X value,
	                    // let the area fill the full span of those points
	                    if (stackIndicator.index > 0 && series.singleStacks === false) {
	                        stack.points[pointKey][0] =
	                            stack.points[series.index + ',' + x + ',0'][0];
	                    }
	                }

	                // Add value to the stack total
	                if (stacking === 'percent') {

	                    // Percent stacked column, totals are the same for the positive and
	                    // negative stacks
	                    other = isNegative ? stackKey : negKey;
	                    if (negStacks && stacks[other] && stacks[other][x]) {
	                        other = stacks[other][x];
	                        stack.total = other.total =
	                            Math.max(other.total, stack.total) + Math.abs(y) || 0;

	                        // Percent stacked areas
	                    } else {
	                        stack.total = correctFloat(stack.total + (Math.abs(y) || 0));
	                    }
	                } else {
	                    stack.total = correctFloat(stack.total + (y || 0));
	                }

	                stack.cum = pick(stack.cum, stackThreshold) + (y || 0);

	                if (y !== null) {
	                    stack.points[pointKey].push(stack.cum);
	                    stackedYData[i] = stack.cum;
	                }

	            }

	            if (stacking === 'percent') {
	                yAxis.usePercentage = true;
	            }

	            this.stackedYData = stackedYData; // To be used in getExtremes

	            // Reset old stacks
	            yAxis.oldStacks = {};
	        };

	        /**
	         * Iterate over all stacks and compute the absolute values to percent
	         */
	        Series.prototype.setPercentStacks = function() {
	            var series = this,
	                stackKey = series.stackKey,
	                stacks = series.yAxis.stacks,
	                processedXData = series.processedXData,
	                stackIndicator;

	            each([stackKey, '-' + stackKey], function(key) {
	                var i = processedXData.length,
	                    x,
	                    stack,
	                    pointExtremes,
	                    totalFactor;

	                while (i--) {
	                    x = processedXData[i];
	                    stackIndicator = series.getStackIndicator(
	                        stackIndicator,
	                        x,
	                        series.index,
	                        key
	                    );
	                    stack = stacks[key] && stacks[key][x];
	                    pointExtremes = stack && stack.points[stackIndicator.key];
	                    if (pointExtremes) {
	                        totalFactor = stack.total ? 100 / stack.total : 0;
	                        // Y bottom value
	                        pointExtremes[0] = correctFloat(pointExtremes[0] * totalFactor);
	                        // Y value
	                        pointExtremes[1] = correctFloat(pointExtremes[1] * totalFactor);
	                        series.stackedYData[i] = pointExtremes[1];
	                    }
	                }
	            });
	        };

	        /**
	         * Get stack indicator, according to it's x-value, to determine points with the
	         * same x-value
	         */
	        Series.prototype.getStackIndicator = function(stackIndicator, x, index, key) {
	            // Update stack indicator, when:
	            // first point in a stack || x changed || stack type (negative vs positive)
	            // changed:
	            if (!defined(stackIndicator) || stackIndicator.x !== x ||
	                (key && stackIndicator.key !== key)) {
	                stackIndicator = {
	                    x: x,
	                    index: 0,
	                    key: key
	                };
	            } else {
	                stackIndicator.index++;
	            }

	            stackIndicator.key = [index, x, stackIndicator.index].join(',');

	            return stackIndicator;
	        };

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            animate = H.animate,
	            Axis = H.Axis,
	            Chart = H.Chart,
	            createElement = H.createElement,
	            css = H.css,
	            defined = H.defined,
	            each = H.each,
	            erase = H.erase,
	            extend = H.extend,
	            fireEvent = H.fireEvent,
	            inArray = H.inArray,
	            isNumber = H.isNumber,
	            isObject = H.isObject,
	            merge = H.merge,
	            pick = H.pick,
	            Point = H.Point,
	            Series = H.Series,
	            seriesTypes = H.seriesTypes,
	            setAnimation = H.setAnimation,
	            splat = H.splat;

	        // Extend the Chart prototype for dynamic methods
	        extend(Chart.prototype, /** @lends Highcharts.Chart.prototype */ {

	            /**
	             * Add a series dynamically after  time
	             *
	             * @param {Object} options The config options
	             * @param {Boolean} redraw Whether to redraw the chart after adding. Defaults to true.
	             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	             *    configuration
	             *
	             * @return {Object} series The newly created series object
	             */
	            addSeries: function(options, redraw, animation) {
	                var series,
	                    chart = this;

	                if (options) {
	                    redraw = pick(redraw, true); // defaults to true

	                    fireEvent(chart, 'addSeries', {
	                        options: options
	                    }, function() {
	                        series = chart.initSeries(options);

	                        chart.isDirtyLegend = true; // the series array is out of sync with the display
	                        chart.linkSeries();
	                        if (redraw) {
	                            chart.redraw(animation);
	                        }
	                    });
	                }

	                return series;
	            },

	            /**
	             * Add an axis to the chart
	             * @param {Object} options The axis option
	             * @param {Boolean} isX Whether it is an X axis or a value axis
	             */
	            addAxis: function(options, isX, redraw, animation) {
	                var key = isX ? 'xAxis' : 'yAxis',
	                    chartOptions = this.options,
	                    userOptions = merge(options, {
	                        index: this[key].length,
	                        isX: isX
	                    });

	                new Axis(this, userOptions); // eslint-disable-line no-new

	                // Push the new axis options to the chart options
	                chartOptions[key] = splat(chartOptions[key] || {});
	                chartOptions[key].push(userOptions);

	                if (pick(redraw, true)) {
	                    this.redraw(animation);
	                }
	            },

	            /**
	             * Dim the chart and show a loading text or symbol
	             * @param {String} str An optional text to show in the loading label instead of the default one
	             */
	            showLoading: function(str) {
	                var chart = this,
	                    options = chart.options,
	                    loadingDiv = chart.loadingDiv,
	                    loadingOptions = options.loading,
	                    setLoadingSize = function() {
	                        if (loadingDiv) {
	                            css(loadingDiv, {
	                                left: chart.plotLeft + 'px',
	                                top: chart.plotTop + 'px',
	                                width: chart.plotWidth + 'px',
	                                height: chart.plotHeight + 'px'
	                            });
	                        }
	                    };

	                // create the layer at the first call
	                if (!loadingDiv) {
	                    chart.loadingDiv = loadingDiv = createElement('div', {
	                        className: 'highcharts-loading highcharts-loading-hidden'
	                    }, null, chart.container);

	                    chart.loadingSpan = createElement(
	                        'span', {
	                            className: 'highcharts-loading-inner'
	                        },
	                        null,
	                        loadingDiv
	                    );
	                    addEvent(chart, 'redraw', setLoadingSize); // #1080
	                }

	                loadingDiv.className = 'highcharts-loading';

	                // Update text
	                chart.loadingSpan.innerHTML = str || options.lang.loading;


	                // Update visuals
	                css(loadingDiv, extend(loadingOptions.style, {
	                    zIndex: 10
	                }));
	                css(chart.loadingSpan, loadingOptions.labelStyle);

	                // Show it
	                if (!chart.loadingShown) {
	                    css(loadingDiv, {
	                        opacity: 0,
	                        display: ''
	                    });
	                    animate(loadingDiv, {
	                        opacity: loadingOptions.style.opacity || 0.5
	                    }, {
	                        duration: loadingOptions.showDuration || 0
	                    });
	                }


	                chart.loadingShown = true;
	                setLoadingSize();
	            },

	            /**
	             * Hide the loading layer
	             */
	            hideLoading: function() {
	                var options = this.options,
	                    loadingDiv = this.loadingDiv;

	                if (loadingDiv) {
	                    loadingDiv.className = 'highcharts-loading highcharts-loading-hidden';

	                    animate(loadingDiv, {
	                        opacity: 0
	                    }, {
	                        duration: options.loading.hideDuration || 100,
	                        complete: function() {
	                            css(loadingDiv, {
	                                display: 'none'
	                            });
	                        }
	                    });

	                }
	                this.loadingShown = false;
	            },

	            /** 
	             * These properties cause isDirtyBox to be set to true when updating. Can be extended from plugins.
	             */
	            propsRequireDirtyBox: ['backgroundColor', 'borderColor', 'borderWidth', 'margin', 'marginTop', 'marginRight',
	                'marginBottom', 'marginLeft', 'spacing', 'spacingTop', 'spacingRight', 'spacingBottom', 'spacingLeft',
	                'borderRadius', 'plotBackgroundColor', 'plotBackgroundImage', 'plotBorderColor', 'plotBorderWidth',
	                'plotShadow', 'shadow'
	            ],

	            /** 
	             * These properties cause all series to be updated when updating. Can be
	             * extended from plugins.
	             */
	            propsRequireUpdateSeries: ['chart.inverted', 'chart.polar',
	                'chart.ignoreHiddenSeries', 'chart.type', 'colors', 'plotOptions'
	            ],

	            /**
	             * Chart.update function that takes the whole options stucture.
	             */
	            update: function(options, redraw) {
	                var key,
	                    adders = {
	                        credits: 'addCredits',
	                        title: 'setTitle',
	                        subtitle: 'setSubtitle'
	                    },
	                    optionsChart = options.chart,
	                    updateAllAxes,
	                    updateAllSeries,
	                    newWidth,
	                    newHeight;

	                // If the top-level chart option is present, some special updates are required		
	                if (optionsChart) {
	                    merge(true, this.options.chart, optionsChart);

	                    // Setter function
	                    if ('className' in optionsChart) {
	                        this.setClassName(optionsChart.className);
	                    }

	                    if ('inverted' in optionsChart || 'polar' in optionsChart) {
	                        this.propFromSeries(); // Parses options.chart.inverted and options.chart.polar together with the available series
	                        updateAllAxes = true;
	                    }

	                    for (key in optionsChart) {
	                        if (optionsChart.hasOwnProperty(key)) {
	                            if (inArray('chart.' + key, this.propsRequireUpdateSeries) !== -1) {
	                                updateAllSeries = true;
	                            }
	                            // Only dirty box
	                            if (inArray(key, this.propsRequireDirtyBox) !== -1) {
	                                this.isDirtyBox = true;
	                            }

	                        }
	                    }


	                    if ('style' in optionsChart) {
	                        this.renderer.setStyle(optionsChart.style);
	                    }

	                }

	                // Some option stuctures correspond one-to-one to chart objects that have
	                // update methods, for example
	                // options.credits => chart.credits
	                // options.legend => chart.legend
	                // options.title => chart.title
	                // options.tooltip => chart.tooltip
	                // options.subtitle => chart.subtitle
	                // options.navigator => chart.navigator
	                // options.scrollbar => chart.scrollbar
	                for (key in options) {
	                    if (this[key] && typeof this[key].update === 'function') {
	                        this[key].update(options[key], false);

	                        // If a one-to-one object does not exist, look for an adder function
	                    } else if (typeof this[adders[key]] === 'function') {
	                        this[adders[key]](options[key]);
	                    }

	                    if (key !== 'chart' && inArray(key, this.propsRequireUpdateSeries) !== -1) {
	                        updateAllSeries = true;
	                    }
	                }


	                if (options.colors) {
	                    this.options.colors = options.colors;
	                }


	                if (options.plotOptions) {
	                    merge(true, this.options.plotOptions, options.plotOptions);
	                }

	                // Setters for collections. For axes and series, each item is referred
	                // by an id. If the id is not found, it defaults to the corresponding
	                // item in the collection, so setting one series without an id, will
	                // update the first series in the chart. Setting two series without
	                // an id will update the first and the second respectively (#6019)
	                // // docs: New behaviour for unidentified items, add it to docs for 
	                // chart.update and responsive.
	                each(['xAxis', 'yAxis', 'series'], function(coll) {
	                    if (options[coll]) {
	                        each(splat(options[coll]), function(newOptions, i) {
	                            var item = (
	                                defined(newOptions.id) &&
	                                this.get(newOptions.id)
	                            ) || this[coll][i];
	                            if (item && item.coll === coll) {
	                                item.update(newOptions, false);
	                            }
	                        }, this);
	                    }
	                }, this);

	                if (updateAllAxes) {
	                    each(this.axes, function(axis) {
	                        axis.update({}, false);
	                    });
	                }

	                // Certain options require the whole series structure to be thrown away
	                // and rebuilt
	                if (updateAllSeries) {
	                    each(this.series, function(series) {
	                        series.update({}, false);
	                    });
	                }

	                // For loading, just update the options, do not redraw
	                if (options.loading) {
	                    merge(true, this.options.loading, options.loading);
	                }

	                // Update size. Redraw is forced.
	                newWidth = optionsChart && optionsChart.width;
	                newHeight = optionsChart && optionsChart.height;
	                if ((isNumber(newWidth) && newWidth !== this.chartWidth) ||
	                    (isNumber(newHeight) && newHeight !== this.chartHeight)) {
	                    this.setSize(newWidth, newHeight);
	                } else if (pick(redraw, true)) {
	                    this.redraw();
	                }
	            },

	            /**
	             * Setter function to allow use from chart.update
	             */
	            setSubtitle: function(options) {
	                this.setTitle(undefined, options);
	            }


	        });

	        // extend the Point prototype for dynamic methods
	        extend(Point.prototype, /** @lends Point.prototype */ {
	            /**
	             * Point.update with new options (typically x/y data) and optionally redraw the series.
	             *
	             * @param {Object} options Point options as defined in the series.data array
	             * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
	             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	             *    configuration
	             */
	            update: function(options, redraw, animation, runEvent) {
	                var point = this,
	                    series = point.series,
	                    graphic = point.graphic,
	                    i,
	                    chart = series.chart,
	                    seriesOptions = series.options;

	                redraw = pick(redraw, true);

	                function update() {

	                    point.applyOptions(options);

	                    // Update visuals
	                    if (point.y === null && graphic) { // #4146
	                        point.graphic = graphic.destroy();
	                    }
	                    if (isObject(options, true)) {
	                        // Destroy so we can get new elements
	                        if (graphic && graphic.element) {
	                            if (options && options.marker && options.marker.symbol) {
	                                point.graphic = graphic.destroy();
	                            }
	                        }
	                        if (options && options.dataLabels && point.dataLabel) { // #2468
	                            point.dataLabel = point.dataLabel.destroy();
	                        }
	                    }

	                    // record changes in the parallel arrays
	                    i = point.index;
	                    series.updateParallelArrays(point, i);

	                    // Record the options to options.data. If there is an object from before,
	                    // use point options, otherwise use raw options. (#4701)
	                    seriesOptions.data[i] = isObject(seriesOptions.data[i], true) ? point.options : options;

	                    // redraw
	                    series.isDirty = series.isDirtyData = true;
	                    if (!series.fixedBox && series.hasCartesianSeries) { // #1906, #2320
	                        chart.isDirtyBox = true;
	                    }

	                    if (seriesOptions.legendType === 'point') { // #1831, #1885
	                        chart.isDirtyLegend = true;
	                    }
	                    if (redraw) {
	                        chart.redraw(animation);
	                    }
	                }

	                // Fire the event with a default handler of doing the update
	                if (runEvent === false) { // When called from setData
	                    update();
	                } else {
	                    point.firePointEvent('update', {
	                        options: options
	                    }, update);
	                }
	            },

	            /**
	             * Remove a point and optionally redraw the series and if necessary the axes
	             * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
	             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	             *    configuration
	             */
	            remove: function(redraw, animation) {
	                this.series.removePoint(inArray(this, this.series.data), redraw, animation);
	            }
	        });

	        // Extend the series prototype for dynamic methods
	        extend(Series.prototype, /** @lends Series.prototype */ {
	            /**
	             * Add a point dynamically after chart load time
	             * @param {Object} options Point options as given in series.data
	             * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
	             * @param {Boolean} shift If shift is true, a point is shifted off the start
	             *    of the series as one is appended to the end.
	             * @param {Boolean|AnimationOptions} animation Whether to apply animation, and optionally animation
	             *    configuration
	             */
	            addPoint: function(options, redraw, shift, animation) {
	                var series = this,
	                    seriesOptions = series.options,
	                    data = series.data,
	                    chart = series.chart,
	                    xAxis = series.xAxis,
	                    names = xAxis && xAxis.hasNames && xAxis.names,
	                    dataOptions = seriesOptions.data,
	                    point,
	                    isInTheMiddle,
	                    xData = series.xData,
	                    i,
	                    x;

	                // Optional redraw, defaults to true
	                redraw = pick(redraw, true);

	                // Get options and push the point to xData, yData and series.options. In series.generatePoints
	                // the Point instance will be created on demand and pushed to the series.data array.
	                point = {
	                    series: series
	                };
	                series.pointClass.prototype.applyOptions.apply(point, [options]);
	                x = point.x;

	                // Get the insertion point
	                i = xData.length;
	                if (series.requireSorting && x < xData[i - 1]) {
	                    isInTheMiddle = true;
	                    while (i && xData[i - 1] > x) {
	                        i--;
	                    }
	                }

	                series.updateParallelArrays(point, 'splice', i, 0, 0); // insert undefined item
	                series.updateParallelArrays(point, i); // update it

	                if (names && point.name) {
	                    names[x] = point.name;
	                }
	                dataOptions.splice(i, 0, options);

	                if (isInTheMiddle) {
	                    series.data.splice(i, 0, null);
	                    series.processData();
	                }

	                // Generate points to be added to the legend (#1329)
	                if (seriesOptions.legendType === 'point') {
	                    series.generatePoints();
	                }

	                // Shift the first point off the parallel arrays
	                if (shift) {
	                    if (data[0] && data[0].remove) {
	                        data[0].remove(false);
	                    } else {
	                        data.shift();
	                        series.updateParallelArrays(point, 'shift');

	                        dataOptions.shift();
	                    }
	                }

	                // redraw
	                series.isDirty = true;
	                series.isDirtyData = true;

	                if (redraw) {
	                    chart.redraw(animation); // Animation is set anyway on redraw, #5665
	                }
	            },

	            /**
	             * Remove a point (rendered or not), by index
	             */
	            removePoint: function(i, redraw, animation) {

	                var series = this,
	                    data = series.data,
	                    point = data[i],
	                    points = series.points,
	                    chart = series.chart,
	                    remove = function() {

	                        if (points && points.length === data.length) { // #4935
	                            points.splice(i, 1);
	                        }
	                        data.splice(i, 1);
	                        series.options.data.splice(i, 1);
	                        series.updateParallelArrays(point || {
	                            series: series
	                        }, 'splice', i, 1);

	                        if (point) {
	                            point.destroy();
	                        }

	                        // redraw
	                        series.isDirty = true;
	                        series.isDirtyData = true;
	                        if (redraw) {
	                            chart.redraw();
	                        }
	                    };

	                setAnimation(animation, chart);
	                redraw = pick(redraw, true);

	                // Fire the event with a default handler of removing the point
	                if (point) {
	                    point.firePointEvent('remove', null, remove);
	                } else {
	                    remove();
	                }
	            },

	            /**
	             * Remove a series and optionally redraw the chart
	             *
	             * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
	             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	             *    configuration
	             */
	            remove: function(redraw, animation, withEvent) {
	                var series = this,
	                    chart = series.chart;

	                function remove() {

	                    // Destroy elements
	                    series.destroy();

	                    // Redraw
	                    chart.isDirtyLegend = chart.isDirtyBox = true;
	                    chart.linkSeries();

	                    if (pick(redraw, true)) {
	                        chart.redraw(animation);
	                    }
	                }

	                // Fire the event with a default handler of removing the point
	                if (withEvent !== false) {
	                    fireEvent(series, 'remove', null, remove);
	                } else {
	                    remove();
	                }
	            },

	            /**
	             * Series.update with a new set of options
	             */
	            update: function(newOptions, redraw) {
	                var series = this,
	                    chart = this.chart,
	                    // must use user options when changing type because this.options is merged
	                    // in with type specific plotOptions
	                    oldOptions = this.userOptions,
	                    oldType = this.type,
	                    newType = newOptions.type || oldOptions.type || chart.options.chart.type,
	                    proto = seriesTypes[oldType].prototype,
	                    preserve = ['group', 'markerGroup', 'dataLabelsGroup'],
	                    n;

	                // If we're changing type or zIndex, create new groups (#3380, #3404)
	                if ((newType && newType !== oldType) || newOptions.zIndex !== undefined) {
	                    preserve.length = 0;
	                }

	                // Make sure groups are not destroyed (#3094)
	                each(preserve, function(prop) {
	                    preserve[prop] = series[prop];
	                    delete series[prop];
	                });

	                // Do the merge, with some forced options
	                newOptions = merge(oldOptions, {
	                    animation: false,
	                    index: this.index,
	                    pointStart: this.xData[0] // when updating after addPoint
	                }, {
	                    data: this.options.data
	                }, newOptions);

	                // Destroy the series and delete all properties. Reinsert all methods
	                // and properties from the new type prototype (#2270, #3719)
	                this.remove(false, null, false);
	                for (n in proto) {
	                    this[n] = undefined;
	                }
	                extend(this, seriesTypes[newType || oldType].prototype);

	                // Re-register groups (#3094)
	                each(preserve, function(prop) {
	                    series[prop] = preserve[prop];
	                });

	                this.init(chart, newOptions);
	                chart.linkSeries(); // Links are lost in this.remove (#3028)
	                if (pick(redraw, true)) {
	                    chart.redraw(false);
	                }
	            }
	        });

	        // Extend the Axis.prototype for dynamic methods
	        extend(Axis.prototype, /** @lends Axis.prototype */ {

	            /**
	             * Axis.update with a new options structure
	             */
	            update: function(newOptions, redraw) {
	                var chart = this.chart;

	                newOptions = chart.options[this.coll][this.options.index] = merge(this.userOptions, newOptions);

	                this.destroy(true);

	                this.init(chart, extend(newOptions, {
	                    events: undefined
	                }));

	                chart.isDirtyBox = true;
	                if (pick(redraw, true)) {
	                    chart.redraw();
	                }
	            },

	            /**
	             * Remove the axis from the chart
	             */
	            remove: function(redraw) {
	                var chart = this.chart,
	                    key = this.coll, // xAxis or yAxis
	                    axisSeries = this.series,
	                    i = axisSeries.length;

	                // Remove associated series (#2687)
	                while (i--) {
	                    if (axisSeries[i]) {
	                        axisSeries[i].remove(false);
	                    }
	                }

	                // Remove the axis
	                erase(chart.axes, this);
	                erase(chart[key], this);
	                chart.options[key].splice(this.options.index, 1);
	                each(chart[key], function(axis, i) { // Re-index, #1706
	                    axis.options.index = i;
	                });
	                this.destroy();
	                chart.isDirtyBox = true;

	                if (pick(redraw, true)) {
	                    chart.redraw();
	                }
	            },

	            /**
	             * Update the axis title by options
	             */
	            setTitle: function(newTitleOptions, redraw) {
	                this.update({
	                    title: newTitleOptions
	                }, redraw);
	            },

	            /**
	             * Set new axis categories and optionally redraw
	             * @param {Array} categories
	             * @param {Boolean} redraw
	             */
	            setCategories: function(categories, redraw) {
	                this.update({
	                    categories: categories
	                }, redraw);
	            }

	        });

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var color = H.color,
	            each = H.each,
	            LegendSymbolMixin = H.LegendSymbolMixin,
	            map = H.map,
	            pick = H.pick,
	            Series = H.Series,
	            seriesType = H.seriesType;

	        /**
	         * Area series type.
	         * @constructor seriesTypes.area
	         * @extends {Series}
	         */
	        seriesType('area', 'line', {
	            softThreshold: false,
	            threshold: 0
	                // trackByArea: false,
	                // lineColor: null, // overrides color, but lets fillColor be unaltered
	                // fillOpacity: 0.75,
	                // fillColor: null
	        }, /** @lends seriesTypes.area.prototype */ {
	            singleStacks: false,
	            /** 
	             * Return an array of stacked points, where null and missing points are replaced by 
	             * dummy points in order for gaps to be drawn correctly in stacks.
	             */
	            getStackPoints: function() {
	                var series = this,
	                    segment = [],
	                    keys = [],
	                    xAxis = this.xAxis,
	                    yAxis = this.yAxis,
	                    stack = yAxis.stacks[this.stackKey],
	                    pointMap = {},
	                    points = this.points,
	                    seriesIndex = series.index,
	                    yAxisSeries = yAxis.series,
	                    seriesLength = yAxisSeries.length,
	                    visibleSeries,
	                    upOrDown = pick(yAxis.options.reversedStacks, true) ? 1 : -1,
	                    i,
	                    x;

	                if (this.options.stacking) {
	                    // Create a map where we can quickly look up the points by their X value.
	                    for (i = 0; i < points.length; i++) {
	                        pointMap[points[i].x] = points[i];
	                    }

	                    // Sort the keys (#1651)
	                    for (x in stack) {
	                        if (stack[x].total !== null) { // nulled after switching between grouping and not (#1651, #2336)
	                            keys.push(x);
	                        }
	                    }
	                    keys.sort(function(a, b) {
	                        return a - b;
	                    });

	                    visibleSeries = map(yAxisSeries, function() {
	                        return this.visible;
	                    });

	                    each(keys, function(x, idx) {
	                        var y = 0,
	                            stackPoint,
	                            stackedValues;

	                        if (pointMap[x] && !pointMap[x].isNull) {
	                            segment.push(pointMap[x]);

	                            // Find left and right cliff. -1 goes left, 1 goes right.
	                            each([-1, 1], function(direction) {
	                                var nullName = direction === 1 ? 'rightNull' : 'leftNull',
	                                    cliffName = direction === 1 ? 'rightCliff' : 'leftCliff',
	                                    cliff = 0,
	                                    otherStack = stack[keys[idx + direction]];

	                                // If there is a stack next to this one, to the left or to the right...
	                                if (otherStack) {
	                                    i = seriesIndex;
	                                    while (i >= 0 && i < seriesLength) { // Can go either up or down, depending on reversedStacks
	                                        stackPoint = otherStack.points[i];
	                                        if (!stackPoint) {
	                                            // If the next point in this series is missing, mark the point
	                                            // with point.leftNull or point.rightNull = true.
	                                            if (i === seriesIndex) {
	                                                pointMap[x][nullName] = true;

	                                                // If there are missing points in the next stack in any of the 
	                                                // series below this one, we need to substract the missing values
	                                                // and add a hiatus to the left or right.
	                                            } else if (visibleSeries[i]) {
	                                                stackedValues = stack[x].points[i];
	                                                if (stackedValues) {
	                                                    cliff -= stackedValues[1] - stackedValues[0];
	                                                }
	                                            }
	                                        }
	                                        // When reversedStacks is true, loop up, else loop down
	                                        i += upOrDown;
	                                    }
	                                }
	                                pointMap[x][cliffName] = cliff;
	                            });


	                            // There is no point for this X value in this series, so we 
	                            // insert a dummy point in order for the areas to be drawn
	                            // correctly.
	                        } else {

	                            // Loop down the stack to find the series below this one that has
	                            // a value (#1991)
	                            i = seriesIndex;
	                            while (i >= 0 && i < seriesLength) {
	                                stackPoint = stack[x].points[i];
	                                if (stackPoint) {
	                                    y = stackPoint[1];
	                                    break;
	                                }
	                                // When reversedStacks is true, loop up, else loop down
	                                i += upOrDown;
	                            }

	                            y = yAxis.toPixels(y, true);
	                            segment.push({
	                                isNull: true,
	                                plotX: xAxis.toPixels(x, true),
	                                plotY: y,
	                                yBottom: y
	                            });
	                        }
	                    });

	                }

	                return segment;
	            },

	            getGraphPath: function(points) {
	                var getGraphPath = Series.prototype.getGraphPath,
	                    graphPath,
	                    options = this.options,
	                    stacking = options.stacking,
	                    yAxis = this.yAxis,
	                    topPath,
	                    //topPoints = [],
	                    bottomPath,
	                    bottomPoints = [],
	                    graphPoints = [],
	                    seriesIndex = this.index,
	                    i,
	                    areaPath,
	                    plotX,
	                    stacks = yAxis.stacks[this.stackKey],
	                    threshold = options.threshold,
	                    translatedThreshold = yAxis.getThreshold(options.threshold),
	                    isNull,
	                    yBottom,
	                    connectNulls = options.connectNulls || stacking === 'percent',
	                    /**
	                     * To display null points in underlying stacked series, this series graph must be 
	                     * broken, and the area also fall down to fill the gap left by the null point. #2069
	                     */
	                    addDummyPoints = function(i, otherI, side) {
	                        var point = points[i],
	                            stackedValues = stacking && stacks[point.x].points[seriesIndex],
	                            nullVal = point[side + 'Null'] || 0,
	                            cliffVal = point[side + 'Cliff'] || 0,
	                            top,
	                            bottom,
	                            isNull = true;

	                        if (cliffVal || nullVal) {

	                            top = (nullVal ? stackedValues[0] : stackedValues[1]) + cliffVal;
	                            bottom = stackedValues[0] + cliffVal;
	                            isNull = !!nullVal;

	                        } else if (!stacking && points[otherI] && points[otherI].isNull) {
	                            top = bottom = threshold;
	                        }

	                        // Add to the top and bottom line of the area
	                        if (top !== undefined) {
	                            graphPoints.push({
	                                plotX: plotX,
	                                plotY: top === null ? translatedThreshold : yAxis.getThreshold(top),
	                                isNull: isNull
	                            });
	                            bottomPoints.push({
	                                plotX: plotX,
	                                plotY: bottom === null ? translatedThreshold : yAxis.getThreshold(bottom),
	                                doCurve: false // #1041, gaps in areaspline areas
	                            });
	                        }
	                    };

	                // Find what points to use
	                points = points || this.points;

	                // Fill in missing points
	                if (stacking) {
	                    points = this.getStackPoints();
	                }

	                for (i = 0; i < points.length; i++) {
	                    isNull = points[i].isNull;
	                    plotX = pick(points[i].rectPlotX, points[i].plotX);
	                    yBottom = pick(points[i].yBottom, translatedThreshold);

	                    if (!isNull || connectNulls) {

	                        if (!connectNulls) {
	                            addDummyPoints(i, i - 1, 'left');
	                        }

	                        if (!(isNull && !stacking && connectNulls)) { // Skip null point when stacking is false and connectNulls true
	                            graphPoints.push(points[i]);
	                            bottomPoints.push({
	                                x: i,
	                                plotX: plotX,
	                                plotY: yBottom
	                            });
	                        }

	                        if (!connectNulls) {
	                            addDummyPoints(i, i + 1, 'right');
	                        }
	                    }
	                }

	                topPath = getGraphPath.call(this, graphPoints, true, true);

	                bottomPoints.reversed = true;
	                bottomPath = getGraphPath.call(this, bottomPoints, true, true);
	                if (bottomPath.length) {
	                    bottomPath[0] = 'L';
	                }

	                areaPath = topPath.concat(bottomPath);
	                graphPath = getGraphPath.call(this, graphPoints, false, connectNulls); // TODO: don't set leftCliff and rightCliff when connectNulls?

	                areaPath.xMap = topPath.xMap;
	                this.areaPath = areaPath;
	                return graphPath;
	            },

	            /**
	             * Draw the graph and the underlying area. This method calls the Series base
	             * function and adds the area. The areaPath is calculated in the getSegmentPath
	             * method called from Series.prototype.drawGraph.
	             */
	            drawGraph: function() {

	                // Define or reset areaPath
	                this.areaPath = [];

	                // Call the base method
	                Series.prototype.drawGraph.apply(this);

	                // Define local variables
	                var series = this,
	                    areaPath = this.areaPath,
	                    options = this.options,
	                    zones = this.zones,
	                    props = [
	                        [
	                            'area',
	                            'highcharts-area',

	                            this.color,
	                            options.fillColor

	                        ]
	                    ]; // area name, main color, fill color

	                each(zones, function(zone, i) {
	                    props.push([
	                        'zone-area-' + i,
	                        'highcharts-area highcharts-zone-area-' + i + ' ' + zone.className,

	                        zone.color || series.color,
	                        zone.fillColor || options.fillColor

	                    ]);
	                });

	                each(props, function(prop) {
	                    var areaKey = prop[0],
	                        area = series[areaKey];

	                    // Create or update the area
	                    if (area) { // update
	                        area.endX = areaPath.xMap;
	                        area.animate({
	                            d: areaPath
	                        });

	                    } else { // create
	                        area = series[areaKey] = series.chart.renderer.path(areaPath)
	                            .addClass(prop[1])
	                            .attr({

	                                fill: pick(
	                                    prop[3],
	                                    color(prop[2]).setOpacity(pick(options.fillOpacity, 0.75)).get()
	                                ),

	                                zIndex: 0 // #1069
	                            }).add(series.group);
	                        area.isArea = true;
	                    }
	                    area.startX = areaPath.xMap;
	                    area.shiftUnit = options.step ? 2 : 1;
	                });
	            },

	            drawLegendSymbol: LegendSymbolMixin.drawRectangle
	        });

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var pick = H.pick,
	            seriesType = H.seriesType;

	        /**
	         * Spline series type.
	         * @constructor seriesTypes.spline
	         * @extends {Series}
	         */
	        seriesType('spline', 'line', {}, /** @lends seriesTypes.spline.prototype */ {
	            /**
	             * Get the spline segment from a given point's previous neighbour to the given point
	             */
	            getPointSpline: function(points, point, i) {
	                var smoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc
	                    denom = smoothing + 1,
	                    plotX = point.plotX,
	                    plotY = point.plotY,
	                    lastPoint = points[i - 1],
	                    nextPoint = points[i + 1],
	                    leftContX,
	                    leftContY,
	                    rightContX,
	                    rightContY,
	                    ret;

	                function doCurve(otherPoint) {
	                    return otherPoint && !otherPoint.isNull && otherPoint.doCurve !== false;
	                }

	                // Find control points
	                if (doCurve(lastPoint) && doCurve(nextPoint)) {
	                    var lastX = lastPoint.plotX,
	                        lastY = lastPoint.plotY,
	                        nextX = nextPoint.plotX,
	                        nextY = nextPoint.plotY,
	                        correction = 0;

	                    leftContX = (smoothing * plotX + lastX) / denom;
	                    leftContY = (smoothing * plotY + lastY) / denom;
	                    rightContX = (smoothing * plotX + nextX) / denom;
	                    rightContY = (smoothing * plotY + nextY) / denom;

	                    // Have the two control points make a straight line through main point
	                    if (rightContX !== leftContX) { // #5016, division by zero
	                        correction = ((rightContY - leftContY) * (rightContX - plotX)) /
	                            (rightContX - leftContX) + plotY - rightContY;
	                    }

	                    leftContY += correction;
	                    rightContY += correction;

	                    // to prevent false extremes, check that control points are between
	                    // neighbouring points' y values
	                    if (leftContY > lastY && leftContY > plotY) {
	                        leftContY = Math.max(lastY, plotY);
	                        rightContY = 2 * plotY - leftContY; // mirror of left control point
	                    } else if (leftContY < lastY && leftContY < plotY) {
	                        leftContY = Math.min(lastY, plotY);
	                        rightContY = 2 * plotY - leftContY;
	                    }
	                    if (rightContY > nextY && rightContY > plotY) {
	                        rightContY = Math.max(nextY, plotY);
	                        leftContY = 2 * plotY - rightContY;
	                    } else if (rightContY < nextY && rightContY < plotY) {
	                        rightContY = Math.min(nextY, plotY);
	                        leftContY = 2 * plotY - rightContY;
	                    }

	                    // record for drawing in next point
	                    point.rightContX = rightContX;
	                    point.rightContY = rightContY;


	                }

	                // Visualize control points for debugging
	                /*
	                if (leftContX) {
	                	this.chart.renderer.circle(leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop, 2)
	                		.attr({
	                			stroke: 'red',
	                			'stroke-width': 2,
	                			fill: 'none',
	                			zIndex: 9
	                		})
	                		.add();
	                	this.chart.renderer.path(['M', leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop,
	                		'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
	                		.attr({
	                			stroke: 'red',
	                			'stroke-width': 2,
	                			zIndex: 9
	                		})
	                		.add();
	                }
	                if (rightContX) {
	                	this.chart.renderer.circle(rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop, 2)
	                		.attr({
	                			stroke: 'green',
	                			'stroke-width': 2,
	                			fill: 'none',
	                			zIndex: 9
	                		})
	                		.add();
	                	this.chart.renderer.path(['M', rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop,
	                		'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
	                		.attr({
	                			stroke: 'green',
	                			'stroke-width': 2,
	                			zIndex: 9
	                		})
	                		.add();
	                }
	                // */
	                ret = [
	                    'C',
	                    pick(lastPoint.rightContX, lastPoint.plotX),
	                    pick(lastPoint.rightContY, lastPoint.plotY),
	                    pick(leftContX, plotX),
	                    pick(leftContY, plotY),
	                    plotX,
	                    plotY
	                ];
	                lastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later
	                return ret;
	            }
	        });

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var areaProto = H.seriesTypes.area.prototype,
	            defaultPlotOptions = H.defaultPlotOptions,
	            LegendSymbolMixin = H.LegendSymbolMixin,
	            seriesType = H.seriesType;
	        /**
	         * AreaSplineSeries object
	         */
	        seriesType('areaspline', 'spline', defaultPlotOptions.area, {
	            getStackPoints: areaProto.getStackPoints,
	            getGraphPath: areaProto.getGraphPath,
	            setStackCliffs: areaProto.setStackCliffs,
	            drawGraph: areaProto.drawGraph,
	            drawLegendSymbol: LegendSymbolMixin.drawRectangle
	        });

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var animObject = H.animObject,
	            color = H.color,
	            each = H.each,
	            extend = H.extend,
	            isNumber = H.isNumber,
	            LegendSymbolMixin = H.LegendSymbolMixin,
	            merge = H.merge,
	            noop = H.noop,
	            pick = H.pick,
	            Series = H.Series,
	            seriesType = H.seriesType,
	            svg = H.svg;
	        /**
	         * The column series type.
	         *
	         * @constructor seriesTypes.column
	         * @augments Series
	         */
	        seriesType('column', 'line', {
	            borderRadius: 0,
	            //colorByPoint: undefined,
	            groupPadding: 0.2,
	            //grouping: true,
	            marker: null, // point options are specified in the base options
	            pointPadding: 0.1,
	            //pointWidth: null,
	            minPointLength: 0,
	            cropThreshold: 50, // when there are more points, they will not animate out of the chart on xAxis.setExtremes
	            pointRange: null, // null means auto, meaning 1 in a categorized axis and least distance between points if not categories
	            states: {
	                hover: {
	                    halo: false,

	                    brightness: 0.1,
	                    shadow: false

	                },

	                select: {
	                    color: '#cccccc',
	                    borderColor: '#000000',
	                    shadow: false
	                }

	            },
	            dataLabels: {
	                align: null, // auto
	                verticalAlign: null, // auto
	                y: null
	            },
	            softThreshold: false,
	            startFromThreshold: true, // false doesn't work well: http://jsfiddle.net/highcharts/hz8fopan/14/
	            stickyTracking: false,
	            tooltip: {
	                distance: 6
	            },
	            threshold: 0,

	            borderColor: '#ffffff'
	                // borderWidth: 1


	        }, /** @lends seriesTypes.column.prototype */ {
	            cropShoulder: 0,
	            directTouch: true, // When tooltip is not shared, this series (and derivatives) requires direct touch/hover. KD-tree does not apply.
	            trackerGroups: ['group', 'dataLabelsGroup'],
	            negStacks: true, // use separate negative stacks, unlike area stacks where a negative
	            // point is substracted from previous (#1910)

	            /**
	             * Initialize the series. Extends the basic Series.init method by
	             * marking other series of the same type as dirty.
	             *
	             * @function #init
	             * @memberOf seriesTypes.column
	             * @returns {void}
	             */
	            init: function() {
	                Series.prototype.init.apply(this, arguments);

	                var series = this,
	                    chart = series.chart;

	                // if the series is added dynamically, force redraw of other
	                // series affected by a new column
	                if (chart.hasRendered) {
	                    each(chart.series, function(otherSeries) {
	                        if (otherSeries.type === series.type) {
	                            otherSeries.isDirty = true;
	                        }
	                    });
	                }
	            },

	            /**
	             * Return the width and x offset of the columns adjusted for grouping, groupPadding, pointPadding,
	             * pointWidth etc.
	             */
	            getColumnMetrics: function() {

	                var series = this,
	                    options = series.options,
	                    xAxis = series.xAxis,
	                    yAxis = series.yAxis,
	                    reversedXAxis = xAxis.reversed,
	                    stackKey,
	                    stackGroups = {},
	                    columnCount = 0;

	                // Get the total number of column type series.
	                // This is called on every series. Consider moving this logic to a
	                // chart.orderStacks() function and call it on init, addSeries and removeSeries
	                if (options.grouping === false) {
	                    columnCount = 1;
	                } else {
	                    each(series.chart.series, function(otherSeries) {
	                        var otherOptions = otherSeries.options,
	                            otherYAxis = otherSeries.yAxis,
	                            columnIndex;
	                        if (otherSeries.type === series.type && otherSeries.visible &&
	                            yAxis.len === otherYAxis.len && yAxis.pos === otherYAxis.pos) { // #642, #2086
	                            if (otherOptions.stacking) {
	                                stackKey = otherSeries.stackKey;
	                                if (stackGroups[stackKey] === undefined) {
	                                    stackGroups[stackKey] = columnCount++;
	                                }
	                                columnIndex = stackGroups[stackKey];
	                            } else if (otherOptions.grouping !== false) { // #1162
	                                columnIndex = columnCount++;
	                            }
	                            otherSeries.columnIndex = columnIndex;
	                        }
	                    });
	                }

	                var categoryWidth = Math.min(
	                        Math.abs(xAxis.transA) * (xAxis.ordinalSlope || options.pointRange || xAxis.closestPointRange || xAxis.tickInterval || 1), // #2610
	                        xAxis.len // #1535
	                    ),
	                    groupPadding = categoryWidth * options.groupPadding,
	                    groupWidth = categoryWidth - 2 * groupPadding,
	                    pointOffsetWidth = groupWidth / (columnCount || 1),
	                    pointWidth = Math.min(
	                        options.maxPointWidth || xAxis.len,
	                        pick(options.pointWidth, pointOffsetWidth * (1 - 2 * options.pointPadding))
	                    ),
	                    pointPadding = (pointOffsetWidth - pointWidth) / 2,
	                    colIndex = (series.columnIndex || 0) + (reversedXAxis ? 1 : 0), // #1251, #3737
	                    pointXOffset = pointPadding + (groupPadding + colIndex *
	                        pointOffsetWidth - (categoryWidth / 2)) *
	                    (reversedXAxis ? -1 : 1);

	                // Save it for reading in linked series (Error bars particularly)
	                series.columnMetrics = {
	                    width: pointWidth,
	                    offset: pointXOffset
	                };
	                return series.columnMetrics;

	            },

	            /**
	             * Make the columns crisp. The edges are rounded to the nearest full pixel.
	             */
	            crispCol: function(x, y, w, h) {
	                var chart = this.chart,
	                    borderWidth = this.borderWidth,
	                    xCrisp = -(borderWidth % 2 ? 0.5 : 0),
	                    yCrisp = borderWidth % 2 ? 0.5 : 1,
	                    right,
	                    bottom,
	                    fromTop;

	                if (chart.inverted && chart.renderer.isVML) {
	                    yCrisp += 1;
	                }

	                // Horizontal. We need to first compute the exact right edge, then round it
	                // and compute the width from there.
	                right = Math.round(x + w) + xCrisp;
	                x = Math.round(x) + xCrisp;
	                w = right - x;

	                // Vertical
	                bottom = Math.round(y + h) + yCrisp;
	                fromTop = Math.abs(y) <= 0.5 && bottom > 0.5; // #4504, #4656
	                y = Math.round(y) + yCrisp;
	                h = bottom - y;

	                // Top edges are exceptions
	                if (fromTop && h) { // #5146
	                    y -= 1;
	                    h += 1;
	                }

	                return {
	                    x: x,
	                    y: y,
	                    width: w,
	                    height: h
	                };
	            },

	            /**
	             * Translate each point to the plot area coordinate system and find shape positions
	             */
	            translate: function() {
	                var series = this,
	                    chart = series.chart,
	                    options = series.options,
	                    dense = series.dense = series.closestPointRange * series.xAxis.transA < 2,
	                    borderWidth = series.borderWidth = pick(
	                        options.borderWidth,
	                        dense ? 0 : 1 // #3635
	                    ),
	                    yAxis = series.yAxis,
	                    threshold = options.threshold,
	                    translatedThreshold = series.translatedThreshold = yAxis.getThreshold(threshold),
	                    minPointLength = pick(options.minPointLength, 5),
	                    metrics = series.getColumnMetrics(),
	                    pointWidth = metrics.width,
	                    seriesBarW = series.barW = Math.max(pointWidth, 1 + 2 * borderWidth), // postprocessed for border width
	                    pointXOffset = series.pointXOffset = metrics.offset;

	                if (chart.inverted) {
	                    translatedThreshold -= 0.5; // #3355
	                }

	                // When the pointPadding is 0, we want the columns to be packed tightly, so we allow individual
	                // columns to have individual sizes. When pointPadding is greater, we strive for equal-width
	                // columns (#2694).
	                if (options.pointPadding) {
	                    seriesBarW = Math.ceil(seriesBarW);
	                }

	                Series.prototype.translate.apply(series);

	                // Record the new values
	                each(series.points, function(point) {
	                    var yBottom = pick(point.yBottom, translatedThreshold),
	                        safeDistance = 999 + Math.abs(yBottom),
	                        plotY = Math.min(Math.max(-safeDistance, point.plotY), yAxis.len + safeDistance), // Don't draw too far outside plot area (#1303, #2241, #4264)
	                        barX = point.plotX + pointXOffset,
	                        barW = seriesBarW,
	                        barY = Math.min(plotY, yBottom),
	                        up,
	                        barH = Math.max(plotY, yBottom) - barY;

	                    // Handle options.minPointLength
	                    if (Math.abs(barH) < minPointLength) {
	                        if (minPointLength) {
	                            barH = minPointLength;
	                            up = (!yAxis.reversed && !point.negative) || (yAxis.reversed && point.negative);
	                            barY = Math.abs(barY - translatedThreshold) > minPointLength ? // stacked
	                                yBottom - minPointLength : // keep position
	                                translatedThreshold - (up ? minPointLength : 0); // #1485, #4051
	                        }
	                    }

	                    // Cache for access in polar
	                    point.barX = barX;
	                    point.pointWidth = pointWidth;

	                    // Fix the tooltip on center of grouped columns (#1216, #424, #3648)
	                    point.tooltipPos = chart.inverted ? [yAxis.len + yAxis.pos - chart.plotLeft - plotY, series.xAxis.len - barX - barW / 2, barH] : [barX + barW / 2, plotY + yAxis.pos - chart.plotTop, barH];

	                    // Register shape type and arguments to be used in drawPoints
	                    point.shapeType = 'rect';
	                    point.shapeArgs = series.crispCol.apply(
	                        series,
	                        point.isNull ? [point.plotX, yAxis.len / 2, 0, 0] : // #3169, drilldown from null must have a position to work from
	                        [barX, barY, barW, barH]
	                    );
	                });

	            },

	            getSymbol: noop,

	            /**
	             * Use a solid rectangle like the area series types
	             */
	            drawLegendSymbol: LegendSymbolMixin.drawRectangle,


	            /**
	             * Columns have no graph
	             */
	            drawGraph: function() {
	                this.group[this.dense ? 'addClass' : 'removeClass']('highcharts-dense-data');
	            },


	            /**
	             * Get presentational attributes
	             */
	            pointAttribs: function(point, state) {
	                var options = this.options,
	                    stateOptions,
	                    ret,
	                    p2o = this.pointAttrToOptions || {},
	                    strokeOption = p2o.stroke || 'borderColor',
	                    strokeWidthOption = p2o['stroke-width'] || 'borderWidth',
	                    fill = (point && point.color) || this.color,
	                    stroke = point[strokeOption] || options[strokeOption] ||
	                    this.color || fill, // set to fill when borderColor null
	                    strokeWidth = point[strokeWidthOption] ||
	                    options[strokeWidthOption] || this[strokeWidthOption] || 0,
	                    dashstyle = options.dashStyle,
	                    zone,
	                    brightness;

	                // Handle zone colors
	                if (point && this.zones.length) {
	                    zone = point.getZone();
	                    fill = (zone && zone.color) || point.options.color || this.color; // When zones are present, don't use point.color (#4267)
	                }

	                // Select or hover states
	                if (state) {
	                    stateOptions = options.states[state];
	                    brightness = stateOptions.brightness;
	                    fill = stateOptions.color ||
	                        (brightness !== undefined && color(fill).brighten(stateOptions.brightness).get()) ||
	                        fill;
	                    stroke = stateOptions[strokeOption] || stroke;
	                    strokeWidth = stateOptions[strokeWidthOption] || strokeWidth;
	                    dashstyle = stateOptions.dashStyle || dashstyle;
	                }

	                ret = {
	                    'fill': fill,
	                    'stroke': stroke,
	                    'stroke-width': strokeWidth
	                };
	                if (options.borderRadius) {
	                    ret.r = options.borderRadius;
	                }

	                if (dashstyle) {
	                    ret.dashstyle = dashstyle;
	                }

	                return ret;
	            },


	            /**
	             * Draw the columns. For bars, the series.group is rotated, so the same coordinates
	             * apply for columns and bars. This method is inherited by scatter series.
	             *
	             */
	            drawPoints: function() {
	                var series = this,
	                    chart = this.chart,
	                    options = series.options,
	                    renderer = chart.renderer,
	                    animationLimit = options.animationLimit || 250,
	                    shapeArgs;

	                // draw the columns
	                each(series.points, function(point) {
	                    var plotY = point.plotY,
	                        graphic = point.graphic;

	                    if (isNumber(plotY) && point.y !== null) {
	                        shapeArgs = point.shapeArgs;

	                        if (graphic) { // update
	                            graphic[chart.pointCount < animationLimit ? 'animate' : 'attr'](
	                                merge(shapeArgs)
	                            );

	                        } else {
	                            point.graphic = graphic = renderer[point.shapeType](shapeArgs)
	                                .attr({
	                                    'class': point.getClassName()
	                                })
	                                .add(point.group || series.group);
	                        }


	                        // Presentational
	                        graphic
	                            .attr(series.pointAttribs(point, point.selected && 'select'))
	                            .shadow(options.shadow, null, options.stacking && !options.borderRadius);


	                    } else if (graphic) {
	                        point.graphic = graphic.destroy(); // #1269
	                    }
	                });
	            },

	            /**
	             * Animate the column heights one by one from zero
	             * @param {Boolean} init Whether to initialize the animation or run it
	             */
	            animate: function(init) {
	                var series = this,
	                    yAxis = this.yAxis,
	                    options = series.options,
	                    inverted = this.chart.inverted,
	                    attr = {},
	                    translatedThreshold;

	                if (svg) { // VML is too slow anyway
	                    if (init) {
	                        attr.scaleY = 0.001;
	                        translatedThreshold = Math.min(yAxis.pos + yAxis.len, Math.max(yAxis.pos, yAxis.toPixels(options.threshold)));
	                        if (inverted) {
	                            attr.translateX = translatedThreshold - yAxis.len;
	                        } else {
	                            attr.translateY = translatedThreshold;
	                        }
	                        series.group.attr(attr);

	                    } else { // run the animation

	                        attr[inverted ? 'translateX' : 'translateY'] = yAxis.pos;
	                        series.group.animate(attr, extend(animObject(series.options.animation), {
	                            // Do the scale synchronously to ensure smooth updating (#5030)
	                            step: function(val, fx) {
	                                series.group.attr({
	                                    scaleY: Math.max(0.001, fx.pos) // #5250
	                                });
	                            }
	                        }));

	                        // delete this function to allow it only once
	                        series.animate = null;
	                    }
	                }
	            },

	            /**
	             * Remove this series from the chart
	             */
	            remove: function() {
	                var series = this,
	                    chart = series.chart;

	                // column and bar series affects other series of the same type
	                // as they are either stacked or grouped
	                if (chart.hasRendered) {
	                    each(chart.series, function(otherSeries) {
	                        if (otherSeries.type === series.type) {
	                            otherSeries.isDirty = true;
	                        }
	                    });
	                }

	                Series.prototype.remove.apply(series, arguments);
	            }
	        });

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';

	        var seriesType = H.seriesType;

	        /**
	         * The Bar series class
	         */
	        seriesType('bar', 'column', null, {
	            inverted: true
	        });

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var Series = H.Series,
	            seriesType = H.seriesType;
	        /**
	         * The scatter series type
	         */
	        seriesType('scatter', 'line', {
	            lineWidth: 0,
	            marker: {
	                enabled: true // Overrides auto-enabling in line series (#3647)
	            },
	            tooltip: {

	                headerFormat: '<span style="color:{point.color}">\u25CF</span> ' +
	                    '<span style="font-size: 0.85em"> {series.name}</span><br/>',

	                pointFormat: 'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'
	            }

	            // Prototype members
	        }, {
	            sorted: false,
	            requireSorting: false,
	            noSharedTooltip: true,
	            trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],
	            takeOrdinalPosition: false, // #2342
	            kdDimensions: 2,
	            drawGraph: function() {
	                if (this.options.lineWidth) {
	                    Series.prototype.drawGraph.call(this);
	                }
	            }
	        });

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var pick = H.pick,
	            relativeLength = H.relativeLength;

	        H.CenteredSeriesMixin = {
	            /**
	             * Get the center of the pie based on the size and center options relative to the
	             * plot area. Borrowed by the polar and gauge series types.
	             */
	            getCenter: function() {

	                var options = this.options,
	                    chart = this.chart,
	                    slicingRoom = 2 * (options.slicedOffset || 0),
	                    handleSlicingRoom,
	                    plotWidth = chart.plotWidth - 2 * slicingRoom,
	                    plotHeight = chart.plotHeight - 2 * slicingRoom,
	                    centerOption = options.center,
	                    positions = [pick(centerOption[0], '50%'), pick(centerOption[1], '50%'), options.size || '100%', options.innerSize || 0],
	                    smallestSize = Math.min(plotWidth, plotHeight),
	                    i,
	                    value;

	                for (i = 0; i < 4; ++i) {
	                    value = positions[i];
	                    handleSlicingRoom = i < 2 || (i === 2 && /%$/.test(value));

	                    // i == 0: centerX, relative to width
	                    // i == 1: centerY, relative to height
	                    // i == 2: size, relative to smallestSize
	                    // i == 3: innerSize, relative to size
	                    positions[i] = relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) +
	                        (handleSlicingRoom ? slicingRoom : 0);

	                }
	                // innerSize cannot be larger than size (#3632)
	                if (positions[3] > positions[2]) {
	                    positions[3] = positions[2];
	                }
	                return positions;
	            }
	        };

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            CenteredSeriesMixin = H.CenteredSeriesMixin,
	            defined = H.defined,
	            each = H.each,
	            extend = H.extend,
	            inArray = H.inArray,
	            LegendSymbolMixin = H.LegendSymbolMixin,
	            noop = H.noop,
	            pick = H.pick,
	            Point = H.Point,
	            Series = H.Series,
	            seriesType = H.seriesType,
	            seriesTypes = H.seriesTypes,
	            setAnimation = H.setAnimation;

	        /**
	         * The pie series type.
	         *
	         * @constructor seriesTypes.pie
	         * @augments Series
	         */
	        seriesType('pie', 'line', {
	            center: [null, null],
	            clip: false,
	            colorByPoint: true, // always true for pies
	            dataLabels: {
	                // align: null,
	                // connectorWidth: 1,
	                // connectorColor: point.color,
	                // connectorPadding: 5,
	                distance: 30,
	                enabled: true,
	                formatter: function() { // #2945
	                    return this.y === null ? undefined : this.point.name;
	                },
	                // softConnector: true,
	                x: 0
	                    // y: 0
	            },
	            ignoreHiddenPoint: true,
	            //innerSize: 0,
	            legendType: 'point',
	            marker: null, // point options are specified in the base options
	            size: null,
	            showInLegend: false,
	            slicedOffset: 10,
	            stickyTracking: false,
	            tooltip: {
	                followPointer: true
	            },

	            borderColor: '#ffffff',
	            borderWidth: 1,
	            states: {
	                hover: {
	                    brightness: 0.1,
	                    shadow: false
	                }
	            }


	        }, /** @lends seriesTypes.pie.prototype */ {
	            isCartesian: false,
	            requireSorting: false,
	            directTouch: true,
	            noSharedTooltip: true,
	            trackerGroups: ['group', 'dataLabelsGroup'],
	            axisTypes: [],
	            pointAttribs: seriesTypes.column.prototype.pointAttribs,
	            /**
	             * Animate the pies in
	             */
	            animate: function(init) {
	                var series = this,
	                    points = series.points,
	                    startAngleRad = series.startAngleRad;

	                if (!init) {
	                    each(points, function(point) {
	                        var graphic = point.graphic,
	                            args = point.shapeArgs;

	                        if (graphic) {
	                            // start values
	                            graphic.attr({
	                                r: point.startR || (series.center[3] / 2), // animate from inner radius (#779)
	                                start: startAngleRad,
	                                end: startAngleRad
	                            });

	                            // animate
	                            graphic.animate({
	                                r: args.r,
	                                start: args.start,
	                                end: args.end
	                            }, series.options.animation);
	                        }
	                    });

	                    // delete this function to allow it only once
	                    series.animate = null;
	                }
	            },

	            /**
	             * Recompute total chart sum and update percentages of points.
	             */
	            updateTotals: function() {
	                var i,
	                    total = 0,
	                    points = this.points,
	                    len = points.length,
	                    point,
	                    ignoreHiddenPoint = this.options.ignoreHiddenPoint;

	                // Get the total sum
	                for (i = 0; i < len; i++) {
	                    point = points[i];
	                    // Disallow negative values (#1530, #3623, #5322)
	                    if (point.y < 0) {
	                        point.y = null;
	                    }
	                    total += (ignoreHiddenPoint && !point.visible) ? 0 : point.y;
	                }
	                this.total = total;

	                // Set each point's properties
	                for (i = 0; i < len; i++) {
	                    point = points[i];
	                    point.percentage = (total > 0 && (point.visible || !ignoreHiddenPoint)) ? point.y / total * 100 : 0;
	                    point.total = total;
	                }
	            },

	            /**
	             * Extend the generatePoints method by adding total and percentage properties to each point
	             */
	            generatePoints: function() {
	                Series.prototype.generatePoints.call(this);
	                this.updateTotals();
	            },

	            /**
	             * Do translation for pie slices
	             */
	            translate: function(positions) {
	                this.generatePoints();

	                var series = this,
	                    cumulative = 0,
	                    precision = 1000, // issue #172
	                    options = series.options,
	                    slicedOffset = options.slicedOffset,
	                    connectorOffset = slicedOffset + (options.borderWidth || 0),
	                    start,
	                    end,
	                    angle,
	                    startAngle = options.startAngle || 0,
	                    startAngleRad = series.startAngleRad = Math.PI / 180 * (startAngle - 90),
	                    endAngleRad = series.endAngleRad = Math.PI / 180 * ((pick(options.endAngle, startAngle + 360)) - 90),
	                    circ = endAngleRad - startAngleRad, //2 * Math.PI,
	                    points = series.points,
	                    radiusX, // the x component of the radius vector for a given point
	                    radiusY,
	                    labelDistance = options.dataLabels.distance,
	                    ignoreHiddenPoint = options.ignoreHiddenPoint,
	                    i,
	                    len = points.length,
	                    point;

	                // Get positions - either an integer or a percentage string must be given.
	                // If positions are passed as a parameter, we're in a recursive loop for adjusting
	                // space for data labels.
	                if (!positions) {
	                    series.center = positions = series.getCenter();
	                }

	                // utility for getting the x value from a given y, used for anticollision logic in data labels
	                series.getX = function(y, left) {

	                    angle = Math.asin(Math.min((y - positions[1]) / (positions[2] / 2 + labelDistance), 1));

	                    return positions[0] +
	                        (left ? -1 : 1) *
	                        (Math.cos(angle) * (positions[2] / 2 + labelDistance));
	                };

	                // Calculate the geometry for each point
	                for (i = 0; i < len; i++) {

	                    point = points[i];

	                    // set start and end angle
	                    start = startAngleRad + (cumulative * circ);
	                    if (!ignoreHiddenPoint || point.visible) {
	                        cumulative += point.percentage / 100;
	                    }
	                    end = startAngleRad + (cumulative * circ);

	                    // set the shape
	                    point.shapeType = 'arc';
	                    point.shapeArgs = {
	                        x: positions[0],
	                        y: positions[1],
	                        r: positions[2] / 2,
	                        innerR: positions[3] / 2,
	                        start: Math.round(start * precision) / precision,
	                        end: Math.round(end * precision) / precision
	                    };

	                    // The angle must stay within -90 and 270 (#2645)
	                    angle = (end + start) / 2;
	                    if (angle > 1.5 * Math.PI) {
	                        angle -= 2 * Math.PI;
	                    } else if (angle < -Math.PI / 2) {
	                        angle += 2 * Math.PI;
	                    }

	                    // Center for the sliced out slice
	                    point.slicedTranslation = {
	                        translateX: Math.round(Math.cos(angle) * slicedOffset),
	                        translateY: Math.round(Math.sin(angle) * slicedOffset)
	                    };

	                    // set the anchor point for tooltips
	                    radiusX = Math.cos(angle) * positions[2] / 2;
	                    radiusY = Math.sin(angle) * positions[2] / 2;
	                    point.tooltipPos = [
	                        positions[0] + radiusX * 0.7,
	                        positions[1] + radiusY * 0.7
	                    ];

	                    point.half = angle < -Math.PI / 2 || angle > Math.PI / 2 ? 1 : 0;
	                    point.angle = angle;

	                    // set the anchor point for data labels
	                    connectorOffset = Math.min(connectorOffset, labelDistance / 5); // #1678
	                    point.labelPos = [
	                        positions[0] + radiusX + Math.cos(angle) * labelDistance, // first break of connector
	                        positions[1] + radiusY + Math.sin(angle) * labelDistance, // a/a
	                        positions[0] + radiusX + Math.cos(angle) * connectorOffset, // second break, right outside pie
	                        positions[1] + radiusY + Math.sin(angle) * connectorOffset, // a/a
	                        positions[0] + radiusX, // landing point for connector
	                        positions[1] + radiusY, // a/a
	                        labelDistance < 0 ? // alignment
	                        'center' :
	                        point.half ? 'right' : 'left', // alignment
	                        angle // center angle
	                    ];

	                }
	            },

	            drawGraph: null,

	            /**
	             * Draw the data points
	             */
	            drawPoints: function() {
	                var series = this,
	                    chart = series.chart,
	                    renderer = chart.renderer,
	                    groupTranslation,
	                    //center,
	                    graphic,
	                    //group,
	                    pointAttr,
	                    shapeArgs;


	                var shadow = series.options.shadow;
	                if (shadow && !series.shadowGroup) {
	                    series.shadowGroup = renderer.g('shadow')
	                        .add(series.group);
	                }


	                // draw the slices
	                each(series.points, function(point) {
	                    if (point.y !== null) {
	                        graphic = point.graphic;
	                        shapeArgs = point.shapeArgs;


	                        // if the point is sliced, use special translation, else use plot area traslation
	                        groupTranslation = point.sliced ? point.slicedTranslation : {};


	                        // Put the shadow behind all points
	                        var shadowGroup = point.shadowGroup;
	                        if (shadow && !shadowGroup) {
	                            shadowGroup = point.shadowGroup = renderer.g('shadow')
	                                .add(series.shadowGroup);
	                        }

	                        if (shadowGroup) {
	                            shadowGroup.attr(groupTranslation);
	                        }
	                        pointAttr = series.pointAttribs(point, point.selected && 'select');


	                        // Draw the slice
	                        if (graphic) {
	                            graphic
	                                .setRadialReference(series.center)

	                            .attr(pointAttr)

	                            .animate(extend(shapeArgs, groupTranslation));
	                        } else {

	                            point.graphic = graphic = renderer[point.shapeType](shapeArgs)
	                                .addClass(point.getClassName())
	                                .setRadialReference(series.center)
	                                .attr(groupTranslation)
	                                .add(series.group);

	                            if (!point.visible) {
	                                graphic.attr({
	                                    visibility: 'hidden'
	                                });
	                            }


	                            graphic
	                                .attr(pointAttr)
	                                .attr({
	                                    'stroke-linejoin': 'round'
	                                })
	                                .shadow(shadow, shadowGroup);

	                        }
	                    }
	                });

	            },


	            searchPoint: noop,

	            /**
	             * Utility for sorting data labels
	             */
	            sortByAngle: function(points, sign) {
	                points.sort(function(a, b) {
	                    return a.angle !== undefined && (b.angle - a.angle) * sign;
	                });
	            },

	            /**
	             * Use a simple symbol from LegendSymbolMixin
	             */
	            drawLegendSymbol: LegendSymbolMixin.drawRectangle,

	            /**
	             * Use the getCenter method from drawLegendSymbol
	             */
	            getCenter: CenteredSeriesMixin.getCenter,

	            /**
	             * Pies don't have point marker symbols
	             */
	            getSymbol: noop


	            /**
	             * @constructor seriesTypes.pie.prototype.pointClass
	             * @extends {Point}
	             */
	        }, /** @lends seriesTypes.pie.prototype.pointClass.prototype */ {
	            /**
	             * Initiate the pie slice
	             */
	            init: function() {

	                Point.prototype.init.apply(this, arguments);

	                var point = this,
	                    toggleSlice;

	                point.name = pick(point.name, 'Slice');

	                // add event listener for select
	                toggleSlice = function(e) {
	                    point.slice(e.type === 'select');
	                };
	                addEvent(point, 'select', toggleSlice);
	                addEvent(point, 'unselect', toggleSlice);

	                return point;
	            },

	            /**
	             * Toggle the visibility of the pie slice
	             * @param {Boolean} vis Whether to show the slice or not. If undefined, the
	             *    visibility is toggled
	             */
	            setVisible: function(vis, redraw) {
	                var point = this,
	                    series = point.series,
	                    chart = series.chart,
	                    ignoreHiddenPoint = series.options.ignoreHiddenPoint;

	                redraw = pick(redraw, ignoreHiddenPoint);

	                if (vis !== point.visible) {

	                    // If called without an argument, toggle visibility
	                    point.visible = point.options.visible = vis = vis === undefined ? !point.visible : vis;
	                    series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data

	                    // Show and hide associated elements. This is performed regardless of redraw or not,
	                    // because chart.redraw only handles full series.
	                    each(['graphic', 'dataLabel', 'connector', 'shadowGroup'], function(key) {
	                        if (point[key]) {
	                            point[key][vis ? 'show' : 'hide'](true);
	                        }
	                    });

	                    if (point.legendItem) {
	                        chart.legend.colorizeItem(point, vis);
	                    }

	                    // #4170, hide halo after hiding point
	                    if (!vis && point.state === 'hover') {
	                        point.setState('');
	                    }

	                    // Handle ignore hidden slices
	                    if (ignoreHiddenPoint) {
	                        series.isDirty = true;
	                    }

	                    if (redraw) {
	                        chart.redraw();
	                    }
	                }
	            },

	            /**
	             * Set or toggle whether the slice is cut out from the pie
	             * @param {Boolean} sliced When undefined, the slice state is toggled
	             * @param {Boolean} redraw Whether to redraw the chart. True by default.
	             */
	            slice: function(sliced, redraw, animation) {
	                var point = this,
	                    series = point.series,
	                    chart = series.chart,
	                    translation;

	                setAnimation(animation, chart);

	                // redraw is true by default
	                redraw = pick(redraw, true);

	                // if called without an argument, toggle
	                point.sliced = point.options.sliced = sliced = defined(sliced) ? sliced : !point.sliced;
	                series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data

	                translation = sliced ? point.slicedTranslation : {
	                    translateX: 0,
	                    translateY: 0
	                };

	                point.graphic.animate(translation);


	                if (point.shadowGroup) {
	                    point.shadowGroup.animate(translation);
	                }

	            },

	            haloPath: function(size) {
	                var shapeArgs = this.shapeArgs;

	                return this.sliced || !this.visible ? [] :
	                    this.series.chart.renderer.symbols.arc(
	                        shapeArgs.x,
	                        shapeArgs.y,
	                        shapeArgs.r + size,
	                        shapeArgs.r + size, {
	                            innerR: this.shapeArgs.r,
	                            start: shapeArgs.start,
	                            end: shapeArgs.end
	                        }
	                    );
	            }
	        });

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            arrayMax = H.arrayMax,
	            defined = H.defined,
	            each = H.each,
	            extend = H.extend,
	            format = H.format,
	            map = H.map,
	            merge = H.merge,
	            noop = H.noop,
	            pick = H.pick,
	            relativeLength = H.relativeLength,
	            Series = H.Series,
	            seriesTypes = H.seriesTypes,
	            stableSort = H.stableSort;


	        /**
	         * Generatl distribution algorithm for distributing labels of differing size along a
	         * confined length in two dimensions. The algorithm takes an array of objects containing
	         * a size, a target and a rank. It will place the labels as close as possible to their 
	         * targets, skipping the lowest ranked labels if necessary.
	         */
	        H.distribute = function(boxes, len) {

	            var i,
	                overlapping = true,
	                origBoxes = boxes, // Original array will be altered with added .pos
	                restBoxes = [], // The outranked overshoot
	                box,
	                target,
	                total = 0;

	            function sortByTarget(a, b) {
	                return a.target - b.target;
	            }

	            // If the total size exceeds the len, remove those boxes with the lowest rank
	            i = boxes.length;
	            while (i--) {
	                total += boxes[i].size;
	            }

	            // Sort by rank, then slice away overshoot
	            if (total > len) {
	                stableSort(boxes, function(a, b) {
	                    return (b.rank || 0) - (a.rank || 0);
	                });
	                i = 0;
	                total = 0;
	                while (total <= len) {
	                    total += boxes[i].size;
	                    i++;
	                }
	                restBoxes = boxes.splice(i - 1, boxes.length);
	            }

	            // Order by target
	            stableSort(boxes, sortByTarget);


	            // So far we have been mutating the original array. Now
	            // create a copy with target arrays
	            boxes = map(boxes, function(box) {
	                return {
	                    size: box.size,
	                    targets: [box.target]
	                };
	            });

	            while (overlapping) {
	                // Initial positions: target centered in box
	                i = boxes.length;
	                while (i--) {
	                    box = boxes[i];
	                    // Composite box, average of targets
	                    target = (Math.min.apply(0, box.targets) + Math.max.apply(0, box.targets)) / 2;
	                    box.pos = Math.min(Math.max(0, target - box.size / 2), len - box.size);
	                }

	                // Detect overlap and join boxes
	                i = boxes.length;
	                overlapping = false;
	                while (i--) {
	                    if (i > 0 && boxes[i - 1].pos + boxes[i - 1].size > boxes[i].pos) { // Overlap
	                        boxes[i - 1].size += boxes[i].size; // Add this size to the previous box
	                        boxes[i - 1].targets = boxes[i - 1].targets.concat(boxes[i].targets);

	                        // Overlapping right, push left
	                        if (boxes[i - 1].pos + boxes[i - 1].size > len) {
	                            boxes[i - 1].pos = len - boxes[i - 1].size;
	                        }
	                        boxes.splice(i, 1); // Remove this item
	                        overlapping = true;
	                    }
	                }
	            }

	            // Now the composite boxes are placed, we need to put the original boxes within them
	            i = 0;
	            each(boxes, function(box) {
	                var posInCompositeBox = 0;
	                each(box.targets, function() {
	                    origBoxes[i].pos = box.pos + posInCompositeBox;
	                    posInCompositeBox += origBoxes[i].size;
	                    i++;
	                });
	            });

	            // Add the rest (hidden) boxes and sort by target
	            origBoxes.push.apply(origBoxes, restBoxes);
	            stableSort(origBoxes, sortByTarget);
	        };


	        /**
	         * Draw the data labels
	         */
	        Series.prototype.drawDataLabels = function() {
	            var series = this,
	                seriesOptions = series.options,
	                options = seriesOptions.dataLabels,
	                points = series.points,
	                pointOptions,
	                generalOptions,
	                hasRendered = series.hasRendered || 0,
	                str,
	                dataLabelsGroup,
	                defer = pick(options.defer, true),
	                renderer = series.chart.renderer;

	            if (options.enabled || series._hasPointLabels) {

	                // Process default alignment of data labels for columns
	                if (series.dlProcessOptions) {
	                    series.dlProcessOptions(options);
	                }

	                // Create a separate group for the data labels to avoid rotation
	                dataLabelsGroup = series.plotGroup(
	                    'dataLabelsGroup',
	                    'data-labels',
	                    defer && !hasRendered ? 'hidden' : 'visible', // #5133
	                    options.zIndex || 6
	                );

	                if (defer) {
	                    dataLabelsGroup.attr({
	                        opacity: +hasRendered
	                    }); // #3300
	                    if (!hasRendered) {
	                        addEvent(series, 'afterAnimate', function() {
	                            if (series.visible) { // #2597, #3023, #3024
	                                dataLabelsGroup.show(true);
	                            }
	                            dataLabelsGroup[seriesOptions.animation ? 'animate' : 'attr']({
	                                opacity: 1
	                            }, {
	                                duration: 200
	                            });
	                        });
	                    }
	                }

	                // Make the labels for each point
	                generalOptions = options;
	                each(points, function(point) {
	                    var enabled,
	                        dataLabel = point.dataLabel,
	                        labelConfig,
	                        attr,
	                        name,
	                        rotation,
	                        connector = point.connector,
	                        isNew = !dataLabel,
	                        style;
	                    // Determine if each data label is enabled
	                    // @note dataLabelAttribs (like pointAttribs) would eradicate
	                    // the need for dlOptions, and simplify the section below.
	                    pointOptions = point.dlOptions || (point.options && point.options.dataLabels); // dlOptions is used in treemaps
	                    enabled = pick(pointOptions && pointOptions.enabled, generalOptions.enabled) && point.y !== null; // #2282, #4641
	                    if (enabled) {
	                        // Create individual options structure that can be extended without
	                        // affecting others
	                        options = merge(generalOptions, pointOptions);
	                        labelConfig = point.getLabelConfig();
	                        str = options.format ?
	                            format(options.format, labelConfig) :
	                            options.formatter.call(labelConfig, options);
	                        style = options.style;
	                        rotation = options.rotation;

	                        // Determine the color
	                        style.color = pick(options.color, style.color, series.color, '#000000');
	                        // Get automated contrast color
	                        if (style.color === 'contrast') {
	                            style.color = options.inside || options.distance < 0 || !!seriesOptions.stacking ?
	                                renderer.getContrast(point.color || series.color) :
	                                '#000000';
	                        }
	                        if (seriesOptions.cursor) {
	                            style.cursor = seriesOptions.cursor;
	                        }


	                        attr = {
	                            //align: align,

	                            fill: options.backgroundColor,
	                            stroke: options.borderColor,
	                            'stroke-width': options.borderWidth,

	                            r: options.borderRadius || 0,
	                            rotation: rotation,
	                            padding: options.padding,
	                            zIndex: 1
	                        };

	                        // Remove unused attributes (#947)
	                        for (name in attr) {
	                            if (attr[name] === undefined) {
	                                delete attr[name];
	                            }
	                        }
	                    }
	                    // If the point is outside the plot area, destroy it. #678, #820
	                    if (dataLabel && (!enabled || !defined(str))) {
	                        point.dataLabel = dataLabel = dataLabel.destroy();
	                        if (connector) {
	                            point.connector = connector.destroy();
	                        }
	                        // Individual labels are disabled if the are explicitly disabled
	                        // in the point options, or if they fall outside the plot area.
	                    } else if (enabled && defined(str)) {
	                        // create new label
	                        if (!dataLabel) {
	                            dataLabel = point.dataLabel = renderer[rotation ? 'text' : 'label']( // labels don't support rotation
	                                str,
	                                0, -9999,
	                                options.shape,
	                                null,
	                                null,
	                                options.useHTML,
	                                null,
	                                'data-label'
	                            );
	                            dataLabel.addClass(
	                                'highcharts-data-label-color-' + point.colorIndex +
	                                ' ' + (options.className || '') +
	                                (options.useHTML ? 'highcharts-tracker' : '') // #3398
	                            );
	                        } else {
	                            attr.text = str;
	                        }
	                        dataLabel.attr(attr);

	                        // Styles must be applied before add in order to read text bounding box
	                        dataLabel.css(style).shadow(options.shadow);


	                        if (!dataLabel.added) {
	                            dataLabel.add(dataLabelsGroup);
	                        }
	                        // Now the data label is created and placed at 0,0, so we need to align it
	                        series.alignDataLabel(point, dataLabel, options, null, isNew);
	                    }
	                });
	            }
	        };

	        /**
	         * Align each individual data label
	         */
	        Series.prototype.alignDataLabel = function(point, dataLabel, options, alignTo, isNew) {
	            var chart = this.chart,
	                inverted = chart.inverted,
	                plotX = pick(point.plotX, -9999),
	                plotY = pick(point.plotY, -9999),
	                bBox = dataLabel.getBBox(),
	                fontSize,
	                baseline,
	                rotation = options.rotation,
	                normRotation,
	                negRotation,
	                align = options.align,
	                rotCorr, // rotation correction
	                // Math.round for rounding errors (#2683), alignTo to allow column labels (#2700)
	                visible =
	                this.visible &&
	                (
	                    point.series.forceDL ||
	                    chart.isInsidePlot(plotX, Math.round(plotY), inverted) ||
	                    (
	                        alignTo && chart.isInsidePlot(
	                            plotX,
	                            inverted ? alignTo.x + 1 : alignTo.y + alignTo.height - 1,
	                            inverted
	                        )
	                    )
	                ),
	                alignAttr, // the final position;
	                justify = pick(options.overflow, 'justify') === 'justify';

	            if (visible) {


	                fontSize = options.style.fontSize;


	                baseline = chart.renderer.fontMetrics(fontSize, dataLabel).b;

	                // The alignment box is a singular point
	                alignTo = extend({
	                    x: inverted ? chart.plotWidth - plotY : plotX,
	                    y: Math.round(inverted ? chart.plotHeight - plotX : plotY),
	                    width: 0,
	                    height: 0
	                }, alignTo);

	                // Add the text size for alignment calculation
	                extend(options, {
	                    width: bBox.width,
	                    height: bBox.height
	                });

	                // Allow a hook for changing alignment in the last moment, then do the alignment
	                if (rotation) {
	                    justify = false; // Not supported for rotated text
	                    rotCorr = chart.renderer.rotCorr(baseline, rotation); // #3723
	                    alignAttr = {
	                        x: alignTo.x + options.x + alignTo.width / 2 + rotCorr.x,
	                        y: alignTo.y + options.y + {
	                            top: 0,
	                            middle: 0.5,
	                            bottom: 1
	                        }[options.verticalAlign] * alignTo.height
	                    };
	                    dataLabel[isNew ? 'attr' : 'animate'](alignAttr)
	                        .attr({ // #3003
	                            align: align
	                        });

	                    // Compensate for the rotated label sticking out on the sides
	                    normRotation = (rotation + 720) % 360;
	                    negRotation = normRotation > 180 && normRotation < 360;

	                    if (align === 'left') {
	                        alignAttr.y -= negRotation ? bBox.height : 0;
	                    } else if (align === 'center') {
	                        alignAttr.x -= bBox.width / 2;
	                        alignAttr.y -= bBox.height / 2;
	                    } else if (align === 'right') {
	                        alignAttr.x -= bBox.width;
	                        alignAttr.y -= negRotation ? 0 : bBox.height;
	                    }


	                } else {
	                    dataLabel.align(options, null, alignTo);
	                    alignAttr = dataLabel.alignAttr;
	                }

	                // Handle justify or crop
	                if (justify) {
	                    this.justifyDataLabel(dataLabel, options, alignAttr, bBox, alignTo, isNew);

	                    // Now check that the data label is within the plot area
	                } else if (pick(options.crop, true)) {
	                    visible = chart.isInsidePlot(alignAttr.x, alignAttr.y) && chart.isInsidePlot(alignAttr.x + bBox.width, alignAttr.y + bBox.height);
	                }

	                // When we're using a shape, make it possible with a connector or an arrow pointing to thie point
	                if (options.shape && !rotation) {
	                    dataLabel.attr({
	                        anchorX: point.plotX,
	                        anchorY: point.plotY
	                    });
	                }
	            }

	            // Show or hide based on the final aligned position
	            if (!visible) {
	                dataLabel.attr({
	                    y: -9999
	                });
	                dataLabel.placed = false; // don't animate back in
	            }

	        };

	        /**
	         * If data labels fall partly outside the plot area, align them back in, in a way that
	         * doesn't hide the point.
	         */
	        Series.prototype.justifyDataLabel = function(dataLabel, options, alignAttr, bBox, alignTo, isNew) {
	            var chart = this.chart,
	                align = options.align,
	                verticalAlign = options.verticalAlign,
	                off,
	                justified,
	                padding = dataLabel.box ? 0 : (dataLabel.padding || 0);

	            // Off left
	            off = alignAttr.x + padding;
	            if (off < 0) {
	                if (align === 'right') {
	                    options.align = 'left';
	                } else {
	                    options.x = -off;
	                }
	                justified = true;
	            }

	            // Off right
	            off = alignAttr.x + bBox.width - padding;
	            if (off > chart.plotWidth) {
	                if (align === 'left') {
	                    options.align = 'right';
	                } else {
	                    options.x = chart.plotWidth - off;
	                }
	                justified = true;
	            }

	            // Off top
	            off = alignAttr.y + padding;
	            if (off < 0) {
	                if (verticalAlign === 'bottom') {
	                    options.verticalAlign = 'top';
	                } else {
	                    options.y = -off;
	                }
	                justified = true;
	            }

	            // Off bottom
	            off = alignAttr.y + bBox.height - padding;
	            if (off > chart.plotHeight) {
	                if (verticalAlign === 'top') {
	                    options.verticalAlign = 'bottom';
	                } else {
	                    options.y = chart.plotHeight - off;
	                }
	                justified = true;
	            }

	            if (justified) {
	                dataLabel.placed = !isNew;
	                dataLabel.align(options, null, alignTo);
	            }
	        };

	        /**
	         * Override the base drawDataLabels method by pie specific functionality
	         */
	        if (seriesTypes.pie) {
	            seriesTypes.pie.prototype.drawDataLabels = function() {
	                var series = this,
	                    data = series.data,
	                    point,
	                    chart = series.chart,
	                    options = series.options.dataLabels,
	                    connectorPadding = pick(options.connectorPadding, 10),
	                    connectorWidth = pick(options.connectorWidth, 1),
	                    plotWidth = chart.plotWidth,
	                    plotHeight = chart.plotHeight,
	                    connector,
	                    distanceOption = options.distance,
	                    seriesCenter = series.center,
	                    radius = seriesCenter[2] / 2,
	                    centerY = seriesCenter[1],
	                    outside = distanceOption > 0,
	                    dataLabel,
	                    dataLabelWidth,
	                    labelPos,
	                    labelHeight,
	                    halves = [ // divide the points into right and left halves for anti collision
	                        [], // right
	                        [] // left
	                    ],
	                    x,
	                    y,
	                    visibility,
	                    j,
	                    overflow = [0, 0, 0, 0]; // top, right, bottom, left

	                // get out if not enabled
	                if (!series.visible || (!options.enabled && !series._hasPointLabels)) {
	                    return;
	                }

	                // run parent method
	                Series.prototype.drawDataLabels.apply(series);

	                each(data, function(point) {
	                    if (point.dataLabel && point.visible) { // #407, #2510

	                        // Arrange points for detection collision
	                        halves[point.half].push(point);

	                        // Reset positions (#4905)
	                        point.dataLabel._pos = null;
	                    }
	                });

	                /* Loop over the points in each half, starting from the top and bottom
	                 * of the pie to detect overlapping labels.
	                 */
	                each(halves, function(points, i) {

	                    var top,
	                        bottom,
	                        length = points.length,
	                        positions,
	                        naturalY,
	                        size;

	                    if (!length) {
	                        return;
	                    }

	                    // Sort by angle
	                    series.sortByAngle(points, i - 0.5);

	                    // Only do anti-collision when we are outside the pie and have connectors (#856)
	                    if (distanceOption > 0) {
	                        top = Math.max(0, centerY - radius - distanceOption);
	                        bottom = Math.min(centerY + radius + distanceOption, chart.plotHeight);
	                        positions = map(points, function(point) {
	                            if (point.dataLabel) {
	                                size = point.dataLabel.getBBox().height || 21;
	                                return {
	                                    target: point.labelPos[1] - top + size / 2,
	                                    size: size,
	                                    rank: point.y
	                                };
	                            }
	                        });
	                        H.distribute(positions, bottom + size - top);
	                    }

	                    // now the used slots are sorted, fill them up sequentially
	                    for (j = 0; j < length; j++) {

	                        point = points[j];
	                        labelPos = point.labelPos;
	                        dataLabel = point.dataLabel;
	                        visibility = point.visible === false ? 'hidden' : 'inherit';
	                        naturalY = labelPos[1];

	                        if (positions) {
	                            if (positions[j].pos === undefined) {
	                                visibility = 'hidden';
	                            } else {
	                                labelHeight = positions[j].size;
	                                y = top + positions[j].pos;
	                            }

	                        } else {
	                            y = naturalY;
	                        }

	                        // get the x - use the natural x position for labels near the top and bottom, to prevent the top
	                        // and botton slice connectors from touching each other on either side
	                        if (options.justify) {
	                            x = seriesCenter[0] + (i ? -1 : 1) * (radius + distanceOption);
	                        } else {
	                            x = series.getX(y < top + 2 || y > bottom - 2 ? naturalY : y, i);
	                        }


	                        // Record the placement and visibility
	                        dataLabel._attr = {
	                            visibility: visibility,
	                            align: labelPos[6]
	                        };
	                        dataLabel._pos = {
	                            x: x + options.x +
	                                ({
	                                    left: connectorPadding,
	                                    right: -connectorPadding
	                                }[labelPos[6]] || 0),
	                            y: y + options.y - 10 // 10 is for the baseline (label vs text)
	                        };
	                        labelPos.x = x;
	                        labelPos.y = y;


	                        // Detect overflowing data labels
	                        if (series.options.size === null) {
	                            dataLabelWidth = dataLabel.width;
	                            // Overflow left
	                            if (x - dataLabelWidth < connectorPadding) {
	                                overflow[3] = Math.max(Math.round(dataLabelWidth - x + connectorPadding), overflow[3]);

	                                // Overflow right
	                            } else if (x + dataLabelWidth > plotWidth - connectorPadding) {
	                                overflow[1] = Math.max(Math.round(x + dataLabelWidth - plotWidth + connectorPadding), overflow[1]);
	                            }

	                            // Overflow top
	                            if (y - labelHeight / 2 < 0) {
	                                overflow[0] = Math.max(Math.round(-y + labelHeight / 2), overflow[0]);

	                                // Overflow left
	                            } else if (y + labelHeight / 2 > plotHeight) {
	                                overflow[2] = Math.max(Math.round(y + labelHeight / 2 - plotHeight), overflow[2]);
	                            }
	                        }
	                    } // for each point
	                }); // for each half

	                // Do not apply the final placement and draw the connectors until we have verified
	                // that labels are not spilling over.
	                if (arrayMax(overflow) === 0 || this.verifyDataLabelOverflow(overflow)) {

	                    // Place the labels in the final position
	                    this.placeDataLabels();

	                    // Draw the connectors
	                    if (outside && connectorWidth) {
	                        each(this.points, function(point) {
	                            var isNew;

	                            connector = point.connector;
	                            dataLabel = point.dataLabel;

	                            if (dataLabel && dataLabel._pos && point.visible) {
	                                visibility = dataLabel._attr.visibility;

	                                isNew = !connector;

	                                if (isNew) {
	                                    point.connector = connector = chart.renderer.path()
	                                        .addClass('highcharts-data-label-connector highcharts-color-' + point.colorIndex)
	                                        .add(series.dataLabelsGroup);


	                                    connector.attr({
	                                        'stroke-width': connectorWidth,
	                                        'stroke': options.connectorColor || point.color || '#666666'
	                                    });

	                                }
	                                connector[isNew ? 'attr' : 'animate']({
	                                    d: series.connectorPath(point.labelPos)
	                                });
	                                connector.attr('visibility', visibility);

	                            } else if (connector) {
	                                point.connector = connector.destroy();
	                            }
	                        });
	                    }
	                }
	            };

	            /**
	             * Extendable method for getting the path of the connector between the data label
	             * and the pie slice.
	             */
	            seriesTypes.pie.prototype.connectorPath = function(labelPos) {
	                var x = labelPos.x,
	                    y = labelPos.y;
	                return pick(this.options.dataLabels.softConnector, true) ? [
	                    'M',
	                    x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label
	                    'C',
	                    x, y, // first break, next to the label
	                    2 * labelPos[2] - labelPos[4], 2 * labelPos[3] - labelPos[5],
	                    labelPos[2], labelPos[3], // second break
	                    'L',
	                    labelPos[4], labelPos[5] // base
	                ] : [
	                    'M',
	                    x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label
	                    'L',
	                    labelPos[2], labelPos[3], // second break
	                    'L',
	                    labelPos[4], labelPos[5] // base
	                ];
	            };

	            /**
	             * Perform the final placement of the data labels after we have verified that they
	             * fall within the plot area.
	             */
	            seriesTypes.pie.prototype.placeDataLabels = function() {
	                each(this.points, function(point) {
	                    var dataLabel = point.dataLabel,
	                        _pos;

	                    if (dataLabel && point.visible) {
	                        _pos = dataLabel._pos;
	                        if (_pos) {
	                            dataLabel.attr(dataLabel._attr);
	                            dataLabel[dataLabel.moved ? 'animate' : 'attr'](_pos);
	                            dataLabel.moved = true;
	                        } else if (dataLabel) {
	                            dataLabel.attr({
	                                y: -9999
	                            });
	                        }
	                    }
	                });
	            };

	            seriesTypes.pie.prototype.alignDataLabel = noop;

	            /**
	             * Verify whether the data labels are allowed to draw, or we should run more translation and data
	             * label positioning to keep them inside the plot area. Returns true when data labels are ready
	             * to draw.
	             */
	            seriesTypes.pie.prototype.verifyDataLabelOverflow = function(overflow) {

	                var center = this.center,
	                    options = this.options,
	                    centerOption = options.center,
	                    minSize = options.minSize || 80,
	                    newSize = minSize,
	                    ret;

	                // Handle horizontal size and center
	                if (centerOption[0] !== null) { // Fixed center
	                    newSize = Math.max(center[2] - Math.max(overflow[1], overflow[3]), minSize);

	                } else { // Auto center
	                    newSize = Math.max(
	                        center[2] - overflow[1] - overflow[3], // horizontal overflow
	                        minSize
	                    );
	                    center[0] += (overflow[3] - overflow[1]) / 2; // horizontal center
	                }

	                // Handle vertical size and center
	                if (centerOption[1] !== null) { // Fixed center
	                    newSize = Math.max(Math.min(newSize, center[2] - Math.max(overflow[0], overflow[2])), minSize);

	                } else { // Auto center
	                    newSize = Math.max(
	                        Math.min(
	                            newSize,
	                            center[2] - overflow[0] - overflow[2] // vertical overflow
	                        ),
	                        minSize
	                    );
	                    center[1] += (overflow[0] - overflow[2]) / 2; // vertical center
	                }

	                // If the size must be decreased, we need to run translate and drawDataLabels again
	                if (newSize < center[2]) {
	                    center[2] = newSize;
	                    center[3] = Math.min(relativeLength(options.innerSize || 0, newSize), newSize); // #3632
	                    this.translate(center);

	                    if (this.drawDataLabels) {
	                        this.drawDataLabels();
	                    }
	                    // Else, return true to indicate that the pie and its labels is within the plot area
	                } else {
	                    ret = true;
	                }
	                return ret;
	            };
	        }

	        if (seriesTypes.column) {

	            /**
	             * Override the basic data label alignment by adjusting for the position of the column
	             */
	            seriesTypes.column.prototype.alignDataLabel = function(point, dataLabel, options, alignTo, isNew) {
	                var inverted = this.chart.inverted,
	                    series = point.series,
	                    dlBox = point.dlBox || point.shapeArgs, // data label box for alignment
	                    below = pick(point.below, point.plotY > pick(this.translatedThreshold, series.yAxis.len)), // point.below is used in range series
	                    inside = pick(options.inside, !!this.options.stacking), // draw it inside the box?
	                    overshoot;

	                // Align to the column itself, or the top of it
	                if (dlBox) { // Area range uses this method but not alignTo
	                    alignTo = merge(dlBox);

	                    if (alignTo.y < 0) {
	                        alignTo.height += alignTo.y;
	                        alignTo.y = 0;
	                    }
	                    overshoot = alignTo.y + alignTo.height - series.yAxis.len;
	                    if (overshoot > 0) {
	                        alignTo.height -= overshoot;
	                    }

	                    if (inverted) {
	                        alignTo = {
	                            x: series.yAxis.len - alignTo.y - alignTo.height,
	                            y: series.xAxis.len - alignTo.x - alignTo.width,
	                            width: alignTo.height,
	                            height: alignTo.width
	                        };
	                    }

	                    // Compute the alignment box
	                    if (!inside) {
	                        if (inverted) {
	                            alignTo.x += below ? 0 : alignTo.width;
	                            alignTo.width = 0;
	                        } else {
	                            alignTo.y += below ? alignTo.height : 0;
	                            alignTo.height = 0;
	                        }
	                    }
	                }


	                // When alignment is undefined (typically columns and bars), display the individual
	                // point below or above the point depending on the threshold
	                options.align = pick(
	                    options.align, !inverted || inside ? 'center' : below ? 'right' : 'left'
	                );
	                options.verticalAlign = pick(
	                    options.verticalAlign,
	                    inverted || inside ? 'middle' : below ? 'top' : 'bottom'
	                );

	                // Call the parent method
	                Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);
	            };
	        }

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2009-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        /**
	         * Highcharts module to hide overlapping data labels. This module is included in Highcharts.
	         */
	        var Chart = H.Chart,
	            each = H.each,
	            pick = H.pick,
	            addEvent = H.addEvent;

	        // Collect potensial overlapping data labels. Stack labels probably don't need to be 
	        // considered because they are usually accompanied by data labels that lie inside the columns.
	        Chart.prototype.callbacks.push(function(chart) {
	            function collectAndHide() {
	                var labels = [];

	                each(chart.series, function(series) {
	                    var dlOptions = series.options.dataLabels,
	                        collections = series.dataLabelCollections || ['dataLabel']; // Range series have two collections
	                    if ((dlOptions.enabled || series._hasPointLabels) && !dlOptions.allowOverlap && series.visible) { // #3866
	                        each(collections, function(coll) {
	                            each(series.points, function(point) {
	                                if (point[coll]) {
	                                    point[coll].labelrank = pick(point.labelrank, point.shapeArgs && point.shapeArgs.height); // #4118
	                                    labels.push(point[coll]);
	                                }
	                            });
	                        });
	                    }
	                });
	                chart.hideOverlappingLabels(labels);
	            }

	            // Do it now ...
	            collectAndHide();

	            // ... and after each chart redraw
	            addEvent(chart, 'redraw', collectAndHide);

	        });

	        /**
	         * Hide overlapping labels. Labels are moved and faded in and out on zoom to provide a smooth 
	         * visual imression.
	         */
	        Chart.prototype.hideOverlappingLabels = function(labels) {

	            var len = labels.length,
	                label,
	                i,
	                j,
	                label1,
	                label2,
	                isIntersecting,
	                pos1,
	                pos2,
	                parent1,
	                parent2,
	                padding,
	                intersectRect = function(x1, y1, w1, h1, x2, y2, w2, h2) {
	                    return !(
	                        x2 > x1 + w1 ||
	                        x2 + w2 < x1 ||
	                        y2 > y1 + h1 ||
	                        y2 + h2 < y1
	                    );
	                };

	            // Mark with initial opacity
	            for (i = 0; i < len; i++) {
	                label = labels[i];
	                if (label) {
	                    label.oldOpacity = label.opacity;
	                    label.newOpacity = 1;
	                }
	            }

	            // Prevent a situation in a gradually rising slope, that each label
	            // will hide the previous one because the previous one always has
	            // lower rank.
	            labels.sort(function(a, b) {
	                return (b.labelrank || 0) - (a.labelrank || 0);
	            });

	            // Detect overlapping labels
	            for (i = 0; i < len; i++) {
	                label1 = labels[i];

	                for (j = i + 1; j < len; ++j) {
	                    label2 = labels[j];
	                    if (label1 && label2 && label1.placed && label2.placed && label1.newOpacity !== 0 && label2.newOpacity !== 0) {
	                        pos1 = label1.alignAttr;
	                        pos2 = label2.alignAttr;
	                        parent1 = label1.parentGroup; // Different panes have different positions
	                        parent2 = label2.parentGroup;
	                        padding = 2 * (label1.box ? 0 : label1.padding); // Substract the padding if no background or border (#4333)
	                        isIntersecting = intersectRect(
	                            pos1.x + parent1.translateX,
	                            pos1.y + parent1.translateY,
	                            label1.width - padding,
	                            label1.height - padding,
	                            pos2.x + parent2.translateX,
	                            pos2.y + parent2.translateY,
	                            label2.width - padding,
	                            label2.height - padding
	                        );

	                        if (isIntersecting) {
	                            (label1.labelrank < label2.labelrank ? label1 : label2).newOpacity = 0;
	                        }
	                    }
	                }
	            }

	            // Hide or show
	            each(labels, function(label) {
	                var complete,
	                    newOpacity;

	                if (label) {
	                    newOpacity = label.newOpacity;

	                    if (label.oldOpacity !== newOpacity && label.placed) {

	                        // Make sure the label is completely hidden to avoid catching clicks (#4362)
	                        if (newOpacity) {
	                            label.show(true);
	                        } else {
	                            complete = function() {
	                                label.hide();
	                            };
	                        }

	                        // Animate or set the opacity					
	                        label.alignAttr.opacity = newOpacity;
	                        label[label.isOld ? 'animate' : 'attr'](label.alignAttr, null, complete);

	                    }
	                    label.isOld = true;
	                }
	            });
	        };

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            Chart = H.Chart,
	            createElement = H.createElement,
	            css = H.css,
	            defaultOptions = H.defaultOptions,
	            defaultPlotOptions = H.defaultPlotOptions,
	            each = H.each,
	            extend = H.extend,
	            fireEvent = H.fireEvent,
	            hasTouch = H.hasTouch,
	            inArray = H.inArray,
	            isObject = H.isObject,
	            Legend = H.Legend,
	            merge = H.merge,
	            pick = H.pick,
	            Point = H.Point,
	            Series = H.Series,
	            seriesTypes = H.seriesTypes,
	            svg = H.svg,
	            TrackerMixin;

	        /**
	         * TrackerMixin for points and graphs.
	         *
	         * @mixin
	         */
	        TrackerMixin = H.TrackerMixin = {

	            /**
	             * Draw the tracker for a point.
	             */
	            drawTrackerPoint: function() {
	                var series = this,
	                    chart = series.chart,
	                    pointer = chart.pointer,
	                    onMouseOver = function(e) {
	                        var target = e.target,
	                            point;

	                        while (target && !point) {
	                            point = target.point;
	                            target = target.parentNode;
	                        }

	                        if (point !== undefined && point !== chart.hoverPoint) { // undefined on graph in scatterchart
	                            point.onMouseOver(e);
	                        }
	                    };

	                // Add reference to the point
	                each(series.points, function(point) {
	                    if (point.graphic) {
	                        point.graphic.element.point = point;
	                    }
	                    if (point.dataLabel) {
	                        if (point.dataLabel.div) {
	                            point.dataLabel.div.point = point;
	                        } else {
	                            point.dataLabel.element.point = point;
	                        }
	                    }
	                });

	                // Add the event listeners, we need to do this only once
	                if (!series._hasTracking) {
	                    each(series.trackerGroups, function(key) {
	                        if (series[key]) { // we don't always have dataLabelsGroup
	                            series[key]
	                                .addClass('highcharts-tracker')
	                                .on('mouseover', onMouseOver)
	                                .on('mouseout', function(e) {
	                                    pointer.onTrackerMouseOut(e);
	                                });
	                            if (hasTouch) {
	                                series[key].on('touchstart', onMouseOver);
	                            }


	                            if (series.options.cursor) {
	                                series[key]
	                                    .css(css)
	                                    .css({
	                                        cursor: series.options.cursor
	                                    });
	                            }

	                        }
	                    });
	                    series._hasTracking = true;
	                }
	            },

	            /**
	             * Draw the tracker object that sits above all data labels and markers to
	             * track mouse events on the graph or points. For the line type charts
	             * the tracker uses the same graphPath, but with a greater stroke width
	             * for better control.
	             */
	            drawTrackerGraph: function() {
	                var series = this,
	                    options = series.options,
	                    trackByArea = options.trackByArea,
	                    trackerPath = [].concat(trackByArea ? series.areaPath : series.graphPath),
	                    trackerPathLength = trackerPath.length,
	                    chart = series.chart,
	                    pointer = chart.pointer,
	                    renderer = chart.renderer,
	                    snap = chart.options.tooltip.snap,
	                    tracker = series.tracker,
	                    i,
	                    onMouseOver = function() {
	                        if (chart.hoverSeries !== series) {
	                            series.onMouseOver();
	                        }
	                    },
	                    /*
	                     * Empirical lowest possible opacities for TRACKER_FILL for an element to stay invisible but clickable
	                     * IE6: 0.002
	                     * IE7: 0.002
	                     * IE8: 0.002
	                     * IE9: 0.00000000001 (unlimited)
	                     * IE10: 0.0001 (exporting only)
	                     * FF: 0.00000000001 (unlimited)
	                     * Chrome: 0.000001
	                     * Safari: 0.000001
	                     * Opera: 0.00000000001 (unlimited)
	                     */
	                    TRACKER_FILL = 'rgba(192,192,192,' + (svg ? 0.0001 : 0.002) + ')';

	                // Extend end points. A better way would be to use round linecaps,
	                // but those are not clickable in VML.
	                if (trackerPathLength && !trackByArea) {
	                    i = trackerPathLength + 1;
	                    while (i--) {
	                        if (trackerPath[i] === 'M') { // extend left side
	                            trackerPath.splice(i + 1, 0, trackerPath[i + 1] - snap, trackerPath[i + 2], 'L');
	                        }
	                        if ((i && trackerPath[i] === 'M') || i === trackerPathLength) { // extend right side
	                            trackerPath.splice(i, 0, 'L', trackerPath[i - 2] + snap, trackerPath[i - 1]);
	                        }
	                    }
	                }

	                // handle single points
	                /*for (i = 0; i < singlePoints.length; i++) {
	                	singlePoint = singlePoints[i];
	                	trackerPath.push(M, singlePoint.plotX - snap, singlePoint.plotY,
	                	L, singlePoint.plotX + snap, singlePoint.plotY);
	                }*/

	                // draw the tracker
	                if (tracker) {
	                    tracker.attr({
	                        d: trackerPath
	                    });
	                } else if (series.graph) { // create

	                    series.tracker = renderer.path(trackerPath)
	                        .attr({
	                            'stroke-linejoin': 'round', // #1225
	                            visibility: series.visible ? 'visible' : 'hidden',
	                            stroke: TRACKER_FILL,
	                            fill: trackByArea ? TRACKER_FILL : 'none',
	                            'stroke-width': series.graph.strokeWidth() + (trackByArea ? 0 : 2 * snap),
	                            zIndex: 2
	                        })
	                        .add(series.group);

	                    // The tracker is added to the series group, which is clipped, but is covered
	                    // by the marker group. So the marker group also needs to capture events.
	                    each([series.tracker, series.markerGroup], function(tracker) {
	                        tracker.addClass('highcharts-tracker')
	                            .on('mouseover', onMouseOver)
	                            .on('mouseout', function(e) {
	                                pointer.onTrackerMouseOut(e);
	                            });


	                        if (options.cursor) {
	                            tracker.css({
	                                cursor: options.cursor
	                            });
	                        }


	                        if (hasTouch) {
	                            tracker.on('touchstart', onMouseOver);
	                        }
	                    });
	                }
	            }
	        };
	        /* End TrackerMixin */


	        /**
	         * Add tracking event listener to the series group, so the point graphics
	         * themselves act as trackers
	         */

	        if (seriesTypes.column) {
	            seriesTypes.column.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
	        }

	        if (seriesTypes.pie) {
	            seriesTypes.pie.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
	        }

	        if (seriesTypes.scatter) {
	            seriesTypes.scatter.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
	        }

	        /*
	         * Extend Legend for item events
	         */
	        extend(Legend.prototype, {

	            setItemEvents: function(item, legendItem, useHTML) {
	                var legend = this,
	                    chart = legend.chart,
	                    activeClass = 'highcharts-legend-' + (item.series ? 'point' : 'series') + '-active';

	                // Set the events on the item group, or in case of useHTML, the item itself (#1249)
	                (useHTML ? legendItem : item.legendGroup).on('mouseover', function() {
	                        item.setState('hover');

	                        // A CSS class to dim or hide other than the hovered series
	                        chart.seriesGroup.addClass(activeClass);


	                        legendItem.css(legend.options.itemHoverStyle);

	                    })
	                    .on('mouseout', function() {

	                        legendItem.css(item.visible ? legend.itemStyle : legend.itemHiddenStyle);


	                        // A CSS class to dim or hide other than the hovered series
	                        chart.seriesGroup.removeClass(activeClass);

	                        item.setState();
	                    })
	                    .on('click', function(event) {
	                        var strLegendItemClick = 'legendItemClick',
	                            fnLegendItemClick = function() {
	                                if (item.setVisible) {
	                                    item.setVisible();
	                                }
	                            };

	                        // Pass over the click/touch event. #4.
	                        event = {
	                            browserEvent: event
	                        };

	                        // click the name or symbol
	                        if (item.firePointEvent) { // point
	                            item.firePointEvent(strLegendItemClick, event, fnLegendItemClick);
	                        } else {
	                            fireEvent(item, strLegendItemClick, event, fnLegendItemClick);
	                        }
	                    });
	            },

	            createCheckboxForItem: function(item) {
	                var legend = this;

	                item.checkbox = createElement('input', {
	                    type: 'checkbox',
	                    checked: item.selected,
	                    defaultChecked: item.selected // required by IE7
	                }, legend.options.itemCheckboxStyle, legend.chart.container);

	                addEvent(item.checkbox, 'click', function(event) {
	                    var target = event.target;
	                    fireEvent(
	                        item.series || item,
	                        'checkboxClick', { // #3712
	                            checked: target.checked,
	                            item: item
	                        },
	                        function() {
	                            item.select();
	                        }
	                    );
	                });
	            }
	        });



	        // Add pointer cursor to legend itemstyle in defaultOptions
	        defaultOptions.legend.itemStyle.cursor = 'pointer';



	        /*
	         * Extend the Chart object with interaction
	         */

	        extend(Chart.prototype, /** @lends Chart.prototype */ {
	            /**
	             * Display the zoom button
	             */
	            showResetZoom: function() {
	                var chart = this,
	                    lang = defaultOptions.lang,
	                    btnOptions = chart.options.chart.resetZoomButton,
	                    theme = btnOptions.theme,
	                    states = theme.states,
	                    alignTo = btnOptions.relativeTo === 'chart' ? null : 'plotBox';

	                function zoomOut() {
	                    chart.zoomOut();
	                }

	                this.resetZoomButton = chart.renderer.button(lang.resetZoom, null, null, zoomOut, theme, states && states.hover)
	                    .attr({
	                        align: btnOptions.position.align,
	                        title: lang.resetZoomTitle
	                    })
	                    .addClass('highcharts-reset-zoom')
	                    .add()
	                    .align(btnOptions.position, false, alignTo);

	            },

	            /**
	             * Zoom out to 1:1
	             */
	            zoomOut: function() {
	                var chart = this;
	                fireEvent(chart, 'selection', {
	                    resetSelection: true
	                }, function() {
	                    chart.zoom();
	                });
	            },

	            /**
	             * Zoom into a given portion of the chart given by axis coordinates
	             * @param {Object} event
	             */
	            zoom: function(event) {
	                var chart = this,
	                    hasZoomed,
	                    pointer = chart.pointer,
	                    displayButton = false,
	                    resetZoomButton;

	                // If zoom is called with no arguments, reset the axes
	                if (!event || event.resetSelection) {
	                    each(chart.axes, function(axis) {
	                        hasZoomed = axis.zoom();
	                    });
	                } else { // else, zoom in on all axes
	                    each(event.xAxis.concat(event.yAxis), function(axisData) {
	                        var axis = axisData.axis,
	                            isXAxis = axis.isXAxis;

	                        // don't zoom more than minRange
	                        if (pointer[isXAxis ? 'zoomX' : 'zoomY']) {
	                            hasZoomed = axis.zoom(axisData.min, axisData.max);
	                            if (axis.displayBtn) {
	                                displayButton = true;
	                            }
	                        }
	                    });
	                }

	                // Show or hide the Reset zoom button
	                resetZoomButton = chart.resetZoomButton;
	                if (displayButton && !resetZoomButton) {
	                    chart.showResetZoom();
	                } else if (!displayButton && isObject(resetZoomButton)) {
	                    chart.resetZoomButton = resetZoomButton.destroy();
	                }


	                // Redraw
	                if (hasZoomed) {
	                    chart.redraw(
	                        pick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100) // animation
	                    );
	                }
	            },

	            /**
	             * Pan the chart by dragging the mouse across the pane. This function is called
	             * on mouse move, and the distance to pan is computed from chartX compared to
	             * the first chartX position in the dragging operation.
	             */
	            pan: function(e, panning) {

	                var chart = this,
	                    hoverPoints = chart.hoverPoints,
	                    doRedraw;

	                // remove active points for shared tooltip
	                if (hoverPoints) {
	                    each(hoverPoints, function(point) {
	                        point.setState();
	                    });
	                }

	                each(panning === 'xy' ? [1, 0] : [1], function(isX) { // xy is used in maps
	                    var axis = chart[isX ? 'xAxis' : 'yAxis'][0],
	                        horiz = axis.horiz,
	                        mousePos = e[horiz ? 'chartX' : 'chartY'],
	                        mouseDown = horiz ? 'mouseDownX' : 'mouseDownY',
	                        startPos = chart[mouseDown],
	                        halfPointRange = (axis.pointRange || 0) / 2,
	                        extremes = axis.getExtremes(),
	                        panMin = axis.toValue(startPos - mousePos, true) +
	                        halfPointRange,
	                        panMax = axis.toValue(startPos + axis.len - mousePos, true) -
	                        halfPointRange,
	                        flipped = panMax < panMin,
	                        newMin = flipped ? panMax : panMin,
	                        newMax = flipped ? panMin : panMax,
	                        distMin = Math.min(extremes.dataMin, extremes.min) - newMin,
	                        distMax = newMax - Math.max(extremes.dataMax, extremes.max);

	                    // Negative distMin and distMax means that we're still inside the
	                    // data range.
	                    if (axis.series.length && distMin < 0 && distMax < 0) {
	                        axis.setExtremes(
	                            newMin,
	                            newMax,
	                            false,
	                            false, {
	                                trigger: 'pan'
	                            }
	                        );
	                        doRedraw = true;
	                    }

	                    chart[mouseDown] = mousePos; // set new reference for next run
	                });

	                if (doRedraw) {
	                    chart.redraw(false);
	                }
	                css(chart.container, {
	                    cursor: 'move'
	                });
	            }
	        });

	        /*
	         * Extend the Point object with interaction
	         */
	        extend(Point.prototype, /** @lends Point.prototype */ {
	            /**
	             * Toggle the selection status of a point
	             * @param {Boolean} selected Whether to select or unselect the point.
	             * @param {Boolean} accumulate Whether to add to the previous selection. By default,
	             *		 this happens if the control key (Cmd on Mac) was pressed during clicking.
	             */
	            select: function(selected, accumulate) {
	                var point = this,
	                    series = point.series,
	                    chart = series.chart;

	                selected = pick(selected, !point.selected);

	                // fire the event with the default handler
	                point.firePointEvent(selected ? 'select' : 'unselect', {
	                    accumulate: accumulate
	                }, function() {
	                    point.selected = point.options.selected = selected;
	                    series.options.data[inArray(point, series.data)] = point.options;

	                    point.setState(selected && 'select');

	                    // unselect all other points unless Ctrl or Cmd + click
	                    if (!accumulate) {
	                        each(chart.getSelectedPoints(), function(loopPoint) {
	                            if (loopPoint.selected && loopPoint !== point) {
	                                loopPoint.selected = loopPoint.options.selected = false;
	                                series.options.data[inArray(loopPoint, series.data)] = loopPoint.options;
	                                loopPoint.setState('');
	                                loopPoint.firePointEvent('unselect');
	                            }
	                        });
	                    }
	                });
	            },

	            /**
	             * Runs on mouse over the point
	             *
	             * @param {Object} e The event arguments
	             * @param {Boolean} byProximity Falsy for kd points that are closest to the mouse, or to
	             *        actually hovered points. True for other points in shared tooltip.
	             */
	            onMouseOver: function(e, byProximity) {
	                var point = this,
	                    series = point.series,
	                    chart = series.chart,
	                    tooltip = chart.tooltip,
	                    hoverPoint = chart.hoverPoint;

	                if (point.series) { // It may have been destroyed, #4130
	                    // In shared tooltip, call mouse over when point/series is actually hovered: (#5766)
	                    if (!byProximity) {
	                        // set normal state to previous series
	                        if (hoverPoint && hoverPoint !== point) {
	                            hoverPoint.onMouseOut();
	                        }
	                        if (chart.hoverSeries !== series) {
	                            series.onMouseOver();
	                        }
	                        chart.hoverPoint = point;
	                    }

	                    // update the tooltip
	                    if (tooltip && (!tooltip.shared || series.noSharedTooltip)) {
	                        // hover point only for non shared points: (#5766)
	                        point.setState('hover');
	                        tooltip.refresh(point, e);
	                    } else if (!tooltip) {
	                        point.setState('hover');
	                    }

	                    // trigger the event
	                    point.firePointEvent('mouseOver');
	                }
	            },

	            /**
	             * Runs on mouse out from the point
	             */
	            onMouseOut: function() {
	                var chart = this.series.chart,
	                    hoverPoints = chart.hoverPoints;

	                this.firePointEvent('mouseOut');

	                if (!hoverPoints || inArray(this, hoverPoints) === -1) { // #887, #2240
	                    this.setState();
	                    chart.hoverPoint = null;
	                }
	            },

	            /**
	             * Import events from the series' and point's options. Only do it on
	             * demand, to save processing time on hovering.
	             */
	            importEvents: function() {
	                if (!this.hasImportedEvents) {
	                    var point = this,
	                        options = merge(point.series.options.point, point.options),
	                        events = options.events,
	                        eventType;

	                    point.events = events;

	                    for (eventType in events) {
	                        addEvent(point, eventType, events[eventType]);
	                    }
	                    this.hasImportedEvents = true;

	                }
	            },

	            /**
	             * Set the point's state
	             * @param {String} state
	             */
	            setState: function(state, move) {
	                var point = this,
	                    plotX = Math.floor(point.plotX), // #4586
	                    plotY = point.plotY,
	                    series = point.series,
	                    stateOptions = series.options.states[state] || {},
	                    markerOptions = defaultPlotOptions[series.type].marker &&
	                    series.options.marker,
	                    normalDisabled = markerOptions && markerOptions.enabled === false,
	                    markerStateOptions = (markerOptions && markerOptions.states &&
	                        markerOptions.states[state]) || {},
	                    stateDisabled = markerStateOptions.enabled === false,
	                    stateMarkerGraphic = series.stateMarkerGraphic,
	                    pointMarker = point.marker || {},
	                    chart = series.chart,
	                    halo = series.halo,
	                    haloOptions,
	                    markerAttribs,
	                    hasMarkers = markerOptions && series.markerAttribs,
	                    newSymbol;

	                state = state || ''; // empty string

	                if (
	                    // already has this state
	                    (state === point.state && !move) ||
	                    // selected points don't respond to hover
	                    (point.selected && state !== 'select') ||
	                    // series' state options is disabled
	                    (stateOptions.enabled === false) ||
	                    // general point marker's state options is disabled
	                    (state && (stateDisabled || (normalDisabled && markerStateOptions.enabled === false))) ||
	                    // individual point marker's state options is disabled
	                    (state && pointMarker.states && pointMarker.states[state] && pointMarker.states[state].enabled === false) // #1610

	                ) {
	                    return;
	                }

	                if (hasMarkers) {
	                    markerAttribs = series.markerAttribs(point, state);
	                }

	                // Apply hover styles to the existing point
	                if (point.graphic) {

	                    if (point.state) {
	                        point.graphic.removeClass('highcharts-point-' + point.state);
	                    }
	                    if (state) {
	                        point.graphic.addClass('highcharts-point-' + state);
	                    }

	                    /*attribs = radius ? { // new symbol attributes (#507, #612)
	                    	x: plotX - radius,
	                    	y: plotY - radius,
	                    	width: 2 * radius,
	                    	height: 2 * radius
	                    } : {};*/


	                    //attribs = merge(series.pointAttribs(point, state), attribs);
	                    point.graphic.attr(series.pointAttribs(point, state));


	                    if (markerAttribs) {
	                        point.graphic.animate(
	                            markerAttribs,
	                            pick(
	                                chart.options.chart.animation, // Turn off globally
	                                markerStateOptions.animation,
	                                markerOptions.animation
	                            )
	                        );
	                    }

	                    // Zooming in from a range with no markers to a range with markers
	                    if (stateMarkerGraphic) {
	                        stateMarkerGraphic.hide();
	                    }
	                } else {
	                    // if a graphic is not applied to each point in the normal state, create a shared
	                    // graphic for the hover state
	                    if (state && markerStateOptions) {
	                        newSymbol = pointMarker.symbol || series.symbol;

	                        // If the point has another symbol than the previous one, throw away the
	                        // state marker graphic and force a new one (#1459)
	                        if (stateMarkerGraphic && stateMarkerGraphic.currentSymbol !== newSymbol) {
	                            stateMarkerGraphic = stateMarkerGraphic.destroy();
	                        }

	                        // Add a new state marker graphic
	                        if (!stateMarkerGraphic) {
	                            if (newSymbol) {
	                                series.stateMarkerGraphic = stateMarkerGraphic = chart.renderer.symbol(
	                                        newSymbol,
	                                        markerAttribs.x,
	                                        markerAttribs.y,
	                                        markerAttribs.width,
	                                        markerAttribs.height
	                                    )
	                                    .add(series.markerGroup);
	                                stateMarkerGraphic.currentSymbol = newSymbol;
	                            }

	                            // Move the existing graphic
	                        } else {
	                            stateMarkerGraphic[move ? 'animate' : 'attr']({ // #1054
	                                x: markerAttribs.x,
	                                y: markerAttribs.y
	                            });
	                        }

	                        if (stateMarkerGraphic) {
	                            stateMarkerGraphic.attr(series.pointAttribs(point, state));
	                        }

	                    }

	                    if (stateMarkerGraphic) {
	                        stateMarkerGraphic[state && chart.isInsidePlot(plotX, plotY, chart.inverted) ? 'show' : 'hide'](); // #2450
	                        stateMarkerGraphic.element.point = point; // #4310
	                    }
	                }

	                // Show me your halo
	                haloOptions = stateOptions.halo;
	                if (haloOptions && haloOptions.size) {
	                    if (!halo) {
	                        series.halo = halo = chart.renderer.path()
	                            // #5818, #5903
	                            .add(hasMarkers ? series.markerGroup : series.group);
	                    }
	                    halo[move ? 'animate' : 'attr']({
	                        d: point.haloPath(haloOptions.size)
	                    });
	                    halo.attr({
	                        'class': 'highcharts-halo highcharts-color-' +
	                            pick(point.colorIndex, series.colorIndex)
	                    });
	                    halo.point = point; // #6055


	                    halo.attr(extend({
	                        'fill': point.color || series.color,
	                        'fill-opacity': haloOptions.opacity,
	                        'zIndex': -1 // #4929, IE8 added halo above everything
	                    }, haloOptions.attributes));


	                } else if (halo && halo.point && halo.point.haloPath) {
	                    // Animate back to 0 on the current halo point (#6055)
	                    halo.animate({
	                        d: halo.point.haloPath(0)
	                    });
	                }

	                point.state = state;
	            },

	            /**
	             * Get the circular path definition for the halo
	             * @param  {Number} size The radius of the circular halo.
	             * @returns {Array} The path definition
	             */
	            haloPath: function(size) {
	                var series = this.series,
	                    chart = series.chart;

	                return chart.renderer.symbols.circle(
	                    Math.floor(this.plotX) - size,
	                    this.plotY - size,
	                    size * 2,
	                    size * 2
	                );
	            }
	        });

	        /*
	         * Extend the Series object with interaction
	         */

	        extend(Series.prototype, /** @lends Series.prototype */ {
	            /**
	             * Series mouse over handler
	             */
	            onMouseOver: function() {
	                var series = this,
	                    chart = series.chart,
	                    hoverSeries = chart.hoverSeries;

	                // set normal state to previous series
	                if (hoverSeries && hoverSeries !== series) {
	                    hoverSeries.onMouseOut();
	                }

	                // trigger the event, but to save processing time,
	                // only if defined
	                if (series.options.events.mouseOver) {
	                    fireEvent(series, 'mouseOver');
	                }

	                // hover this
	                series.setState('hover');
	                chart.hoverSeries = series;
	            },

	            /**
	             * Series mouse out handler
	             */
	            onMouseOut: function() {
	                // trigger the event only if listeners exist
	                var series = this,
	                    options = series.options,
	                    chart = series.chart,
	                    tooltip = chart.tooltip,
	                    hoverPoint = chart.hoverPoint;

	                chart.hoverSeries = null; // #182, set to null before the mouseOut event fires

	                // trigger mouse out on the point, which must be in this series
	                if (hoverPoint) {
	                    hoverPoint.onMouseOut();
	                }

	                // fire the mouse out event
	                if (series && options.events.mouseOut) {
	                    fireEvent(series, 'mouseOut');
	                }


	                // hide the tooltip
	                if (tooltip && !options.stickyTracking && (!tooltip.shared || series.noSharedTooltip)) {
	                    tooltip.hide();
	                }

	                // set normal state
	                series.setState();
	            },

	            /**
	             * Set the state of the graph
	             */
	            setState: function(state) {
	                var series = this,
	                    options = series.options,
	                    graph = series.graph,
	                    stateOptions = options.states,
	                    lineWidth = options.lineWidth,
	                    attribs,
	                    i = 0;

	                state = state || '';

	                if (series.state !== state) {

	                    // Toggle class names
	                    each([series.group, series.markerGroup], function(group) {
	                        if (group) {
	                            // Old state
	                            if (series.state) {
	                                group.removeClass('highcharts-series-' + series.state);
	                            }
	                            // New state
	                            if (state) {
	                                group.addClass('highcharts-series-' + state);
	                            }
	                        }
	                    });

	                    series.state = state;



	                    if (stateOptions[state] && stateOptions[state].enabled === false) {
	                        return;
	                    }

	                    if (state) {
	                        lineWidth = stateOptions[state].lineWidth || lineWidth + (stateOptions[state].lineWidthPlus || 0); // #4035
	                    }

	                    if (graph && !graph.dashstyle) { // hover is turned off for dashed lines in VML
	                        attribs = {
	                            'stroke-width': lineWidth
	                        };
	                        // use attr because animate will cause any other animation on the graph to stop
	                        graph.attr(attribs);
	                        while (series['zone-graph-' + i]) {
	                            series['zone-graph-' + i].attr(attribs);
	                            i = i + 1;
	                        }
	                    }

	                }
	            },

	            /**
	             * Set the visibility of the graph
	             *
	             * @param vis {Boolean} True to show the series, false to hide. If undefined,
	             *				the visibility is toggled.
	             */
	            setVisible: function(vis, redraw) {
	                var series = this,
	                    chart = series.chart,
	                    legendItem = series.legendItem,
	                    showOrHide,
	                    ignoreHiddenSeries = chart.options.chart.ignoreHiddenSeries,
	                    oldVisibility = series.visible;

	                // if called without an argument, toggle visibility
	                series.visible = vis = series.options.visible = series.userOptions.visible = vis === undefined ? !oldVisibility : vis; // #5618
	                showOrHide = vis ? 'show' : 'hide';

	                // show or hide elements
	                each(['group', 'dataLabelsGroup', 'markerGroup', 'tracker', 'tt'], function(key) {
	                    if (series[key]) {
	                        series[key][showOrHide]();
	                    }
	                });


	                // hide tooltip (#1361)
	                if (chart.hoverSeries === series || (chart.hoverPoint && chart.hoverPoint.series) === series) {
	                    series.onMouseOut();
	                }


	                if (legendItem) {
	                    chart.legend.colorizeItem(series, vis);
	                }


	                // rescale or adapt to resized chart
	                series.isDirty = true;
	                // in a stack, all other series are affected
	                if (series.options.stacking) {
	                    each(chart.series, function(otherSeries) {
	                        if (otherSeries.options.stacking && otherSeries.visible) {
	                            otherSeries.isDirty = true;
	                        }
	                    });
	                }

	                // show or hide linked series
	                each(series.linkedSeries, function(otherSeries) {
	                    otherSeries.setVisible(vis, false);
	                });

	                if (ignoreHiddenSeries) {
	                    chart.isDirtyBox = true;
	                }
	                if (redraw !== false) {
	                    chart.redraw();
	                }

	                fireEvent(series, showOrHide);
	            },

	            /**
	             * Show the graph
	             */
	            show: function() {
	                this.setVisible(true);
	            },

	            /**
	             * Hide the graph
	             */
	            hide: function() {
	                this.setVisible(false);
	            },


	            /**
	             * Set the selected state of the graph
	             *
	             * @param selected {Boolean} True to select the series, false to unselect. If
	             *				undefined, the selection state is toggled.
	             */
	            select: function(selected) {
	                var series = this;
	                // if called without an argument, toggle
	                series.selected = selected = (selected === undefined) ? !series.selected : selected;

	                if (series.checkbox) {
	                    series.checkbox.checked = selected;
	                }

	                fireEvent(series, selected ? 'select' : 'unselect');
	            },

	            drawTracker: TrackerMixin.drawTrackerGraph
	        });

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var Chart = H.Chart,
	            each = H.each,
	            inArray = H.inArray,
	            isObject = H.isObject,
	            pick = H.pick,
	            splat = H.splat;

	        /**
	         * Update the chart based on the current chart/document size and options for responsiveness
	         */
	        Chart.prototype.setResponsive = function(redraw) {
	            var options = this.options.responsive;

	            if (options && options.rules) {
	                each(options.rules, function(rule) {
	                    this.matchResponsiveRule(rule, redraw);
	                }, this);
	            }
	        };

	        /**
	         * Handle a single responsiveness rule
	         */
	        Chart.prototype.matchResponsiveRule = function(rule, redraw) {
	            var respRules = this.respRules,
	                condition = rule.condition,
	                matches,
	                fn = condition.callback || function() {
	                    return this.chartWidth <= pick(condition.maxWidth, Number.MAX_VALUE) &&
	                        this.chartHeight <= pick(condition.maxHeight, Number.MAX_VALUE) &&
	                        this.chartWidth >= pick(condition.minWidth, 0) &&
	                        this.chartHeight >= pick(condition.minHeight, 0);
	                };


	            if (rule._id === undefined) {
	                rule._id = H.uniqueKey();
	            }
	            matches = fn.call(this);

	            // Apply a rule
	            if (!respRules[rule._id] && matches) {

	                // Store the current state of the options
	                if (rule.chartOptions) {
	                    respRules[rule._id] = this.currentOptions(rule.chartOptions);
	                    this.update(rule.chartOptions, redraw);
	                }

	                // Unapply a rule based on the previous options before the rule
	                // was applied
	            } else if (respRules[rule._id] && !matches) {
	                this.update(respRules[rule._id], redraw);
	                delete respRules[rule._id];
	            }
	        };

	        /**
	         * Get the current values for a given set of options. Used before we update
	         * the chart with a new responsiveness rule.
	         * TODO: Restore axis options (by id?)
	         */
	        Chart.prototype.currentOptions = function(options) {

	            var ret = {};

	            /**
	             * Recurse over a set of options and its current values,
	             * and store the current values in the ret object.
	             */
	            function getCurrent(options, curr, ret, depth) {
	                var key, i;
	                for (key in options) {
	                    if (!depth && inArray(key, ['series', 'xAxis', 'yAxis']) > -1) {
	                        options[key] = splat(options[key]);

	                        ret[key] = [];
	                        for (i = 0; i < options[key].length; i++) {
	                            ret[key][i] = {};
	                            getCurrent(
	                                options[key][i],
	                                curr[key][i],
	                                ret[key][i],
	                                depth + 1
	                            );
	                        }
	                    } else if (isObject(options[key])) {
	                        ret[key] = {};
	                        getCurrent(
	                            options[key],
	                            curr[key] || {},
	                            ret[key],
	                            depth + 1
	                        );
	                    } else {
	                        ret[key] = curr[key] || null;
	                    }
	                }
	            }

	            getCurrent(options, this.options, ret, 0);
	            return ret;
	        };

	    }(Highcharts));
	    var Highcharts = (function(Highcharts) {

	        'use strict';
	        return Highcharts;
	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            Axis = H.Axis,
	            Chart = H.Chart,
	            css = H.css,
	            dateFormat = H.dateFormat,
	            defined = H.defined,
	            each = H.each,
	            extend = H.extend,
	            noop = H.noop,
	            Series = H.Series,
	            timeUnits = H.timeUnits,
	            wrap = H.wrap;

	        /* ****************************************************************************
	         * Start ordinal axis logic                                                   *
	         *****************************************************************************/


	        wrap(Series.prototype, 'init', function(proceed) {
	            var series = this,
	                xAxis;

	            // call the original function
	            proceed.apply(this, Array.prototype.slice.call(arguments, 1));

	            xAxis = series.xAxis;

	            // Destroy the extended ordinal index on updated data
	            if (xAxis && xAxis.options.ordinal) {
	                addEvent(series, 'updatedData', function() {
	                    delete xAxis.ordinalIndex;
	                });
	            }
	        });

	        /**
	         * In an ordinal axis, there might be areas with dense consentrations of points, then large
	         * gaps between some. Creating equally distributed ticks over this entire range
	         * may lead to a huge number of ticks that will later be removed. So instead, break the
	         * positions up in segments, find the tick positions for each segment then concatenize them.
	         * This method is used from both data grouping logic and X axis tick position logic.
	         */
	        wrap(Axis.prototype, 'getTimeTicks', function(proceed, normalizedInterval, min, max, startOfWeek, positions, closestDistance, findHigherRanks) {

	            var start = 0,
	                end,
	                segmentPositions,
	                higherRanks = {},
	                hasCrossedHigherRank,
	                info,
	                posLength,
	                outsideMax,
	                groupPositions = [],
	                lastGroupPosition = -Number.MAX_VALUE,
	                tickPixelIntervalOption = this.options.tickPixelInterval;

	            // The positions are not always defined, for example for ordinal positions when data
	            // has regular interval (#1557, #2090)
	            if ((!this.options.ordinal && !this.options.breaks) || !positions || positions.length < 3 || min === undefined) {
	                return proceed.call(this, normalizedInterval, min, max, startOfWeek);
	            }

	            // Analyze the positions array to split it into segments on gaps larger than 5 times
	            // the closest distance. The closest distance is already found at this point, so
	            // we reuse that instead of computing it again.
	            posLength = positions.length;

	            for (end = 0; end < posLength; end++) {

	                outsideMax = end && positions[end - 1] > max;

	                if (positions[end] < min) { // Set the last position before min
	                    start = end;
	                }

	                if (end === posLength - 1 || positions[end + 1] - positions[end] > closestDistance * 5 || outsideMax) {

	                    // For each segment, calculate the tick positions from the getTimeTicks utility
	                    // function. The interval will be the same regardless of how long the segment is.
	                    if (positions[end] > lastGroupPosition) { // #1475

	                        segmentPositions = proceed.call(this, normalizedInterval, positions[start], positions[end], startOfWeek);

	                        // Prevent duplicate groups, for example for multiple segments within one larger time frame (#1475)
	                        while (segmentPositions.length && segmentPositions[0] <= lastGroupPosition) {
	                            segmentPositions.shift();
	                        }
	                        if (segmentPositions.length) {
	                            lastGroupPosition = segmentPositions[segmentPositions.length - 1];
	                        }

	                        groupPositions = groupPositions.concat(segmentPositions);
	                    }
	                    // Set start of next segment
	                    start = end + 1;
	                }

	                if (outsideMax) {
	                    break;
	                }
	            }

	            // Get the grouping info from the last of the segments. The info is the same for
	            // all segments.
	            info = segmentPositions.info;

	            // Optionally identify ticks with higher rank, for example when the ticks
	            // have crossed midnight.
	            if (findHigherRanks && info.unitRange <= timeUnits.hour) {
	                end = groupPositions.length - 1;

	                // Compare points two by two
	                for (start = 1; start < end; start++) {
	                    if (dateFormat('%d', groupPositions[start]) !== dateFormat('%d', groupPositions[start - 1])) {
	                        higherRanks[groupPositions[start]] = 'day';
	                        hasCrossedHigherRank = true;
	                    }
	                }

	                // If the complete array has crossed midnight, we want to mark the first
	                // positions also as higher rank
	                if (hasCrossedHigherRank) {
	                    higherRanks[groupPositions[0]] = 'day';
	                }
	                info.higherRanks = higherRanks;
	            }

	            // Save the info
	            groupPositions.info = info;



	            // Don't show ticks within a gap in the ordinal axis, where the space between
	            // two points is greater than a portion of the tick pixel interval
	            if (findHigherRanks && defined(tickPixelIntervalOption)) { // check for squashed ticks

	                var length = groupPositions.length,
	                    i = length,
	                    itemToRemove,
	                    translated,
	                    translatedArr = [],
	                    lastTranslated,
	                    medianDistance,
	                    distance,
	                    distances = [];

	                // Find median pixel distance in order to keep a reasonably even distance between
	                // ticks (#748)
	                while (i--) {
	                    translated = this.translate(groupPositions[i]);
	                    if (lastTranslated) {
	                        distances[i] = lastTranslated - translated;
	                    }
	                    translatedArr[i] = lastTranslated = translated;
	                }
	                distances.sort();
	                medianDistance = distances[Math.floor(distances.length / 2)];
	                if (medianDistance < tickPixelIntervalOption * 0.6) {
	                    medianDistance = null;
	                }

	                // Now loop over again and remove ticks where needed
	                i = groupPositions[length - 1] > max ? length - 1 : length; // #817
	                lastTranslated = undefined;
	                while (i--) {
	                    translated = translatedArr[i];
	                    distance = Math.abs(lastTranslated - translated);
	                    // #4175 - when axis is reversed, the distance, is negative but 
	                    // tickPixelIntervalOption positive, so we need to compare the same values

	                    // Remove ticks that are closer than 0.6 times the pixel interval from the one to the right,
	                    // but not if it is close to the median distance (#748).
	                    if (lastTranslated && distance < tickPixelIntervalOption * 0.8 &&
	                        (medianDistance === null || distance < medianDistance * 0.8)) {

	                        // Is this a higher ranked position with a normal position to the right?
	                        if (higherRanks[groupPositions[i]] && !higherRanks[groupPositions[i + 1]]) {

	                            // Yes: remove the lower ranked neighbour to the right
	                            itemToRemove = i + 1;
	                            lastTranslated = translated; // #709

	                        } else {

	                            // No: remove this one
	                            itemToRemove = i;
	                        }

	                        groupPositions.splice(itemToRemove, 1);

	                    } else {
	                        lastTranslated = translated;
	                    }
	                }
	            }
	            return groupPositions;
	        });

	        // Extend the Axis prototype
	        extend(Axis.prototype, /** @lends Axis.prototype */ {

	            /**
	             * Calculate the ordinal positions before tick positions are calculated.
	             */
	            beforeSetTickPositions: function() {
	                var axis = this,
	                    len,
	                    ordinalPositions = [],
	                    useOrdinal = false,
	                    dist,
	                    extremes = axis.getExtremes(),
	                    min = extremes.min,
	                    max = extremes.max,
	                    minIndex,
	                    maxIndex,
	                    slope,
	                    hasBreaks = axis.isXAxis && !!axis.options.breaks,
	                    isOrdinal = axis.options.ordinal,
	                    ignoreHiddenSeries = axis.chart.options.chart.ignoreHiddenSeries,
	                    i;

	                // apply the ordinal logic
	                if (isOrdinal || hasBreaks) { // #4167 YAxis is never ordinal ?

	                    each(axis.series, function(series, i) {

	                        if ((!ignoreHiddenSeries || series.visible !== false) && (series.takeOrdinalPosition !== false || hasBreaks)) {

	                            // concatenate the processed X data into the existing positions, or the empty array
	                            ordinalPositions = ordinalPositions.concat(series.processedXData);
	                            len = ordinalPositions.length;

	                            // remove duplicates (#1588)
	                            ordinalPositions.sort(function(a, b) {
	                                return a - b; // without a custom function it is sorted as strings
	                            });

	                            if (len) {
	                                i = len - 1;
	                                while (i--) {
	                                    if (ordinalPositions[i] === ordinalPositions[i + 1]) {
	                                        ordinalPositions.splice(i, 1);
	                                    }
	                                }
	                            }
	                        }

	                    });

	                    // cache the length
	                    len = ordinalPositions.length;

	                    // Check if we really need the overhead of mapping axis data against the ordinal positions.
	                    // If the series consist of evenly spaced data any way, we don't need any ordinal logic.
	                    if (len > 2) { // two points have equal distance by default
	                        dist = ordinalPositions[1] - ordinalPositions[0];
	                        i = len - 1;
	                        while (i-- && !useOrdinal) {
	                            if (ordinalPositions[i + 1] - ordinalPositions[i] !== dist) {
	                                useOrdinal = true;
	                            }
	                        }

	                        // When zooming in on a week, prevent axis padding for weekends even though the data within
	                        // the week is evenly spaced.
	                        if (!axis.options.keepOrdinalPadding && (ordinalPositions[0] - min > dist || max - ordinalPositions[ordinalPositions.length - 1] > dist)) {
	                            useOrdinal = true;
	                        }
	                    }

	                    // Record the slope and offset to compute the linear values from the array index.
	                    // Since the ordinal positions may exceed the current range, get the start and
	                    // end positions within it (#719, #665b)
	                    if (useOrdinal) {

	                        // Register
	                        axis.ordinalPositions = ordinalPositions;

	                        // This relies on the ordinalPositions being set. Use Math.max
	                        // and Math.min to prevent padding on either sides of the data.
	                        minIndex = axis.ordinal2lin( // #5979
	                            Math.max(
	                                min,
	                                ordinalPositions[0]
	                            ),
	                            true
	                        );
	                        maxIndex = Math.max(axis.ordinal2lin(
	                            Math.min(
	                                max,
	                                ordinalPositions[ordinalPositions.length - 1]
	                            ),
	                            true
	                        ), 1); // #3339

	                        // Set the slope and offset of the values compared to the indices in the ordinal positions
	                        axis.ordinalSlope = slope = (max - min) / (maxIndex - minIndex);
	                        axis.ordinalOffset = min - (minIndex * slope);

	                    } else {
	                        axis.ordinalPositions = axis.ordinalSlope = axis.ordinalOffset = undefined;
	                    }
	                }
	                axis.isOrdinal = isOrdinal && useOrdinal; // #3818, #4196, #4926
	                axis.groupIntervalFactor = null; // reset for next run
	            },
	            /**
	             * Translate from a linear axis value to the corresponding ordinal axis position. If there
	             * are no gaps in the ordinal axis this will be the same. The translated value is the value
	             * that the point would have if the axis were linear, using the same min and max.
	             *
	             * @param Number val The axis value
	             * @param Boolean toIndex Whether to return the index in the ordinalPositions or the new value
	             */
	            val2lin: function(val, toIndex) {
	                var axis = this,
	                    ordinalPositions = axis.ordinalPositions,
	                    ret;

	                if (!ordinalPositions) {
	                    ret = val;

	                } else {

	                    var ordinalLength = ordinalPositions.length,
	                        i,
	                        distance,
	                        ordinalIndex;

	                    // first look for an exact match in the ordinalpositions array
	                    i = ordinalLength;
	                    while (i--) {
	                        if (ordinalPositions[i] === val) {
	                            ordinalIndex = i;
	                            break;
	                        }
	                    }

	                    // if that failed, find the intermediate position between the two nearest values
	                    i = ordinalLength - 1;
	                    while (i--) {
	                        if (val > ordinalPositions[i] || i === 0) { // interpolate
	                            distance = (val - ordinalPositions[i]) / (ordinalPositions[i + 1] - ordinalPositions[i]); // something between 0 and 1
	                            ordinalIndex = i + distance;
	                            break;
	                        }
	                    }
	                    ret = toIndex ?
	                        ordinalIndex :
	                        axis.ordinalSlope * (ordinalIndex || 0) + axis.ordinalOffset;
	                }
	                return ret;
	            },
	            /**
	             * Translate from linear (internal) to axis value
	             *
	             * @param Number val The linear abstracted value
	             * @param Boolean fromIndex Translate from an index in the ordinal positions rather than a value
	             */
	            lin2val: function(val, fromIndex) {
	                var axis = this,
	                    ordinalPositions = axis.ordinalPositions,
	                    ret;

	                if (!ordinalPositions) { // the visible range contains only equally spaced values
	                    ret = val;

	                } else {

	                    var ordinalSlope = axis.ordinalSlope,
	                        ordinalOffset = axis.ordinalOffset,
	                        i = ordinalPositions.length - 1,
	                        linearEquivalentLeft,
	                        linearEquivalentRight,
	                        distance;


	                    // Handle the case where we translate from the index directly, used only
	                    // when panning an ordinal axis
	                    if (fromIndex) {

	                        if (val < 0) { // out of range, in effect panning to the left
	                            val = ordinalPositions[0];
	                        } else if (val > i) { // out of range, panning to the right
	                            val = ordinalPositions[i];
	                        } else { // split it up
	                            i = Math.floor(val);
	                            distance = val - i; // the decimal
	                        }

	                        // Loop down along the ordinal positions. When the linear equivalent of i matches
	                        // an ordinal position, interpolate between the left and right values.
	                    } else {
	                        while (i--) {
	                            linearEquivalentLeft = (ordinalSlope * i) + ordinalOffset;
	                            if (val >= linearEquivalentLeft) {
	                                linearEquivalentRight = (ordinalSlope * (i + 1)) + ordinalOffset;
	                                distance = (val - linearEquivalentLeft) / (linearEquivalentRight - linearEquivalentLeft); // something between 0 and 1
	                                break;
	                            }
	                        }
	                    }

	                    // If the index is within the range of the ordinal positions, return the associated
	                    // or interpolated value. If not, just return the value
	                    return distance !== undefined && ordinalPositions[i] !== undefined ?
	                        ordinalPositions[i] + (distance ? distance * (ordinalPositions[i + 1] - ordinalPositions[i]) : 0) :
	                        val;
	                }
	                return ret;
	            },
	            /**
	             * Get the ordinal positions for the entire data set. This is necessary in chart panning
	             * because we need to find out what points or data groups are available outside the
	             * visible range. When a panning operation starts, if an index for the given grouping
	             * does not exists, it is created and cached. This index is deleted on updated data, so
	             * it will be regenerated the next time a panning operation starts.
	             */
	            getExtendedPositions: function() {
	                var axis = this,
	                    chart = axis.chart,
	                    grouping = axis.series[0].currentDataGrouping,
	                    ordinalIndex = axis.ordinalIndex,
	                    key = grouping ? grouping.count + grouping.unitName : 'raw',
	                    extremes = axis.getExtremes(),
	                    fakeAxis,
	                    fakeSeries;

	                // If this is the first time, or the ordinal index is deleted by updatedData,
	                // create it.
	                if (!ordinalIndex) {
	                    ordinalIndex = axis.ordinalIndex = {};
	                }


	                if (!ordinalIndex[key]) {

	                    // Create a fake axis object where the extended ordinal positions are emulated
	                    fakeAxis = {
	                        series: [],
	                        chart: chart,
	                        getExtremes: function() {
	                            return {
	                                min: extremes.dataMin,
	                                max: extremes.dataMax
	                            };
	                        },
	                        options: {
	                            ordinal: true
	                        },
	                        val2lin: Axis.prototype.val2lin // #2590
	                    };

	                    // Add the fake series to hold the full data, then apply processData to it
	                    each(axis.series, function(series) {
	                        fakeSeries = {
	                            xAxis: fakeAxis,
	                            xData: series.xData,
	                            chart: chart,
	                            destroyGroupedData: noop
	                        };
	                        fakeSeries.options = {
	                            dataGrouping: grouping ? {
	                                enabled: true,
	                                forced: true,
	                                approximation: 'open', // doesn't matter which, use the fastest
	                                units: [
	                                    [grouping.unitName, [grouping.count]]
	                                ]
	                            } : {
	                                enabled: false
	                            }
	                        };
	                        series.processData.apply(fakeSeries);

	                        fakeAxis.series.push(fakeSeries);
	                    });

	                    // Run beforeSetTickPositions to compute the ordinalPositions
	                    axis.beforeSetTickPositions.apply(fakeAxis);

	                    // Cache it
	                    ordinalIndex[key] = fakeAxis.ordinalPositions;
	                }
	                return ordinalIndex[key];
	            },

	            /**
	             * Find the factor to estimate how wide the plot area would have been if ordinal
	             * gaps were included. This value is used to compute an imagined plot width in order
	             * to establish the data grouping interval.
	             *
	             * A real world case is the intraday-candlestick
	             * example. Without this logic, it would show the correct data grouping when viewing
	             * a range within each day, but once moving the range to include the gap between two
	             * days, the interval would include the cut-away night hours and the data grouping
	             * would be wrong. So the below method tries to compensate by identifying the most
	             * common point interval, in this case days.
	             *
	             * An opposite case is presented in issue #718. We have a long array of daily data,
	             * then one point is appended one hour after the last point. We expect the data grouping
	             * not to change.
	             *
	             * In the future, if we find cases where this estimation doesn't work optimally, we
	             * might need to add a second pass to the data grouping logic, where we do another run
	             * with a greater interval if the number of data groups is more than a certain fraction
	             * of the desired group count.
	             */
	            getGroupIntervalFactor: function(xMin, xMax, series) {
	                var i,
	                    processedXData = series.processedXData,
	                    len = processedXData.length,
	                    distances = [],
	                    median,
	                    groupIntervalFactor = this.groupIntervalFactor;

	                // Only do this computation for the first series, let the other inherit it (#2416)
	                if (!groupIntervalFactor) {

	                    // Register all the distances in an array
	                    for (i = 0; i < len - 1; i++) {
	                        distances[i] = processedXData[i + 1] - processedXData[i];
	                    }

	                    // Sort them and find the median
	                    distances.sort(function(a, b) {
	                        return a - b;
	                    });
	                    median = distances[Math.floor(len / 2)];

	                    // Compensate for series that don't extend through the entire axis extent. #1675.
	                    xMin = Math.max(xMin, processedXData[0]);
	                    xMax = Math.min(xMax, processedXData[len - 1]);

	                    this.groupIntervalFactor = groupIntervalFactor = (len * median) / (xMax - xMin);
	                }

	                // Return the factor needed for data grouping
	                return groupIntervalFactor;
	            },

	            /**
	             * Make the tick intervals closer because the ordinal gaps make the ticks spread out or cluster
	             */
	            postProcessTickInterval: function(tickInterval) {
	                // Problem: http://jsfiddle.net/highcharts/FQm4E/1/
	                // This is a case where this algorithm doesn't work optimally. In this case, the
	                // tick labels are spread out per week, but all the gaps reside within weeks. So
	                // we have a situation where the labels are courser than the ordinal gaps, and
	                // thus the tick interval should not be altered
	                var ordinalSlope = this.ordinalSlope,
	                    ret;


	                if (ordinalSlope) {
	                    if (!this.options.breaks) {
	                        ret = tickInterval / (ordinalSlope / this.closestPointRange);
	                    } else {
	                        ret = this.closestPointRange;
	                    }
	                } else {
	                    ret = tickInterval;
	                }
	                return ret;
	            }
	        });

	        // Record this to prevent overwriting by broken-axis module (#5979)
	        Axis.prototype.ordinal2lin = Axis.prototype.val2lin;

	        // Extending the Chart.pan method for ordinal axes
	        wrap(Chart.prototype, 'pan', function(proceed, e) {
	            var chart = this,
	                xAxis = chart.xAxis[0],
	                chartX = e.chartX,
	                runBase = false;

	            if (xAxis.options.ordinal && xAxis.series.length) {

	                var mouseDownX = chart.mouseDownX,
	                    extremes = xAxis.getExtremes(),
	                    dataMax = extremes.dataMax,
	                    min = extremes.min,
	                    max = extremes.max,
	                    trimmedRange,
	                    hoverPoints = chart.hoverPoints,
	                    closestPointRange = xAxis.closestPointRange,
	                    pointPixelWidth = xAxis.translationSlope * (xAxis.ordinalSlope || closestPointRange),
	                    movedUnits = (mouseDownX - chartX) / pointPixelWidth, // how many ordinal units did we move?
	                    extendedAxis = {
	                        ordinalPositions: xAxis.getExtendedPositions()
	                    }, // get index of all the chart's points
	                    ordinalPositions,
	                    searchAxisLeft,
	                    lin2val = xAxis.lin2val,
	                    val2lin = xAxis.val2lin,
	                    searchAxisRight;

	                if (!extendedAxis.ordinalPositions) { // we have an ordinal axis, but the data is equally spaced
	                    runBase = true;

	                } else if (Math.abs(movedUnits) > 1) {

	                    // Remove active points for shared tooltip
	                    if (hoverPoints) {
	                        each(hoverPoints, function(point) {
	                            point.setState();
	                        });
	                    }

	                    if (movedUnits < 0) {
	                        searchAxisLeft = extendedAxis;
	                        searchAxisRight = xAxis.ordinalPositions ? xAxis : extendedAxis;
	                    } else {
	                        searchAxisLeft = xAxis.ordinalPositions ? xAxis : extendedAxis;
	                        searchAxisRight = extendedAxis;
	                    }

	                    // In grouped data series, the last ordinal position represents the grouped data, which is
	                    // to the left of the real data max. If we don't compensate for this, we will be allowed
	                    // to pan grouped data series passed the right of the plot area.
	                    ordinalPositions = searchAxisRight.ordinalPositions;
	                    if (dataMax > ordinalPositions[ordinalPositions.length - 1]) {
	                        ordinalPositions.push(dataMax);
	                    }

	                    // Get the new min and max values by getting the ordinal index for the current extreme,
	                    // then add the moved units and translate back to values. This happens on the
	                    // extended ordinal positions if the new position is out of range, else it happens
	                    // on the current x axis which is smaller and faster.
	                    chart.fixedRange = max - min;
	                    trimmedRange = xAxis.toFixedRange(null, null,
	                        lin2val.apply(searchAxisLeft, [
	                            val2lin.apply(searchAxisLeft, [min, true]) + movedUnits, // the new index
	                            true // translate from index
	                        ]),
	                        lin2val.apply(searchAxisRight, [
	                            val2lin.apply(searchAxisRight, [max, true]) + movedUnits, // the new index
	                            true // translate from index
	                        ])
	                    );

	                    // Apply it if it is within the available data range
	                    if (trimmedRange.min >= Math.min(extremes.dataMin, min) && trimmedRange.max <= Math.max(dataMax, max)) {
	                        xAxis.setExtremes(trimmedRange.min, trimmedRange.max, true, false, {
	                            trigger: 'pan'
	                        });
	                    }

	                    chart.mouseDownX = chartX; // set new reference for next run
	                    css(chart.container, {
	                        cursor: 'move'
	                    });
	                }

	            } else {
	                runBase = true;
	            }

	            // revert to the linear chart.pan version
	            if (runBase) {
	                // call the original function
	                proceed.apply(this, Array.prototype.slice.call(arguments, 1));
	            }
	        });



	        /**
	         * Extend getGraphPath by identifying gaps in the ordinal data so that we can draw a gap in the
	         * line or area
	         */
	        Series.prototype.gappedPath = function() {
	            var gapSize = this.options.gapSize,
	                points = this.points.slice(),
	                i = points.length - 1;

	            if (gapSize && i > 0) { // #5008

	                // extension for ordinal breaks
	                while (i--) {
	                    if (points[i + 1].x - points[i].x > this.closestPointRange * gapSize) {
	                        points.splice( // insert after this one
	                            i + 1,
	                            0, {
	                                isNull: true
	                            }
	                        );
	                    }
	                }
	            }

	            // Call base method
	            //return proceed.call(this, points, a, b);
	            return this.getGraphPath(points);
	        };

	        /* ****************************************************************************
	         * End ordinal axis logic                                                   *
	         *****************************************************************************/

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2009-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';

	        var pick = H.pick,
	            wrap = H.wrap,
	            each = H.each,
	            extend = H.extend,
	            isArray = H.isArray,
	            fireEvent = H.fireEvent,
	            Axis = H.Axis,
	            Series = H.Series;

	        function stripArguments() {
	            return Array.prototype.slice.call(arguments, 1);
	        }

	        extend(Axis.prototype, {
	            isInBreak: function(brk, val) {
	                var ret,
	                    repeat = brk.repeat || Infinity,
	                    from = brk.from,
	                    length = brk.to - brk.from,
	                    test = (val >= from ? (val - from) % repeat : repeat - ((from - val) % repeat));

	                if (!brk.inclusive) {
	                    ret = test < length && test !== 0;
	                } else {
	                    ret = test <= length;
	                }
	                return ret;
	            },

	            isInAnyBreak: function(val, testKeep) {

	                var breaks = this.options.breaks,
	                    i = breaks && breaks.length,
	                    inbrk,
	                    keep,
	                    ret;


	                if (i) {

	                    while (i--) {
	                        if (this.isInBreak(breaks[i], val)) {
	                            inbrk = true;
	                            if (!keep) {
	                                keep = pick(breaks[i].showPoints, this.isXAxis ? false : true);
	                            }
	                        }
	                    }

	                    if (inbrk && testKeep) {
	                        ret = inbrk && !keep;
	                    } else {
	                        ret = inbrk;
	                    }
	                }
	                return ret;
	            }
	        });

	        wrap(Axis.prototype, 'setTickPositions', function(proceed) {
	            proceed.apply(this, Array.prototype.slice.call(arguments, 1));

	            if (this.options.breaks) {
	                var axis = this,
	                    tickPositions = this.tickPositions,
	                    info = this.tickPositions.info,
	                    newPositions = [],
	                    i;

	                for (i = 0; i < tickPositions.length; i++) {
	                    if (!axis.isInAnyBreak(tickPositions[i])) {
	                        newPositions.push(tickPositions[i]);
	                    }
	                }

	                this.tickPositions = newPositions;
	                this.tickPositions.info = info;
	            }
	        });

	        wrap(Axis.prototype, 'init', function(proceed, chart, userOptions) {
	            var axis = this,
	                breaks;
	            // Force Axis to be not-ordinal when breaks are defined
	            if (userOptions.breaks && userOptions.breaks.length) {
	                userOptions.ordinal = false;
	            }
	            proceed.call(this, chart, userOptions);
	            breaks = this.options.breaks;
	            axis.isBroken = (isArray(breaks) && !!breaks.length);
	            if (axis.isBroken) {
	                axis.val2lin = function(val) {
	                    var nval = val,
	                        brk,
	                        i;

	                    for (i = 0; i < axis.breakArray.length; i++) {
	                        brk = axis.breakArray[i];
	                        if (brk.to <= val) {
	                            nval -= brk.len;
	                        } else if (brk.from >= val) {
	                            break;
	                        } else if (axis.isInBreak(brk, val)) {
	                            nval -= (val - brk.from);
	                            break;
	                        }
	                    }

	                    return nval;
	                };

	                axis.lin2val = function(val) {
	                    var nval = val,
	                        brk,
	                        i;

	                    for (i = 0; i < axis.breakArray.length; i++) {
	                        brk = axis.breakArray[i];
	                        if (brk.from >= nval) {
	                            break;
	                        } else if (brk.to < nval) {
	                            nval += brk.len;
	                        } else if (axis.isInBreak(brk, nval)) {
	                            nval += brk.len;
	                        }
	                    }
	                    return nval;
	                };

	                axis.setExtremes = function(newMin, newMax, redraw, animation, eventArguments) {
	                    // If trying to set extremes inside a break, extend it to before and after the break ( #3857 )
	                    while (this.isInAnyBreak(newMin)) {
	                        newMin -= this.closestPointRange;
	                    }
	                    while (this.isInAnyBreak(newMax)) {
	                        newMax -= this.closestPointRange;
	                    }
	                    Axis.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);
	                };

	                axis.setAxisTranslation = function(saveOld) {
	                    Axis.prototype.setAxisTranslation.call(this, saveOld);

	                    var breaks = axis.options.breaks,
	                        breakArrayT = [], // Temporary one
	                        breakArray = [],
	                        length = 0,
	                        inBrk,
	                        repeat,
	                        brk,
	                        min = axis.userMin || axis.min,
	                        max = axis.userMax || axis.max,
	                        start,
	                        i,
	                        j;

	                    // Min & max check (#4247)
	                    for (i in breaks) {
	                        brk = breaks[i];
	                        repeat = brk.repeat || Infinity;
	                        if (axis.isInBreak(brk, min)) {
	                            min += (brk.to % repeat) - (min % repeat);
	                        }
	                        if (axis.isInBreak(brk, max)) {
	                            max -= (max % repeat) - (brk.from % repeat);
	                        }
	                    }

	                    // Construct an array holding all breaks in the axis
	                    for (i in breaks) {
	                        brk = breaks[i];
	                        start = brk.from;
	                        repeat = brk.repeat || Infinity;

	                        while (start - repeat > min) {
	                            start -= repeat;
	                        }
	                        while (start < min) {
	                            start += repeat;
	                        }

	                        for (j = start; j < max; j += repeat) {
	                            breakArrayT.push({
	                                value: j,
	                                move: 'in'
	                            });
	                            breakArrayT.push({
	                                value: j + (brk.to - brk.from),
	                                move: 'out',
	                                size: brk.breakSize
	                            });
	                        }
	                    }

	                    breakArrayT.sort(function(a, b) {
	                        var ret;
	                        if (a.value === b.value) {
	                            ret = (a.move === 'in' ? 0 : 1) - (b.move === 'in' ? 0 : 1);
	                        } else {
	                            ret = a.value - b.value;
	                        }
	                        return ret;
	                    });

	                    // Simplify the breaks
	                    inBrk = 0;
	                    start = min;

	                    for (i in breakArrayT) {
	                        brk = breakArrayT[i];
	                        inBrk += (brk.move === 'in' ? 1 : -1);

	                        if (inBrk === 1 && brk.move === 'in') {
	                            start = brk.value;
	                        }
	                        if (inBrk === 0) {
	                            breakArray.push({
	                                from: start,
	                                to: brk.value,
	                                len: brk.value - start - (brk.size || 0)
	                            });
	                            length += brk.value - start - (brk.size || 0);
	                        }
	                    }

	                    axis.breakArray = breakArray;

	                    fireEvent(axis, 'afterBreaks');

	                    axis.transA *= ((max - axis.min) / (max - min - length));

	                    axis.min = min;
	                    axis.max = max;
	                };
	            }
	        });

	        wrap(Series.prototype, 'generatePoints', function(proceed) {

	            proceed.apply(this, stripArguments(arguments));

	            var series = this,
	                xAxis = series.xAxis,
	                yAxis = series.yAxis,
	                points = series.points,
	                point,
	                i = points.length,
	                connectNulls = series.options.connectNulls,
	                nullGap;


	            if (xAxis && yAxis && (xAxis.options.breaks || yAxis.options.breaks)) {
	                while (i--) {
	                    point = points[i];

	                    nullGap = point.y === null && connectNulls === false; // respect nulls inside the break (#4275)
	                    if (!nullGap && (xAxis.isInAnyBreak(point.x, true) || yAxis.isInAnyBreak(point.y, true))) {
	                        points.splice(i, 1);
	                        if (this.data[i]) {
	                            this.data[i].destroyElements(); // removes the graphics for this point if they exist
	                        }
	                    }
	                }
	            }

	        });

	        function drawPointsWrapped(proceed) {
	            proceed.apply(this);
	            this.drawBreaks(this.xAxis, ['x']);
	            this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));
	        }

	        H.Series.prototype.drawBreaks = function(axis, keys) {
	            var series = this,
	                points = series.points,
	                breaks,
	                threshold,
	                eventName,
	                y;

	            if (!axis) {
	                return; // #5950
	            }

	            each(keys, function(key) {
	                breaks = axis.breakArray || [];
	                threshold = axis.isXAxis ? axis.min : pick(series.options.threshold, axis.min);
	                each(points, function(point) {
	                    y = pick(point['stack' + key.toUpperCase()], point[key]);
	                    each(breaks, function(brk) {
	                        eventName = false;

	                        if ((threshold < brk.from && y > brk.to) || (threshold > brk.from && y < brk.from)) {
	                            eventName = 'pointBreak';
	                        } else if ((threshold < brk.from && y > brk.from && y < brk.to) || (threshold > brk.from && y > brk.to && y < brk.from)) { // point falls inside the break
	                            eventName = 'pointInBreak';
	                        }
	                        if (eventName) {
	                            fireEvent(axis, eventName, {
	                                point: point,
	                                brk: brk
	                            });
	                        }
	                    });
	                });
	            });
	        };

	        wrap(H.seriesTypes.column.prototype, 'drawPoints', drawPointsWrapped);
	        wrap(H.Series.prototype, 'drawPoints', drawPointsWrapped);

	    }(Highcharts));
	    (function() {

	        'use strict';

	    }());
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var arrayMax = H.arrayMax,
	            arrayMin = H.arrayMin,
	            Axis = H.Axis,
	            defaultPlotOptions = H.defaultPlotOptions,
	            defined = H.defined,
	            each = H.each,
	            extend = H.extend,
	            format = H.format,
	            isNumber = H.isNumber,
	            merge = H.merge,
	            pick = H.pick,
	            Point = H.Point,
	            Series = H.Series,
	            Tooltip = H.Tooltip,
	            wrap = H.wrap;

	        /* ****************************************************************************
	         * Start data grouping module												 *
	         ******************************************************************************/

	        var seriesProto = Series.prototype,
	            baseProcessData = seriesProto.processData,
	            baseGeneratePoints = seriesProto.generatePoints,
	            baseDestroy = seriesProto.destroy,

	            commonOptions = {
	                approximation: 'average', // average, open, high, low, close, sum
	                //enabled: null, // (true for stock charts, false for basic),
	                //forced: undefined,
	                groupPixelWidth: 2,
	                // the first one is the point or start value, the second is the start value if we're dealing with range,
	                // the third one is the end value if dealing with a range
	                dateTimeLabelFormats: {
	                    millisecond: ['%A, %b %e, %H:%M:%S.%L', '%A, %b %e, %H:%M:%S.%L', '-%H:%M:%S.%L'],
	                    second: ['%A, %b %e, %H:%M:%S', '%A, %b %e, %H:%M:%S', '-%H:%M:%S'],
	                    minute: ['%A, %b %e, %H:%M', '%A, %b %e, %H:%M', '-%H:%M'],
	                    hour: ['%A, %b %e, %H:%M', '%A, %b %e, %H:%M', '-%H:%M'],
	                    day: ['%A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],
	                    week: ['Week from %A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],
	                    month: ['%B %Y', '%B', '-%B %Y'],
	                    year: ['%Y', '%Y', '-%Y']
	                }
	                // smoothed = false, // enable this for navigator series only
	            },

	            specificOptions = { // extends common options
	                line: {},
	                spline: {},
	                area: {},
	                areaspline: {},
	                column: {
	                    approximation: 'sum',
	                    groupPixelWidth: 10
	                },
	                arearange: {
	                    approximation: 'range'
	                },
	                areasplinerange: {
	                    approximation: 'range'
	                },
	                columnrange: {
	                    approximation: 'range',
	                    groupPixelWidth: 10
	                },
	                candlestick: {
	                    approximation: 'ohlc',
	                    groupPixelWidth: 10
	                },
	                ohlc: {
	                    approximation: 'ohlc',
	                    groupPixelWidth: 5
	                }
	            },

	            // units are defined in a separate array to allow complete overriding in case of a user option
	            defaultDataGroupingUnits = H.defaultDataGroupingUnits = [
	                [
	                    'millisecond', // unit name
	                    [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples
	                ],
	                [
	                    'second', [1, 2, 5, 10, 15, 30]
	                ],
	                [
	                    'minute', [1, 2, 5, 10, 15, 30]
	                ],
	                [
	                    'hour', [1, 2, 3, 4, 6, 8, 12]
	                ],
	                [
	                    'day', [1]
	                ],
	                [
	                    'week', [1]
	                ],
	                [
	                    'month', [1, 3, 6]
	                ],
	                [
	                    'year',
	                    null
	                ]
	            ],


	            /**
	             * Define the available approximation types. The data grouping approximations takes an array
	             * or numbers as the first parameter. In case of ohlc, four arrays are sent in as four parameters.
	             * Each array consists only of numbers. In case null values belong to the group, the property
	             * .hasNulls will be set to true on the array.
	             */
	            approximations = {
	                sum: function(arr) {
	                    var len = arr.length,
	                        ret;

	                    // 1. it consists of nulls exclusively
	                    if (!len && arr.hasNulls) {
	                        ret = null;
	                        // 2. it has a length and real values
	                    } else if (len) {
	                        ret = 0;
	                        while (len--) {
	                            ret += arr[len];
	                        }
	                    }
	                    // 3. it has zero length, so just return undefined
	                    // => doNothing()

	                    return ret;
	                },
	                average: function(arr) {
	                    var len = arr.length,
	                        ret = approximations.sum(arr);

	                    // If we have a number, return it divided by the length. If not, return
	                    // null or undefined based on what the sum method finds.
	                    if (isNumber(ret) && len) {
	                        ret = ret / len;
	                    }

	                    return ret;
	                },
	                open: function(arr) {
	                    return arr.length ? arr[0] : (arr.hasNulls ? null : undefined);
	                },
	                high: function(arr) {
	                    return arr.length ? arrayMax(arr) : (arr.hasNulls ? null : undefined);
	                },
	                low: function(arr) {
	                    return arr.length ? arrayMin(arr) : (arr.hasNulls ? null : undefined);
	                },
	                close: function(arr) {
	                    return arr.length ? arr[arr.length - 1] : (arr.hasNulls ? null : undefined);
	                },
	                // ohlc and range are special cases where a multidimensional array is input and an array is output
	                ohlc: function(open, high, low, close) {
	                    open = approximations.open(open);
	                    high = approximations.high(high);
	                    low = approximations.low(low);
	                    close = approximations.close(close);

	                    if (isNumber(open) || isNumber(high) || isNumber(low) || isNumber(close)) {
	                        return [open, high, low, close];
	                    }
	                    // else, return is undefined
	                },
	                range: function(low, high) {
	                    low = approximations.low(low);
	                    high = approximations.high(high);

	                    if (isNumber(low) || isNumber(high)) {
	                        return [low, high];
	                    }
	                    // else, return is undefined
	                }
	            };


	        /**
	         * Takes parallel arrays of x and y data and groups the data into intervals defined by groupPositions, a collection
	         * of starting x values for each group.
	         */
	        seriesProto.groupData = function(xData, yData, groupPositions, approximation) {
	            var series = this,
	                data = series.data,
	                dataOptions = series.options.data,
	                groupedXData = [],
	                groupedYData = [],
	                groupMap = [],
	                dataLength = xData.length,
	                pointX,
	                pointY,
	                groupedY,
	                handleYData = !!yData, // when grouping the fake extended axis for panning, we don't need to consider y
	                values = [
	                    [],
	                    [],
	                    [],
	                    []
	                ],
	                approximationFn = typeof approximation === 'function' ? approximation : approximations[approximation],
	                pointArrayMap = series.pointArrayMap,
	                pointArrayMapLength = pointArrayMap && pointArrayMap.length,
	                i,
	                pos = 0,
	                start = 0;

	            // Start with the first point within the X axis range (#2696)
	            for (i = 0; i <= dataLength; i++) {
	                if (xData[i] >= groupPositions[0]) {
	                    break;
	                }
	            }

	            for (i; i <= dataLength; i++) {

	                // when a new group is entered, summarize and initiate the previous group
	                while ((groupPositions[pos + 1] !== undefined && xData[i] >= groupPositions[pos + 1]) ||
	                    i === dataLength) { // get the last group

	                    // get group x and y
	                    pointX = groupPositions[pos];
	                    series.dataGroupInfo = {
	                        start: start,
	                        length: values[0].length
	                    };
	                    groupedY = approximationFn.apply(series, values);

	                    // push the grouped data
	                    if (groupedY !== undefined) {
	                        groupedXData.push(pointX);
	                        groupedYData.push(groupedY);
	                        groupMap.push(series.dataGroupInfo);
	                    }

	                    // reset the aggregate arrays
	                    start = i;
	                    values[0] = [];
	                    values[1] = [];
	                    values[2] = [];
	                    values[3] = [];

	                    // Advance on the group positions
	                    pos += 1;

	                    // don't loop beyond the last group
	                    if (i === dataLength) {
	                        break;
	                    }
	                }

	                // break out
	                if (i === dataLength) {
	                    break;
	                }

	                // for each raw data point, push it to an array that contains all values for this specific group
	                if (pointArrayMap) {

	                    var index = series.cropStart + i,
	                        point = (data && data[index]) || series.pointClass.prototype.applyOptions.apply({
	                            series: series
	                        }, [dataOptions[index]]),
	                        j,
	                        val;

	                    for (j = 0; j < pointArrayMapLength; j++) {
	                        val = point[pointArrayMap[j]];
	                        if (isNumber(val)) {
	                            values[j].push(val);
	                        } else if (val === null) {
	                            values[j].hasNulls = true;
	                        }
	                    }

	                } else {
	                    pointY = handleYData ? yData[i] : null;

	                    if (isNumber(pointY)) {
	                        values[0].push(pointY);
	                    } else if (pointY === null) {
	                        values[0].hasNulls = true;
	                    }
	                }
	            }

	            return [groupedXData, groupedYData, groupMap];
	        };

	        /**
	         * Extend the basic processData method, that crops the data to the current zoom
	         * range, with data grouping logic.
	         */
	        seriesProto.processData = function() {
	            var series = this,
	                chart = series.chart,
	                options = series.options,
	                dataGroupingOptions = options.dataGrouping,
	                groupingEnabled = series.allowDG !== false && dataGroupingOptions &&
	                pick(dataGroupingOptions.enabled, chart.options.isStock),
	                visible = series.visible || !chart.options.chart.ignoreHiddenSeries,
	                hasGroupedData,
	                skip;

	            // run base method
	            series.forceCrop = groupingEnabled; // #334
	            series.groupPixelWidth = null; // #2110
	            series.hasProcessed = true; // #2692

	            // skip if processData returns false or if grouping is disabled (in that order) or #5493
	            skip = baseProcessData.apply(series, arguments) === false ||
	                !groupingEnabled || !visible;
	            if (!skip) {
	                series.destroyGroupedData();

	                var i,
	                    processedXData = series.processedXData,
	                    processedYData = series.processedYData,
	                    plotSizeX = chart.plotSizeX,
	                    xAxis = series.xAxis,
	                    ordinal = xAxis.options.ordinal,
	                    groupPixelWidth = series.groupPixelWidth = xAxis.getGroupPixelWidth && xAxis.getGroupPixelWidth();

	                // Execute grouping if the amount of points is greater than the limit defined in groupPixelWidth
	                if (groupPixelWidth) {
	                    hasGroupedData = true;

	                    series.isDirty = true; // force recreation of point instances in series.translate, #5699

	                    var extremes = xAxis.getExtremes(),
	                        xMin = extremes.min,
	                        xMax = extremes.max,
	                        groupIntervalFactor = (ordinal && xAxis.getGroupIntervalFactor(xMin, xMax, series)) || 1,
	                        interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) * groupIntervalFactor,
	                        groupPositions = xAxis.getTimeTicks(
	                            xAxis.normalizeTimeTickInterval(interval, dataGroupingOptions.units || defaultDataGroupingUnits),
	                            Math.min(xMin, processedXData[0]), // Processed data may extend beyond axis (#4907)
	                            Math.max(xMax, processedXData[processedXData.length - 1]),
	                            xAxis.options.startOfWeek,
	                            processedXData,
	                            series.closestPointRange
	                        ),
	                        groupedData = seriesProto.groupData.apply(series, [processedXData, processedYData, groupPositions, dataGroupingOptions.approximation]),
	                        groupedXData = groupedData[0],
	                        groupedYData = groupedData[1];

	                    // prevent the smoothed data to spill out left and right, and make
	                    // sure data is not shifted to the left
	                    if (dataGroupingOptions.smoothed) {
	                        i = groupedXData.length - 1;
	                        groupedXData[i] = Math.min(groupedXData[i], xMax);
	                        while (i-- && i > 0) {
	                            groupedXData[i] += interval / 2;
	                        }
	                        groupedXData[0] = Math.max(groupedXData[0], xMin);
	                    }

	                    // record what data grouping values were used
	                    series.currentDataGrouping = groupPositions.info;
	                    series.closestPointRange = groupPositions.info.totalRange;
	                    series.groupMap = groupedData[2];

	                    // Make sure the X axis extends to show the first group (#2533)
	                    if (defined(groupedXData[0]) && groupedXData[0] < xAxis.dataMin) {
	                        if (xAxis.min === xAxis.dataMin) {
	                            xAxis.min = groupedXData[0];
	                        }
	                        xAxis.dataMin = groupedXData[0];
	                    }

	                    // set series props
	                    series.processedXData = groupedXData;
	                    series.processedYData = groupedYData;
	                } else {
	                    series.currentDataGrouping = series.groupMap = null;
	                }
	                series.hasGroupedData = hasGroupedData;
	            }
	        };

	        /**
	         * Destroy the grouped data points. #622, #740
	         */
	        seriesProto.destroyGroupedData = function() {

	            var groupedData = this.groupedData;

	            // clear previous groups
	            each(groupedData || [], function(point, i) {
	                if (point) {
	                    groupedData[i] = point.destroy ? point.destroy() : null;
	                }
	            });
	            this.groupedData = null;
	        };

	        /**
	         * Override the generatePoints method by adding a reference to grouped data
	         */
	        seriesProto.generatePoints = function() {

	            baseGeneratePoints.apply(this);

	            // record grouped data in order to let it be destroyed the next time processData runs
	            this.destroyGroupedData(); // #622
	            this.groupedData = this.hasGroupedData ? this.points : null;
	        };

	        /**
	         * Override point prototype to throw a warning when trying to update grouped points
	         */
	        wrap(Point.prototype, 'update', function(proceed) {
	            if (this.dataGroup) {
	                H.error(24);
	            } else {
	                proceed.apply(this, [].slice.call(arguments, 1));
	            }
	        });

	        /**
	         * Extend the original method, make the tooltip's header reflect the grouped range
	         */
	        wrap(Tooltip.prototype, 'tooltipFooterHeaderFormatter', function(proceed, labelConfig, isFooter) {
	            var tooltip = this,
	                series = labelConfig.series,
	                options = series.options,
	                tooltipOptions = series.tooltipOptions,
	                dataGroupingOptions = options.dataGrouping,
	                xDateFormat = tooltipOptions.xDateFormat,
	                xDateFormatEnd,
	                xAxis = series.xAxis,
	                dateFormat = H.dateFormat,
	                currentDataGrouping,
	                dateTimeLabelFormats,
	                labelFormats,
	                formattedKey;

	            // apply only to grouped series
	            if (xAxis && xAxis.options.type === 'datetime' && dataGroupingOptions && isNumber(labelConfig.key)) {

	                // set variables
	                currentDataGrouping = series.currentDataGrouping;
	                dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats;

	                // if we have grouped data, use the grouping information to get the right format
	                if (currentDataGrouping) {
	                    labelFormats = dateTimeLabelFormats[currentDataGrouping.unitName];
	                    if (currentDataGrouping.count === 1) {
	                        xDateFormat = labelFormats[0];
	                    } else {
	                        xDateFormat = labelFormats[1];
	                        xDateFormatEnd = labelFormats[2];
	                    }
	                    // if not grouped, and we don't have set the xDateFormat option, get the best fit,
	                    // so if the least distance between points is one minute, show it, but if the
	                    // least distance is one day, skip hours and minutes etc.
	                } else if (!xDateFormat && dateTimeLabelFormats) {
	                    xDateFormat = tooltip.getXDateFormat(labelConfig, tooltipOptions, xAxis);
	                }

	                // now format the key
	                formattedKey = dateFormat(xDateFormat, labelConfig.key);
	                if (xDateFormatEnd) {
	                    formattedKey += dateFormat(xDateFormatEnd, labelConfig.key + currentDataGrouping.totalRange - 1);
	                }

	                // return the replaced format
	                return format(tooltipOptions[(isFooter ? 'footer' : 'header') + 'Format'], {
	                    point: extend(labelConfig.point, {
	                        key: formattedKey
	                    }),
	                    series: series
	                });

	            }

	            // else, fall back to the regular formatter
	            return proceed.call(tooltip, labelConfig, isFooter);
	        });

	        /**
	         * Extend the series destroyer
	         */
	        seriesProto.destroy = function() {
	            var series = this,
	                groupedData = series.groupedData || [],
	                i = groupedData.length;

	            while (i--) {
	                if (groupedData[i]) {
	                    groupedData[i].destroy();
	                }
	            }
	            baseDestroy.apply(series);
	        };


	        // Handle default options for data grouping. This must be set at runtime because some series types are
	        // defined after this.
	        wrap(seriesProto, 'setOptions', function(proceed, itemOptions) {

	            var options = proceed.call(this, itemOptions),
	                type = this.type,
	                plotOptions = this.chart.options.plotOptions,
	                defaultOptions = defaultPlotOptions[type].dataGrouping;

	            if (specificOptions[type]) { // #1284
	                if (!defaultOptions) {
	                    defaultOptions = merge(commonOptions, specificOptions[type]);
	                }

	                options.dataGrouping = merge(
	                    defaultOptions,
	                    plotOptions.series && plotOptions.series.dataGrouping, // #1228
	                    plotOptions[type].dataGrouping, // Set by the StockChart constructor
	                    itemOptions.dataGrouping
	                );
	            }

	            if (this.chart.options.isStock) {
	                this.requireSorting = true;
	            }

	            return options;
	        });


	        /**
	         * When resetting the scale reset the hasProccessed flag to avoid taking previous data grouping
	         * of neighbour series into accound when determining group pixel width (#2692).
	         */
	        wrap(Axis.prototype, 'setScale', function(proceed) {
	            proceed.call(this);
	            each(this.series, function(series) {
	                series.hasProcessed = false;
	            });
	        });

	        /**
	         * Get the data grouping pixel width based on the greatest defined individual width
	         * of the axis' series, and if whether one of the axes need grouping.
	         */
	        Axis.prototype.getGroupPixelWidth = function() {

	            var series = this.series,
	                len = series.length,
	                i,
	                groupPixelWidth = 0,
	                doGrouping = false,
	                dataLength,
	                dgOptions;

	            // If multiple series are compared on the same x axis, give them the same
	            // group pixel width (#334)
	            i = len;
	            while (i--) {
	                dgOptions = series[i].options.dataGrouping;
	                if (dgOptions) {
	                    groupPixelWidth = Math.max(groupPixelWidth, dgOptions.groupPixelWidth);

	                }
	            }

	            // If one of the series needs grouping, apply it to all (#1634)
	            i = len;
	            while (i--) {
	                dgOptions = series[i].options.dataGrouping;

	                if (dgOptions && series[i].hasProcessed) { // #2692

	                    dataLength = (series[i].processedXData || series[i].data).length;

	                    // Execute grouping if the amount of points is greater than the limit defined in groupPixelWidth
	                    if (series[i].groupPixelWidth || dataLength > (this.chart.plotSizeX / groupPixelWidth) || (dataLength && dgOptions.forced)) {
	                        doGrouping = true;
	                    }
	                }
	            }

	            return doGrouping ? groupPixelWidth : 0;
	        };

	        /**
	         * Force data grouping on all the axis' series.
	         */
	        Axis.prototype.setDataGrouping = function(dataGrouping, redraw) {
	            var i;

	            redraw = pick(redraw, true);

	            if (!dataGrouping) {
	                dataGrouping = {
	                    forced: false,
	                    units: null
	                };
	            }

	            // Axis is instantiated, update all series
	            if (this instanceof Axis) {
	                i = this.series.length;
	                while (i--) {
	                    this.series[i].update({
	                        dataGrouping: dataGrouping
	                    }, false);
	                }

	                // Axis not yet instanciated, alter series options
	            } else {
	                each(this.chart.options.series, function(seriesOptions) {
	                    seriesOptions.dataGrouping = dataGrouping;
	                }, false);
	            }

	            if (redraw) {
	                this.chart.redraw();
	            }
	        };



	        /* ****************************************************************************
	         * End data grouping module												   *
	         ******************************************************************************/

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var each = H.each,
	            Point = H.Point,
	            seriesType = H.seriesType,
	            seriesTypes = H.seriesTypes;

	        /**
	         * The ohlc series type.
	         *
	         * @constructor seriesTypes.ohlc
	         * @augments seriesTypes.column
	         */
	        seriesType('ohlc', 'column', {
	            lineWidth: 1,
	            tooltip: {

	                pointFormat: '<span style="color:{point.color}">\u25CF</span> <b> {series.name}</b><br/>' +
	                    'Open: {point.open}<br/>' +
	                    'High: {point.high}<br/>' +
	                    'Low: {point.low}<br/>' +
	                    'Close: {point.close}<br/>'

	            },
	            threshold: null,

	            states: {
	                hover: {
	                    lineWidth: 3
	                }
	            }
	            //upColor: undefined


	        }, /** @lends seriesTypes.ohlc */ {
	            pointArrayMap: ['open', 'high', 'low', 'close'], // array point configs are mapped to this
	            toYData: function(point) { // return a plain array for speedy calculation
	                return [point.open, point.high, point.low, point.close];
	            },
	            pointValKey: 'high',


	            pointAttrToOptions: {
	                'stroke': 'color',
	                'stroke-width': 'lineWidth'
	            },

	            /**
	             * Postprocess mapping between options and SVG attributes
	             */
	            pointAttribs: function(point, state) {
	                var attribs = seriesTypes.column.prototype.pointAttribs.call(
	                        this,
	                        point,
	                        state
	                    ),
	                    options = this.options;

	                delete attribs.fill;

	                if (!point.options.color &&
	                    options.upColor &&
	                    point.open < point.close
	                ) {
	                    attribs.stroke = options.upColor;
	                }

	                return attribs;
	            },


	            /**
	             * Translate data points from raw values x and y to plotX and plotY
	             */
	            translate: function() {
	                var series = this,
	                    yAxis = series.yAxis,
	                    hasModifyValue = !!series.modifyValue,
	                    translatedOLC = ['plotOpen', 'yBottom', 'plotClose'];

	                seriesTypes.column.prototype.translate.apply(series);

	                // Do the translation
	                each(series.points, function(point) {
	                    each([point.open, point.low, point.close], function(value, i) {
	                        if (value !== null) {
	                            if (hasModifyValue) {
	                                value = series.modifyValue(value);
	                            }
	                            point[translatedOLC[i]] = yAxis.toPixels(value, true);
	                        }
	                    });
	                });
	            },

	            /**
	             * Draw the data points
	             */
	            drawPoints: function() {
	                var series = this,
	                    points = series.points,
	                    chart = series.chart;


	                each(points, function(point) {
	                    var plotOpen,
	                        plotClose,
	                        crispCorr,
	                        halfWidth,
	                        path,
	                        graphic = point.graphic,
	                        crispX,
	                        isNew = !graphic;

	                    if (point.plotY !== undefined) {

	                        // Create and/or update the graphic
	                        if (!graphic) {
	                            point.graphic = graphic = chart.renderer.path()
	                                .add(series.group);
	                        }


	                        graphic.attr(series.pointAttribs(point, point.selected && 'select')); // #3897


	                        // crisp vector coordinates
	                        crispCorr = (graphic.strokeWidth() % 2) / 2;
	                        crispX = Math.round(point.plotX) - crispCorr; // #2596
	                        halfWidth = Math.round(point.shapeArgs.width / 2);

	                        // the vertical stem
	                        path = [
	                            'M',
	                            crispX, Math.round(point.yBottom),
	                            'L',
	                            crispX, Math.round(point.plotY)
	                        ];

	                        // open
	                        if (point.open !== null) {
	                            plotOpen = Math.round(point.plotOpen) + crispCorr;
	                            path.push(
	                                'M',
	                                crispX,
	                                plotOpen,
	                                'L',
	                                crispX - halfWidth,
	                                plotOpen
	                            );
	                        }

	                        // close
	                        if (point.close !== null) {
	                            plotClose = Math.round(point.plotClose) + crispCorr;
	                            path.push(
	                                'M',
	                                crispX,
	                                plotClose,
	                                'L',
	                                crispX + halfWidth,
	                                plotClose
	                            );
	                        }

	                        graphic[isNew ? 'attr' : 'animate']({
	                                d: path
	                            })
	                            .addClass(point.getClassName(), true);

	                    }


	                });

	            },

	            animate: null // Disable animation

	            /**
	             * @constructor seriesTypes.ohlc.prototype.pointClass
	             * @extends {Point}
	             */
	        }, /** @lends seriesTypes.ohlc.prototype.pointClass.prototype */ {
	            /**
	             * Extend the parent method by adding up or down to the class name.
	             */
	            getClassName: function() {
	                return Point.prototype.getClassName.call(this) +
	                    (this.open < this.close ? ' highcharts-point-up' : ' highcharts-point-down');
	            }
	        });
	        /* ****************************************************************************
	         * End OHLC series code													   *
	         *****************************************************************************/

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var defaultPlotOptions = H.defaultPlotOptions,
	            each = H.each,
	            merge = H.merge,
	            seriesType = H.seriesType,
	            seriesTypes = H.seriesTypes;

	        /**
	         * The candlestick series type.
	         *
	         * @constructor seriesTypes.candlestick
	         * @augments seriesTypes.ohlc
	         */
	        seriesType('candlestick', 'ohlc', merge(defaultPlotOptions.column, {
	            states: {
	                hover: {
	                    lineWidth: 2
	                }
	            },
	            tooltip: defaultPlotOptions.ohlc.tooltip,
	            threshold: null,

	            lineColor: '#000000',
	            lineWidth: 1,
	            upColor: '#ffffff'
	                // upLineColor: null


	        }), /** @lends seriesTypes.candlestick */ {

	            /**
	             * Postprocess mapping between options and SVG attributes
	             */
	            pointAttribs: function(point, state) {
	                var attribs = seriesTypes.column.prototype.pointAttribs.call(this, point, state),
	                    options = this.options,
	                    isUp = point.open < point.close,
	                    stroke = options.lineColor || this.color,
	                    stateOptions;

	                attribs['stroke-width'] = options.lineWidth;

	                attribs.fill = point.options.color || (isUp ? (options.upColor || this.color) : this.color);
	                attribs.stroke = point.lineColor || (isUp ? (options.upLineColor || stroke) : stroke);

	                // Select or hover states
	                if (state) {
	                    stateOptions = options.states[state];
	                    attribs.fill = stateOptions.color || attribs.fill;
	                    attribs.stroke = stateOptions.lineColor || attribs.stroke;
	                    attribs['stroke-width'] =
	                        stateOptions.lineWidth || attribs['stroke-width'];
	                }


	                return attribs;
	            },

	            /**
	             * Draw the data points
	             */
	            drawPoints: function() {
	                var series = this, //state = series.state,
	                    points = series.points,
	                    chart = series.chart;


	                each(points, function(point) {

	                    var graphic = point.graphic,
	                        plotOpen,
	                        plotClose,
	                        topBox,
	                        bottomBox,
	                        hasTopWhisker,
	                        hasBottomWhisker,
	                        crispCorr,
	                        crispX,
	                        path,
	                        halfWidth,
	                        isNew = !graphic;

	                    if (point.plotY !== undefined) {

	                        if (!graphic) {
	                            point.graphic = graphic = chart.renderer.path()
	                                .add(series.group);
	                        }


	                        graphic
	                            .attr(series.pointAttribs(point, point.selected && 'select')) // #3897
	                            .shadow(series.options.shadow);


	                        // Crisp vector coordinates
	                        crispCorr = (graphic.strokeWidth() % 2) / 2;
	                        crispX = Math.round(point.plotX) - crispCorr; // #2596
	                        plotOpen = point.plotOpen;
	                        plotClose = point.plotClose;
	                        topBox = Math.min(plotOpen, plotClose);
	                        bottomBox = Math.max(plotOpen, plotClose);
	                        halfWidth = Math.round(point.shapeArgs.width / 2);
	                        hasTopWhisker = Math.round(topBox) !== Math.round(point.plotY);
	                        hasBottomWhisker = bottomBox !== point.yBottom;
	                        topBox = Math.round(topBox) + crispCorr;
	                        bottomBox = Math.round(bottomBox) + crispCorr;

	                        // Create the path. Due to a bug in Chrome 49, the path is first instanciated
	                        // with no values, then the values pushed. For unknown reasons, instanciated
	                        // the path array with all the values would lead to a crash when updating
	                        // frequently (#5193).
	                        path = [];
	                        path.push(
	                            'M',
	                            crispX - halfWidth, bottomBox,
	                            'L',
	                            crispX - halfWidth, topBox,
	                            'L',
	                            crispX + halfWidth, topBox,
	                            'L',
	                            crispX + halfWidth, bottomBox,
	                            'Z', // Use a close statement to ensure a nice rectangle #2602
	                            'M',
	                            crispX, topBox,
	                            'L',
	                            crispX, hasTopWhisker ? Math.round(point.plotY) : topBox, // #460, #2094
	                            'M',
	                            crispX, bottomBox,
	                            'L',
	                            crispX, hasBottomWhisker ? Math.round(point.yBottom) : bottomBox // #460, #2094
	                        );

	                        graphic[isNew ? 'attr' : 'animate']({
	                                d: path
	                            })
	                            .addClass(point.getClassName(), true);

	                    }
	                });

	            }


	        });

	        /* ****************************************************************************
	         * End Candlestick series code												*
	         *****************************************************************************/

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            each = H.each,
	            merge = H.merge,
	            noop = H.noop,
	            Renderer = H.Renderer,
	            Series = H.Series,
	            seriesType = H.seriesType,
	            seriesTypes = H.seriesTypes,
	            SVGRenderer = H.SVGRenderer,
	            TrackerMixin = H.TrackerMixin,
	            VMLRenderer = H.VMLRenderer,
	            symbols = SVGRenderer.prototype.symbols;

	        /**
	         * The flags series type.
	         *
	         * @constructor seriesTypes.flags
	         * @augments seriesTypes.column
	         */
	        seriesType('flags', 'column', {
	            pointRange: 0, // #673
	            //radius: 2,
	            shape: 'flag',
	            stackDistance: 12,
	            textAlign: 'center',
	            tooltip: {
	                pointFormat: '{point.text}<br/>'
	            },
	            threshold: null,
	            y: -30,

	            fillColor: '#ffffff',
	            // lineColor: color,
	            lineWidth: 1,
	            states: {
	                hover: {
	                    lineColor: '#000000',
	                    fillColor: '#ccd6eb'
	                }
	            },
	            style: {
	                fontSize: '11px',
	                fontWeight: 'bold'
	            }


	        }, /** @lends seriesTypes.flags.prototype */ {
	            sorted: false,
	            noSharedTooltip: true,
	            allowDG: false,
	            takeOrdinalPosition: false, // #1074
	            trackerGroups: ['markerGroup'],
	            forceCrop: true,
	            /**
	             * Inherit the initialization from base Series.
	             */
	            init: Series.prototype.init,


	            /**
	             * Get presentational attributes
	             */
	            pointAttribs: function(point, state) {
	                var options = this.options,
	                    color = (point && point.color) || this.color,
	                    lineColor = options.lineColor,
	                    lineWidth = (point && point.lineWidth),
	                    fill = (point && point.fillColor) || options.fillColor;

	                if (state) {
	                    fill = options.states[state].fillColor;
	                    lineColor = options.states[state].lineColor;
	                    lineWidth = options.states[state].lineWidth;
	                }

	                return {
	                    'fill': fill || color,
	                    'stroke': lineColor || color,
	                    'stroke-width': lineWidth || options.lineWidth || 0
	                };
	            },


	            /**
	             * Extend the translate method by placing the point on the related series
	             */
	            translate: function() {

	                seriesTypes.column.prototype.translate.apply(this);

	                var series = this,
	                    options = series.options,
	                    chart = series.chart,
	                    points = series.points,
	                    cursor = points.length - 1,
	                    point,
	                    lastPoint,
	                    optionsOnSeries = options.onSeries,
	                    onSeries = optionsOnSeries && chart.get(optionsOnSeries),
	                    onKey = options.onKey || 'y',
	                    step = onSeries && onSeries.options.step,
	                    onData = onSeries && onSeries.points,
	                    i = onData && onData.length,
	                    xAxis = series.xAxis,
	                    xAxisExt = xAxis.getExtremes(),
	                    xOffset = 0,
	                    leftPoint,
	                    lastX,
	                    rightPoint,
	                    currentDataGrouping;

	                // relate to a master series
	                if (onSeries && onSeries.visible && i) {
	                    xOffset = (onSeries.pointXOffset || 0) + (onSeries.barW || 0) / 2;
	                    currentDataGrouping = onSeries.currentDataGrouping;
	                    lastX = onData[i - 1].x + (currentDataGrouping ? currentDataGrouping.totalRange : 0); // #2374

	                    // sort the data points
	                    points.sort(function(a, b) {
	                        return (a.x - b.x);
	                    });

	                    onKey = 'plot' + onKey[0].toUpperCase() + onKey.substr(1);
	                    while (i-- && points[cursor]) {
	                        point = points[cursor];
	                        leftPoint = onData[i];
	                        if (leftPoint.x <= point.x && leftPoint[onKey] !== undefined) {
	                            if (point.x <= lastX) { // #803

	                                point.plotY = leftPoint[onKey];

	                                // interpolate between points, #666
	                                if (leftPoint.x < point.x && !step) {
	                                    rightPoint = onData[i + 1];
	                                    if (rightPoint && rightPoint[onKey] !== undefined) {
	                                        point.plotY +=
	                                            ((point.x - leftPoint.x) / (rightPoint.x - leftPoint.x)) * // the distance ratio, between 0 and 1
	                                            (rightPoint[onKey] - leftPoint[onKey]); // the y distance
	                                    }
	                                }
	                            }
	                            cursor--;
	                            i++; // check again for points in the same x position
	                            if (cursor < 0) {
	                                break;
	                            }
	                        }
	                    }
	                }

	                // Add plotY position and handle stacking
	                each(points, function(point, i) {

	                    var stackIndex;

	                    // Undefined plotY means the point is either on axis, outside series range or hidden series.
	                    // If the series is outside the range of the x axis it should fall through with
	                    // an undefined plotY, but then we must remove the shapeArgs (#847).
	                    if (point.plotY === undefined) {
	                        if (point.x >= xAxisExt.min && point.x <= xAxisExt.max) { // we're inside xAxis range
	                            point.plotY = chart.chartHeight - xAxis.bottom - (xAxis.opposite ? xAxis.height : 0) + xAxis.offset - chart.plotTop;
	                        } else {
	                            point.shapeArgs = {}; // 847
	                        }
	                    }
	                    point.plotX += xOffset; // #2049
	                    // if multiple flags appear at the same x, order them into a stack
	                    lastPoint = points[i - 1];
	                    if (lastPoint && lastPoint.plotX === point.plotX) {
	                        if (lastPoint.stackIndex === undefined) {
	                            lastPoint.stackIndex = 0;
	                        }
	                        stackIndex = lastPoint.stackIndex + 1;
	                    }
	                    point.stackIndex = stackIndex; // #3639
	                });


	            },

	            /**
	             * Draw the markers
	             */
	            drawPoints: function() {
	                var series = this,
	                    points = series.points,
	                    chart = series.chart,
	                    renderer = chart.renderer,
	                    plotX,
	                    plotY,
	                    options = series.options,
	                    optionsY = options.y,
	                    shape,
	                    i,
	                    point,
	                    graphic,
	                    stackIndex,
	                    anchorX,
	                    anchorY,
	                    outsideRight,
	                    yAxis = series.yAxis;

	                i = points.length;
	                while (i--) {
	                    point = points[i];
	                    outsideRight = point.plotX > series.xAxis.len;
	                    plotX = point.plotX;
	                    stackIndex = point.stackIndex;
	                    shape = point.options.shape || options.shape;
	                    plotY = point.plotY;

	                    if (plotY !== undefined) {
	                        plotY = point.plotY + optionsY - (stackIndex !== undefined && stackIndex * options.stackDistance);
	                    }
	                    anchorX = stackIndex ? undefined : point.plotX; // skip connectors for higher level stacked points
	                    anchorY = stackIndex ? undefined : point.plotY;

	                    graphic = point.graphic;

	                    // Only draw the point if y is defined and the flag is within the visible area
	                    if (plotY !== undefined && plotX >= 0 && !outsideRight) {

	                        // Create the flag
	                        if (!graphic) {
	                            graphic = point.graphic = renderer.label(
	                                '',
	                                null,
	                                null,
	                                shape,
	                                null,
	                                null,
	                                options.useHTML
	                            )

	                            .attr(series.pointAttribs(point))
	                                .css(merge(options.style, point.style))

	                            .attr({
	                                    align: shape === 'flag' ? 'left' : 'center',
	                                    width: options.width,
	                                    height: options.height,
	                                    'text-align': options.textAlign
	                                })
	                                .addClass('highcharts-point')
	                                .add(series.markerGroup);


	                            graphic.shadow(options.shadow);

	                        }

	                        if (plotX > 0) { // #3119
	                            plotX -= graphic.strokeWidth() % 2; // #4285
	                        }

	                        // Plant the flag
	                        graphic.attr({
	                            text: point.options.title || options.title || 'A',
	                            x: plotX,
	                            y: plotY,
	                            anchorX: anchorX,
	                            anchorY: anchorY
	                        });

	                        // Set the tooltip anchor position
	                        point.tooltipPos = chart.inverted ? [yAxis.len + yAxis.pos - chart.plotLeft - plotY, series.xAxis.len - plotX] : [plotX, plotY];

	                    } else if (graphic) {
	                        point.graphic = graphic.destroy();
	                    }

	                }

	            },

	            /**
	             * Extend the column trackers with listeners to expand and contract stacks
	             */
	            drawTracker: function() {
	                var series = this,
	                    points = series.points;

	                TrackerMixin.drawTrackerPoint.apply(this);

	                // Bring each stacked flag up on mouse over, this allows readability of vertically
	                // stacked elements as well as tight points on the x axis. #1924.
	                each(points, function(point) {
	                    var graphic = point.graphic;
	                    if (graphic) {
	                        addEvent(graphic.element, 'mouseover', function() {

	                            // Raise this point
	                            if (point.stackIndex > 0 && !point.raised) {
	                                point._y = graphic.y;
	                                graphic.attr({
	                                    y: point._y - 8
	                                });
	                                point.raised = true;
	                            }

	                            // Revert other raised points
	                            each(points, function(otherPoint) {
	                                if (otherPoint !== point && otherPoint.raised && otherPoint.graphic) {
	                                    otherPoint.graphic.attr({
	                                        y: otherPoint._y
	                                    });
	                                    otherPoint.raised = false;
	                                }
	                            });
	                        });
	                    }
	                });
	            },

	            animate: noop, // Disable animation
	            buildKDTree: noop,
	            setClip: noop

	        });

	        // create the flag icon with anchor
	        symbols.flag = function(x, y, w, h, options) {
	            var anchorX = (options && options.anchorX) || x,
	                anchorY = (options && options.anchorY) || y;

	            return [
	                'M', anchorX, anchorY,
	                'L', x, y + h,
	                x, y,
	                x + w, y,
	                x + w, y + h,
	                x, y + h,
	                'Z'
	            ];
	        };

	        // create the circlepin and squarepin icons with anchor
	        each(['circle', 'square'], function(shape) {
	            symbols[shape + 'pin'] = function(x, y, w, h, options) {

	                var anchorX = options && options.anchorX,
	                    anchorY = options && options.anchorY,
	                    path,
	                    labelTopOrBottomY;

	                // For single-letter flags, make sure circular flags are not taller than their width
	                if (shape === 'circle' && h > w) {
	                    x -= Math.round((h - w) / 2);
	                    w = h;
	                }

	                path = symbols[shape](x, y, w, h);

	                if (anchorX && anchorY) {
	                    // if the label is below the anchor, draw the connecting line from the top edge of the label
	                    // otherwise start drawing from the bottom edge
	                    labelTopOrBottomY = (y > anchorY) ? y : y + h;
	                    path.push('M', anchorX, labelTopOrBottomY, 'L', anchorX, anchorY);
	                }

	                return path;
	            };
	        });


	        // The symbol callbacks are generated on the SVGRenderer object in all browsers. Even
	        // VML browsers need this in order to generate shapes in export. Now share
	        // them with the VMLRenderer.
	        if (Renderer === VMLRenderer) {
	            each(['flag', 'circlepin', 'squarepin'], function(shape) {
	                VMLRenderer.prototype.symbols[shape] = symbols[shape];
	            });
	        }

	        /* ****************************************************************************
	         * End Flags series code													  *
	         *****************************************************************************/

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            Axis = H.Axis,
	            correctFloat = H.correctFloat,
	            defaultOptions = H.defaultOptions,
	            defined = H.defined,
	            destroyObjectProperties = H.destroyObjectProperties,
	            doc = H.doc,
	            each = H.each,
	            fireEvent = H.fireEvent,
	            hasTouch = H.hasTouch,
	            isTouchDevice = H.isTouchDevice,
	            merge = H.merge,
	            pick = H.pick,
	            removeEvent = H.removeEvent,
	            svg = H.svg,
	            wrap = H.wrap,
	            swapXY;

	        var defaultScrollbarOptions = {
	            //enabled: true
	            height: isTouchDevice ? 20 : 14,
	            // trackBorderRadius: 0
	            barBorderRadius: 0,
	            buttonBorderRadius: 0,
	            liveRedraw: svg && !isTouchDevice,
	            margin: 10,
	            minWidth: 6,
	            //showFull: true,
	            //size: null,
	            step: 0.2,
	            zIndex: 3,

	            barBackgroundColor: '#cccccc',
	            barBorderWidth: 1,
	            barBorderColor: '#cccccc',
	            buttonArrowColor: '#333333',
	            buttonBackgroundColor: '#e6e6e6',
	            buttonBorderColor: '#cccccc',
	            buttonBorderWidth: 1,
	            rifleColor: '#333333',
	            trackBackgroundColor: '#f2f2f2',
	            trackBorderColor: '#f2f2f2',
	            trackBorderWidth: 1

	        };

	        defaultOptions.scrollbar = merge(true, defaultScrollbarOptions, defaultOptions.scrollbar);

	        /**
	         * When we have vertical scrollbar, rifles and arrow in buttons should be rotated.
	         * The same method is used in Navigator's handles, to rotate them.
	         * @param {Array} path - path to be rotated
	         * @param {Boolean} vertical - if vertical scrollbar, swap x-y values
	         */
	        H.swapXY = swapXY = function(path, vertical) {
	            var i,
	                len = path.length,
	                temp;

	            if (vertical) {
	                for (i = 0; i < len; i += 3) {
	                    temp = path[i + 1];
	                    path[i + 1] = path[i + 2];
	                    path[i + 2] = temp;
	                }
	            }

	            return path;
	        };

	        /**
	         * A reusable scrollbar, internally used in Highstock's navigator and optionally
	         * on individual axes.
	         *
	         * @class
	         * @param {Object} renderer
	         * @param {Object} options
	         * @param {Object} chart
	         */
	        function Scrollbar(renderer, options, chart) { // docs
	            this.init(renderer, options, chart);
	        }

	        Scrollbar.prototype = {

	            init: function(renderer, options, chart) {

	                this.scrollbarButtons = [];

	                this.renderer = renderer;

	                this.userOptions = options;
	                this.options = merge(defaultScrollbarOptions, options);

	                this.chart = chart;

	                this.size = pick(this.options.size, this.options.height); // backward compatibility

	                // Init
	                if (options.enabled) {
	                    this.render();
	                    this.initEvents();
	                    this.addEvents();
	                }
	            },

	            /**
	             * Render scrollbar with all required items.
	             */
	            render: function() {
	                var scroller = this,
	                    renderer = scroller.renderer,
	                    options = scroller.options,
	                    size = scroller.size,
	                    group;

	                // Draw the scrollbar group
	                scroller.group = group = renderer.g('scrollbar').attr({
	                    zIndex: options.zIndex,
	                    translateY: -99999
	                }).add();

	                // Draw the scrollbar track:
	                scroller.track = renderer.rect()
	                    .addClass('highcharts-scrollbar-track')
	                    .attr({
	                        x: 0,
	                        r: options.trackBorderRadius || 0,
	                        height: size,
	                        width: size
	                    }).add(group);


	                scroller.track.attr({
	                    fill: options.trackBackgroundColor,
	                    stroke: options.trackBorderColor,
	                    'stroke-width': options.trackBorderWidth
	                });

	                this.trackBorderWidth = scroller.track.strokeWidth();
	                scroller.track.attr({
	                    y: -this.trackBorderWidth % 2 / 2
	                });


	                // Draw the scrollbar itself
	                scroller.scrollbarGroup = renderer.g().add(group);

	                scroller.scrollbar = renderer.rect()
	                    .addClass('highcharts-scrollbar-thumb')
	                    .attr({
	                        height: size,
	                        width: size,
	                        r: options.barBorderRadius || 0
	                    }).add(scroller.scrollbarGroup);

	                scroller.scrollbarRifles = renderer.path(
	                        swapXY([
	                            'M', -3, size / 4,
	                            'L', -3, 2 * size / 3,
	                            'M',
	                            0, size / 4,
	                            'L',
	                            0, 2 * size / 3,
	                            'M',
	                            3, size / 4,
	                            'L',
	                            3, 2 * size / 3
	                        ], options.vertical))
	                    .addClass('highcharts-scrollbar-rifles')
	                    .add(scroller.scrollbarGroup);


	                scroller.scrollbar.attr({
	                    fill: options.barBackgroundColor,
	                    stroke: options.barBorderColor,
	                    'stroke-width': options.barBorderWidth
	                });
	                scroller.scrollbarRifles.attr({
	                    stroke: options.rifleColor,
	                    'stroke-width': 1
	                });

	                scroller.scrollbarStrokeWidth = scroller.scrollbar.strokeWidth();
	                scroller.scrollbarGroup.translate(-scroller.scrollbarStrokeWidth % 2 / 2, -scroller.scrollbarStrokeWidth % 2 / 2);

	                // Draw the buttons:
	                scroller.drawScrollbarButton(0);
	                scroller.drawScrollbarButton(1);
	            },

	            /**
	             * Position the scrollbar, method called from a parent with defined dimensions
	             * @param {Number} x - x-position on the chart
	             * @param {Number} y - y-position on the chart
	             * @param {Number} width - width of the scrollbar
	             * @param {Number} height - height of the scorllbar
	             */
	            position: function(x, y, width, height) {
	                var scroller = this,
	                    options = scroller.options,
	                    vertical = options.vertical,
	                    xOffset = height,
	                    yOffset = 0,
	                    method = scroller.rendered ? 'animate' : 'attr';

	                scroller.x = x;
	                scroller.y = y + this.trackBorderWidth;
	                scroller.width = width; // width with buttons
	                scroller.height = height;
	                scroller.xOffset = xOffset;
	                scroller.yOffset = yOffset;

	                // If Scrollbar is a vertical type, swap options:
	                if (vertical) {
	                    scroller.width = scroller.yOffset = width = yOffset = scroller.size;
	                    scroller.xOffset = xOffset = 0;
	                    scroller.barWidth = height - width * 2; // width without buttons
	                    scroller.x = x = x + scroller.options.margin;
	                } else {
	                    scroller.height = scroller.xOffset = height = xOffset = scroller.size;
	                    scroller.barWidth = width - height * 2; // width without buttons
	                    scroller.y = scroller.y + scroller.options.margin;
	                }

	                // Set general position for a group:
	                scroller.group[method]({
	                    translateX: x,
	                    translateY: scroller.y
	                });

	                // Resize background/track:
	                scroller.track[method]({
	                    width: width,
	                    height: height
	                });

	                // Move right/bottom button ot it's place:
	                scroller.scrollbarButtons[1][method]({
	                    translateX: vertical ? 0 : width - xOffset,
	                    translateY: vertical ? height - yOffset : 0
	                });
	            },

	            /**
	             * Draw the scrollbar buttons with arrows
	             * @param {Number} index 0 is left, 1 is right
	             */
	            drawScrollbarButton: function(index) {
	                var scroller = this,
	                    renderer = scroller.renderer,
	                    scrollbarButtons = scroller.scrollbarButtons,
	                    options = scroller.options,
	                    size = scroller.size,
	                    group,
	                    tempElem;

	                group = renderer.g().add(scroller.group);
	                scrollbarButtons.push(group);

	                // Create a rectangle for the scrollbar button
	                tempElem = renderer.rect()
	                    .addClass('highcharts-scrollbar-button')
	                    .add(group);


	                // Presentational attributes
	                tempElem.attr({
	                    stroke: options.buttonBorderColor,
	                    'stroke-width': options.buttonBorderWidth,
	                    fill: options.buttonBackgroundColor
	                });


	                // Place the rectangle based on the rendered stroke width
	                tempElem.attr(tempElem.crisp({
	                    x: -0.5,
	                    y: -0.5,
	                    width: size + 1, // +1 to compensate for crispifying in rect method
	                    height: size + 1,
	                    r: options.buttonBorderRadius
	                }, tempElem.strokeWidth()));

	                // Button arrow
	                tempElem = renderer
	                    .path(swapXY([
	                        'M',
	                        size / 2 + (index ? -1 : 1),
	                        size / 2 - 3,
	                        'L',
	                        size / 2 + (index ? -1 : 1),
	                        size / 2 + 3,
	                        'L',
	                        size / 2 + (index ? 2 : -2),
	                        size / 2
	                    ], options.vertical))
	                    .addClass('highcharts-scrollbar-arrow')
	                    .add(scrollbarButtons[index]);


	                tempElem.attr({
	                    fill: options.buttonArrowColor
	                });

	            },

	            /**
	             * Set scrollbar size, with a given scale.
	             * @param {Number} from - scale (0-1) where bar should start
	             * @param {Number} to - scale (0-1) where bar should end
	             */
	            setRange: function(from, to) {
	                var scroller = this,
	                    options = scroller.options,
	                    vertical = options.vertical,
	                    minWidth = options.minWidth,
	                    fullWidth = scroller.barWidth,
	                    fromPX,
	                    toPX,
	                    newPos,
	                    newSize,
	                    newRiflesPos,
	                    method = this.rendered && !this.hasDragged ? 'animate' : 'attr';

	                if (!defined(fullWidth)) {
	                    return;
	                }

	                from = Math.max(from, 0);

	                fromPX = fullWidth * from;
	                toPX = fullWidth * Math.min(to, 1);
	                scroller.calculatedWidth = newSize = correctFloat(toPX - fromPX);

	                // We need to recalculate position, if minWidth is used
	                if (newSize < minWidth) {
	                    fromPX = (fullWidth - minWidth + newSize) * from;
	                    newSize = minWidth;
	                }
	                newPos = Math.floor(fromPX + scroller.xOffset + scroller.yOffset);
	                newRiflesPos = newSize / 2 - 0.5; // -0.5 -> rifle line width / 2

	                // Store current position:
	                scroller.from = from;
	                scroller.to = to;

	                if (!vertical) {
	                    scroller.scrollbarGroup[method]({
	                        translateX: newPos
	                    });
	                    scroller.scrollbar[method]({
	                        width: newSize
	                    });
	                    scroller.scrollbarRifles[method]({
	                        translateX: newRiflesPos
	                    });
	                    scroller.scrollbarLeft = newPos;
	                    scroller.scrollbarTop = 0;
	                } else {
	                    scroller.scrollbarGroup[method]({
	                        translateY: newPos
	                    });
	                    scroller.scrollbar[method]({
	                        height: newSize
	                    });
	                    scroller.scrollbarRifles[method]({
	                        translateY: newRiflesPos
	                    });
	                    scroller.scrollbarTop = newPos;
	                    scroller.scrollbarLeft = 0;
	                }

	                if (newSize <= 12) {
	                    scroller.scrollbarRifles.hide();
	                } else {
	                    scroller.scrollbarRifles.show(true);
	                }

	                // Show or hide the scrollbar based on the showFull setting
	                if (options.showFull === false) {
	                    if (from <= 0 && to >= 1) {
	                        scroller.group.hide();
	                    } else {
	                        scroller.group.show();
	                    }
	                }

	                scroller.rendered = true;
	            },

	            /**
	             * Init events methods, so we have an access to the Scrollbar itself
	             */
	            initEvents: function() {
	                var scroller = this;
	                /**
	                 * Event handler for the mouse move event.
	                 */
	                scroller.mouseMoveHandler = function(e) {
	                    var normalizedEvent = scroller.chart.pointer.normalize(e),
	                        options = scroller.options,
	                        direction = options.vertical ? 'chartY' : 'chartX',
	                        initPositions = scroller.initPositions,
	                        scrollPosition,
	                        chartPosition,
	                        change;

	                    // In iOS, a mousemove event with e.pageX === 0 is fired when holding the finger
	                    // down in the center of the scrollbar. This should be ignored.
	                    if (scroller.grabbedCenter && (!e.touches || e.touches[0][direction] !== 0)) { // #4696, scrollbar failed on Android
	                        chartPosition = scroller.cursorToScrollbarPosition(normalizedEvent)[direction];
	                        scrollPosition = scroller[direction];

	                        change = chartPosition - scrollPosition;

	                        scroller.hasDragged = true;
	                        scroller.updatePosition(initPositions[0] + change, initPositions[1] + change);

	                        if (scroller.hasDragged) {
	                            fireEvent(scroller, 'changed', {
	                                from: scroller.from,
	                                to: scroller.to,
	                                trigger: 'scrollbar',
	                                DOMType: e.type,
	                                DOMEvent: e
	                            });
	                        }
	                    }
	                };

	                /**
	                 * Event handler for the mouse up event.
	                 */
	                scroller.mouseUpHandler = function(e) {
	                    if (scroller.hasDragged) {
	                        fireEvent(scroller, 'changed', {
	                            from: scroller.from,
	                            to: scroller.to,
	                            trigger: 'scrollbar',
	                            DOMType: e.type,
	                            DOMEvent: e
	                        });
	                    }
	                    scroller.grabbedCenter = scroller.hasDragged = scroller.chartX = scroller.chartY = null;
	                };

	                scroller.mouseDownHandler = function(e) {
	                    var normalizedEvent = scroller.chart.pointer.normalize(e),
	                        mousePosition = scroller.cursorToScrollbarPosition(normalizedEvent);

	                    scroller.chartX = mousePosition.chartX;
	                    scroller.chartY = mousePosition.chartY;
	                    scroller.initPositions = [scroller.from, scroller.to];

	                    scroller.grabbedCenter = true;
	                };

	                scroller.buttonToMinClick = function(e) {
	                    var range = correctFloat(scroller.to - scroller.from) * scroller.options.step;
	                    scroller.updatePosition(correctFloat(scroller.from - range), correctFloat(scroller.to - range));
	                    fireEvent(scroller, 'changed', {
	                        from: scroller.from,
	                        to: scroller.to,
	                        trigger: 'scrollbar',
	                        DOMEvent: e
	                    });
	                };

	                scroller.buttonToMaxClick = function(e) {
	                    var range = (scroller.to - scroller.from) * scroller.options.step;
	                    scroller.updatePosition(scroller.from + range, scroller.to + range);
	                    fireEvent(scroller, 'changed', {
	                        from: scroller.from,
	                        to: scroller.to,
	                        trigger: 'scrollbar',
	                        DOMEvent: e
	                    });
	                };

	                scroller.trackClick = function(e) {
	                    var normalizedEvent = scroller.chart.pointer.normalize(e),
	                        range = scroller.to - scroller.from,
	                        top = scroller.y + scroller.scrollbarTop,
	                        left = scroller.x + scroller.scrollbarLeft;

	                    if ((scroller.options.vertical && normalizedEvent.chartY > top) ||
	                        (!scroller.options.vertical && normalizedEvent.chartX > left)) {
	                        // On the top or on the left side of the track:
	                        scroller.updatePosition(scroller.from + range, scroller.to + range);
	                    } else {
	                        // On the bottom or the right side of the track:
	                        scroller.updatePosition(scroller.from - range, scroller.to - range);
	                    }

	                    fireEvent(scroller, 'changed', {
	                        from: scroller.from,
	                        to: scroller.to,
	                        trigger: 'scrollbar',
	                        DOMEvent: e
	                    });
	                };
	            },

	            /**
	             * Get normalized (0-1) cursor position over the scrollbar
	             * @param {Event} normalizedEvent - normalized event, with chartX and chartY values
	             * @return {Object} Local position {chartX, chartY}
	             */
	            cursorToScrollbarPosition: function(normalizedEvent) {
	                var scroller = this,
	                    options = scroller.options,
	                    minWidthDifference = options.minWidth > scroller.calculatedWidth ? options.minWidth : 0; // minWidth distorts translation

	                return {
	                    chartX: (normalizedEvent.chartX - scroller.x - scroller.xOffset) / (scroller.barWidth - minWidthDifference),
	                    chartY: (normalizedEvent.chartY - scroller.y - scroller.yOffset) / (scroller.barWidth - minWidthDifference)
	                };
	            },

	            /**
	             * Update position option in the Scrollbar, with normalized 0-1 scale
	             */
	            updatePosition: function(from, to) {
	                if (to > 1) {
	                    from = correctFloat(1 - correctFloat(to - from));
	                    to = 1;
	                }

	                if (from < 0) {
	                    to = correctFloat(to - from);
	                    from = 0;
	                }

	                this.from = from;
	                this.to = to;
	            },

	            /**
	             * Update the scrollbar with new options
	             */
	            update: function(options) {
	                this.destroy();
	                this.init(this.chart.renderer, merge(true, this.options, options), this.chart);
	            },

	            /**
	             * Set up the mouse and touch events for the Scrollbar
	             */
	            addEvents: function() {
	                var buttonsOrder = this.options.inverted ? [1, 0] : [0, 1],
	                    buttons = this.scrollbarButtons,
	                    bar = this.scrollbarGroup.element,
	                    track = this.track.element,
	                    mouseDownHandler = this.mouseDownHandler,
	                    mouseMoveHandler = this.mouseMoveHandler,
	                    mouseUpHandler = this.mouseUpHandler,
	                    _events;

	                // Mouse events
	                _events = [
	                    [buttons[buttonsOrder[0]].element, 'click', this.buttonToMinClick],
	                    [buttons[buttonsOrder[1]].element, 'click', this.buttonToMaxClick],
	                    [track, 'click', this.trackClick],
	                    [bar, 'mousedown', mouseDownHandler],
	                    [doc, 'mousemove', mouseMoveHandler],
	                    [doc, 'mouseup', mouseUpHandler]
	                ];

	                // Touch events
	                if (hasTouch) {
	                    _events.push(
	                        [bar, 'touchstart', mouseDownHandler], [doc, 'touchmove', mouseMoveHandler], [doc, 'touchend', mouseUpHandler]
	                    );
	                }

	                // Add them all
	                each(_events, function(args) {
	                    addEvent.apply(null, args);
	                });
	                this._events = _events;
	            },

	            /**
	             * Removes the event handlers attached previously with addEvents.
	             */
	            removeEvents: function() {
	                each(this._events, function(args) {
	                    removeEvent.apply(null, args);
	                });
	                this._events = undefined;
	            },

	            /**
	             * Destroys allocated elements.
	             */
	            destroy: function() {

	                var scroller = this.chart.scroller;

	                // Disconnect events added in addEvents
	                this.removeEvents();

	                // Destroy properties
	                each(['track', 'scrollbarRifles', 'scrollbar', 'scrollbarGroup', 'group'], function(prop) {
	                    if (this[prop] && this[prop].destroy) {
	                        this[prop] = this[prop].destroy();
	                    }
	                }, this);

	                if (scroller) {
	                    scroller.scrollbar = null;

	                    // Destroy elements in collection
	                    destroyObjectProperties(scroller.scrollbarButtons);
	                }
	            }
	        };

	        /**
	         * Wrap axis initialization and create scrollbar if enabled:
	         */
	        wrap(Axis.prototype, 'init', function(proceed) {
	            var axis = this;
	            proceed.apply(axis, [].slice.call(arguments, 1));

	            if (axis.options.scrollbar && axis.options.scrollbar.enabled) {
	                // Predefined options:
	                axis.options.scrollbar.vertical = !axis.horiz;
	                axis.options.startOnTick = axis.options.endOnTick = false;

	                axis.scrollbar = new Scrollbar(axis.chart.renderer, axis.options.scrollbar, axis.chart);

	                addEvent(axis.scrollbar, 'changed', function(e) {
	                    var unitedMin = Math.min(pick(axis.options.min, axis.min), axis.min, axis.dataMin),
	                        unitedMax = Math.max(pick(axis.options.max, axis.max), axis.max, axis.dataMax),
	                        range = unitedMax - unitedMin,
	                        to,
	                        from;

	                    if ((axis.horiz && !axis.reversed) || (!axis.horiz && axis.reversed)) {
	                        to = unitedMin + range * this.to;
	                        from = unitedMin + range * this.from;
	                    } else {
	                        // y-values in browser are reversed, but this also applies for reversed horizontal axis:
	                        to = unitedMin + range * (1 - this.from);
	                        from = unitedMin + range * (1 - this.to);
	                    }

	                    axis.setExtremes(from, to, true, false, e);
	                });
	            }
	        });

	        /**
	         * Wrap rendering axis, and update scrollbar if one is created:
	         */
	        wrap(Axis.prototype, 'render', function(proceed) {
	            var axis = this,
	                scrollMin = Math.min(pick(axis.options.min, axis.min), axis.min, axis.dataMin),
	                scrollMax = Math.max(pick(axis.options.max, axis.max), axis.max, axis.dataMax),
	                scrollbar = axis.scrollbar,
	                from,
	                to;

	            proceed.apply(axis, [].slice.call(arguments, 1));

	            if (scrollbar) {
	                if (axis.horiz) {
	                    scrollbar.position(
	                        axis.left,
	                        axis.top + axis.height + axis.offset + 2 + (axis.opposite ? 0 : axis.axisTitleMargin),
	                        axis.width,
	                        axis.height
	                    );
	                } else {
	                    scrollbar.position(
	                        axis.left + axis.width + 2 + axis.offset + (axis.opposite ? axis.axisTitleMargin : 0),
	                        axis.top,
	                        axis.width,
	                        axis.height
	                    );
	                }

	                if (isNaN(scrollMin) || isNaN(scrollMax) || !defined(axis.min) || !defined(axis.max)) {
	                    scrollbar.setRange(0, 0); // default action: when there is not extremes on the axis, but scrollbar exists, make it full size
	                } else {
	                    from = (axis.min - scrollMin) / (scrollMax - scrollMin);
	                    to = (axis.max - scrollMin) / (scrollMax - scrollMin);

	                    if ((axis.horiz && !axis.reversed) || (!axis.horiz && axis.reversed)) {
	                        scrollbar.setRange(from, to);
	                    } else {
	                        scrollbar.setRange(1 - to, 1 - from); // inverse vertical axis
	                    }
	                }
	            }
	        });

	        /**
	         * Make space for a scrollbar
	         */
	        wrap(Axis.prototype, 'getOffset', function(proceed) {
	            var axis = this,
	                index = axis.horiz ? 2 : 1,
	                scrollbar = axis.scrollbar;

	            proceed.apply(axis, [].slice.call(arguments, 1));

	            if (scrollbar) {
	                axis.chart.axisOffset[index] += scrollbar.size + scrollbar.options.margin;
	            }
	        });

	        /**
	         * Destroy scrollbar when connected to the specific axis
	         */
	        wrap(Axis.prototype, 'destroy', function(proceed) {
	            if (this.scrollbar) {
	                this.scrollbar = this.scrollbar.destroy();
	            }

	            proceed.apply(this, [].slice.call(arguments, 1));
	        });

	        H.Scrollbar = Scrollbar;

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        /* ****************************************************************************
	         * Start Navigator code														*
	         *****************************************************************************/
	        var addEvent = H.addEvent,
	            Axis = H.Axis,
	            Chart = H.Chart,
	            color = H.color,
	            defaultDataGroupingUnits = H.defaultDataGroupingUnits,
	            defaultOptions = H.defaultOptions,
	            defined = H.defined,
	            destroyObjectProperties = H.destroyObjectProperties,
	            doc = H.doc,
	            each = H.each,
	            erase = H.erase,
	            error = H.error,
	            extend = H.extend,
	            grep = H.grep,
	            hasTouch = H.hasTouch,
	            isNumber = H.isNumber,
	            isObject = H.isObject,
	            merge = H.merge,
	            pick = H.pick,
	            removeEvent = H.removeEvent,
	            Scrollbar = H.Scrollbar,
	            Series = H.Series,
	            seriesTypes = H.seriesTypes,
	            wrap = H.wrap,
	            swapXY = H.swapXY,

	            units = [].concat(defaultDataGroupingUnits), // copy
	            defaultSeriesType,

	            // Finding the min or max of a set of variables where we don't know if they are defined,
	            // is a pattern that is repeated several places in Highcharts. Consider making this
	            // a global utility method.
	            numExt = function(extreme) {
	                var numbers = grep(arguments, isNumber);
	                if (numbers.length) {
	                    return Math[extreme].apply(0, numbers);
	                }
	            };

	        // add more resolution to units
	        units[4] = ['day', [1, 2, 3, 4]]; // allow more days
	        units[5] = ['week', [1, 2, 3]]; // allow more weeks

	        defaultSeriesType = seriesTypes.areaspline === undefined ? 'line' : 'areaspline';

	        extend(defaultOptions, {
	            navigator: {
	                //enabled: true,
	                height: 40,
	                margin: 25,
	                maskInside: true,

	                handles: {
	                    backgroundColor: '#f2f2f2',
	                    borderColor: '#999999'
	                },
	                maskFill: color('#6685c2').setOpacity(0.3).get(),
	                outlineColor: '#cccccc',
	                outlineWidth: 1,

	                series: {
	                    type: defaultSeriesType,

	                    color: '#335cad',
	                    fillOpacity: 0.05,
	                    lineWidth: 1,

	                    compare: null,
	                    dataGrouping: {
	                        approximation: 'average',
	                        enabled: true,
	                        groupPixelWidth: 2,
	                        smoothed: true,
	                        units: units
	                    },
	                    dataLabels: {
	                        enabled: false,
	                        zIndex: 2 // #1839
	                    },
	                    id: 'highcharts-navigator-series',
	                    className: 'highcharts-navigator-series',
	                    lineColor: null, // Allow color setting while disallowing default candlestick setting (#4602)
	                    marker: {
	                        enabled: false
	                    },
	                    pointRange: 0,
	                    shadow: false,
	                    threshold: null
	                },
	                //top: undefined,
	                //opposite: undefined, // docs
	                xAxis: {
	                    className: 'highcharts-navigator-xaxis',
	                    tickLength: 0,

	                    lineWidth: 0,
	                    gridLineColor: '#e6e6e6',
	                    gridLineWidth: 1,

	                    tickPixelInterval: 200,
	                    labels: {
	                        align: 'left',

	                        style: {
	                            color: '#999999'
	                        },

	                        x: 3,
	                        y: -4
	                    },
	                    crosshair: false
	                },
	                yAxis: {
	                    className: 'highcharts-navigator-yaxis',

	                    gridLineWidth: 0,

	                    startOnTick: false,
	                    endOnTick: false,
	                    minPadding: 0.1,
	                    maxPadding: 0.1,
	                    labels: {
	                        enabled: false
	                    },
	                    crosshair: false,
	                    title: {
	                        text: null
	                    },
	                    tickLength: 0,
	                    tickWidth: 0
	                }
	            }
	        });

	        /**
	         * The Navigator class
	         * @param {Object} chart - Chart object
	         * @class
	         */
	        function Navigator(chart) {
	            this.init(chart);
	        }

	        Navigator.prototype = {
	            /**
	             * Draw one of the handles on the side of the zoomed range in the navigator
	             * @param {Number} x The x center for the handle
	             * @param {Number} index 0 for left and 1 for right
	             * @param {Boolean} inverted flag for chart.inverted
	             * @param {String} verb use 'animate' or 'attr'
	             */
	            drawHandle: function(x, index, inverted, verb) {
	                var navigator = this;

	                // Place it
	                navigator.handles[index][verb](inverted ? {
	                    translateX: Math.round(navigator.left + navigator.height / 2 - 8),
	                    translateY: Math.round(navigator.top + parseInt(x, 10) + 0.5)
	                } : {
	                    translateX: Math.round(navigator.left + parseInt(x, 10)),
	                    translateY: Math.round(navigator.top + navigator.height / 2 - 8)
	                });
	            },

	            /**
	             * Draw one of the handles on the side of the zoomed range in the navigator
	             * @param {Boolean} inverted flag for chart.inverted
	             * @returns {Array} Path to be used in a handle
	             */
	            getHandlePath: function(inverted) {
	                return swapXY([
	                    'M', -4.5, 0.5,
	                    'L',
	                    3.5, 0.5,
	                    'L',
	                    3.5, 15.5,
	                    'L', -4.5, 15.5,
	                    'L', -4.5, 0.5,
	                    'M', -1.5, 4,
	                    'L', -1.5, 12,
	                    'M',
	                    0.5, 4,
	                    'L',
	                    0.5, 12
	                ], inverted);
	            },
	            /**
	             * Render outline around the zoomed range
	             * @param {Number} zoomedMin in pixels position where zoomed range starts
	             * @param {Number} zoomedMax in pixels position where zoomed range ends
	             * @param {Boolean} inverted flag if chart is inverted
	             * @param {String} verb use 'animate' or 'attr'
	             */
	            drawOutline: function(zoomedMin, zoomedMax, inverted, verb) {
	                var navigator = this,
	                    maskInside = navigator.navigatorOptions.maskInside,
	                    outlineWidth = navigator.outline.strokeWidth(),
	                    halfOutline = outlineWidth / 2,
	                    outlineHeight = navigator.outlineHeight,
	                    scrollbarHeight = navigator.scrollbarHeight,
	                    navigatorSize = navigator.size,
	                    left = navigator.left - scrollbarHeight,
	                    navigatorTop = navigator.top,
	                    verticalMin,
	                    path;

	                if (inverted) {
	                    left -= halfOutline;
	                    verticalMin = navigatorTop + zoomedMax + halfOutline;
	                    zoomedMax = navigatorTop + zoomedMin + halfOutline;

	                    path = [
	                        'M',
	                        left + outlineHeight,
	                        navigatorTop - scrollbarHeight - halfOutline, // top edge
	                        'L',
	                        left + outlineHeight,
	                        verticalMin, // top right of zoomed range
	                        'L',
	                        left,
	                        verticalMin, // top left of z.r.
	                        'L',
	                        left,
	                        zoomedMax, // bottom left of z.r.
	                        'L',
	                        left + outlineHeight,
	                        zoomedMax, // bottom right of z.r.
	                        'L',
	                        left + outlineHeight,
	                        navigatorTop + navigatorSize + scrollbarHeight // bottom edge
	                    ].concat(maskInside ? [
	                        'M',
	                        left + outlineHeight,
	                        verticalMin - halfOutline, // upper left of zoomed range
	                        'L',
	                        left + outlineHeight,
	                        zoomedMax + halfOutline // upper right of z.r.
	                    ] : []);
	                } else {
	                    zoomedMin += left + scrollbarHeight - halfOutline; // #5800 - TO DO, remove halfOutline
	                    zoomedMax += left + scrollbarHeight - halfOutline; // #5800 - TO DO, remove halfOutline
	                    navigatorTop += halfOutline;

	                    path = [
	                        'M',
	                        left,
	                        navigatorTop, // left
	                        'L',
	                        zoomedMin,
	                        navigatorTop, // upper left of zoomed range
	                        'L',
	                        zoomedMin,
	                        navigatorTop + outlineHeight, // lower left of z.r.
	                        'L',
	                        zoomedMax,
	                        navigatorTop + outlineHeight, // lower right of z.r.
	                        'L',
	                        zoomedMax,
	                        navigatorTop, // upper right of z.r.
	                        'L',
	                        left + navigatorSize + scrollbarHeight * 2,
	                        navigatorTop // right
	                    ].concat(maskInside ? [
	                        'M',
	                        zoomedMin - halfOutline,
	                        navigatorTop, // upper left of zoomed range
	                        'L',
	                        zoomedMax + halfOutline,
	                        navigatorTop // upper right of z.r.
	                    ] : []);
	                }
	                navigator.outline[verb]({
	                    d: path
	                });
	            },

	            /**
	             * Render outline around the zoomed range
	             * @param {Number} zoomedMin in pixels position where zoomed range starts
	             * @param {Number} zoomedMax in pixels position where zoomed range ends
	             * @param {Boolean} inverted flag if chart is inverted
	             * @param {String} verb use 'animate' or 'attr'
	             */
	            drawMasks: function(zoomedMin, zoomedMax, inverted, verb) {
	                var navigator = this,
	                    left = navigator.left,
	                    top = navigator.top,
	                    navigatorHeight = navigator.height,
	                    height,
	                    width,
	                    x,
	                    y;

	                // Determine rectangle position & size 
	                // According to (non)inverted position:
	                if (inverted) {
	                    x = [left, left, left];
	                    y = [top, top + zoomedMin, top + zoomedMax];
	                    width = [navigatorHeight, navigatorHeight, navigatorHeight];
	                    height = [
	                        zoomedMin,
	                        zoomedMax - zoomedMin,
	                        navigator.size - zoomedMax
	                    ];
	                } else {
	                    x = [left, left + zoomedMin, left + zoomedMax];
	                    y = [top, top, top];
	                    width = [
	                        zoomedMin,
	                        zoomedMax - zoomedMin,
	                        navigator.size - zoomedMax
	                    ];
	                    height = [navigatorHeight, navigatorHeight, navigatorHeight];
	                }
	                each(navigator.shades, function(shade, i) {
	                    shade[verb]({
	                        x: x[i],
	                        y: y[i],
	                        width: width[i],
	                        height: height[i]
	                    });
	                });
	            },

	            /**
	             * Generate DOM elements for a navigator:
	             * - main navigator group
	             * - all shades
	             * - outline
	             * - handles
	             */
	            renderElements: function() {
	                var navigator = this,
	                    navigatorOptions = navigator.navigatorOptions,
	                    maskInside = navigatorOptions.maskInside,
	                    chart = navigator.chart,
	                    inverted = chart.inverted,
	                    renderer = chart.renderer,
	                    navigatorGroup;

	                // Create the main navigator group
	                navigator.navigatorGroup = navigatorGroup = renderer.g('navigator')
	                    .attr({
	                        zIndex: 8,
	                        visibility: 'hidden'
	                    })
	                    .add();



	                var mouseCursor = {
	                    cursor: inverted ? 'ns-resize' : 'ew-resize'
	                };


	                // Create masks, each mask will get events and fill:
	                each([!maskInside, maskInside, !maskInside], function(hasMask, index) {
	                    navigator.shades[index] = renderer.rect()
	                        .addClass('highcharts-navigator-mask' +
	                            (index === 1 ? '-inside' : '-outside'))

	                    .attr({
	                            fill: hasMask ? navigatorOptions.maskFill : 'transparent'
	                        })
	                        .css(index === 1 && mouseCursor)

	                    .add(navigatorGroup);
	                });

	                // Create the outline:
	                navigator.outline = renderer.path()
	                    .addClass('highcharts-navigator-outline')

	                .attr({
	                    'stroke-width': navigatorOptions.outlineWidth,
	                    stroke: navigatorOptions.outlineColor
	                })

	                .add(navigatorGroup);

	                // Create the handlers:
	                each([0, 1], function(index) {
	                    navigator.handles[index] = renderer
	                        .path(navigator.getHandlePath(inverted))
	                        // zIndex = 6 for right handle, 7 for left.
	                        // Can't be 10, because of the tooltip in inverted chart #2908
	                        .attr({
	                            zIndex: 7 - index
	                        })
	                        .addClass(
	                            'highcharts-navigator-handle highcharts-navigator-handle-' + ['left', 'right'][index]
	                        ).add(navigatorGroup);


	                    var handlesOptions = navigatorOptions.handles;
	                    navigator.handles[index]
	                        .attr({
	                            fill: handlesOptions.backgroundColor,
	                            stroke: handlesOptions.borderColor,
	                            'stroke-width': 1
	                        })
	                        .css(mouseCursor);

	                });
	            },

	            /**
	             * Update navigator
	             * @param {Object} options Options to merge in when updating navigator
	             */
	            update: function(options) {
	                this.destroy();
	                var chartOptions = this.chart.options;
	                merge(true, chartOptions.navigator, this.options, options);
	                this.init(this.chart);
	            },

	            /**
	             * Render the navigator
	             * @param {Number} min X axis value minimum
	             * @param {Number} max X axis value maximum
	             * @param {Number} pxMin Pixel value minimum
	             * @param {Number} pxMax Pixel value maximum
	             */
	            render: function(min, max, pxMin, pxMax) {
	                var navigator = this,
	                    chart = navigator.chart,
	                    navigatorWidth,
	                    scrollbarLeft,
	                    scrollbarTop,
	                    scrollbarHeight = navigator.scrollbarHeight,
	                    navigatorSize,
	                    xAxis = navigator.xAxis,
	                    navigatorEnabled = navigator.navigatorEnabled,
	                    zoomedMin,
	                    zoomedMax,
	                    rendered = navigator.rendered,
	                    inverted = chart.inverted,
	                    verb,
	                    newMin,
	                    newMax,
	                    minRange = chart.xAxis[0].minRange;

	                // Don't redraw while moving the handles (#4703).
	                if (this.hasDragged && !defined(pxMin)) {
	                    return;
	                }

	                // Don't render the navigator until we have data (#486, #4202, #5172).
	                if (!isNumber(min) || !isNumber(max)) {
	                    // However, if navigator was already rendered, we may need to resize
	                    // it. For example hidden series, but visible navigator (#6022).
	                    if (rendered) {
	                        pxMin = 0;
	                        pxMax = xAxis.width;
	                    } else {
	                        return;
	                    }
	                }

	                navigator.left = pick(
	                    xAxis.left,
	                    chart.plotLeft + scrollbarHeight // in case of scrollbar only, without navigator
	                );

	                if (inverted) {
	                    navigator.size = zoomedMax = navigatorSize = pick(
	                        xAxis.len,
	                        chart.plotHeight - 2 * scrollbarHeight
	                    );
	                    navigatorWidth = scrollbarHeight;
	                } else {
	                    navigator.size = zoomedMax = navigatorSize = pick(
	                        xAxis.len,
	                        chart.plotWidth - 2 * scrollbarHeight
	                    );
	                    navigatorWidth = navigatorSize + 2 * scrollbarHeight;
	                }

	                // Get the pixel position of the handles
	                pxMin = pick(pxMin, xAxis.toPixels(min, true));
	                pxMax = pick(pxMax, xAxis.toPixels(max, true));

	                if (!isNumber(pxMin) || Math.abs(pxMin) === Infinity) { // Verify (#1851, #2238)
	                    pxMin = 0;
	                    pxMax = navigatorWidth;
	                }

	                // Are we below the minRange? (#2618, #6191)
	                newMin = xAxis.toValue(pxMin, true);
	                newMax = xAxis.toValue(pxMax, true);
	                if (Math.abs(newMax - newMin) < minRange) {
	                    if (this.grabbedLeft) {
	                        pxMin = xAxis.toPixels(newMax - minRange, true);
	                    } else if (this.grabbedRight) {
	                        pxMax = xAxis.toPixels(newMin + minRange, true);
	                    } else {
	                        return;
	                    }
	                }

	                // Handles are allowed to cross, but never exceed the plot area
	                navigator.zoomedMax = Math.min(Math.max(pxMin, pxMax, 0), zoomedMax);
	                navigator.zoomedMin = Math.min(
	                    Math.max(
	                        navigator.fixedWidth ?
	                        navigator.zoomedMax - navigator.fixedWidth :
	                        Math.min(pxMin, pxMax),
	                        0
	                    ),
	                    zoomedMax
	                );
	                navigator.range = navigator.zoomedMax - navigator.zoomedMin;

	                zoomedMax = Math.round(navigator.zoomedMax);
	                zoomedMin = Math.round(navigator.zoomedMin);

	                if (navigatorEnabled) {
	                    navigator.navigatorGroup.attr({
	                        visibility: 'visible'
	                    });
	                    // Place elements
	                    verb = rendered && !navigator.hasDragged ? 'animate' : 'attr';

	                    navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);
	                    navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);
	                    navigator.drawHandle(zoomedMin, 0, inverted, verb);
	                    navigator.drawHandle(zoomedMax, 1, inverted, verb);
	                }

	                if (navigator.scrollbar) {
	                    if (inverted) {
	                        scrollbarTop = navigator.top - scrollbarHeight;
	                        scrollbarLeft = navigator.left - scrollbarHeight +
	                            (navigatorEnabled ? 0 : navigator.height);
	                        scrollbarHeight = navigatorSize + 2 * scrollbarHeight;
	                    } else {
	                        scrollbarTop = navigator.top +
	                            (navigatorEnabled ? navigator.height : -scrollbarHeight);
	                        scrollbarLeft = navigator.left - scrollbarHeight;
	                    }
	                    // Reposition scrollbar
	                    navigator.scrollbar.position(
	                        scrollbarLeft,
	                        scrollbarTop,
	                        navigatorWidth,
	                        scrollbarHeight
	                    );
	                    // Keep scale 0-1
	                    navigator.scrollbar.setRange(
	                        zoomedMin / navigatorSize,
	                        zoomedMax / navigatorSize
	                    );
	                }
	                navigator.rendered = true;
	            },

	            /**
	             * Set up the mouse and touch events for the navigator
	             */
	            addMouseEvents: function() {
	                var navigator = this,
	                    chart = navigator.chart,
	                    container = chart.container,
	                    eventsToUnbind = [],
	                    mouseMoveHandler,
	                    mouseUpHandler;

	                /**
	                 * Create mouse events' handlers.
	                 * Make them as separate functions to enable wrapping them:
	                 */
	                navigator.mouseMoveHandler = mouseMoveHandler = function(e) {
	                    navigator.onMouseMove(e);
	                };
	                navigator.mouseUpHandler = mouseUpHandler = function(e) {
	                    navigator.onMouseUp(e);
	                };

	                // Add shades and handles mousedown events
	                eventsToUnbind = navigator.getPartsEvents('mousedown');
	                // Add mouse move and mouseup events. These are bind to doc/container,
	                // because Navigator.grabbedSomething flags are stored in mousedown events:
	                eventsToUnbind.push(
	                    addEvent(container, 'mousemove', mouseMoveHandler),
	                    addEvent(doc, 'mouseup', mouseUpHandler)
	                );

	                // Touch events
	                if (hasTouch) {
	                    eventsToUnbind.push(
	                        addEvent(container, 'touchmove', mouseMoveHandler),
	                        addEvent(doc, 'touchend', mouseUpHandler)
	                    );
	                    eventsToUnbind.concat(navigator.getPartsEvents('touchstart'));
	                }

	                navigator.eventsToUnbind = eventsToUnbind;

	                // Data events
	                if (navigator.series && navigator.series[0]) {
	                    eventsToUnbind.push(
	                        addEvent(navigator.series[0].xAxis, 'foundExtremes', function() {
	                            chart.navigator.modifyNavigatorAxisExtremes();
	                        })
	                    );
	                }
	            },

	            /**
	             * Generate events for handles and masks
	             * @param {String} eventName Event name handler, 'mousedown' or 'touchstart'
	             * @returns {Array} An array of arrays: [DOMElement, eventName, callback].
	             */
	            getPartsEvents: function(eventName) {
	                var navigator = this,
	                    events = [];
	                each(['shades', 'handles'], function(name) {
	                    each(navigator[name], function(navigatorItem, index) {
	                        events.push(
	                            addEvent(
	                                navigatorItem.element,
	                                eventName,
	                                function(e) {
	                                    navigator[name + 'Mousedown'](e, index);
	                                }
	                            )
	                        );
	                    });
	                });
	                return events;
	            },

	            /**
	             * Mousedown on a shaded mask, either:
	             * - will be stored for future drag&drop 
	             * - will directly shift to a new range
	             *
	             * @param {Object} e Mouse event
	             * @param {Number} index Index of a mask in Navigator.shades array
	             */
	            shadesMousedown: function(e, index) {
	                e = this.chart.pointer.normalize(e);

	                var navigator = this,
	                    chart = navigator.chart,
	                    xAxis = navigator.xAxis,
	                    zoomedMin = navigator.zoomedMin,
	                    navigatorPosition = navigator.left,
	                    navigatorSize = navigator.size,
	                    range = navigator.range,
	                    chartX = e.chartX,
	                    fixedMax,
	                    ext,
	                    left;

	                // For inverted chart, swap some options:
	                if (chart.inverted) {
	                    chartX = e.chartY;
	                    navigatorPosition = navigator.top;
	                }

	                if (index === 1) {
	                    // Store information for drag&drop
	                    navigator.grabbedCenter = chartX;
	                    navigator.fixedWidth = range;
	                    navigator.dragOffset = chartX - zoomedMin;
	                } else {
	                    // Shift the range by clicking on shaded areas
	                    left = chartX - navigatorPosition - range / 2;
	                    if (index === 0) {
	                        left = Math.max(0, left);
	                    } else if (index === 2 && left + range >= navigatorSize) {
	                        left = navigatorSize - range;
	                        fixedMax = navigator.getUnionExtremes().dataMax; // #2293, #3543
	                    }
	                    if (left !== zoomedMin) { // it has actually moved
	                        navigator.fixedWidth = range; // #1370

	                        ext = xAxis.toFixedRange(left, left + range, null, fixedMax);
	                        chart.xAxis[0].setExtremes(
	                            Math.min(ext.min, ext.max),
	                            Math.max(ext.min, ext.max),
	                            true,
	                            null, // auto animation
	                            {
	                                trigger: 'navigator'
	                            }
	                        );
	                    }
	                }
	            },

	            /**
	             * Mousedown on a handle mask.
	             * Will store necessary information for drag&drop.
	             *
	             * @param {Object} e Mouse event
	             * @param {Number} index Index of a handle in Navigator.handles array
	             */
	            handlesMousedown: function(e, index) {
	                e = this.chart.pointer.normalize(e);

	                var navigator = this,
	                    chart = navigator.chart,
	                    baseXAxis = chart.xAxis[0],
	                    // For reversed axes, min and max are chagned,
	                    // so the other extreme should be stored
	                    reverse = (chart.inverted && !baseXAxis.reversed) ||
	                    (!chart.inverted && baseXAxis.reversed);

	                if (index === 0) {
	                    // Grab the left handle
	                    navigator.grabbedLeft = true;
	                    navigator.otherHandlePos = navigator.zoomedMax;
	                    navigator.fixedExtreme = reverse ? baseXAxis.min : baseXAxis.max;
	                } else {
	                    // Grab the right handle
	                    navigator.grabbedRight = true;
	                    navigator.otherHandlePos = navigator.zoomedMin;
	                    navigator.fixedExtreme = reverse ? baseXAxis.max : baseXAxis.min;
	                }

	                chart.fixedRange = null;
	            },
	            /**
	             * Mouse move event based on x/y mouse position.
	             * @param {Object} e Mouse event
	             */
	            onMouseMove: function(e) {
	                var navigator = this,
	                    chart = navigator.chart,
	                    left = navigator.left,
	                    navigatorSize = navigator.navigatorSize,
	                    range = navigator.range,
	                    dragOffset = navigator.dragOffset,
	                    inverted = chart.inverted,
	                    chartX;


	                // In iOS, a mousemove event with e.pageX === 0 is fired when holding the finger
	                // down in the center of the scrollbar. This should be ignored.
	                if (!e.touches || e.touches[0].pageX !== 0) { // #4696, scrollbar failed on Android

	                    e = chart.pointer.normalize(e);
	                    chartX = e.chartX;

	                    // Swap some options for inverted chart
	                    if (inverted) {
	                        left = navigator.top;
	                        chartX = e.chartY;
	                    }

	                    // Drag left handle or top handle
	                    if (navigator.grabbedLeft) {
	                        navigator.hasDragged = true;
	                        navigator.render(
	                            0,
	                            0,
	                            chartX - left,
	                            navigator.otherHandlePos
	                        );
	                        // Drag right handle or bottom handle
	                    } else if (navigator.grabbedRight) {
	                        navigator.hasDragged = true;
	                        navigator.render(
	                            0,
	                            0,
	                            navigator.otherHandlePos,
	                            chartX - left
	                        );
	                        // Drag scrollbar or open area in navigator
	                    } else if (navigator.grabbedCenter) {
	                        navigator.hasDragged = true;
	                        if (chartX < dragOffset) { // outside left
	                            chartX = dragOffset;
	                        } else if (chartX > navigatorSize + dragOffset - range) { // outside right
	                            chartX = navigatorSize + dragOffset - range;
	                        }
	                        navigator.render(
	                            0,
	                            0,
	                            chartX - dragOffset,
	                            chartX - dragOffset + range
	                        );
	                    }
	                    if (navigator.hasDragged && navigator.scrollbar && navigator.scrollbar.options.liveRedraw) {
	                        e.DOMType = e.type; // DOMType is for IE8 because it can't read type async
	                        setTimeout(function() {
	                            navigator.onMouseUp(e);
	                        }, 0);
	                    }
	                }
	            },

	            /**
	             * Mouse up event based on x/y mouse position.
	             * @param {Object} e Mouse event
	             */
	            onMouseUp: function(e) {
	                var navigator = this,
	                    chart = navigator.chart,
	                    xAxis = navigator.xAxis,
	                    fixedMin,
	                    fixedMax,
	                    ext,
	                    DOMEvent = e.DOMEvent || e;

	                if (navigator.hasDragged || e.trigger === 'scrollbar') {
	                    // When dragging one handle, make sure the other one doesn't change
	                    if (navigator.zoomedMin === navigator.otherHandlePos) {
	                        fixedMin = navigator.fixedExtreme;
	                    } else if (navigator.zoomedMax === navigator.otherHandlePos) {
	                        fixedMax = navigator.fixedExtreme;
	                    }
	                    // Snap to right edge (#4076)
	                    if (navigator.zoomedMax === navigator.navigatorSize) {
	                        fixedMax = navigator.getUnionExtremes().dataMax;
	                    }
	                    ext = xAxis.toFixedRange(
	                        navigator.zoomedMin,
	                        navigator.zoomedMax,
	                        fixedMin,
	                        fixedMax
	                    );

	                    if (defined(ext.min)) {
	                        chart.xAxis[0].setExtremes(
	                            Math.min(ext.min, ext.max),
	                            Math.max(ext.min, ext.max),
	                            true,
	                            navigator.hasDragged ? false : null, // Run animation when clicking buttons, scrollbar track etc, but not when dragging handles or scrollbar
	                            {
	                                trigger: 'navigator',
	                                triggerOp: 'navigator-drag',
	                                DOMEvent: DOMEvent // #1838
	                            }
	                        );
	                    }
	                }

	                if (e.DOMType !== 'mousemove') {
	                    navigator.grabbedLeft = navigator.grabbedRight =
	                        navigator.grabbedCenter = navigator.fixedWidth =
	                        navigator.fixedExtreme = navigator.otherHandlePos =
	                        navigator.hasDragged = navigator.dragOffset = null;
	                }
	            },

	            /**
	             * Removes the event handlers attached previously with addEvents.
	             */
	            removeEvents: function() {
	                if (this.eventsToUnbind) {
	                    each(this.eventsToUnbind, function(unbind) {
	                        unbind();
	                    });
	                    this.eventsToUnbind = undefined;
	                }
	                this.removeBaseSeriesEvents();
	            },

	            /**
	             * Remove data events.
	             */
	            removeBaseSeriesEvents: function() {
	                var baseSeries = this.baseSeries || [];
	                if (this.navigatorEnabled && baseSeries[0] && this.navigatorOptions.adaptToUpdatedData !== false) {
	                    each(baseSeries, function(series) {
	                        removeEvent(series, 'updatedData', this.updatedDataHandler);
	                    }, this);

	                    // We only listen for extremes-events on the first baseSeries
	                    if (baseSeries[0].xAxis) {
	                        removeEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);
	                    }
	                }
	            },

	            /**
	             * Initiate the Navigator object
	             */
	            init: function(chart) {
	                var chartOptions = chart.options,
	                    navigatorOptions = chartOptions.navigator,
	                    navigatorEnabled = navigatorOptions.enabled,
	                    scrollbarOptions = chartOptions.scrollbar,
	                    scrollbarEnabled = scrollbarOptions.enabled,
	                    height = navigatorEnabled ? navigatorOptions.height : 0,
	                    scrollbarHeight = scrollbarEnabled ? scrollbarOptions.height : 0;

	                this.handles = [];
	                this.shades = [];

	                this.chart = chart;
	                this.setBaseSeries();

	                this.height = height;
	                this.scrollbarHeight = scrollbarHeight;
	                this.scrollbarEnabled = scrollbarEnabled;
	                this.navigatorEnabled = navigatorEnabled;
	                this.navigatorOptions = navigatorOptions;
	                this.scrollbarOptions = scrollbarOptions;
	                this.outlineHeight = height + scrollbarHeight;

	                var navigator = this,
	                    baseSeries = navigator.baseSeries,
	                    xAxisIndex = chart.xAxis.length,
	                    yAxisIndex = chart.yAxis.length,
	                    baseXaxis = baseSeries && baseSeries[0] && baseSeries[0].xAxis || chart.xAxis[0];

	                // Make room for the navigator, can be placed around the chart:
	                chart.extraMargin = {
	                    type: navigatorOptions.opposite ? 'plotTop' : 'marginBottom',
	                    value: navigator.outlineHeight + navigatorOptions.margin
	                };
	                if (chart.inverted) {
	                    chart.extraMargin.type = navigatorOptions.opposite ? 'marginRight' : 'plotLeft';
	                }
	                chart.isDirtyBox = true;

	                if (navigator.navigatorEnabled) {
	                    // an x axis is required for scrollbar also
	                    navigator.xAxis = new Axis(chart, merge({
	                        // inherit base xAxis' break and ordinal options
	                        breaks: baseXaxis.options.breaks,
	                        ordinal: baseXaxis.options.ordinal
	                    }, navigatorOptions.xAxis, {
	                        id: 'navigator-x-axis',
	                        yAxis: 'navigator-y-axis',
	                        isX: true,
	                        type: 'datetime',
	                        index: xAxisIndex,
	                        offset: 0,
	                        keepOrdinalPadding: true, // #2436
	                        startOnTick: false,
	                        endOnTick: false,
	                        minPadding: 0,
	                        maxPadding: 0,
	                        zoomEnabled: false
	                    }, chart.inverted ? {
	                        offsets: [scrollbarHeight, 0, -scrollbarHeight, 0],
	                        width: height
	                    } : {
	                        offsets: [0, -scrollbarHeight, 0, scrollbarHeight],
	                        height: height
	                    }));

	                    navigator.yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {
	                        id: 'navigator-y-axis',
	                        alignTicks: false,
	                        offset: 0,
	                        index: yAxisIndex,
	                        zoomEnabled: false
	                    }, chart.inverted ? {
	                        width: height
	                    } : {
	                        height: height
	                    }));

	                    // If we have a base series, initialize the navigator series
	                    if (baseSeries || navigatorOptions.series.data) {
	                        navigator.addBaseSeries();

	                        // If not, set up an event to listen for added series
	                    } else if (chart.series.length === 0) {

	                        wrap(chart, 'redraw', function(proceed, animation) {
	                            // We've got one, now add it as base and reset chart.redraw
	                            if (chart.series.length > 0 && !navigator.series) {
	                                navigator.setBaseSeries();
	                                chart.redraw = proceed; // reset
	                            }
	                            proceed.call(chart, animation);
	                        });
	                    }

	                    // Render items, so we can bind events to them:
	                    navigator.renderElements();
	                    // Add mouse events
	                    navigator.addMouseEvents();

	                    // in case of scrollbar only, fake an x axis to get translation
	                } else {
	                    navigator.xAxis = {
	                        translate: function(value, reverse) {
	                            var axis = chart.xAxis[0],
	                                ext = axis.getExtremes(),
	                                scrollTrackWidth = chart.plotWidth - 2 * scrollbarHeight,
	                                min = numExt('min', axis.options.min, ext.dataMin),
	                                valueRange = numExt('max', axis.options.max, ext.dataMax) - min;

	                            return reverse ?
	                                // from pixel to value
	                                (value * valueRange / scrollTrackWidth) + min :
	                                // from value to pixel
	                                scrollTrackWidth * (value - min) / valueRange;
	                        },
	                        toPixels: function(value) {
	                            return this.translate(value);
	                        },
	                        toValue: function(value) {
	                            return this.translate(value, true);
	                        },
	                        toFixedRange: Axis.prototype.toFixedRange,
	                        fake: true
	                    };
	                }


	                // Initialize the scrollbar
	                if (chart.options.scrollbar.enabled) {
	                    chart.scrollbar = navigator.scrollbar = new Scrollbar(
	                        chart.renderer,
	                        merge(chart.options.scrollbar, {
	                            margin: navigator.navigatorEnabled ? 0 : 10,
	                            vertical: chart.inverted
	                        }),
	                        chart
	                    );
	                    addEvent(navigator.scrollbar, 'changed', function(e) {
	                        var range = navigator.size,
	                            to = range * this.to,
	                            from = range * this.from;

	                        navigator.hasDragged = navigator.scrollbar.hasDragged;
	                        navigator.render(0, 0, from, to);

	                        if (chart.options.scrollbar.liveRedraw || e.DOMType !== 'mousemove') {
	                            setTimeout(function() {
	                                navigator.onMouseUp(e);
	                            });
	                        }
	                    });
	                }

	                // Add data events
	                navigator.addBaseSeriesEvents();
	                // Add redraw events
	                navigator.addChartEvents();
	            },

	            /**
	             * Get the union data extremes of the chart - the outer data extremes of the base
	             * X axis and the navigator axis.
	             * @param {boolean} returnFalseOnNoBaseSeries - as the param says.
	             */
	            getUnionExtremes: function(returnFalseOnNoBaseSeries) {
	                var baseAxis = this.chart.xAxis[0],
	                    navAxis = this.xAxis,
	                    navAxisOptions = navAxis.options,
	                    baseAxisOptions = baseAxis.options,
	                    ret;

	                if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {
	                    ret = {
	                        dataMin: pick( // #4053
	                            navAxisOptions && navAxisOptions.min,
	                            numExt(
	                                'min',
	                                baseAxisOptions.min,
	                                baseAxis.dataMin,
	                                navAxis.dataMin,
	                                navAxis.min
	                            )
	                        ),
	                        dataMax: pick(
	                            navAxisOptions && navAxisOptions.max,
	                            numExt(
	                                'max',
	                                baseAxisOptions.max,
	                                baseAxis.dataMax,
	                                navAxis.dataMax,
	                                navAxis.max
	                            )
	                        )
	                    };
	                }
	                return ret;
	            },

	            /**
	             * Set the base series. With a bit of modification we should be able to make
	             * this an API method to be called from the outside
	             * @param {Object} baseSeriesOptions - series options for a navigator
	             */
	            setBaseSeries: function(baseSeriesOptions) {
	                var chart = this.chart,
	                    baseSeries = this.baseSeries = [];

	                baseSeriesOptions = baseSeriesOptions || chart.options && chart.options.navigator.baseSeries || 0;

	                // If we're resetting, remove the existing series
	                if (this.series) {
	                    this.removeBaseSeriesEvents();
	                    each(this.series, function(s) {
	                        s.destroy();
	                    });
	                }

	                // Iterate through series and add the ones that should be shown in navigator
	                each(chart.series || [], function(series, i) {
	                    if (series.options.showInNavigator || (i === baseSeriesOptions || series.options.id === baseSeriesOptions) &&
	                        series.options.showInNavigator !== false) {
	                        baseSeries.push(series);
	                    }
	                });

	                // When run after render, this.xAxis already exists
	                if (this.xAxis && !this.xAxis.fake) {
	                    this.addBaseSeries();
	                }
	            },

	            /*
	             * Add base series to the navigator.
	             */
	            addBaseSeries: function() {
	                var navigator = this,
	                    chart = navigator.chart,
	                    navigatorSeries = navigator.series = [],
	                    baseSeries = navigator.baseSeries,
	                    baseOptions,
	                    mergedNavSeriesOptions,
	                    chartNavigatorOptions = navigator.navigatorOptions.series,
	                    baseNavigatorOptions,
	                    navSeriesMixin = {
	                        enableMouseTracking: false,
	                        index: null, // #6162
	                        group: 'nav', // for columns
	                        padXAxis: false,
	                        xAxis: 'navigator-x-axis',
	                        yAxis: 'navigator-y-axis',
	                        showInLegend: false,
	                        stacking: false, // #4823
	                        isInternal: true,
	                        visible: true
	                    };

	                // Go through each base series and merge the options to create new series
	                if (baseSeries) {
	                    each(baseSeries, function(base, i) {
	                        navSeriesMixin.name = 'Navigator ' + (i + 1);

	                        baseOptions = base.options || {};
	                        baseNavigatorOptions = baseOptions.navigatorOptions || {};
	                        mergedNavSeriesOptions = merge(baseOptions, navSeriesMixin, chartNavigatorOptions, baseNavigatorOptions);

	                        // Merge data separately. Do a slice to avoid mutating the navigator options from base series (#4923).
	                        var navigatorSeriesData = baseNavigatorOptions.data || chartNavigatorOptions.data;
	                        navigator.hasNavigatorData = navigator.hasNavigatorData || !!navigatorSeriesData;
	                        mergedNavSeriesOptions.data = navigatorSeriesData || baseOptions.data && baseOptions.data.slice(0);

	                        // Add the series
	                        base.navigatorSeries = chart.initSeries(mergedNavSeriesOptions);
	                        navigatorSeries.push(base.navigatorSeries);
	                    });
	                } else {
	                    // No base series, build from mixin and chart wide options
	                    mergedNavSeriesOptions = merge(chartNavigatorOptions, navSeriesMixin);
	                    mergedNavSeriesOptions.data = chartNavigatorOptions.data;
	                    navigator.hasNavigatorData = !!mergedNavSeriesOptions.data;
	                    navigatorSeries.push(chart.initSeries(mergedNavSeriesOptions));
	                }

	                this.addBaseSeriesEvents();
	            },

	            /**
	             * Add data events.
	             * For example when main series is updated we need to recalculate extremes
	             */
	            addBaseSeriesEvents: function() {
	                var navigator = this,
	                    baseSeries = navigator.baseSeries || [];

	                // Bind modified extremes event to first base's xAxis only. In event of > 1 base-xAxes, the navigator will ignore those.
	                if (baseSeries[0] && baseSeries[0].xAxis) {
	                    addEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);
	                }

	                if (this.navigatorOptions.adaptToUpdatedData !== false) {
	                    // Respond to updated data in the base series.
	                    // Abort if lazy-loading data from the server.
	                    each(baseSeries, function(base) {
	                        if (base.xAxis) {
	                            addEvent(base, 'updatedData', this.updatedDataHandler);
	                            // Survive Series.update()
	                            base.userOptions.events = extend(base.userOptions.event, {
	                                updatedData: this.updatedDataHandler
	                            });
	                        }

	                        // Handle series removal
	                        addEvent(base, 'remove', function() {
	                            if (this.navigatorSeries) {
	                                erase(navigator.series, this.navigatorSeries);
	                                this.navigatorSeries.remove();
	                                delete this.navigatorSeries;
	                            }
	                        });
	                    }, this);
	                }
	            },

	            /**
	             * Set the navigator x axis extremes to reflect the total. The navigator extremes
	             * should always be the extremes of the union of all series in the chart as
	             * well as the navigator series.
	             */
	            modifyNavigatorAxisExtremes: function() {
	                var xAxis = this.xAxis,
	                    unionExtremes;

	                if (xAxis.getExtremes) {
	                    unionExtremes = this.getUnionExtremes(true);
	                    if (unionExtremes && (unionExtremes.dataMin !== xAxis.min || unionExtremes.dataMax !== xAxis.max)) {
	                        xAxis.min = unionExtremes.dataMin;
	                        xAxis.max = unionExtremes.dataMax;
	                    }
	                }
	            },

	            /**
	             * Hook to modify the base axis extremes with information from the Navigator
	             */
	            modifyBaseAxisExtremes: function() {
	                var baseXAxis = this,
	                    navigator = baseXAxis.chart.navigator,
	                    baseExtremes = baseXAxis.getExtremes(),
	                    baseMin = baseExtremes.min,
	                    baseMax = baseExtremes.max,
	                    baseDataMin = baseExtremes.dataMin,
	                    baseDataMax = baseExtremes.dataMax,
	                    range = baseMax - baseMin,
	                    stickToMin = navigator.stickToMin,
	                    stickToMax = navigator.stickToMax,
	                    newMax,
	                    newMin,
	                    navigatorSeries = navigator.series && navigator.series[0],
	                    hasSetExtremes = !!baseXAxis.setExtremes,

	                    // When the extremes have been set by range selector button, don't stick to min or max.
	                    // The range selector buttons will handle the extremes. (#5489)
	                    unmutable = baseXAxis.eventArgs && baseXAxis.eventArgs.trigger === 'rangeSelectorButton';

	                if (!unmutable) {

	                    // If the zoomed range is already at the min, move it to the right as new data
	                    // comes in
	                    if (stickToMin) {
	                        newMin = baseDataMin;
	                        newMax = newMin + range;
	                    }

	                    // If the zoomed range is already at the max, move it to the right as new data
	                    // comes in
	                    if (stickToMax) {
	                        newMax = baseDataMax;
	                        if (!stickToMin) { // if stickToMin is true, the new min value is set above
	                            newMin = Math.max(
	                                newMax - range,
	                                navigatorSeries && navigatorSeries.xData ?
	                                navigatorSeries.xData[0] : -Number.MAX_VALUE
	                            );
	                        }
	                    }

	                    // Update the extremes
	                    if (hasSetExtremes && (stickToMin || stickToMax)) {
	                        if (isNumber(newMin)) {
	                            baseXAxis.min = baseXAxis.userMin = newMin;
	                            baseXAxis.max = baseXAxis.userMax = newMax;
	                        }
	                    }
	                }

	                // Reset
	                navigator.stickToMin = navigator.stickToMax = null;
	            },

	            /**
	             * Handler for updated data on the base series. When data is modified, the navigator series
	             * must reflect it. This is called from the Chart.redraw function before axis and series
	             * extremes are computed.
	             */
	            updatedDataHandler: function() {
	                var navigator = this.chart.navigator,
	                    baseSeries = this,
	                    navigatorSeries = this.navigatorSeries;

	                // Detect whether the zoomed area should stick to the minimum or maximum. If the current
	                // axis minimum falls outside the new updated dataset, we must adjust.
	                navigator.stickToMin = isNumber(baseSeries.xAxis.min) && (baseSeries.xAxis.min <= baseSeries.xData[0]);
	                // If the scrollbar is scrolled all the way to the right, keep right as new data 
	                // comes in.
	                navigator.stickToMax = Math.round(navigator.zoomedMax) >= Math.round(navigator.size);

	                // Set the navigator series data to the new data of the base series
	                if (navigatorSeries && !navigator.hasNavigatorData) {
	                    navigatorSeries.options.pointStart = baseSeries.xData[0];
	                    navigatorSeries.setData(baseSeries.options.data, false, null, false); // #5414
	                }
	            },

	            /**
	             * Add chart events, like redrawing navigator, when chart requires that.
	             */
	            addChartEvents: function() {
	                addEvent(this.chart, 'redraw', function() {
	                    // Move the scrollbar after redraw, like after data updata even if axes don't redraw
	                    var navigator = this.navigator,
	                        xAxis = navigator && (
	                            navigator.baseSeries &&
	                            navigator.baseSeries[0] &&
	                            navigator.baseSeries[0].xAxis ||
	                            navigator.scrollbar && this.xAxis[0]
	                        ); // #5709

	                    if (xAxis) {
	                        navigator.render(xAxis.min, xAxis.max);
	                    }
	                });
	            },

	            /**
	             * Destroys allocated elements.
	             */
	            destroy: function() {

	                // Disconnect events added in addEvents
	                this.removeEvents();

	                if (this.xAxis) {
	                    erase(this.chart.xAxis, this.xAxis);
	                    erase(this.chart.axes, this.xAxis);
	                }
	                if (this.yAxis) {
	                    erase(this.chart.yAxis, this.yAxis);
	                    erase(this.chart.axes, this.yAxis);
	                }
	                // Destroy series
	                each(this.series || [], function(s) {
	                    if (s.destroy) {
	                        s.destroy();
	                    }
	                });

	                // Destroy properties
	                each([
	                    'series', 'xAxis', 'yAxis', 'shades', 'outline', 'scrollbarTrack',
	                    'scrollbarRifles', 'scrollbarGroup', 'scrollbar', 'navigatorGroup',
	                    'rendered'
	                ], function(prop) {
	                    if (this[prop] && this[prop].destroy) {
	                        this[prop].destroy();
	                    }
	                    this[prop] = null;
	                }, this);

	                // Destroy elements in collection
	                each([this.handles], function(coll) {
	                    destroyObjectProperties(coll);
	                }, this);
	            }
	        };

	        H.Navigator = Navigator;

	        /**
	         * For Stock charts, override selection zooming with some special features because
	         * X axis zooming is already allowed by the Navigator and Range selector.
	         */
	        wrap(Axis.prototype, 'zoom', function(proceed, newMin, newMax) {
	            var chart = this.chart,
	                chartOptions = chart.options,
	                zoomType = chartOptions.chart.zoomType,
	                previousZoom,
	                navigator = chartOptions.navigator,
	                rangeSelector = chartOptions.rangeSelector,
	                ret;

	            if (this.isXAxis && ((navigator && navigator.enabled) ||
	                    (rangeSelector && rangeSelector.enabled))) {

	                // For x only zooming, fool the chart.zoom method not to create the zoom button
	                // because the property already exists
	                if (zoomType === 'x') {
	                    chart.resetZoomButton = 'blocked';

	                    // For y only zooming, ignore the X axis completely
	                } else if (zoomType === 'y') {
	                    ret = false;

	                    // For xy zooming, record the state of the zoom before zoom selection, then when
	                    // the reset button is pressed, revert to this state
	                } else if (zoomType === 'xy') {
	                    previousZoom = this.previousZoom;
	                    if (defined(newMin)) {
	                        this.previousZoom = [this.min, this.max];
	                    } else if (previousZoom) {
	                        newMin = previousZoom[0];
	                        newMax = previousZoom[1];
	                        delete this.previousZoom;
	                    }
	                }

	            }
	            return ret !== undefined ? ret : proceed.call(this, newMin, newMax);
	        });

	        // Initialize navigator for stock charts
	        wrap(Chart.prototype, 'init', function(proceed, options, callback) {

	            addEvent(this, 'beforeRender', function() {
	                var options = this.options;
	                if (options.navigator.enabled || options.scrollbar.enabled) {
	                    this.scroller = this.navigator = new Navigator(this);
	                }
	            });

	            proceed.call(this, options, callback);

	        });

	        /**
	         * For stock charts, extend the Chart.setChartSize method so that we can set the final top position
	         * of the navigator once the height of the chart, including the legend, is determined. #367.
	         * We can't use Chart.getMargins, because labels offsets are not calculated yet.
	         */
	        wrap(Chart.prototype, 'setChartSize', function(proceed) {

	            var legend = this.legend,
	                navigator = this.navigator,
	                scrollbarHeight,
	                legendOptions,
	                xAxis,
	                yAxis;

	            proceed.apply(this, [].slice.call(arguments, 1));

	            if (navigator) {
	                legendOptions = legend.options;
	                xAxis = navigator.xAxis;
	                yAxis = navigator.yAxis;
	                scrollbarHeight = navigator.scrollbarHeight;

	                // Compute the top position
	                if (this.inverted) {
	                    navigator.left = navigator.navigatorOptions.opposite ?
	                        this.chartWidth - scrollbarHeight - navigator.height :
	                        this.spacing[3] + scrollbarHeight;
	                    navigator.top = this.plotTop + scrollbarHeight;
	                } else {
	                    navigator.left = this.plotLeft + scrollbarHeight;
	                    navigator.top = navigator.navigatorOptions.top ||
	                        this.chartHeight - navigator.height - scrollbarHeight - this.spacing[2] -
	                        (legendOptions.verticalAlign === 'bottom' && legendOptions.enabled && !legendOptions.floating ?
	                            legend.legendHeight + pick(legendOptions.margin, 10) : 0);
	                }

	                if (xAxis && yAxis) { // false if navigator is disabled (#904)

	                    if (this.inverted) {
	                        xAxis.options.left = yAxis.options.left = navigator.left;
	                    } else {
	                        xAxis.options.top = yAxis.options.top = navigator.top;
	                    }

	                    xAxis.setAxisSize();
	                    yAxis.setAxisSize();
	                }
	            }
	        });

	        // Pick up badly formatted point options to addPoint
	        wrap(Series.prototype, 'addPoint', function(proceed, options, redraw, shift, animation) {
	            var turboThreshold = this.options.turboThreshold;
	            if (turboThreshold && this.xData.length > turboThreshold && isObject(options, true) && this.chart.navigator) {
	                error(20, true);
	            }
	            proceed.call(this, options, redraw, shift, animation);
	        });

	        // Handle adding new series
	        wrap(Chart.prototype, 'addSeries', function(proceed, options, redraw, animation) {
	            var series = proceed.call(this, options, false, animation);
	            if (this.navigator) {
	                this.navigator.setBaseSeries(); // Recompute which series should be shown in navigator, and add them
	            }
	            if (pick(redraw, true)) {
	                this.redraw();
	            }
	            return series;
	        });

	        // Handle updating series
	        wrap(Series.prototype, 'update', function(proceed, newOptions, redraw) {
	            proceed.call(this, newOptions, false);
	            if (this.chart.navigator) {
	                this.chart.navigator.setBaseSeries();
	            }
	            if (pick(redraw, true)) {
	                this.chart.redraw();
	            }
	        });

	        Chart.prototype.callbacks.push(function(chart) {
	            var extremes,
	                navigator = chart.navigator;

	            // Initiate the navigator
	            if (navigator) {
	                extremes = chart.xAxis[0].getExtremes();
	                navigator.render(extremes.min, extremes.max);
	            }
	        });

	        /* ****************************************************************************
	         * End Navigator code														  *
	         *****************************************************************************/

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var addEvent = H.addEvent,
	            Axis = H.Axis,
	            Chart = H.Chart,
	            css = H.css,
	            createElement = H.createElement,
	            dateFormat = H.dateFormat,
	            defaultOptions = H.defaultOptions,
	            useUTC = defaultOptions.global.useUTC,
	            defined = H.defined,
	            destroyObjectProperties = H.destroyObjectProperties,
	            discardElement = H.discardElement,
	            each = H.each,
	            extend = H.extend,
	            fireEvent = H.fireEvent,
	            HCDate = H.Date,
	            isNumber = H.isNumber,
	            merge = H.merge,
	            pick = H.pick,
	            pInt = H.pInt,
	            splat = H.splat,
	            wrap = H.wrap;

	        /* ****************************************************************************
	         * Start Range Selector code												  *
	         *****************************************************************************/
	        extend(defaultOptions, {
	            rangeSelector: {
	                // allButtonsEnabled: false,
	                // enabled: true,
	                // buttons: {Object}
	                // buttonSpacing: 0,
	                buttonTheme: {
	                    'stroke-width': 0,
	                    width: 28,
	                    height: 18,
	                    padding: 2,
	                    zIndex: 7 // #484, #852
	                },
	                height: 35, // reserved space for buttons and input
	                inputPosition: {
	                    align: 'right'
	                },
	                // inputDateFormat: '%b %e, %Y',
	                // inputEditDateFormat: '%Y-%m-%d',
	                // inputEnabled: true,
	                // selected: undefined,

	                // inputStyle: {},
	                labelStyle: {
	                    color: '#666666'
	                }

	            }
	        });
	        defaultOptions.lang = merge(defaultOptions.lang, {
	            rangeSelectorZoom: 'Zoom',
	            rangeSelectorFrom: 'From',
	            rangeSelectorTo: 'To'
	        });

	        /**
	         * The range selector.
	         * @class
	         * @param {Object} chart
	         */
	        function RangeSelector(chart) {

	            // Run RangeSelector
	            this.init(chart);
	        }

	        RangeSelector.prototype = {
	            /**
	             * The method to run when one of the buttons in the range selectors is clicked
	             * @param {Number} i The index of the button
	             * @param {Object} rangeOptions
	             * @param {Boolean} redraw
	             */
	            clickButton: function(i, redraw) {
	                var rangeSelector = this,
	                    chart = rangeSelector.chart,
	                    rangeOptions = rangeSelector.buttonOptions[i],
	                    baseAxis = chart.xAxis[0],
	                    unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis || {},
	                    dataMin = unionExtremes.dataMin,
	                    dataMax = unionExtremes.dataMax,
	                    newMin,
	                    newMax = baseAxis && Math.round(Math.min(baseAxis.max, pick(dataMax, baseAxis.max))), // #1568
	                    type = rangeOptions.type,
	                    baseXAxisOptions,
	                    range = rangeOptions._range,
	                    rangeMin,
	                    minSetting,
	                    rangeSetting,
	                    ctx,
	                    ytdExtremes,
	                    dataGrouping = rangeOptions.dataGrouping;

	                if (dataMin === null || dataMax === null) { // chart has no data, base series is removed
	                    return;
	                }

	                // Set the fixed range before range is altered
	                chart.fixedRange = range;

	                // Apply dataGrouping associated to button
	                if (dataGrouping) {
	                    this.forcedDataGrouping = true;
	                    Axis.prototype.setDataGrouping.call(baseAxis || {
	                        chart: this.chart
	                    }, dataGrouping, false);
	                }

	                // Apply range
	                if (type === 'month' || type === 'year') {
	                    if (!baseAxis) {
	                        // This is set to the user options and picked up later when the axis is instantiated
	                        // so that we know the min and max.
	                        range = rangeOptions;
	                    } else {
	                        ctx = {
	                            range: rangeOptions,
	                            max: newMax,
	                            dataMin: dataMin,
	                            dataMax: dataMax
	                        };
	                        newMin = baseAxis.minFromRange.call(ctx);
	                        if (isNumber(ctx.newMax)) {
	                            newMax = ctx.newMax;
	                        }
	                    }

	                    // Fixed times like minutes, hours, days
	                } else if (range) {
	                    newMin = Math.max(newMax - range, dataMin);
	                    newMax = Math.min(newMin + range, dataMax);

	                } else if (type === 'ytd') {

	                    // On user clicks on the buttons, or a delayed action running from the beforeRender
	                    // event (below), the baseAxis is defined.
	                    if (baseAxis) {
	                        // When "ytd" is the pre-selected button for the initial view, its calculation
	                        // is delayed and rerun in the beforeRender event (below). When the series
	                        // are initialized, but before the chart is rendered, we have access to the xData
	                        // array (#942).
	                        if (dataMax === undefined) {
	                            dataMin = Number.MAX_VALUE;
	                            dataMax = Number.MIN_VALUE;
	                            each(chart.series, function(series) {
	                                var xData = series.xData; // reassign it to the last item
	                                dataMin = Math.min(xData[0], dataMin);
	                                dataMax = Math.max(xData[xData.length - 1], dataMax);
	                            });
	                            redraw = false;
	                        }
	                        ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, useUTC);
	                        newMin = rangeMin = ytdExtremes.min;
	                        newMax = ytdExtremes.max;

	                        // "ytd" is pre-selected. We don't yet have access to processed point and extremes data
	                        // (things like pointStart and pointInterval are missing), so we delay the process (#942)
	                    } else {
	                        addEvent(chart, 'beforeRender', function() {
	                            rangeSelector.clickButton(i);
	                        });
	                        return;
	                    }
	                } else if (type === 'all' && baseAxis) {
	                    newMin = dataMin;
	                    newMax = dataMax;
	                }
	                rangeSelector.setSelected(i);

	                // Update the chart
	                if (!baseAxis) {
	                    // Axis not yet instanciated. Temporarily set min and range
	                    // options and remove them on chart load (#4317).
	                    baseXAxisOptions = splat(chart.options.xAxis)[0];
	                    rangeSetting = baseXAxisOptions.range;
	                    baseXAxisOptions.range = range;
	                    minSetting = baseXAxisOptions.min;
	                    baseXAxisOptions.min = rangeMin;
	                    addEvent(chart, 'load', function resetMinAndRange() {
	                        baseXAxisOptions.range = rangeSetting;
	                        baseXAxisOptions.min = minSetting;
	                    });
	                } else {
	                    // Existing axis object. Set extremes after render time.
	                    baseAxis.setExtremes(
	                        newMin,
	                        newMax,
	                        pick(redraw, 1),
	                        null, // auto animation
	                        {
	                            trigger: 'rangeSelectorButton',
	                            rangeSelectorButton: rangeOptions
	                        }
	                    );
	                }
	            },

	            /**
	             * Set the selected option. This method only sets the internal flag, it doesn't
	             * update the buttons or the actual zoomed range.
	             */
	            setSelected: function(selected) {
	                this.selected = this.options.selected = selected;
	            },

	            /**
	             * The default buttons for pre-selecting time frames
	             */
	            defaultButtons: [{
	                type: 'month',
	                count: 1,
	                text: '1m'
	            }, {
	                type: 'month',
	                count: 3,
	                text: '3m'
	            }, {
	                type: 'month',
	                count: 6,
	                text: '6m'
	            }, {
	                type: 'ytd',
	                text: 'YTD'
	            }, {
	                type: 'year',
	                count: 1,
	                text: '1y'
	            }, {
	                type: 'all',
	                text: 'All'
	            }],

	            /**
	             * Initialize the range selector
	             */
	            init: function(chart) {
	                var rangeSelector = this,
	                    options = chart.options.rangeSelector,
	                    buttonOptions = options.buttons || [].concat(rangeSelector.defaultButtons),
	                    selectedOption = options.selected,
	                    blurInputs = function() {
	                        var minInput = rangeSelector.minInput,
	                            maxInput = rangeSelector.maxInput;
	                        if (minInput && minInput.blur) { //#3274 in some case blur is not defined
	                            fireEvent(minInput, 'blur'); //#3274
	                        }
	                        if (maxInput && maxInput.blur) { //#3274 in some case blur is not defined
	                            fireEvent(maxInput, 'blur'); //#3274
	                        }
	                    };

	                rangeSelector.chart = chart;
	                rangeSelector.options = options;
	                rangeSelector.buttons = [];

	                chart.extraTopMargin = options.height;
	                rangeSelector.buttonOptions = buttonOptions;

	                this.unMouseDown = addEvent(chart.container, 'mousedown', blurInputs);
	                this.unResize = addEvent(chart, 'resize', blurInputs);

	                // Extend the buttonOptions with actual range
	                each(buttonOptions, rangeSelector.computeButtonRange);

	                // zoomed range based on a pre-selected button index
	                if (selectedOption !== undefined && buttonOptions[selectedOption]) {
	                    this.clickButton(selectedOption, false);
	                }


	                addEvent(chart, 'load', function() {
	                    // If a data grouping is applied to the current button, release it when extremes change
	                    addEvent(chart.xAxis[0], 'setExtremes', function(e) {
	                        if (this.max - this.min !== chart.fixedRange && e.trigger !== 'rangeSelectorButton' &&
	                            e.trigger !== 'updatedData' && rangeSelector.forcedDataGrouping) {
	                            this.setDataGrouping(false, false);
	                        }
	                    });
	                });
	            },

	            /**
	             * Dynamically update the range selector buttons after a new range has been set
	             */
	            updateButtonStates: function() {
	                var rangeSelector = this,
	                    chart = this.chart,
	                    baseAxis = chart.xAxis[0],
	                    actualRange = Math.round(baseAxis.max - baseAxis.min),
	                    hasNoData = !baseAxis.hasVisibleSeries,
	                    day = 24 * 36e5, // A single day in milliseconds
	                    unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis,
	                    dataMin = unionExtremes.dataMin,
	                    dataMax = unionExtremes.dataMax,
	                    ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, useUTC),
	                    ytdMin = ytdExtremes.min,
	                    ytdMax = ytdExtremes.max,
	                    selected = rangeSelector.selected,
	                    selectedExists = isNumber(selected),
	                    allButtonsEnabled = rangeSelector.options.allButtonsEnabled,
	                    buttons = rangeSelector.buttons;

	                each(rangeSelector.buttonOptions, function(rangeOptions, i) {
	                    var range = rangeOptions._range,
	                        type = rangeOptions.type,
	                        count = rangeOptions.count || 1,
	                        button = buttons[i],
	                        state = 0,
	                        disable,
	                        select,
	                        isSelected = i === selected,
	                        // Disable buttons where the range exceeds what is allowed in the current view
	                        isTooGreatRange = range > dataMax - dataMin,
	                        // Disable buttons where the range is smaller than the minimum range
	                        isTooSmallRange = range < baseAxis.minRange,
	                        // Do not select the YTD button if not explicitly told so
	                        isYTDButNotSelected = false,
	                        // Disable the All button if we're already showing all
	                        isAllButAlreadyShowingAll = false,
	                        isSameRange = range === actualRange;
	                    // Months and years have a variable range so we check the extremes
	                    if (
	                        (type === 'month' || type === 'year') &&
	                        (actualRange >= {
	                            month: 28,
	                            year: 365
	                        }[type] * day * count) &&
	                        (actualRange <= {
	                            month: 31,
	                            year: 366
	                        }[type] * day * count)
	                    ) {
	                        isSameRange = true;
	                    } else if (type === 'ytd') {
	                        isSameRange = (ytdMax - ytdMin) === actualRange;
	                        isYTDButNotSelected = !isSelected;
	                    } else if (type === 'all') {
	                        isSameRange = baseAxis.max - baseAxis.min >= dataMax - dataMin;
	                        isAllButAlreadyShowingAll = !isSelected && selectedExists && isSameRange;
	                    }
	                    // The new zoom area happens to match the range for a button - mark it selected.
	                    // This happens when scrolling across an ordinal gap. It can be seen in the intraday
	                    // demos when selecting 1h and scroll across the night gap.
	                    disable = (!allButtonsEnabled &&
	                        (
	                            isTooGreatRange ||
	                            isTooSmallRange ||
	                            isAllButAlreadyShowingAll ||
	                            hasNoData
	                        )
	                    );
	                    select = (
	                        (isSelected && isSameRange) ||
	                        (isSameRange && !selectedExists && !isYTDButNotSelected)
	                    );

	                    if (disable) {
	                        state = 3;
	                    } else if (select) {
	                        selectedExists = true; // Only one button can be selected
	                        state = 2;
	                    }

	                    // If state has changed, update the button
	                    if (button.state !== state) {
	                        button.setState(state);
	                    }
	                });
	            },

	            /**
	             * Compute and cache the range for an individual button
	             */
	            computeButtonRange: function(rangeOptions) {
	                var type = rangeOptions.type,
	                    count = rangeOptions.count || 1,

	                    // these time intervals have a fixed number of milliseconds, as opposed
	                    // to month, ytd and year
	                    fixedTimes = {
	                        millisecond: 1,
	                        second: 1000,
	                        minute: 60 * 1000,
	                        hour: 3600 * 1000,
	                        day: 24 * 3600 * 1000,
	                        week: 7 * 24 * 3600 * 1000
	                    };

	                // Store the range on the button object
	                if (fixedTimes[type]) {
	                    rangeOptions._range = fixedTimes[type] * count;
	                } else if (type === 'month' || type === 'year') {
	                    rangeOptions._range = {
	                        month: 30,
	                        year: 365
	                    }[type] * 24 * 36e5 * count;
	                }
	            },

	            /**
	             * Set the internal and displayed value of a HTML input for the dates
	             * @param {String} name
	             * @param {Number} time
	             */
	            setInputValue: function(name, time) {
	                var options = this.chart.options.rangeSelector,
	                    input = this[name + 'Input'];

	                if (defined(time)) {
	                    input.previousValue = input.HCTime;
	                    input.HCTime = time;
	                }

	                input.value = dateFormat(
	                    options.inputEditDateFormat || '%Y-%m-%d',
	                    input.HCTime
	                );
	                this[name + 'DateBox'].attr({
	                    text: dateFormat(options.inputDateFormat || '%b %e, %Y', input.HCTime)
	                });
	            },

	            showInput: function(name) {
	                var inputGroup = this.inputGroup,
	                    dateBox = this[name + 'DateBox'];

	                css(this[name + 'Input'], {
	                    left: (inputGroup.translateX + dateBox.x) + 'px',
	                    top: inputGroup.translateY + 'px',
	                    width: (dateBox.width - 2) + 'px',
	                    height: (dateBox.height - 2) + 'px',
	                    border: '2px solid silver'
	                });
	            },

	            hideInput: function(name) {
	                css(this[name + 'Input'], {
	                    border: 0,
	                    width: '1px',
	                    height: '1px'
	                });
	                this.setInputValue(name);
	            },

	            /**
	             * Draw either the 'from' or the 'to' HTML input box of the range selector
	             * @param {Object} name
	             */
	            drawInput: function(name) {
	                var rangeSelector = this,
	                    chart = rangeSelector.chart,
	                    chartStyle = chart.renderer.style || {},
	                    renderer = chart.renderer,
	                    options = chart.options.rangeSelector,
	                    lang = defaultOptions.lang,
	                    div = rangeSelector.div,
	                    isMin = name === 'min',
	                    input,
	                    label,
	                    dateBox,
	                    inputGroup = this.inputGroup;

	                function updateExtremes() {
	                    var inputValue = input.value,
	                        value = (options.inputDateParser || Date.parse)(inputValue),
	                        chartAxis = chart.xAxis[0],
	                        dataAxis = chart.scroller && chart.scroller.xAxis ? chart.scroller.xAxis : chartAxis,
	                        dataMin = dataAxis.dataMin,
	                        dataMax = dataAxis.dataMax;
	                    if (value !== input.previousValue) {
	                        input.previousValue = value;
	                        // If the value isn't parsed directly to a value by the browser's Date.parse method,
	                        // like YYYY-MM-DD in IE, try parsing it a different way
	                        if (!isNumber(value)) {
	                            value = inputValue.split('-');
	                            value = Date.UTC(pInt(value[0]), pInt(value[1]) - 1, pInt(value[2]));
	                        }

	                        if (isNumber(value)) {

	                            // Correct for timezone offset (#433)
	                            if (!useUTC) {
	                                value = value + new Date().getTimezoneOffset() * 60 * 1000;
	                            }

	                            // Validate the extremes. If it goes beyound the data min or max, use the
	                            // actual data extreme (#2438).
	                            if (isMin) {
	                                if (value > rangeSelector.maxInput.HCTime) {
	                                    value = undefined;
	                                } else if (value < dataMin) {
	                                    value = dataMin;
	                                }
	                            } else {
	                                if (value < rangeSelector.minInput.HCTime) {
	                                    value = undefined;
	                                } else if (value > dataMax) {
	                                    value = dataMax;
	                                }
	                            }

	                            // Set the extremes
	                            if (value !== undefined) {
	                                chartAxis.setExtremes(
	                                    isMin ? value : chartAxis.min,
	                                    isMin ? chartAxis.max : value,
	                                    undefined,
	                                    undefined, {
	                                        trigger: 'rangeSelectorInput'
	                                    }
	                                );
	                            }
	                        }
	                    }
	                }

	                // Create the text label
	                this[name + 'Label'] = label = renderer.label(lang[isMin ? 'rangeSelectorFrom' : 'rangeSelectorTo'], this.inputGroup.offset)
	                    .addClass('highcharts-range-label')
	                    .attr({
	                        padding: 2
	                    })
	                    .add(inputGroup);
	                inputGroup.offset += label.width + 5;

	                // Create an SVG label that shows updated date ranges and and records click events that
	                // bring in the HTML input.
	                this[name + 'DateBox'] = dateBox = renderer.label('', inputGroup.offset)
	                    .addClass('highcharts-range-input')
	                    .attr({
	                        padding: 2,
	                        width: options.inputBoxWidth || 90,
	                        height: options.inputBoxHeight || 17,
	                        stroke: options.inputBoxBorderColor || '#cccccc',
	                        'stroke-width': 1,
	                        'text-align': 'center'
	                    })
	                    .on('click', function() {
	                        rangeSelector.showInput(name); // If it is already focused, the onfocus event doesn't fire (#3713)
	                        rangeSelector[name + 'Input'].focus();
	                    })
	                    .add(inputGroup);
	                inputGroup.offset += dateBox.width + (isMin ? 10 : 0);


	                // Create the HTML input element. This is rendered as 1x1 pixel then set to the right size
	                // when focused.
	                this[name + 'Input'] = input = createElement('input', {
	                    name: name,
	                    className: 'highcharts-range-selector',
	                    type: 'text'
	                }, {
	                    top: chart.plotTop + 'px' // prevent jump on focus in Firefox
	                }, div);


	                // Styles
	                label.css(merge(chartStyle, options.labelStyle));

	                dateBox.css(merge({
	                    color: '#333333'
	                }, chartStyle, options.inputStyle));

	                css(input, extend({
	                    position: 'absolute',
	                    border: 0,
	                    width: '1px', // Chrome needs a pixel to see it
	                    height: '1px',
	                    padding: 0,
	                    textAlign: 'center',
	                    fontSize: chartStyle.fontSize,
	                    fontFamily: chartStyle.fontFamily,
	                    left: '-9em' // #4798
	                }, options.inputStyle));


	                // Blow up the input box
	                input.onfocus = function() {
	                    rangeSelector.showInput(name);
	                };
	                // Hide away the input box
	                input.onblur = function() {
	                    rangeSelector.hideInput(name);
	                };

	                // handle changes in the input boxes
	                input.onchange = updateExtremes;

	                input.onkeypress = function(event) {
	                    // IE does not fire onchange on enter
	                    if (event.keyCode === 13) {
	                        updateExtremes();
	                    }
	                };
	            },

	            /**
	             * Get the position of the range selector buttons and inputs. This can be overridden from outside for custom positioning.
	             */
	            getPosition: function() {
	                var chart = this.chart,
	                    options = chart.options.rangeSelector,
	                    buttonTop = pick((options.buttonPosition || {}).y, chart.plotTop - chart.axisOffset[0] - options.height);

	                return {
	                    buttonTop: buttonTop,
	                    inputTop: buttonTop - 10
	                };
	            },
	            /**
	             * Get the extremes of YTD. 
	             * Will choose dataMax if its value is lower than the current timestamp.
	             * Will choose dataMin if its value is higher than the timestamp for
	             * 	the start of current year.
	             * @param  {number} dataMax
	             * @param  {number} dataMin
	             * @return {object} Returns min and max for the YTD
	             */
	            getYTDExtremes: function(dataMax, dataMin, useUTC) {
	                var min,
	                    now = new HCDate(dataMax),
	                    year = now[HCDate.hcGetFullYear](),
	                    startOfYear = useUTC ? HCDate.UTC(year, 0, 1) : +new HCDate(year, 0, 1); // eslint-disable-line new-cap
	                min = Math.max(dataMin || 0, startOfYear);
	                now = now.getTime();
	                return {
	                    max: Math.min(dataMax || now, now),
	                    min: min
	                };
	            },

	            /**
	             * Render the range selector including the buttons and the inputs. The first time render
	             * is called, the elements are created and positioned. On subsequent calls, they are
	             * moved and updated.
	             * @param {Number} min X axis minimum
	             * @param {Number} max X axis maximum
	             */
	            render: function(min, max) {

	                var rangeSelector = this,
	                    chart = rangeSelector.chart,
	                    renderer = chart.renderer,
	                    container = chart.container,
	                    chartOptions = chart.options,
	                    navButtonOptions = chartOptions.exporting && chartOptions.exporting.enabled !== false &&
	                    chartOptions.navigation && chartOptions.navigation.buttonOptions,
	                    options = chartOptions.rangeSelector,
	                    buttons = rangeSelector.buttons,
	                    lang = defaultOptions.lang,
	                    div = rangeSelector.div,
	                    inputGroup = rangeSelector.inputGroup,
	                    buttonTheme = options.buttonTheme,
	                    buttonPosition = options.buttonPosition || {},
	                    inputEnabled = options.inputEnabled,
	                    states = buttonTheme && buttonTheme.states,
	                    plotLeft = chart.plotLeft,
	                    buttonLeft,
	                    pos = this.getPosition(),
	                    buttonGroup = rangeSelector.group,
	                    buttonBBox,
	                    rendered = rangeSelector.rendered;

	                if (options.enabled === false) {
	                    return;
	                }

	                // create the elements
	                if (!rendered) {

	                    rangeSelector.group = buttonGroup = renderer.g('range-selector-buttons').add();

	                    rangeSelector.zoomText = renderer.text(lang.rangeSelectorZoom, pick(buttonPosition.x, plotLeft), 15)
	                        .css(options.labelStyle)
	                        .add(buttonGroup);

	                    // button starting position
	                    buttonLeft = pick(buttonPosition.x, plotLeft) + rangeSelector.zoomText.getBBox().width + 5;

	                    each(rangeSelector.buttonOptions, function(rangeOptions, i) {
	                        buttons[i] = renderer.button(
	                                rangeOptions.text,
	                                buttonLeft,
	                                0,
	                                function() {
	                                    rangeSelector.clickButton(i);
	                                    rangeSelector.isActive = true;
	                                },
	                                buttonTheme,
	                                states && states.hover,
	                                states && states.select,
	                                states && states.disabled
	                            )
	                            .attr({
	                                'text-align': 'center'
	                            })
	                            .add(buttonGroup);

	                        // increase button position for the next button
	                        buttonLeft += buttons[i].width + pick(options.buttonSpacing, 5);
	                    });

	                    // first create a wrapper outside the container in order to make
	                    // the inputs work and make export correct
	                    if (inputEnabled !== false) {
	                        rangeSelector.div = div = createElement('div', null, {
	                            position: 'relative',
	                            height: 0,
	                            zIndex: 1 // above container
	                        });

	                        container.parentNode.insertBefore(div, container);

	                        // Create the group to keep the inputs
	                        rangeSelector.inputGroup = inputGroup = renderer.g('input-group')
	                            .add();
	                        inputGroup.offset = 0;

	                        rangeSelector.drawInput('min');
	                        rangeSelector.drawInput('max');
	                    }
	                }
	                rangeSelector.updateButtonStates();

	                // Set or update the group position
	                buttonGroup[rendered ? 'animate' : 'attr']({
	                    translateY: pos.buttonTop
	                });

	                if (inputEnabled !== false) {

	                    // Update the alignment to the updated spacing box
	                    inputGroup.align(extend({
	                        y: pos.inputTop,
	                        width: inputGroup.offset,
	                        // Detect collision with the exporting buttons
	                        x: navButtonOptions && (pos.inputTop < (navButtonOptions.y || 0) + navButtonOptions.height - chart.spacing[0]) ?
	                            -40 : 0
	                    }, options.inputPosition), true, chart.spacingBox);

	                    // Hide if overlapping - inputEnabled is null or undefined
	                    if (!defined(inputEnabled)) {
	                        buttonBBox = buttonGroup.getBBox();
	                        inputGroup[inputGroup.alignAttr.translateX < buttonBBox.x + buttonBBox.width + 10 ? 'hide' : 'show']();
	                    }

	                    // Set or reset the input values
	                    rangeSelector.setInputValue('min', min);
	                    rangeSelector.setInputValue('max', max);
	                }

	                rangeSelector.rendered = true;
	            },

	            /**
	             * Update the range selector with new options
	             */
	            update: function(options) {
	                var chart = this.chart;
	                merge(true, chart.options.rangeSelector, options);
	                this.destroy();
	                this.init(chart);
	            },

	            /**
	             * Destroys allocated elements.
	             */
	            destroy: function() {
	                var minInput = this.minInput,
	                    maxInput = this.maxInput,
	                    key;

	                this.unMouseDown();
	                this.unResize();

	                // Destroy elements in collections
	                destroyObjectProperties(this.buttons);

	                // Clear input element events
	                if (minInput) {
	                    minInput.onfocus = minInput.onblur = minInput.onchange = null;
	                }
	                if (maxInput) {
	                    maxInput.onfocus = maxInput.onblur = maxInput.onchange = null;
	                }

	                // Destroy HTML and SVG elements
	                for (key in this) {
	                    if (this[key] && key !== 'chart') {
	                        if (this[key].destroy) { // SVGElement
	                            this[key].destroy();
	                        } else if (this[key].nodeType) { // HTML element
	                            discardElement(this[key]);
	                        }
	                    }
	                    if (this[key] !== RangeSelector.prototype[key]) {
	                        this[key] = null;
	                    }
	                }
	            }
	        };

	        /**
	         * Add logic to normalize the zoomed range in order to preserve the pressed state of range selector buttons
	         */
	        Axis.prototype.toFixedRange = function(pxMin, pxMax, fixedMin, fixedMax) {
	            var fixedRange = this.chart && this.chart.fixedRange,
	                newMin = pick(fixedMin, this.translate(pxMin, true, !this.horiz)),
	                newMax = pick(fixedMax, this.translate(pxMax, true, !this.horiz)),
	                changeRatio = fixedRange && (newMax - newMin) / fixedRange;

	            // If the difference between the fixed range and the actual requested range is
	            // too great, the user is dragging across an ordinal gap, and we need to release
	            // the range selector button.
	            if (changeRatio > 0.7 && changeRatio < 1.3) {
	                if (fixedMax) {
	                    newMin = newMax - fixedRange;
	                } else {
	                    newMax = newMin + fixedRange;
	                }
	            }
	            if (!isNumber(newMin)) { // #1195
	                newMin = newMax = undefined;
	            }

	            return {
	                min: newMin,
	                max: newMax
	            };
	        };

	        /**
	         * Get the axis min value based on the range option and the current max. For
	         * stock charts this is extended via the {@link RangeSelector} so that if the
	         * selected range is a multiple of months or years, it is compensated for
	         * various month lengths.
	         * 
	         * @return {number} The new minimum value.
	         */
	        Axis.prototype.minFromRange = function() {
	            var rangeOptions = this.range,
	                type = rangeOptions.type,
	                timeName = {
	                    month: 'Month',
	                    year: 'FullYear'
	                }[type],
	                min,
	                max = this.max,
	                dataMin,
	                range,
	                // Get the true range from a start date
	                getTrueRange = function(base, count) {
	                    var date = new Date(base);
	                    date['set' + timeName](date['get' + timeName]() + count);
	                    return date.getTime() - base;
	                };

	            if (isNumber(rangeOptions)) {
	                min = max - rangeOptions;
	                range = rangeOptions;
	            } else {
	                min = max + getTrueRange(max, -rangeOptions.count);

	                // Let the fixedRange reflect initial settings (#5930)
	                if (this.chart) {
	                    this.chart.fixedRange = max - min;
	                }
	            }

	            dataMin = pick(this.dataMin, Number.MIN_VALUE);
	            if (!isNumber(min)) {
	                min = dataMin;
	            }
	            if (min <= dataMin) {
	                min = dataMin;
	                if (range === undefined) { // #4501
	                    range = getTrueRange(min, rangeOptions.count);
	                }
	                this.newMax = Math.min(min + range, this.dataMax);
	            }
	            if (!isNumber(max)) {
	                min = undefined;
	            }
	            return min;

	        };

	        // Initialize scroller for stock charts
	        wrap(Chart.prototype, 'init', function(proceed, options, callback) {

	            addEvent(this, 'init', function() {
	                if (this.options.rangeSelector.enabled) {
	                    this.rangeSelector = new RangeSelector(this);
	                }
	            });

	            proceed.call(this, options, callback);

	        });

	        Chart.prototype.callbacks.push(function(chart) {
	            var extremes,
	                rangeSelector = chart.rangeSelector,
	                unbindRender,
	                unbindSetExtremes;

	            function renderRangeSelector() {
	                extremes = chart.xAxis[0].getExtremes();
	                if (isNumber(extremes.min)) {
	                    rangeSelector.render(extremes.min, extremes.max);
	                }
	            }

	            if (rangeSelector) {
	                // redraw the scroller on setExtremes
	                unbindSetExtremes = addEvent(
	                    chart.xAxis[0],
	                    'afterSetExtremes',
	                    function(e) {
	                        rangeSelector.render(e.min, e.max);
	                    }
	                );

	                // redraw the scroller chart resize
	                unbindRender = addEvent(chart, 'redraw', renderRangeSelector);

	                // do it now
	                renderRangeSelector();
	            }

	            // Remove resize/afterSetExtremes at chart destroy
	            addEvent(chart, 'destroy', function destroyEvents() {
	                if (rangeSelector) {
	                    unbindRender();
	                    unbindSetExtremes();
	                }
	            });
	        });


	        H.RangeSelector = RangeSelector;

	        /* ****************************************************************************
	         * End Range Selector code													*
	         *****************************************************************************/

	    }(Highcharts));
	    (function(H) {
	        /**
	         * (c) 2010-2016 Torstein Honsi
	         *
	         * License: www.highcharts.com/license
	         */
	        'use strict';
	        var arrayMax = H.arrayMax,
	            arrayMin = H.arrayMin,
	            Axis = H.Axis,
	            Chart = H.Chart,
	            defined = H.defined,
	            each = H.each,
	            extend = H.extend,
	            format = H.format,
	            inArray = H.inArray,
	            isNumber = H.isNumber,
	            isString = H.isString,
	            map = H.map,
	            merge = H.merge,
	            pick = H.pick,
	            Point = H.Point,
	            Renderer = H.Renderer,
	            Series = H.Series,
	            splat = H.splat,
	            SVGRenderer = H.SVGRenderer,
	            VMLRenderer = H.VMLRenderer,
	            wrap = H.wrap,


	            seriesProto = Series.prototype,
	            seriesInit = seriesProto.init,
	            seriesProcessData = seriesProto.processData,
	            pointTooltipFormatter = Point.prototype.tooltipFormatter;
	        /**
	         * A wrapper for Chart with all the default values for a Stock chart
	         */
	        H.StockChart = H.stockChart = function(a, b, c) {
	            var hasRenderToArg = isString(a) || a.nodeName,
	                options = arguments[hasRenderToArg ? 1 : 0],
	                seriesOptions = options.series, // to increase performance, don't merge the data
	                defaultOptions = H.getOptions(),
	                opposite,

	                // Always disable startOnTick:true on the main axis when the navigator
	                // is enabled (#1090)
	                navigatorEnabled = pick(
	                    options.navigator && options.navigator.enabled,
	                    defaultOptions.navigator.enabled,
	                    true
	                ),
	                disableStartOnTick = navigatorEnabled ? {
	                    startOnTick: false,
	                    endOnTick: false
	                } : null,

	                lineOptions = {

	                    marker: {
	                        enabled: false,
	                        radius: 2
	                    }
	                    // gapSize: 0
	                },
	                columnOptions = {
	                    shadow: false,
	                    borderWidth: 0
	                };

	            // apply X axis options to both single and multi y axes
	            options.xAxis = map(splat(options.xAxis || {}), function(xAxisOptions) {
	                return merge({ // defaults
	                        minPadding: 0,
	                        maxPadding: 0,
	                        ordinal: true,
	                        title: {
	                            text: null
	                        },
	                        labels: {
	                            overflow: 'justify'
	                        },
	                        showLastLabel: true
	                    },
	                    defaultOptions.xAxis, // #3802
	                    xAxisOptions, // user options
	                    { // forced options
	                        type: 'datetime',
	                        categories: null
	                    },
	                    disableStartOnTick
	                );
	            });

	            // apply Y axis options to both single and multi y axes
	            options.yAxis = map(splat(options.yAxis || {}), function(yAxisOptions) {
	                opposite = pick(yAxisOptions.opposite, true);
	                return merge({ // defaults
	                        labels: {
	                            y: -2
	                        },
	                        opposite: opposite,
	                        showLastLabel: false,
	                        title: {
	                            text: null
	                        }
	                    },
	                    defaultOptions.yAxis, // #3802
	                    yAxisOptions // user options
	                );
	            });

	            options.series = null;

	            options = merge({
	                    chart: {
	                        panning: true,
	                        pinchType: 'x'
	                    },
	                    navigator: {
	                        enabled: navigatorEnabled
	                    },
	                    scrollbar: {
	                        // #4988 - check if setOptions was called
	                        enabled: pick(defaultOptions.scrollbar.enabled, true)
	                    },
	                    rangeSelector: {
	                        // #4988 - check if setOptions was called
	                        enabled: pick(defaultOptions.rangeSelector.enabled, true)
	                    },
	                    title: {
	                        text: null
	                    },
	                    tooltip: {
	                        shared: true,
	                        crosshairs: true
	                    },
	                    legend: {
	                        enabled: false
	                    },

	                    plotOptions: {
	                        line: lineOptions,
	                        spline: lineOptions,
	                        area: lineOptions,
	                        areaspline: lineOptions,
	                        arearange: lineOptions,
	                        areasplinerange: lineOptions,
	                        column: columnOptions,
	                        columnrange: columnOptions,
	                        candlestick: columnOptions,
	                        ohlc: columnOptions
	                    }

	                },

	                options, // user's options

	                { // forced options
	                    isStock: true // internal flag
	                }
	            );

	            options.series = seriesOptions;

	            return hasRenderToArg ?
	                new Chart(a, options, c) :
	                new Chart(options, b);
	        };

	        // Override the automatic label alignment so that the first Y axis' labels
	        // are drawn on top of the grid line, and subsequent axes are drawn outside
	        wrap(Axis.prototype, 'autoLabelAlign', function(proceed) {
	            var chart = this.chart,
	                options = this.options,
	                panes = chart._labelPanes = chart._labelPanes || {},
	                key,
	                labelOptions = this.options.labels;
	            if (this.chart.options.isStock && this.coll === 'yAxis') {
	                key = options.top + ',' + options.height;
	                if (!panes[key] && labelOptions.enabled) { // do it only for the first Y axis of each pane
	                    if (labelOptions.x === 15) { // default
	                        labelOptions.x = 0;
	                    }
	                    if (labelOptions.align === undefined) {
	                        labelOptions.align = 'right';
	                    }
	                    panes[key] = 1;
	                    return 'right';
	                }
	            }
	            return proceed.call(this, [].slice.call(arguments, 1));
	        });

	        // Override getPlotLinePath to allow for multipane charts
	        wrap(Axis.prototype, 'getPlotLinePath', function(proceed, value, lineWidth, old, force, translatedValue) {
	            var axis = this,
	                series = (this.isLinked && !this.series ? this.linkedParent.series : this.series),
	                chart = axis.chart,
	                renderer = chart.renderer,
	                axisLeft = axis.left,
	                axisTop = axis.top,
	                x1,
	                y1,
	                x2,
	                y2,
	                result = [],
	                axes = [], //#3416 need a default array
	                axes2,
	                uniqueAxes,
	                transVal;

	            /**
	             * Return the other axis based on either the axis option or on related series.
	             */
	            function getAxis(coll) {
	                var otherColl = coll === 'xAxis' ? 'yAxis' : 'xAxis',
	                    opt = axis.options[otherColl];

	                // Other axis indexed by number
	                if (isNumber(opt)) {
	                    return [chart[otherColl][opt]];
	                }

	                // Other axis indexed by id (like navigator)
	                if (isString(opt)) {
	                    return [chart.get(opt)];
	                }

	                // Auto detect based on existing series
	                return map(series, function(s) {
	                    return s[otherColl];
	                });
	            }

	            // Ignore in case of color Axis. #3360, #3524
	            if (axis.coll === 'colorAxis') {
	                return proceed.apply(this, [].slice.call(arguments, 1));
	            }

	            // Get the related axes based on series
	            axes = getAxis(axis.coll);

	            // Get the related axes based options.*Axis setting #2810
	            axes2 = (axis.isXAxis ? chart.yAxis : chart.xAxis);
	            each(axes2, function(A) {
	                if (defined(A.options.id) ? A.options.id.indexOf('navigator') === -1 : true) {
	                    var a = (A.isXAxis ? 'yAxis' : 'xAxis'),
	                        rax = (defined(A.options[a]) ? chart[a][A.options[a]] : chart[a][0]);

	                    if (axis === rax) {
	                        axes.push(A);
	                    }
	                }
	            });


	            // Remove duplicates in the axes array. If there are no axes in the axes array,
	            // we are adding an axis without data, so we need to populate this with grid
	            // lines (#2796).
	            uniqueAxes = axes.length ? [] : [axis.isXAxis ? chart.yAxis[0] : chart.xAxis[0]]; //#3742
	            each(axes, function(axis2) {
	                if (inArray(axis2, uniqueAxes) === -1) {
	                    uniqueAxes.push(axis2);
	                }
	            });

	            transVal = pick(translatedValue, axis.translate(value, null, null, old));
	            if (isNumber(transVal)) {
	                if (axis.horiz) {
	                    each(uniqueAxes, function(axis2) {
	                        var skip;

	                        y1 = axis2.pos;
	                        y2 = y1 + axis2.len;
	                        x1 = x2 = Math.round(transVal + axis.transB);

	                        if (x1 < axisLeft || x1 > axisLeft + axis.width) { // outside plot area
	                            if (force) {
	                                x1 = x2 = Math.min(Math.max(axisLeft, x1), axisLeft + axis.width);
	                            } else {
	                                skip = true;
	                            }
	                        }
	                        if (!skip) {
	                            result.push('M', x1, y1, 'L', x2, y2);
	                        }
	                    });
	                } else {
	                    each(uniqueAxes, function(axis2) {
	                        var skip;

	                        x1 = axis2.pos;
	                        x2 = x1 + axis2.len;
	                        y1 = y2 = Math.round(axisTop + axis.height - transVal);

	                        if (y1 < axisTop || y1 > axisTop + axis.height) { // outside plot area
	                            if (force) {
	                                y1 = y2 = Math.min(Math.max(axisTop, y1), axis.top + axis.height);
	                            } else {
	                                skip = true;
	                            }
	                        }
	                        if (!skip) {
	                            result.push('M', x1, y1, 'L', x2, y2);
	                        }
	                    });
	                }
	            }
	            return result.length > 0 ?
	                renderer.crispPolyLine(result, lineWidth || 1) :
	                null; //#3557 getPlotLinePath in regular Highcharts also returns null
	        });

	        // Override getPlotBandPath to allow for multipane charts
	        Axis.prototype.getPlotBandPath = function(from, to) {
	            var toPath = this.getPlotLinePath(to, null, null, true),
	                path = this.getPlotLinePath(from, null, null, true),
	                result = [],
	                i;

	            if (path && toPath) {
	                if (path.toString() === toPath.toString()) {
	                    // #6166
	                    result = path;
	                    result.flat = true;
	                } else {
	                    // Go over each subpath
	                    for (i = 0; i < path.length; i += 6) {
	                        result.push(
	                            'M', path[i + 1], path[i + 2],
	                            'L', path[i + 4], path[i + 5],
	                            toPath[i + 4], toPath[i + 5],
	                            toPath[i + 1], toPath[i + 2],
	                            'z'
	                        );
	                    }
	                }
	            } else { // outside the axis area
	                result = null;
	            }

	            return result;
	        };

	        // Function to crisp a line with multiple segments
	        SVGRenderer.prototype.crispPolyLine = function(points, width) {
	            // points format: ['M', 0, 0, 'L', 100, 0]		
	            // normalize to a crisp line
	            var i;
	            for (i = 0; i < points.length; i = i + 6) {
	                if (points[i + 1] === points[i + 4]) {
	                    // Substract due to #1129. Now bottom and left axis gridlines behave the same.
	                    points[i + 1] = points[i + 4] = Math.round(points[i + 1]) - (width % 2 / 2);
	                }
	                if (points[i + 2] === points[i + 5]) {
	                    points[i + 2] = points[i + 5] = Math.round(points[i + 2]) + (width % 2 / 2);
	                }
	            }
	            return points;
	        };

	        if (Renderer === VMLRenderer) {
	            VMLRenderer.prototype.crispPolyLine = SVGRenderer.prototype.crispPolyLine;
	        }


	        // Wrapper to hide the label
	        wrap(Axis.prototype, 'hideCrosshair', function(proceed, i) {

	            proceed.call(this, i);

	            if (this.crossLabel) {
	                this.crossLabel = this.crossLabel.hide();
	            }
	        });

	        // Wrapper to draw the label
	        wrap(Axis.prototype, 'drawCrosshair', function(proceed, e, point) {

	            // Draw the crosshair
	            proceed.call(this, e, point);

	            // Check if the label has to be drawn
	            if (!defined(this.crosshair.label) || !this.crosshair.label.enabled || !this.cross) {
	                return;
	            }

	            var chart = this.chart,
	                options = this.options.crosshair.label, // the label's options
	                horiz = this.horiz, // axis orientation
	                opposite = this.opposite, // axis position
	                left = this.left, // left position
	                top = this.top, // top position
	                crossLabel = this.crossLabel, // reference to the svgElement
	                posx,
	                posy,
	                crossBox,
	                formatOption = options.format,
	                formatFormat = '',
	                limit,
	                align,
	                tickInside = this.options.tickPosition === 'inside',
	                snap = this.crosshair.snap !== false,
	                value,
	                offset = 0;

	            // Use last available event (#5287)
	            if (!e) {
	                e = this.cross && this.cross.e;
	            }

	            align = (horiz ? 'center' : opposite ?
	                (this.labelAlign === 'right' ? 'right' : 'left') :
	                (this.labelAlign === 'left' ? 'left' : 'center'));

	            // If the label does not exist yet, create it.
	            if (!crossLabel) {
	                crossLabel = this.crossLabel = chart.renderer.label(null, null, null, options.shape || 'callout')
	                    .addClass('highcharts-crosshair-label' +
	                        (this.series[0] && ' highcharts-color-' + this.series[0].colorIndex))
	                    .attr({
	                        align: options.align || align,
	                        padding: pick(options.padding, 8),
	                        r: pick(options.borderRadius, 3),
	                        zIndex: 2
	                    })
	                    .add(this.labelGroup);


	                // Presentational
	                crossLabel
	                    .attr({
	                        fill: options.backgroundColor ||
	                            (this.series[0] && this.series[0].color) || '#666666',
	                        stroke: options.borderColor || '',
	                        'stroke-width': options.borderWidth || 0
	                    })
	                    .css(extend({
	                        color: '#ffffff',
	                        fontWeight: 'normal',
	                        fontSize: '11px',
	                        textAlign: 'center'
	                    }, options.style));

	            }

	            if (horiz) {
	                posx = snap ? point.plotX + left : e.chartX;
	                posy = top + (opposite ? 0 : this.height);
	            } else {
	                posx = opposite ? this.width + left : 0;
	                posy = snap ? point.plotY + top : e.chartY;
	            }

	            if (!formatOption && !options.formatter) {
	                if (this.isDatetimeAxis) {
	                    formatFormat = '%b %d, %Y';
	                }
	                formatOption = '{value' + (formatFormat ? ':' + formatFormat : '') + '}';
	            }

	            // Show the label
	            value = snap ? point[this.isXAxis ? 'x' : 'y'] : this.toValue(horiz ? e.chartX : e.chartY);
	            crossLabel.attr({
	                text: formatOption ? format(formatOption, {
	                    value: value
	                }) : options.formatter.call(this, value),
	                x: posx,
	                y: posy,
	                visibility: 'visible'
	            });

	            crossBox = crossLabel.getBBox();

	            // now it is placed we can correct its position
	            if (horiz) {
	                if ((tickInside && !opposite) || (!tickInside && opposite)) {
	                    posy = crossLabel.y - crossBox.height;
	                }
	            } else {
	                posy = crossLabel.y - (crossBox.height / 2);
	            }

	            // check the edges
	            if (horiz) {
	                limit = {
	                    left: left - crossBox.x,
	                    right: left + this.width - crossBox.x
	                };
	            } else {
	                limit = {
	                    left: this.labelAlign === 'left' ? left : 0,
	                    right: this.labelAlign === 'right' ? left + this.width : chart.chartWidth
	                };
	            }

	            // left edge
	            if (crossLabel.translateX < limit.left) {
	                offset = limit.left - crossLabel.translateX;
	            }
	            // right edge
	            if (crossLabel.translateX + crossBox.width >= limit.right) {
	                offset = -(crossLabel.translateX + crossBox.width - limit.right);
	            }

	            // show the crosslabel
	            crossLabel.attr({
	                x: posx + offset,
	                y: posy,
	                // First set x and y, then anchorX and anchorY, when box is actually calculated, #5702
	                anchorX: horiz ? posx : (this.opposite ? 0 : chart.chartWidth),
	                anchorY: horiz ? (this.opposite ? chart.chartHeight : 0) : posy + crossBox.height / 2
	            });
	        });

	        /* ****************************************************************************
	         * Start value compare logic                                                  *
	         *****************************************************************************/

	        /**
	         * Extend series.init by adding a method to modify the y value used for plotting
	         * on the y axis. This method is called both from the axis when finding dataMin
	         * and dataMax, and from the series.translate method.
	         */
	        seriesProto.init = function() {

	            // Call base method
	            seriesInit.apply(this, arguments);

	            // Set comparison mode
	            this.setCompare(this.options.compare);
	        };

	        /**
	         * The setCompare method can be called also from the outside after render time
	         */
	        seriesProto.setCompare = function(compare) {

	            // Set or unset the modifyValue method
	            this.modifyValue = (compare === 'value' || compare === 'percent') ? function(value, point) {
	                var compareValue = this.compareValue;

	                if (value !== undefined && compareValue !== undefined) { // #2601, #5814

	                    // Get the modified value
	                    if (compare === 'value') {
	                        value -= compareValue;

	                        // Compare percent
	                    } else {
	                        value = 100 * (value / compareValue) -
	                            (this.options.compareBase === 100 ? 0 : 100);
	                    }

	                    // record for tooltip etc.
	                    if (point) {
	                        point.change = value;
	                    }

	                    return value;
	                }
	            } : null;

	            // Survive to export, #5485
	            this.userOptions.compare = compare;

	            // Mark dirty
	            if (this.chart.hasRendered) {
	                this.isDirty = true;
	            }

	        };

	        /**
	         * Extend series.processData by finding the first y value in the plot area,
	         * used for comparing the following values
	         */
	        seriesProto.processData = function() {
	            var series = this,
	                i,
	                keyIndex = -1,
	                processedXData,
	                processedYData,
	                length,
	                compareValue;

	            // call base method
	            seriesProcessData.apply(this, arguments);

	            if (series.xAxis && series.processedYData) { // not pies

	                // local variables
	                processedXData = series.processedXData;
	                processedYData = series.processedYData;
	                length = processedYData.length;

	                // For series with more than one value (range, OHLC etc), compare against
	                // close or the pointValKey (#4922, #3112)
	                if (series.pointArrayMap) {
	                    // Use close if present (#3112)
	                    keyIndex = inArray('close', series.pointArrayMap);
	                    if (keyIndex === -1) {
	                        keyIndex = inArray(series.pointValKey || 'y', series.pointArrayMap);
	                    }
	                }

	                // find the first value for comparison
	                for (i = 0; i < length - 1; i++) {
	                    compareValue = keyIndex > -1 ?
	                        processedYData[i][keyIndex] :
	                        processedYData[i];
	                    if (isNumber(compareValue) && processedXData[i + 1] >= series.xAxis.min && compareValue !== 0) {
	                        series.compareValue = compareValue;
	                        break;
	                    }
	                }
	            }
	        };

	        /**
	         * Modify series extremes
	         */
	        wrap(seriesProto, 'getExtremes', function(proceed) {
	            var extremes;

	            proceed.apply(this, [].slice.call(arguments, 1));

	            if (this.modifyValue) {
	                extremes = [this.modifyValue(this.dataMin), this.modifyValue(this.dataMax)];
	                this.dataMin = arrayMin(extremes);
	                this.dataMax = arrayMax(extremes);
	            }
	        });

	        /**
	         * Add a utility method, setCompare, to the Y axis
	         */
	        Axis.prototype.setCompare = function(compare, redraw) {
	            if (!this.isXAxis) {
	                each(this.series, function(series) {
	                    series.setCompare(compare);
	                });
	                if (pick(redraw, true)) {
	                    this.chart.redraw();
	                }
	            }
	        };

	        /**
	         * Extend the tooltip formatter by adding support for the point.change variable
	         * as well as the changeDecimals option
	         */
	        Point.prototype.tooltipFormatter = function(pointFormat) {
	            var point = this;

	            pointFormat = pointFormat.replace(
	                '{point.change}',
	                (point.change > 0 ? '+' : '') +
	                H.numberFormat(point.change, pick(point.series.tooltipOptions.changeDecimals, 2))
	            );

	            return pointTooltipFormatter.apply(this, [pointFormat]);
	        };

	        /* ****************************************************************************
	         * End value compare logic                                                    *
	         *****************************************************************************/


	        /**
	         * Extend the Series prototype to create a separate series clip box. This is
	         * related to using multiple panes, and a future pane logic should incorporate
	         * this feature (#2754).
	         */
	        wrap(Series.prototype, 'render', function(proceed) {
	            // Only do this on not 3d (#2939, #5904) nor polar (#6057) charts, and only
	            // if the series type handles clipping in the animate method (#2975).
	            if (!(this.chart.is3d && this.chart.is3d()) &&
	                !this.chart.polar &&
	                this.xAxis &&
	                !this.xAxis.isRadial // Gauge, #6192
	            ) {

	                // First render, initial clip box
	                if (!this.clipBox && this.animate) {
	                    this.clipBox = merge(this.chart.clipBox);
	                    this.clipBox.width = this.xAxis.len;
	                    this.clipBox.height = this.yAxis.len;

	                    // On redrawing, resizing etc, update the clip rectangle
	                } else if (this.chart[this.sharedClipKey]) {
	                    this.chart[this.sharedClipKey].attr({
	                        width: this.xAxis.len,
	                        height: this.yAxis.len
	                    });
	                    // #3111
	                } else if (this.clipBox) {
	                    this.clipBox.width = this.xAxis.len;
	                    this.clipBox.height = this.yAxis.len;
	                }
	            }
	            proceed.call(this);
	        });

	    }(Highcharts));
	    (function() {

	        'use strict';

	    }());
	    return Highcharts
	}));


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(4);
	var ChartEventsExample = (function () {
	    function ChartEventsExample() {
	        this.options = {
	            title: { text: 'chart events example' },
	            chart: { zoomType: 'x' },
	            series: [{
	                    data: [29.9, 71.5, 106.4, 148.5, 216.4, 194.1, 95.6, 54.4],
	                    allowPointSelect: true
	                }]
	        };
	    }
	    ChartEventsExample.prototype.onChartSelection = function (e) {
	        console.log('onChartSelection', e);
	    };
	    ChartEventsExample.prototype.onSeriesMouseOver = function (e) {
	        console.log('onSeriesMouseOver', e);
	    };
	    ChartEventsExample.prototype.onPointSelect = function (e) {
	        console.log('onPointSelect', e);
	    };
	    ChartEventsExample = __decorate([
	        core_1.Component({
	            selector: 'chart-events-example',
	            template: "\n        <chart [options]=\"options\" (selection)=\"onChartSelection($event)\">\n            <series (mouseOver)=\"onSeriesMouseOver($event)\">\n                <point (select)=\"onPointSelect($event)\"></point>\n            </series>\n        </chart>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], ChartEventsExample);
	    return ChartEventsExample;
	}());
	exports.ChartEventsExample = ChartEventsExample;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(4);
	var http_1 = __webpack_require__(22);
	var StockChartExample = (function () {
	    function StockChartExample(jsonp) {
	        var _this = this;
	        jsonp.request('https://www.highcharts.com/samples/data/jsonp.php?filename=aapl-c.json&callback=JSONP_CALLBACK').subscribe(function (res) {
	            _this.options = {
	                title: { text: 'AAPL Stock Price' },
	                series: [{
	                        name: 'AAPL',
	                        data: res.json(),
	                        tooltip: {
	                            valueDecimals: 2
	                        }
	                    }]
	            };
	        });
	    }
	    StockChartExample = __decorate([
	        core_1.Component({
	            selector: 'stock-chart-example',
	            template: "<chart type=\"StockChart\" [options]=\"options\"></chart>"
	        }), 
	        __metadata('design:paramtypes', [http_1.Jsonp])
	    ], StockChartExample);
	    return StockChartExample;
	}());
	exports.StockChartExample = StockChartExample;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(4);
	var DynamicChartExample = (function () {
	    function DynamicChartExample() {
	        this.options = {
	            title: { text: 'chart with dynamic data' },
	            series: [{
	                    data: [2, 3, 5, 8]
	                }]
	        };
	    }
	    DynamicChartExample.prototype.saveInstance = function (chartInstance) {
	        this.chart = chartInstance;
	    };
	    DynamicChartExample.prototype.addPoint = function () {
	        this.chart.series[0].addPoint(Math.random() * 10);
	        for (var _i = 0, _a = this.chart.series; _i < _a.length; _i++) {
	            var series = _a[_i];
	            console.log(series);
	        }
	    };
	    DynamicChartExample = __decorate([
	        core_1.Component({
	            selector: 'dynamic-chart-example',
	            template: "\n        <chart [options]=\"options\" (load)=\"saveInstance($event.context)\"></chart>\n        <button (click)=\"addPoint()\">Add Point</button>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], DynamicChartExample);
	    return DynamicChartExample;
	}());
	exports.DynamicChartExample = DynamicChartExample;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(4);
	var Highcharts = __webpack_require__(33);
	var ComboMultiAxesExample = (function () {
	    function ComboMultiAxesExample() {
	        this.options = {
	            chart: {
	                zoomType: 'xy'
	            },
	            title: {
	                text: 'Average Monthly Weather Data for Tokyo'
	            },
	            subtitle: {
	                text: 'Source: WorldClimate.com'
	            },
	            xAxis: [{
	                    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	                        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	                    crosshair: true
	                }],
	            yAxis: [{
	                    labels: {
	                        format: '{value}°C',
	                        style: {
	                            color: Highcharts.getOptions().colors[2]
	                        }
	                    },
	                    title: {
	                        text: 'Temperature',
	                        style: {
	                            color: Highcharts.getOptions().colors[2]
	                        }
	                    },
	                    opposite: true
	                }, {
	                    gridLineWidth: 0,
	                    title: {
	                        text: 'Rainfall',
	                        style: {
	                            color: Highcharts.getOptions().colors[0]
	                        }
	                    },
	                    labels: {
	                        format: '{value} mm',
	                        style: {
	                            color: Highcharts.getOptions().colors[0]
	                        }
	                    }
	                }, {
	                    gridLineWidth: 0,
	                    title: {
	                        text: 'Sea-Level Pressure',
	                        style: {
	                            color: Highcharts.getOptions().colors[1]
	                        }
	                    },
	                    labels: {
	                        format: '{value} mb',
	                        style: {
	                            color: Highcharts.getOptions().colors[1]
	                        }
	                    },
	                    opposite: true
	                }],
	            tooltip: {
	                shared: true
	            },
	            legend: {
	                layout: 'vertical',
	                align: 'left',
	                x: 80,
	                verticalAlign: 'top',
	                y: 55,
	                floating: true,
	                backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'
	            },
	            series: [{
	                    name: 'Rainfall',
	                    type: 'column',
	                    yAxis: 1,
	                    data: [49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],
	                    tooltip: {
	                        valueSuffix: ' mm'
	                    }
	                }, {
	                    name: 'Sea-Level Pressure',
	                    type: 'spline',
	                    yAxis: 2,
	                    data: [1016, 1016, 1015.9, 1015.5, 1012.3, 1009.5, 1009.6, 1010.2, 1013.1, 1016.9, 1018.2, 1016.7],
	                    marker: {
	                        enabled: false
	                    },
	                    dashStyle: 'shortdot',
	                    tooltip: {
	                        valueSuffix: ' mb'
	                    }
	                }, {
	                    name: 'Temperature',
	                    type: 'spline',
	                    data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6],
	                    tooltip: {
	                        valueSuffix: ' °C'
	                    }
	                }]
	        };
	    }
	    ComboMultiAxesExample = __decorate([
	        core_1.Component({
	            selector: 'combo-multi-axes-example',
	            template: "<chart [options]=\"options\"></chart>"
	        }), 
	        __metadata('design:paramtypes', [])
	    ], ComboMultiAxesExample);
	    return ComboMultiAxesExample;
	}());
	exports.ComboMultiAxesExample = ComboMultiAxesExample;


/***/ },
/* 33 */
/***/ function(module, exports) {

	/*
	 Highcharts JS v5.0.7 (2017-01-17)

	 (c) 2009-2016 Torstein Honsi

	 License: www.highcharts.com/license
	*/
	(function(L,a){"object"===typeof module&&module.exports?module.exports=L.document?a(L):a:L.Highcharts=a(L)})("undefined"!==typeof window?window:this,function(L){L=function(){var a=window,B=a.document,A=a.navigator&&a.navigator.userAgent||"",H=B&&B.createElementNS&&!!B.createElementNS("http://www.w3.org/2000/svg","svg").createSVGRect,G=/(edge|msie|trident)/i.test(A)&&!window.opera,r=!H,g=/Firefox/.test(A),f=g&&4>parseInt(A.split("Firefox/")[1],10);return a.Highcharts?a.Highcharts.error(16,!0):{product:"Highcharts",
	version:"5.0.7",deg2rad:2*Math.PI/360,doc:B,hasBidiBug:f,hasTouch:B&&void 0!==B.documentElement.ontouchstart,isMS:G,isWebKit:/AppleWebKit/.test(A),isFirefox:g,isTouchDevice:/(Mobile|Android|Windows Phone)/.test(A),SVG_NS:"http://www.w3.org/2000/svg",chartCount:0,seriesTypes:{},symbolSizes:{},svg:H,vml:r,win:a,charts:[],marginNames:["plotTop","marginRight","marginBottom","plotLeft"],noop:function(){}}}();(function(a){var B=[],A=a.charts,H=a.doc,G=a.win;a.error=function(r,g){r=a.isNumber(r)?"Highcharts error #"+
	r+": www.highcharts.com/errors/"+r:r;if(g)throw Error(r);G.console&&console.log(r)};a.Fx=function(a,g,f){this.options=g;this.elem=a;this.prop=f};a.Fx.prototype={dSetter:function(){var a=this.paths[0],g=this.paths[1],f=[],u=this.now,l=a.length,q;if(1===u)f=this.toD;else if(l===g.length&&1>u)for(;l--;)q=parseFloat(a[l]),f[l]=isNaN(q)?a[l]:u*parseFloat(g[l]-q)+q;else f=g;this.elem.attr("d",f,null,!0)},update:function(){var a=this.elem,g=this.prop,f=this.now,u=this.options.step;if(this[g+"Setter"])this[g+
	"Setter"]();else a.attr?a.element&&a.attr(g,f,null,!0):a.style[g]=f+this.unit;u&&u.call(a,f,this)},run:function(a,g,f){var r=this,l=function(a){return l.stopped?!1:r.step(a)},q;this.startTime=+new Date;this.start=a;this.end=g;this.unit=f;this.now=this.start;this.pos=0;l.elem=this.elem;l.prop=this.prop;l()&&1===B.push(l)&&(l.timerId=setInterval(function(){for(q=0;q<B.length;q++)B[q]()||B.splice(q--,1);B.length||clearInterval(l.timerId)},13))},step:function(a){var r=+new Date,f,u=this.options;f=this.elem;
	var l=u.complete,q=u.duration,d=u.curAnim,b;if(f.attr&&!f.element)f=!1;else if(a||r>=q+this.startTime){this.now=this.end;this.pos=1;this.update();a=d[this.prop]=!0;for(b in d)!0!==d[b]&&(a=!1);a&&l&&l.call(f);f=!1}else this.pos=u.easing((r-this.startTime)/q),this.now=this.start+(this.end-this.start)*this.pos,this.update(),f=!0;return f},initPath:function(r,g,f){function u(a){var e,b;for(n=a.length;n--;)e="M"===a[n]||"L"===a[n],b=/[a-zA-Z]/.test(a[n+3]),e&&b&&a.splice(n+1,0,a[n+1],a[n+2],a[n+1],a[n+
	2])}function l(a,e){for(;a.length<m;){a[0]=e[m-a.length];var b=a.slice(0,t);[].splice.apply(a,[0,0].concat(b));E&&(b=a.slice(a.length-t),[].splice.apply(a,[a.length,0].concat(b)),n--)}a[0]="M"}function q(a,e){for(var b=(m-a.length)/t;0<b&&b--;)c=a.slice().splice(a.length/z-t,t*z),c[0]=e[m-t-b*t],C&&(c[t-6]=c[t-2],c[t-5]=c[t-1]),[].splice.apply(a,[a.length/z,0].concat(c)),E&&b--}g=g||"";var d,b=r.startX,p=r.endX,C=-1<g.indexOf("C"),t=C?7:3,m,c,n;g=g.split(" ");f=f.slice();var E=r.isArea,z=E?2:1,e;
	C&&(u(g),u(f));if(b&&p){for(n=0;n<b.length;n++)if(b[n]===p[0]){d=n;break}else if(b[0]===p[p.length-b.length+n]){d=n;e=!0;break}void 0===d&&(g=[])}g.length&&a.isNumber(d)&&(m=f.length+d*z*t,e?(l(g,f),q(f,g)):(l(f,g),q(g,f)));return[g,f]}};a.extend=function(a,g){var f;a||(a={});for(f in g)a[f]=g[f];return a};a.merge=function(){var r,g=arguments,f,u={},l=function(q,d){var b,p;"object"!==typeof q&&(q={});for(p in d)d.hasOwnProperty(p)&&(b=d[p],a.isObject(b,!0)&&"renderTo"!==p&&"number"!==typeof b.nodeType?
	q[p]=l(q[p]||{},b):q[p]=d[p]);return q};!0===g[0]&&(u=g[1],g=Array.prototype.slice.call(g,2));f=g.length;for(r=0;r<f;r++)u=l(u,g[r]);return u};a.pInt=function(a,g){return parseInt(a,g||10)};a.isString=function(a){return"string"===typeof a};a.isArray=function(a){a=Object.prototype.toString.call(a);return"[object Array]"===a||"[object Array Iterator]"===a};a.isObject=function(r,g){return r&&"object"===typeof r&&(!g||!a.isArray(r))};a.isNumber=function(a){return"number"===typeof a&&!isNaN(a)};a.erase=
	function(a,g){for(var f=a.length;f--;)if(a[f]===g){a.splice(f,1);break}};a.defined=function(a){return void 0!==a&&null!==a};a.attr=function(r,g,f){var u,l;if(a.isString(g))a.defined(f)?r.setAttribute(g,f):r&&r.getAttribute&&(l=r.getAttribute(g));else if(a.defined(g)&&a.isObject(g))for(u in g)r.setAttribute(u,g[u]);return l};a.splat=function(r){return a.isArray(r)?r:[r]};a.syncTimeout=function(a,g,f){if(g)return setTimeout(a,g,f);a.call(0,f)};a.pick=function(){var a=arguments,g,f,u=a.length;for(g=
	0;g<u;g++)if(f=a[g],void 0!==f&&null!==f)return f};a.css=function(r,g){a.isMS&&!a.svg&&g&&void 0!==g.opacity&&(g.filter="alpha(opacity\x3d"+100*g.opacity+")");a.extend(r.style,g)};a.createElement=function(r,g,f,u,l){r=H.createElement(r);var q=a.css;g&&a.extend(r,g);l&&q(r,{padding:0,border:"none",margin:0});f&&q(r,f);u&&u.appendChild(r);return r};a.extendClass=function(r,g){var f=function(){};f.prototype=new r;a.extend(f.prototype,g);return f};a.pad=function(a,g,f){return Array((g||2)+1-String(a).length).join(f||
	0)+a};a.relativeLength=function(a,g){return/%$/.test(a)?g*parseFloat(a)/100:parseFloat(a)};a.wrap=function(a,g,f){var r=a[g];a[g]=function(){var a=Array.prototype.slice.call(arguments),q=arguments,d=this;d.proceed=function(){r.apply(d,arguments.length?arguments:q)};a.unshift(r);a=f.apply(this,a);d.proceed=null;return a}};a.getTZOffset=function(r){var g=a.Date;return 6E4*(g.hcGetTimezoneOffset&&g.hcGetTimezoneOffset(r)||g.hcTimezoneOffset||0)};a.dateFormat=function(r,g,f){if(!a.defined(g)||isNaN(g))return a.defaultOptions.lang.invalidDate||
	"";r=a.pick(r,"%Y-%m-%d %H:%M:%S");var u=a.Date,l=new u(g-a.getTZOffset(g)),q,d=l[u.hcGetHours](),b=l[u.hcGetDay](),p=l[u.hcGetDate](),C=l[u.hcGetMonth](),t=l[u.hcGetFullYear](),m=a.defaultOptions.lang,c=m.weekdays,n=m.shortWeekdays,E=a.pad,u=a.extend({a:n?n[b]:c[b].substr(0,3),A:c[b],d:E(p),e:E(p,2," "),w:b,b:m.shortMonths[C],B:m.months[C],m:E(C+1),y:t.toString().substr(2,2),Y:t,H:E(d),k:d,I:E(d%12||12),l:d%12||12,M:E(l[u.hcGetMinutes]()),p:12>d?"AM":"PM",P:12>d?"am":"pm",S:E(l.getSeconds()),L:E(Math.round(g%
	1E3),3)},a.dateFormats);for(q in u)for(;-1!==r.indexOf("%"+q);)r=r.replace("%"+q,"function"===typeof u[q]?u[q](g):u[q]);return f?r.substr(0,1).toUpperCase()+r.substr(1):r};a.formatSingle=function(r,g){var f=/\.([0-9])/,u=a.defaultOptions.lang;/f$/.test(r)?(f=(f=r.match(f))?f[1]:-1,null!==g&&(g=a.numberFormat(g,f,u.decimalPoint,-1<r.indexOf(",")?u.thousandsSep:""))):g=a.dateFormat(r,g);return g};a.format=function(r,g){for(var f="{",u=!1,l,q,d,b,p=[],C;r;){f=r.indexOf(f);if(-1===f)break;l=r.slice(0,
	f);if(u){l=l.split(":");q=l.shift().split(".");b=q.length;C=g;for(d=0;d<b;d++)C=C[q[d]];l.length&&(C=a.formatSingle(l.join(":"),C));p.push(C)}else p.push(l);r=r.slice(f+1);f=(u=!u)?"}":"{"}p.push(r);return p.join("")};a.getMagnitude=function(a){return Math.pow(10,Math.floor(Math.log(a)/Math.LN10))};a.normalizeTickInterval=function(r,g,f,u,l){var q,d=r;f=a.pick(f,1);q=r/f;g||(g=l?[1,1.2,1.5,2,2.5,3,4,5,6,8,10]:[1,2,2.5,5,10],!1===u&&(1===f?g=a.grep(g,function(a){return 0===a%1}):.1>=f&&(g=[1/f])));
	for(u=0;u<g.length&&!(d=g[u],l&&d*f>=r||!l&&q<=(g[u]+(g[u+1]||g[u]))/2);u++);return d=a.correctFloat(d*f,-Math.round(Math.log(.001)/Math.LN10))};a.stableSort=function(a,g){var f=a.length,r,l;for(l=0;l<f;l++)a[l].safeI=l;a.sort(function(a,d){r=g(a,d);return 0===r?a.safeI-d.safeI:r});for(l=0;l<f;l++)delete a[l].safeI};a.arrayMin=function(a){for(var g=a.length,f=a[0];g--;)a[g]<f&&(f=a[g]);return f};a.arrayMax=function(a){for(var g=a.length,f=a[0];g--;)a[g]>f&&(f=a[g]);return f};a.destroyObjectProperties=
	function(a,g){for(var f in a)a[f]&&a[f]!==g&&a[f].destroy&&a[f].destroy(),delete a[f]};a.discardElement=function(r){var g=a.garbageBin;g||(g=a.createElement("div"));r&&g.appendChild(r);g.innerHTML=""};a.correctFloat=function(a,g){return parseFloat(a.toPrecision(g||14))};a.setAnimation=function(r,g){g.renderer.globalAnimation=a.pick(r,g.options.chart.animation,!0)};a.animObject=function(r){return a.isObject(r)?a.merge(r):{duration:r?500:0}};a.timeUnits={millisecond:1,second:1E3,minute:6E4,hour:36E5,
	day:864E5,week:6048E5,month:24192E5,year:314496E5};a.numberFormat=function(r,g,f,u){r=+r||0;g=+g;var l=a.defaultOptions.lang,q=(r.toString().split(".")[1]||"").length,d,b;-1===g?g=Math.min(q,20):a.isNumber(g)||(g=2);b=(Math.abs(r)+Math.pow(10,-Math.max(g,q)-1)).toFixed(g);q=String(a.pInt(b));d=3<q.length?q.length%3:0;f=a.pick(f,l.decimalPoint);u=a.pick(u,l.thousandsSep);r=(0>r?"-":"")+(d?q.substr(0,d)+u:"");r+=q.substr(d).replace(/(\d{3})(?=\d)/g,"$1"+u);g&&(r+=f+b.slice(-g));return r};Math.easeInOutSine=
	function(a){return-.5*(Math.cos(Math.PI*a)-1)};a.getStyle=function(r,g){return"width"===g?Math.min(r.offsetWidth,r.scrollWidth)-a.getStyle(r,"padding-left")-a.getStyle(r,"padding-right"):"height"===g?Math.min(r.offsetHeight,r.scrollHeight)-a.getStyle(r,"padding-top")-a.getStyle(r,"padding-bottom"):(r=G.getComputedStyle(r,void 0))&&a.pInt(r.getPropertyValue(g))};a.inArray=function(a,g){return g.indexOf?g.indexOf(a):[].indexOf.call(g,a)};a.grep=function(a,g){return[].filter.call(a,g)};a.find=function(a,
	g){return[].find.call(a,g)};a.map=function(a,g){for(var f=[],u=0,l=a.length;u<l;u++)f[u]=g.call(a[u],a[u],u,a);return f};a.offset=function(a){var g=H.documentElement;a=a.getBoundingClientRect();return{top:a.top+(G.pageYOffset||g.scrollTop)-(g.clientTop||0),left:a.left+(G.pageXOffset||g.scrollLeft)-(g.clientLeft||0)}};a.stop=function(a,g){for(var f=B.length;f--;)B[f].elem!==a||g&&g!==B[f].prop||(B[f].stopped=!0)};a.each=function(a,g,f){return Array.prototype.forEach.call(a,g,f)};a.addEvent=function(r,
	g,f){function u(a){a.target=a.srcElement||G;f.call(r,a)}var l=r.hcEvents=r.hcEvents||{};r.addEventListener?r.addEventListener(g,f,!1):r.attachEvent&&(r.hcEventsIE||(r.hcEventsIE={}),r.hcEventsIE[f.toString()]=u,r.attachEvent("on"+g,u));l[g]||(l[g]=[]);l[g].push(f);return function(){a.removeEvent(r,g,f)}};a.removeEvent=function(r,g,f){function u(a,b){r.removeEventListener?r.removeEventListener(a,b,!1):r.attachEvent&&(b=r.hcEventsIE[b.toString()],r.detachEvent("on"+a,b))}function l(){var a,b;if(r.nodeName)for(b in g?
	(a={},a[g]=!0):a=d,a)if(d[b])for(a=d[b].length;a--;)u(b,d[b][a])}var q,d=r.hcEvents,b;d&&(g?(q=d[g]||[],f?(b=a.inArray(f,q),-1<b&&(q.splice(b,1),d[g]=q),u(g,f)):(l(),d[g]=[])):(l(),r.hcEvents={}))};a.fireEvent=function(r,g,f,u){var l;l=r.hcEvents;var q,d;f=f||{};if(H.createEvent&&(r.dispatchEvent||r.fireEvent))l=H.createEvent("Events"),l.initEvent(g,!0,!0),a.extend(l,f),r.dispatchEvent?r.dispatchEvent(l):r.fireEvent(g,l);else if(l)for(l=l[g]||[],q=l.length,f.target||a.extend(f,{preventDefault:function(){f.defaultPrevented=
	!0},target:r,type:g}),g=0;g<q;g++)(d=l[g])&&!1===d.call(r,f)&&f.preventDefault();u&&!f.defaultPrevented&&u(f)};a.animate=function(r,g,f){var u,l="",q,d,b;a.isObject(f)||(u=arguments,f={duration:u[2],easing:u[3],complete:u[4]});a.isNumber(f.duration)||(f.duration=400);f.easing="function"===typeof f.easing?f.easing:Math[f.easing]||Math.easeInOutSine;f.curAnim=a.merge(g);for(b in g)a.stop(r,b),d=new a.Fx(r,f,b),q=null,"d"===b?(d.paths=d.initPath(r,r.d,g.d),d.toD=g.d,u=0,q=1):r.attr?u=r.attr(b):(u=parseFloat(a.getStyle(r,
	b))||0,"opacity"!==b&&(l="px")),q||(q=g[b]),q.match&&q.match("px")&&(q=q.replace(/px/g,"")),d.run(u,q,l)};a.seriesType=function(r,g,f,u,l){var q=a.getOptions(),d=a.seriesTypes;q.plotOptions[r]=a.merge(q.plotOptions[g],f);d[r]=a.extendClass(d[g]||function(){},u);d[r].prototype.type=r;l&&(d[r].prototype.pointClass=a.extendClass(a.Point,l));return d[r]};a.uniqueKey=function(){var a=Math.random().toString(36).substring(2,9),g=0;return function(){return"highcharts-"+a+"-"+g++}}();G.jQuery&&(G.jQuery.fn.highcharts=
	function(){var r=[].slice.call(arguments);if(this[0])return r[0]?(new (a[a.isString(r[0])?r.shift():"Chart"])(this[0],r[0],r[1]),this):A[a.attr(this[0],"data-highcharts-chart")]});H&&!H.defaultView&&(a.getStyle=function(r,g){var f={width:"clientWidth",height:"clientHeight"}[g];if(r.style[g])return a.pInt(r.style[g]);"opacity"===g&&(g="filter");if(f)return r.style.zoom=1,Math.max(r[f]-2*a.getStyle(r,"padding"),0);r=r.currentStyle[g.replace(/\-(\w)/g,function(a,l){return l.toUpperCase()})];"filter"===
	g&&(r=r.replace(/alpha\(opacity=([0-9]+)\)/,function(a,l){return l/100}));return""===r?1:a.pInt(r)});Array.prototype.forEach||(a.each=function(a,g,f){for(var u=0,l=a.length;u<l;u++)if(!1===g.call(f,a[u],u,a))return u});Array.prototype.indexOf||(a.inArray=function(a,g){var f,u=0;if(g)for(f=g.length;u<f;u++)if(g[u]===a)return u;return-1});Array.prototype.filter||(a.grep=function(a,g){for(var f=[],u=0,l=a.length;u<l;u++)g(a[u],u)&&f.push(a[u]);return f});Array.prototype.find||(a.find=function(a,g){var f,
	u=a.length;for(f=0;f<u;f++)if(g(a[f],f))return a[f]})})(L);(function(a){var B=a.each,A=a.isNumber,H=a.map,G=a.merge,r=a.pInt;a.Color=function(g){if(!(this instanceof a.Color))return new a.Color(g);this.init(g)};a.Color.prototype={parsers:[{regex:/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/,parse:function(a){return[r(a[1]),r(a[2]),r(a[3]),parseFloat(a[4],10)]}},{regex:/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,parse:function(a){return[r(a[1],
	16),r(a[2],16),r(a[3],16),1]}},{regex:/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/,parse:function(a){return[r(a[1]),r(a[2]),r(a[3]),1]}}],names:{white:"#ffffff",black:"#000000"},init:function(g){var f,u,l,q;if((this.input=g=this.names[g]||g)&&g.stops)this.stops=H(g.stops,function(d){return new a.Color(d[1])});else for(l=this.parsers.length;l--&&!u;)q=this.parsers[l],(f=q.regex.exec(g))&&(u=q.parse(f));this.rgba=u||[]},get:function(a){var f=this.input,g=this.rgba,l;this.stops?
	(l=G(f),l.stops=[].concat(l.stops),B(this.stops,function(f,d){l.stops[d]=[l.stops[d][0],f.get(a)]})):l=g&&A(g[0])?"rgb"===a||!a&&1===g[3]?"rgb("+g[0]+","+g[1]+","+g[2]+")":"a"===a?g[3]:"rgba("+g.join(",")+")":f;return l},brighten:function(a){var f,g=this.rgba;if(this.stops)B(this.stops,function(l){l.brighten(a)});else if(A(a)&&0!==a)for(f=0;3>f;f++)g[f]+=r(255*a),0>g[f]&&(g[f]=0),255<g[f]&&(g[f]=255);return this},setOpacity:function(a){this.rgba[3]=a;return this}};a.color=function(g){return new a.Color(g)}})(L);
	(function(a){var B,A,H=a.addEvent,G=a.animate,r=a.attr,g=a.charts,f=a.color,u=a.css,l=a.createElement,q=a.defined,d=a.deg2rad,b=a.destroyObjectProperties,p=a.doc,C=a.each,t=a.extend,m=a.erase,c=a.grep,n=a.hasTouch,E=a.inArray,z=a.isArray,e=a.isFirefox,x=a.isMS,F=a.isObject,w=a.isString,h=a.isWebKit,y=a.merge,J=a.noop,K=a.pick,I=a.pInt,k=a.removeEvent,D=a.stop,P=a.svg,N=a.SVG_NS,S=a.symbolSizes,O=a.win;B=a.SVGElement=function(){return this};B.prototype={opacity:1,SVG_NS:N,textProps:"direction fontSize fontWeight fontFamily fontStyle color lineHeight width textDecoration textOverflow textOutline".split(" "),
	init:function(a,k){this.element="span"===k?l(k):p.createElementNS(this.SVG_NS,k);this.renderer=a},animate:function(v,k,e){k=a.animObject(K(k,this.renderer.globalAnimation,!0));0!==k.duration?(e&&(k.complete=e),G(this,v,k)):this.attr(v,null,e);return this},colorGradient:function(v,k,e){var b=this.renderer,h,D,c,x,M,m,n,d,F,t,p,w=[],l;v.linearGradient?D="linearGradient":v.radialGradient&&(D="radialGradient");if(D){c=v[D];M=b.gradients;n=v.stops;t=e.radialReference;z(c)&&(v[D]=c={x1:c[0],y1:c[1],x2:c[2],
	y2:c[3],gradientUnits:"userSpaceOnUse"});"radialGradient"===D&&t&&!q(c.gradientUnits)&&(x=c,c=y(c,b.getRadialAttr(t,x),{gradientUnits:"userSpaceOnUse"}));for(p in c)"id"!==p&&w.push(p,c[p]);for(p in n)w.push(n[p]);w=w.join(",");M[w]?t=M[w].attr("id"):(c.id=t=a.uniqueKey(),M[w]=m=b.createElement(D).attr(c).add(b.defs),m.radAttr=x,m.stops=[],C(n,function(v){0===v[1].indexOf("rgba")?(h=a.color(v[1]),d=h.get("rgb"),F=h.get("a")):(d=v[1],F=1);v=b.createElement("stop").attr({offset:v[0],"stop-color":d,
	"stop-opacity":F}).add(m);m.stops.push(v)}));l="url("+b.url+"#"+t+")";e.setAttribute(k,l);e.gradient=w;v.toString=function(){return l}}},applyTextOutline:function(a){var v=this.element,k,e,b,c;-1!==a.indexOf("contrast")&&(a=a.replace(/contrast/g,this.renderer.getContrast(v.style.fill)));this.fakeTS=!0;this.ySetter=this.xSetter;k=[].slice.call(v.getElementsByTagName("tspan"));a=a.split(" ");e=a[a.length-1];(b=a[0])&&"none"!==b&&(b=b.replace(/(^[\d\.]+)(.*?)$/g,function(a,v,k){return 2*v+k}),C(k,function(a){"highcharts-text-outline"===
	a.getAttribute("class")&&m(k,v.removeChild(a))}),c=v.firstChild,C(k,function(a,k){0===k&&(a.setAttribute("x",v.getAttribute("x")),k=v.getAttribute("y"),a.setAttribute("y",k||0),null===k&&v.setAttribute("y",0));a=a.cloneNode(1);r(a,{"class":"highcharts-text-outline",fill:e,stroke:e,"stroke-width":b,"stroke-linejoin":"round"});v.insertBefore(a,c)}))},attr:function(a,k,e,b){var v,c=this.element,h,x=this,M;"string"===typeof a&&void 0!==k&&(v=a,a={},a[v]=k);if("string"===typeof a)x=(this[a+"Getter"]||
	this._defaultGetter).call(this,a,c);else{for(v in a)k=a[v],M=!1,b||D(this,v),this.symbolName&&/^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(v)&&(h||(this.symbolAttr(a),h=!0),M=!0),!this.rotation||"x"!==v&&"y"!==v||(this.doTransform=!0),M||(M=this[v+"Setter"]||this._defaultSetter,M.call(this,k,v,c),this.shadows&&/^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(v)&&this.updateShadows(v,k,M));this.doTransform&&(this.updateTransform(),this.doTransform=!1)}e&&e();return x},updateShadows:function(a,
	k,e){for(var v=this.shadows,b=v.length;b--;)e.call(v[b],"height"===a?Math.max(k-(v[b].cutHeight||0),0):"d"===a?this.d:k,a,v[b])},addClass:function(a,k){var v=this.attr("class")||"";-1===v.indexOf(a)&&(k||(a=(v+(v?" ":"")+a).replace("  "," ")),this.attr("class",a));return this},hasClass:function(a){return-1!==r(this.element,"class").indexOf(a)},removeClass:function(a){r(this.element,"class",(r(this.element,"class")||"").replace(a,""));return this},symbolAttr:function(a){var v=this;C("x y r start end width height innerR anchorX anchorY".split(" "),
	function(k){v[k]=K(a[k],v[k])});v.attr({d:v.renderer.symbols[v.symbolName](v.x,v.y,v.width,v.height,v)})},clip:function(a){return this.attr("clip-path",a?"url("+this.renderer.url+"#"+a.id+")":"none")},crisp:function(a,k){var v,e={},b;k=k||a.strokeWidth||0;b=Math.round(k)%2/2;a.x=Math.floor(a.x||this.x||0)+b;a.y=Math.floor(a.y||this.y||0)+b;a.width=Math.floor((a.width||this.width||0)-2*b);a.height=Math.floor((a.height||this.height||0)-2*b);q(a.strokeWidth)&&(a.strokeWidth=k);for(v in a)this[v]!==a[v]&&
	(this[v]=e[v]=a[v]);return e},css:function(a){var v=this.styles,k={},e=this.element,b,c,h="";b=!v;var D=["textOverflow","width"];a&&a.color&&(a.fill=a.color);if(v)for(c in a)a[c]!==v[c]&&(k[c]=a[c],b=!0);if(b){b=this.textWidth=a&&a.width&&"text"===e.nodeName.toLowerCase()&&I(a.width)||this.textWidth;v&&(a=t(v,k));this.styles=a;b&&!P&&this.renderer.forExport&&delete a.width;if(x&&!P)u(this.element,a);else{v=function(a,v){return"-"+v.toLowerCase()};for(c in a)-1===E(c,D)&&(h+=c.replace(/([A-Z])/g,v)+
	":"+a[c]+";");h&&r(e,"style",h)}this.added&&(b&&this.renderer.buildText(this),a&&a.textOutline&&this.applyTextOutline(a.textOutline))}return this},strokeWidth:function(){return this["stroke-width"]||0},on:function(a,k){var v=this,e=v.element;n&&"click"===a?(e.ontouchstart=function(a){v.touchEventFired=Date.now();a.preventDefault();k.call(e,a)},e.onclick=function(a){(-1===O.navigator.userAgent.indexOf("Android")||1100<Date.now()-(v.touchEventFired||0))&&k.call(e,a)}):e["on"+a]=k;return this},setRadialReference:function(a){var v=
	this.renderer.gradients[this.element.gradient];this.element.radialReference=a;v&&v.radAttr&&v.animate(this.renderer.getRadialAttr(a,v.radAttr));return this},translate:function(a,k){return this.attr({translateX:a,translateY:k})},invert:function(a){this.inverted=a;this.updateTransform();return this},updateTransform:function(){var a=this.translateX||0,k=this.translateY||0,e=this.scaleX,b=this.scaleY,c=this.inverted,h=this.rotation,D=this.element;c&&(a+=this.width,k+=this.height);a=["translate("+a+","+
	k+")"];c?a.push("rotate(90) scale(-1,1)"):h&&a.push("rotate("+h+" "+(D.getAttribute("x")||0)+" "+(D.getAttribute("y")||0)+")");(q(e)||q(b))&&a.push("scale("+K(e,1)+" "+K(b,1)+")");a.length&&D.setAttribute("transform",a.join(" "))},toFront:function(){var a=this.element;a.parentNode.appendChild(a);return this},align:function(a,k,e){var v,b,c,h,D={};b=this.renderer;c=b.alignedObjects;var x,y;if(a){if(this.alignOptions=a,this.alignByTranslate=k,!e||w(e))this.alignTo=v=e||"renderer",m(c,this),c.push(this),
	e=null}else a=this.alignOptions,k=this.alignByTranslate,v=this.alignTo;e=K(e,b[v],b);v=a.align;b=a.verticalAlign;c=(e.x||0)+(a.x||0);h=(e.y||0)+(a.y||0);"right"===v?x=1:"center"===v&&(x=2);x&&(c+=(e.width-(a.width||0))/x);D[k?"translateX":"x"]=Math.round(c);"bottom"===b?y=1:"middle"===b&&(y=2);y&&(h+=(e.height-(a.height||0))/y);D[k?"translateY":"y"]=Math.round(h);this[this.placed?"animate":"attr"](D);this.placed=!0;this.alignAttr=D;return this},getBBox:function(a,k){var v,e=this.renderer,b,c=this.element,
	h=this.styles,D,x=this.textStr,m,y=e.cache,n=e.cacheKeys,F;k=K(k,this.rotation);b=k*d;D=h&&h.fontSize;void 0!==x&&(F=x.toString(),-1===F.indexOf("\x3c")&&(F=F.replace(/[0-9]/g,"0")),F+=["",k||0,D,h&&h.width,h&&h.textOverflow].join());F&&!a&&(v=y[F]);if(!v){if(c.namespaceURI===this.SVG_NS||e.forExport){try{(m=this.fakeTS&&function(a){C(c.querySelectorAll(".highcharts-text-outline"),function(v){v.style.display=a})})&&m("none"),v=c.getBBox?t({},c.getBBox()):{width:c.offsetWidth,height:c.offsetHeight},
	m&&m("")}catch(W){}if(!v||0>v.width)v={width:0,height:0}}else v=this.htmlGetBBox();e.isSVG&&(a=v.width,e=v.height,h&&"11px"===h.fontSize&&17===Math.round(e)&&(v.height=e=14),k&&(v.width=Math.abs(e*Math.sin(b))+Math.abs(a*Math.cos(b)),v.height=Math.abs(e*Math.cos(b))+Math.abs(a*Math.sin(b))));if(F&&0<v.height){for(;250<n.length;)delete y[n.shift()];y[F]||n.push(F);y[F]=v}}return v},show:function(a){return this.attr({visibility:a?"inherit":"visible"})},hide:function(){return this.attr({visibility:"hidden"})},
	fadeOut:function(a){var v=this;v.animate({opacity:0},{duration:a||150,complete:function(){v.attr({y:-9999})}})},add:function(a){var v=this.renderer,k=this.element,e;a&&(this.parentGroup=a);this.parentInverted=a&&a.inverted;void 0!==this.textStr&&v.buildText(this);this.added=!0;if(!a||a.handleZ||this.zIndex)e=this.zIndexSetter();e||(a?a.element:v.box).appendChild(k);if(this.onAdd)this.onAdd();return this},safeRemoveChild:function(a){var v=a.parentNode;v&&v.removeChild(a)},destroy:function(){var a=
	this.element||{},k=this.renderer.isSVG&&"SPAN"===a.nodeName&&this.parentGroup,e,b;a.onclick=a.onmouseout=a.onmouseover=a.onmousemove=a.point=null;D(this);this.clipPath&&(this.clipPath=this.clipPath.destroy());if(this.stops){for(b=0;b<this.stops.length;b++)this.stops[b]=this.stops[b].destroy();this.stops=null}this.safeRemoveChild(a);for(this.destroyShadows();k&&k.div&&0===k.div.childNodes.length;)a=k.parentGroup,this.safeRemoveChild(k.div),delete k.div,k=a;this.alignTo&&m(this.renderer.alignedObjects,
	this);for(e in this)delete this[e];return null},shadow:function(a,k,e){var v=[],b,c,h=this.element,D,x,m,y;if(!a)this.destroyShadows();else if(!this.shadows){x=K(a.width,3);m=(a.opacity||.15)/x;y=this.parentInverted?"(-1,-1)":"("+K(a.offsetX,1)+", "+K(a.offsetY,1)+")";for(b=1;b<=x;b++)c=h.cloneNode(0),D=2*x+1-2*b,r(c,{isShadow:"true",stroke:a.color||"#000000","stroke-opacity":m*b,"stroke-width":D,transform:"translate"+y,fill:"none"}),e&&(r(c,"height",Math.max(r(c,"height")-D,0)),c.cutHeight=D),k?
	k.element.appendChild(c):h.parentNode.insertBefore(c,h),v.push(c);this.shadows=v}return this},destroyShadows:function(){C(this.shadows||[],function(a){this.safeRemoveChild(a)},this);this.shadows=void 0},xGetter:function(a){"circle"===this.element.nodeName&&("x"===a?a="cx":"y"===a&&(a="cy"));return this._defaultGetter(a)},_defaultGetter:function(a){a=K(this[a],this.element?this.element.getAttribute(a):null,0);/^[\-0-9\.]+$/.test(a)&&(a=parseFloat(a));return a},dSetter:function(a,k,e){a&&a.join&&(a=
	a.join(" "));/(NaN| {2}|^$)/.test(a)&&(a="M 0 0");e.setAttribute(k,a);this[k]=a},dashstyleSetter:function(a){var v,k=this["stroke-width"];"inherit"===k&&(k=1);if(a=a&&a.toLowerCase()){a=a.replace("shortdashdotdot","3,1,1,1,1,1,").replace("shortdashdot","3,1,1,1").replace("shortdot","1,1,").replace("shortdash","3,1,").replace("longdash","8,3,").replace(/dot/g,"1,3,").replace("dash","4,3,").replace(/,$/,"").split(",");for(v=a.length;v--;)a[v]=I(a[v])*k;a=a.join(",").replace(/NaN/g,"none");this.element.setAttribute("stroke-dasharray",
	a)}},alignSetter:function(a){this.element.setAttribute("text-anchor",{left:"start",center:"middle",right:"end"}[a])},opacitySetter:function(a,k,e){this[k]=a;e.setAttribute(k,a)},titleSetter:function(a){var v=this.element.getElementsByTagName("title")[0];v||(v=p.createElementNS(this.SVG_NS,"title"),this.element.appendChild(v));v.firstChild&&v.removeChild(v.firstChild);v.appendChild(p.createTextNode(String(K(a),"").replace(/<[^>]*>/g,"")))},textSetter:function(a){a!==this.textStr&&(delete this.bBox,
	this.textStr=a,this.added&&this.renderer.buildText(this))},fillSetter:function(a,k,e){"string"===typeof a?e.setAttribute(k,a):a&&this.colorGradient(a,k,e)},visibilitySetter:function(a,k,e){"inherit"===a?e.removeAttribute(k):e.setAttribute(k,a)},zIndexSetter:function(a,k){var v=this.renderer,e=this.parentGroup,b=(e||v).element||v.box,c,h=this.element,D;c=this.added;var x;q(a)&&(h.zIndex=a,a=+a,this[k]===a&&(c=!1),this[k]=a);if(c){(a=this.zIndex)&&e&&(e.handleZ=!0);k=b.childNodes;for(x=0;x<k.length&&
	!D;x++)e=k[x],c=e.zIndex,e!==h&&(I(c)>a||!q(a)&&q(c)||0>a&&!q(c)&&b!==v.box)&&(b.insertBefore(h,e),D=!0);D||b.appendChild(h)}return D},_defaultSetter:function(a,k,e){e.setAttribute(k,a)}};B.prototype.yGetter=B.prototype.xGetter;B.prototype.translateXSetter=B.prototype.translateYSetter=B.prototype.rotationSetter=B.prototype.verticalAlignSetter=B.prototype.scaleXSetter=B.prototype.scaleYSetter=function(a,k){this[k]=a;this.doTransform=!0};B.prototype["stroke-widthSetter"]=B.prototype.strokeSetter=function(a,
	k,e){this[k]=a;this.stroke&&this["stroke-width"]?(B.prototype.fillSetter.call(this,this.stroke,"stroke",e),e.setAttribute("stroke-width",this["stroke-width"]),this.hasStroke=!0):"stroke-width"===k&&0===a&&this.hasStroke&&(e.removeAttribute("stroke"),this.hasStroke=!1)};A=a.SVGRenderer=function(){this.init.apply(this,arguments)};A.prototype={Element:B,SVG_NS:N,init:function(a,k,b,c,D,x){var v;c=this.createElement("svg").attr({version:"1.1","class":"highcharts-root"}).css(this.getStyle(c));v=c.element;
	a.appendChild(v);-1===a.innerHTML.indexOf("xmlns")&&r(v,"xmlns",this.SVG_NS);this.isSVG=!0;this.box=v;this.boxWrapper=c;this.alignedObjects=[];this.url=(e||h)&&p.getElementsByTagName("base").length?O.location.href.replace(/#.*?$/,"").replace(/<[^>]*>/g,"").replace(/([\('\)])/g,"\\$1").replace(/ /g,"%20"):"";this.createElement("desc").add().element.appendChild(p.createTextNode("Created with Highcharts 5.0.7"));this.defs=this.createElement("defs").add();this.allowHTML=x;this.forExport=D;this.gradients=
	{};this.cache={};this.cacheKeys=[];this.imgCount=0;this.setSize(k,b,!1);var m;e&&a.getBoundingClientRect&&(k=function(){u(a,{left:0,top:0});m=a.getBoundingClientRect();u(a,{left:Math.ceil(m.left)-m.left+"px",top:Math.ceil(m.top)-m.top+"px"})},k(),this.unSubPixelFix=H(O,"resize",k))},getStyle:function(a){return this.style=t({fontFamily:'"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif',fontSize:"12px"},a)},setStyle:function(a){this.boxWrapper.css(this.getStyle(a))},isHidden:function(){return!this.boxWrapper.getBBox().width},
	destroy:function(){var a=this.defs;this.box=null;this.boxWrapper=this.boxWrapper.destroy();b(this.gradients||{});this.gradients=null;a&&(this.defs=a.destroy());this.unSubPixelFix&&this.unSubPixelFix();return this.alignedObjects=null},createElement:function(a){var k=new this.Element;k.init(this,a);return k},draw:J,getRadialAttr:function(a,k){return{cx:a[0]-a[2]/2+k.cx*a[2],cy:a[1]-a[2]/2+k.cy*a[2],r:k.r*a[2]}},buildText:function(a){var k=a.element,v=this,e=v.forExport,b=K(a.textStr,"").toString(),
	h=-1!==b.indexOf("\x3c"),D=k.childNodes,x,m,y,n,F=r(k,"x"),d=a.styles,t=a.textWidth,w=d&&d.lineHeight,l=d&&d.textOutline,z=d&&"ellipsis"===d.textOverflow,f=d&&"nowrap"===d.whiteSpace,E=d&&d.fontSize,q,g=D.length,d=t&&!a.added&&this.box,J=function(a){var e;e=/(px|em)$/.test(a&&a.style.fontSize)?a.style.fontSize:E||v.style.fontSize||12;return w?I(w):v.fontMetrics(e,a.getAttribute("style")?a:k).h};q=[b,z,f,w,l,E,t].join();if(q!==a.textCache){for(a.textCache=q;g--;)k.removeChild(D[g]);h||l||z||t||-1!==
	b.indexOf(" ")?(x=/<.*class="([^"]+)".*>/,m=/<.*style="([^"]+)".*>/,y=/<.*href="(http[^"]+)".*>/,d&&d.appendChild(k),b=h?b.replace(/<(b|strong)>/g,'\x3cspan style\x3d"font-weight:bold"\x3e').replace(/<(i|em)>/g,'\x3cspan style\x3d"font-style:italic"\x3e').replace(/<a/g,"\x3cspan").replace(/<\/(b|strong|i|em|a)>/g,"\x3c/span\x3e").split(/<br.*?>/g):[b],b=c(b,function(a){return""!==a}),C(b,function(b,c){var h,D=0;b=b.replace(/^\s+|\s+$/g,"").replace(/<span/g,"|||\x3cspan").replace(/<\/span>/g,"\x3c/span\x3e|||");
	h=b.split("|||");C(h,function(b){if(""!==b||1===h.length){var d={},w=p.createElementNS(v.SVG_NS,"tspan"),l,E;x.test(b)&&(l=b.match(x)[1],r(w,"class",l));m.test(b)&&(E=b.match(m)[1].replace(/(;| |^)color([ :])/,"$1fill$2"),r(w,"style",E));y.test(b)&&!e&&(r(w,"onclick",'location.href\x3d"'+b.match(y)[1]+'"'),u(w,{cursor:"pointer"}));b=(b.replace(/<(.|\n)*?>/g,"")||" ").replace(/&lt;/g,"\x3c").replace(/&gt;/g,"\x3e");if(" "!==b){w.appendChild(p.createTextNode(b));D?d.dx=0:c&&null!==F&&(d.x=F);r(w,d);
	k.appendChild(w);!D&&c&&(!P&&e&&u(w,{display:"block"}),r(w,"dy",J(w)));if(t){d=b.replace(/([^\^])-/g,"$1- ").split(" ");l=1<h.length||c||1<d.length&&!f;for(var q,g,M=[],C=J(w),K=a.rotation,I=b,Q=I.length;(l||z)&&(d.length||M.length);)a.rotation=0,q=a.getBBox(!0),g=q.width,!P&&v.forExport&&(g=v.measureSpanWidth(w.firstChild.data,a.styles)),q=g>t,void 0===n&&(n=q),z&&n?(Q/=2,""===I||!q&&.5>Q?d=[]:(I=b.substring(0,I.length+(q?-1:1)*Math.ceil(Q)),d=[I+(3<t?"\u2026":"")],w.removeChild(w.firstChild))):
	q&&1!==d.length?(w.removeChild(w.firstChild),M.unshift(d.pop())):(d=M,M=[],d.length&&!f&&(w=p.createElementNS(N,"tspan"),r(w,{dy:C,x:F}),E&&r(w,"style",E),k.appendChild(w)),g>t&&(t=g)),d.length&&w.appendChild(p.createTextNode(d.join(" ").replace(/- /g,"-")));a.rotation=K}D++}}})}),n&&a.attr("title",a.textStr),d&&d.removeChild(k),l&&a.applyTextOutline&&a.applyTextOutline(l)):k.appendChild(p.createTextNode(b.replace(/&lt;/g,"\x3c").replace(/&gt;/g,"\x3e")))}},getContrast:function(a){a=f(a).rgba;return 510<
	a[0]+a[1]+a[2]?"#000000":"#FFFFFF"},button:function(a,k,e,b,c,h,D,m,d){var v=this.label(a,k,e,d,null,null,null,null,"button"),n=0;v.attr(y({padding:8,r:2},c));var F,w,p,l;c=y({fill:"#f7f7f7",stroke:"#cccccc","stroke-width":1,style:{color:"#333333",cursor:"pointer",fontWeight:"normal"}},c);F=c.style;delete c.style;h=y(c,{fill:"#e6e6e6"},h);w=h.style;delete h.style;D=y(c,{fill:"#e6ebf5",style:{color:"#000000",fontWeight:"bold"}},D);p=D.style;delete D.style;m=y(c,{style:{color:"#cccccc"}},m);l=m.style;
	delete m.style;H(v.element,x?"mouseover":"mouseenter",function(){3!==n&&v.setState(1)});H(v.element,x?"mouseout":"mouseleave",function(){3!==n&&v.setState(n)});v.setState=function(a){1!==a&&(v.state=n=a);v.removeClass(/highcharts-button-(normal|hover|pressed|disabled)/).addClass("highcharts-button-"+["normal","hover","pressed","disabled"][a||0]);v.attr([c,h,D,m][a||0]).css([F,w,p,l][a||0])};v.attr(c).css(t({cursor:"default"},F));return v.on("click",function(a){3!==n&&b.call(v,a)})},crispLine:function(a,
	k){a[1]===a[4]&&(a[1]=a[4]=Math.round(a[1])-k%2/2);a[2]===a[5]&&(a[2]=a[5]=Math.round(a[2])+k%2/2);return a},path:function(a){var k={fill:"none"};z(a)?k.d=a:F(a)&&t(k,a);return this.createElement("path").attr(k)},circle:function(a,k,e){a=F(a)?a:{x:a,y:k,r:e};k=this.createElement("circle");k.xSetter=k.ySetter=function(a,k,e){e.setAttribute("c"+k,a)};return k.attr(a)},arc:function(a,k,e,b,c,h){F(a)&&(k=a.y,e=a.r,b=a.innerR,c=a.start,h=a.end,a=a.x);a=this.symbol("arc",a||0,k||0,e||0,e||0,{innerR:b||
	0,start:c||0,end:h||0});a.r=e;return a},rect:function(a,k,e,b,c,h){c=F(a)?a.r:c;var v=this.createElement("rect");a=F(a)?a:void 0===a?{}:{x:a,y:k,width:Math.max(e,0),height:Math.max(b,0)};void 0!==h&&(a.strokeWidth=h,a=v.crisp(a));a.fill="none";c&&(a.r=c);v.rSetter=function(a,k,e){r(e,{rx:a,ry:a})};return v.attr(a)},setSize:function(a,k,e){var b=this.alignedObjects,v=b.length;this.width=a;this.height=k;for(this.boxWrapper.animate({width:a,height:k},{step:function(){this.attr({viewBox:"0 0 "+this.attr("width")+
	" "+this.attr("height")})},duration:K(e,!0)?void 0:0});v--;)b[v].align()},g:function(a){var k=this.createElement("g");return a?k.attr({"class":"highcharts-"+a}):k},image:function(a,k,e,b,c){var v={preserveAspectRatio:"none"};1<arguments.length&&t(v,{x:k,y:e,width:b,height:c});v=this.createElement("image").attr(v);v.element.setAttributeNS?v.element.setAttributeNS("http://www.w3.org/1999/xlink","href",a):v.element.setAttribute("hc-svg-href",a);return v},symbol:function(a,k,e,b,c,h){var v=this,D,x=this.symbols[a],
	m=q(k)&&x&&this.symbols[a](Math.round(k),Math.round(e),b,c,h),y=/^url\((.*?)\)$/,d,n;x?(D=this.path(m),D.attr("fill","none"),t(D,{symbolName:a,x:k,y:e,width:b,height:c}),h&&t(D,h)):y.test(a)&&(d=a.match(y)[1],D=this.image(d),D.imgwidth=K(S[d]&&S[d].width,h&&h.width),D.imgheight=K(S[d]&&S[d].height,h&&h.height),n=function(){D.attr({width:D.width,height:D.height})},C(["width","height"],function(a){D[a+"Setter"]=function(a,k){var e={},b=this["img"+k],v="width"===k?"translateX":"translateY";this[k]=a;
	q(b)&&(this.element&&this.element.setAttribute(k,b),this.alignByTranslate||(e[v]=((this[k]||0)-b)/2,this.attr(e)))}}),q(k)&&D.attr({x:k,y:e}),D.isImg=!0,q(D.imgwidth)&&q(D.imgheight)?n():(D.attr({width:0,height:0}),l("img",{onload:function(){var a=g[v.chartIndex];0===this.width&&(u(this,{position:"absolute",top:"-999em"}),p.body.appendChild(this));S[d]={width:this.width,height:this.height};D.imgwidth=this.width;D.imgheight=this.height;D.element&&n();this.parentNode&&this.parentNode.removeChild(this);
	v.imgCount--;if(!v.imgCount&&a&&a.onload)a.onload()},src:d}),this.imgCount++));return D},symbols:{circle:function(a,k,e,b){return this.arc(a+e/2,k+b/2,e/2,b/2,{start:0,end:2*Math.PI,open:!1})},square:function(a,k,e,b){return["M",a,k,"L",a+e,k,a+e,k+b,a,k+b,"Z"]},triangle:function(a,k,e,b){return["M",a+e/2,k,"L",a+e,k+b,a,k+b,"Z"]},"triangle-down":function(a,k,e,b){return["M",a,k,"L",a+e,k,a+e/2,k+b,"Z"]},diamond:function(a,k,e,b){return["M",a+e/2,k,"L",a+e,k+b/2,a+e/2,k+b,a,k+b/2,"Z"]},arc:function(a,
	k,e,b,c){var v=c.start,h=c.r||e,D=c.r||b||e,x=c.end-.001;e=c.innerR;b=c.open;var m=Math.cos(v),d=Math.sin(v),y=Math.cos(x),x=Math.sin(x);c=c.end-v<Math.PI?0:1;h=["M",a+h*m,k+D*d,"A",h,D,0,c,1,a+h*y,k+D*x];q(e)&&h.push(b?"M":"L",a+e*y,k+e*x,"A",e,e,0,c,0,a+e*m,k+e*d);h.push(b?"":"Z");return h},callout:function(a,k,e,b,c){var h=Math.min(c&&c.r||0,e,b),D=h+6,v=c&&c.anchorX;c=c&&c.anchorY;var x;x=["M",a+h,k,"L",a+e-h,k,"C",a+e,k,a+e,k,a+e,k+h,"L",a+e,k+b-h,"C",a+e,k+b,a+e,k+b,a+e-h,k+b,"L",a+h,k+b,"C",
	a,k+b,a,k+b,a,k+b-h,"L",a,k+h,"C",a,k,a,k,a+h,k];v&&v>e?c>k+D&&c<k+b-D?x.splice(13,3,"L",a+e,c-6,a+e+6,c,a+e,c+6,a+e,k+b-h):x.splice(13,3,"L",a+e,b/2,v,c,a+e,b/2,a+e,k+b-h):v&&0>v?c>k+D&&c<k+b-D?x.splice(33,3,"L",a,c+6,a-6,c,a,c-6,a,k+h):x.splice(33,3,"L",a,b/2,v,c,a,b/2,a,k+h):c&&c>b&&v>a+D&&v<a+e-D?x.splice(23,3,"L",v+6,k+b,v,k+b+6,v-6,k+b,a+h,k+b):c&&0>c&&v>a+D&&v<a+e-D&&x.splice(3,3,"L",v-6,k,v,k-6,v+6,k,e-h,k);return x}},clipRect:function(k,e,b,c){var h=a.uniqueKey(),D=this.createElement("clipPath").attr({id:h}).add(this.defs);
	k=this.rect(k,e,b,c,0).add(D);k.id=h;k.clipPath=D;k.count=0;return k},text:function(a,k,e,b){var c=!P&&this.forExport,h={};if(b&&(this.allowHTML||!this.forExport))return this.html(a,k,e);h.x=Math.round(k||0);e&&(h.y=Math.round(e));if(a||0===a)h.text=a;a=this.createElement("text").attr(h);c&&a.css({position:"absolute"});b||(a.xSetter=function(a,k,e){var b=e.getElementsByTagName("tspan"),c,h=e.getAttribute(k),D;for(D=0;D<b.length;D++)c=b[D],c.getAttribute(k)===h&&c.setAttribute(k,a);e.setAttribute(k,
	a)});return a},fontMetrics:function(a,k){a=a||k&&k.style&&k.style.fontSize||this.style&&this.style.fontSize;a=/px/.test(a)?I(a):/em/.test(a)?parseFloat(a)*(k?this.fontMetrics(null,k.parentNode).f:16):12;k=24>a?a+3:Math.round(1.2*a);return{h:k,b:Math.round(.8*k),f:a}},rotCorr:function(a,k,e){var b=a;k&&e&&(b=Math.max(b*Math.cos(k*d),4));return{x:-a/3*Math.sin(k*d),y:b}},label:function(a,e,b,c,h,D,x,m,d){var v=this,n=v.g("button"!==d&&"label"),F=n.text=v.text("",0,0,x).attr({zIndex:1}),w,p,l=0,z=3,
	E=0,f,g,J,K,P,N={},I,u,r=/^url\((.*?)\)$/.test(c),M=r,S,Q,R,O;d&&n.addClass("highcharts-"+d);M=r;S=function(){return(I||0)%2/2};Q=function(){var a=F.element.style,k={};p=(void 0===f||void 0===g||P)&&q(F.textStr)&&F.getBBox();n.width=(f||p.width||0)+2*z+E;n.height=(g||p.height||0)+2*z;u=z+v.fontMetrics(a&&a.fontSize,F).b;M&&(w||(n.box=w=v.symbols[c]||r?v.symbol(c):v.rect(),w.addClass(("button"===d?"":"highcharts-label-box")+(d?" highcharts-"+d+"-box":"")),w.add(n),a=S(),k.x=a,k.y=(m?-u:0)+a),k.width=
	Math.round(n.width),k.height=Math.round(n.height),w.attr(t(k,N)),N={})};R=function(){var a=E+z,k;k=m?0:u;q(f)&&p&&("center"===P||"right"===P)&&(a+={center:.5,right:1}[P]*(f-p.width));if(a!==F.x||k!==F.y)F.attr("x",a),void 0!==k&&F.attr("y",k);F.x=a;F.y=k};O=function(a,k){w?w.attr(a,k):N[a]=k};n.onAdd=function(){F.add(n);n.attr({text:a||0===a?a:"",x:e,y:b});w&&q(h)&&n.attr({anchorX:h,anchorY:D})};n.widthSetter=function(a){f=a};n.heightSetter=function(a){g=a};n["text-alignSetter"]=function(a){P=a};
	n.paddingSetter=function(a){q(a)&&a!==z&&(z=n.padding=a,R())};n.paddingLeftSetter=function(a){q(a)&&a!==E&&(E=a,R())};n.alignSetter=function(a){a={left:0,center:.5,right:1}[a];a!==l&&(l=a,p&&n.attr({x:J}))};n.textSetter=function(a){void 0!==a&&F.textSetter(a);Q();R()};n["stroke-widthSetter"]=function(a,k){a&&(M=!0);I=this["stroke-width"]=a;O(k,a)};n.strokeSetter=n.fillSetter=n.rSetter=function(a,k){"fill"===k&&a&&(M=!0);O(k,a)};n.anchorXSetter=function(a,k){h=a;O(k,Math.round(a)-S()-J)};n.anchorYSetter=
	function(a,k){D=a;O(k,a-K)};n.xSetter=function(a){n.x=a;l&&(a-=l*((f||p.width)+2*z));J=Math.round(a);n.attr("translateX",J)};n.ySetter=function(a){K=n.y=Math.round(a);n.attr("translateY",K)};var V=n.css;return t(n,{css:function(a){if(a){var k={};a=y(a);C(n.textProps,function(e){void 0!==a[e]&&(k[e]=a[e],delete a[e])});F.css(k)}return V.call(n,a)},getBBox:function(){return{width:p.width+2*z,height:p.height+2*z,x:p.x-z,y:p.y-z}},shadow:function(a){a&&(Q(),w&&w.shadow(a));return n},destroy:function(){k(n.element,
	"mouseenter");k(n.element,"mouseleave");F&&(F=F.destroy());w&&(w=w.destroy());B.prototype.destroy.call(n);n=v=Q=R=O=null}})}};a.Renderer=A})(L);(function(a){var B=a.attr,A=a.createElement,H=a.css,G=a.defined,r=a.each,g=a.extend,f=a.isFirefox,u=a.isMS,l=a.isWebKit,q=a.pInt,d=a.SVGRenderer,b=a.win,p=a.wrap;g(a.SVGElement.prototype,{htmlCss:function(a){var b=this.element;if(b=a&&"SPAN"===b.tagName&&a.width)delete a.width,this.textWidth=b,this.updateTransform();a&&"ellipsis"===a.textOverflow&&(a.whiteSpace=
	"nowrap",a.overflow="hidden");this.styles=g(this.styles,a);H(this.element,a);return this},htmlGetBBox:function(){var a=this.element;"text"===a.nodeName&&(a.style.position="absolute");return{x:a.offsetLeft,y:a.offsetTop,width:a.offsetWidth,height:a.offsetHeight}},htmlUpdateTransform:function(){if(this.added){var a=this.renderer,b=this.element,m=this.translateX||0,c=this.translateY||0,n=this.x||0,d=this.y||0,p=this.textAlign||"left",e={left:0,center:.5,right:1}[p],x=this.styles;H(b,{marginLeft:m,marginTop:c});
	this.shadows&&r(this.shadows,function(a){H(a,{marginLeft:m+1,marginTop:c+1})});this.inverted&&r(b.childNodes,function(e){a.invertChild(e,b)});if("SPAN"===b.tagName){var F=this.rotation,w=q(this.textWidth),h=x&&x.whiteSpace,y=[F,p,b.innerHTML,this.textWidth,this.textAlign].join();y!==this.cTT&&(x=a.fontMetrics(b.style.fontSize).b,G(F)&&this.setSpanRotation(F,e,x),H(b,{width:"",whiteSpace:h||"nowrap"}),b.offsetWidth>w&&/[ \-]/.test(b.textContent||b.innerText)&&H(b,{width:w+"px",display:"block",whiteSpace:h||
	"normal"}),this.getSpanCorrection(b.offsetWidth,x,e,F,p));H(b,{left:n+(this.xCorr||0)+"px",top:d+(this.yCorr||0)+"px"});l&&(x=b.offsetHeight);this.cTT=y}}else this.alignOnAdd=!0},setSpanRotation:function(a,d,m){var c={},n=u?"-ms-transform":l?"-webkit-transform":f?"MozTransform":b.opera?"-o-transform":"";c[n]=c.transform="rotate("+a+"deg)";c[n+(f?"Origin":"-origin")]=c.transformOrigin=100*d+"% "+m+"px";H(this.element,c)},getSpanCorrection:function(a,b,m){this.xCorr=-a*m;this.yCorr=-b}});g(d.prototype,
	{html:function(a,b,m){var c=this.createElement("span"),n=c.element,d=c.renderer,l=d.isSVG,e=function(a,e){r(["opacity","visibility"],function(b){p(a,b+"Setter",function(a,b,c,x){a.call(this,b,c,x);e[c]=b})})};c.textSetter=function(a){a!==n.innerHTML&&delete this.bBox;n.innerHTML=this.textStr=a;c.htmlUpdateTransform()};l&&e(c,c.element.style);c.xSetter=c.ySetter=c.alignSetter=c.rotationSetter=function(a,e){"align"===e&&(e="textAlign");c[e]=a;c.htmlUpdateTransform()};c.attr({text:a,x:Math.round(b),
	y:Math.round(m)}).css({fontFamily:this.style.fontFamily,fontSize:this.style.fontSize,position:"absolute"});n.style.whiteSpace="nowrap";c.css=c.htmlCss;l&&(c.add=function(a){var b,x=d.box.parentNode,h=[];if(this.parentGroup=a){if(b=a.div,!b){for(;a;)h.push(a),a=a.parentGroup;r(h.reverse(),function(a){var n,m=B(a.element,"class");m&&(m={className:m});b=a.div=a.div||A("div",m,{position:"absolute",left:(a.translateX||0)+"px",top:(a.translateY||0)+"px",display:a.display,opacity:a.opacity,pointerEvents:a.styles&&
	a.styles.pointerEvents},b||x);n=b.style;g(a,{on:function(){c.on.apply({element:h[0].div},arguments);return a},translateXSetter:function(e,k){n.left=e+"px";a[k]=e;a.doTransform=!0},translateYSetter:function(e,k){n.top=e+"px";a[k]=e;a.doTransform=!0}});e(a,n)})}}else b=x;b.appendChild(n);c.added=!0;c.alignOnAdd&&c.htmlUpdateTransform();return c});return c}})})(L);(function(a){var B,A,H=a.createElement,G=a.css,r=a.defined,g=a.deg2rad,f=a.discardElement,u=a.doc,l=a.each,q=a.erase,d=a.extend;B=a.extendClass;
	var b=a.isArray,p=a.isNumber,C=a.isObject,t=a.merge;A=a.noop;var m=a.pick,c=a.pInt,n=a.SVGElement,E=a.SVGRenderer,z=a.win;a.svg||(A={docMode8:u&&8===u.documentMode,init:function(a,b){var e=["\x3c",b,' filled\x3d"f" stroked\x3d"f"'],c=["position: ","absolute",";"],h="div"===b;("shape"===b||h)&&c.push("left:0;top:0;width:1px;height:1px;");c.push("visibility: ",h?"hidden":"visible");e.push(' style\x3d"',c.join(""),'"/\x3e');b&&(e=h||"span"===b||"img"===b?e.join(""):a.prepVML(e),this.element=H(e));this.renderer=
	a},add:function(a){var e=this.renderer,b=this.element,c=e.box,h=a&&a.inverted,c=a?a.element||a:c;a&&(this.parentGroup=a);h&&e.invertChild(b,c);c.appendChild(b);this.added=!0;this.alignOnAdd&&!this.deferUpdateTransform&&this.updateTransform();if(this.onAdd)this.onAdd();this.className&&this.attr("class",this.className);return this},updateTransform:n.prototype.htmlUpdateTransform,setSpanRotation:function(){var a=this.rotation,b=Math.cos(a*g),c=Math.sin(a*g);G(this.element,{filter:a?["progid:DXImageTransform.Microsoft.Matrix(M11\x3d",
	b,", M12\x3d",-c,", M21\x3d",c,", M22\x3d",b,", sizingMethod\x3d'auto expand')"].join(""):"none"})},getSpanCorrection:function(a,b,c,n,h){var e=n?Math.cos(n*g):1,x=n?Math.sin(n*g):0,d=m(this.elemHeight,this.element.offsetHeight),F;this.xCorr=0>e&&-a;this.yCorr=0>x&&-d;F=0>e*x;this.xCorr+=x*b*(F?1-c:c);this.yCorr-=e*b*(n?F?c:1-c:1);h&&"left"!==h&&(this.xCorr-=a*c*(0>e?-1:1),n&&(this.yCorr-=d*c*(0>x?-1:1)),G(this.element,{textAlign:h}))},pathToVML:function(a){for(var b=a.length,e=[];b--;)p(a[b])?e[b]=
	Math.round(10*a[b])-5:"Z"===a[b]?e[b]="x":(e[b]=a[b],!a.isArc||"wa"!==a[b]&&"at"!==a[b]||(e[b+5]===e[b+7]&&(e[b+7]+=a[b+7]>a[b+5]?1:-1),e[b+6]===e[b+8]&&(e[b+8]+=a[b+8]>a[b+6]?1:-1)));return e.join(" ")||"x"},clip:function(a){var b=this,e;a?(e=a.members,q(e,b),e.push(b),b.destroyClip=function(){q(e,b)},a=a.getCSS(b)):(b.destroyClip&&b.destroyClip(),a={clip:b.docMode8?"inherit":"rect(auto)"});return b.css(a)},css:n.prototype.htmlCss,safeRemoveChild:function(a){a.parentNode&&f(a)},destroy:function(){this.destroyClip&&
	this.destroyClip();return n.prototype.destroy.apply(this)},on:function(a,b){this.element["on"+a]=function(){var a=z.event;a.target=a.srcElement;b(a)};return this},cutOffPath:function(a,b){var e;a=a.split(/[ ,]/);e=a.length;if(9===e||11===e)a[e-4]=a[e-2]=c(a[e-2])-10*b;return a.join(" ")},shadow:function(a,b,n){var e=[],h,d=this.element,x=this.renderer,p,F=d.style,k,D=d.path,l,t,z,f;D&&"string"!==typeof D.value&&(D="x");t=D;if(a){z=m(a.width,3);f=(a.opacity||.15)/z;for(h=1;3>=h;h++)l=2*z+1-2*h,n&&
	(t=this.cutOffPath(D.value,l+.5)),k=['\x3cshape isShadow\x3d"true" strokeweight\x3d"',l,'" filled\x3d"false" path\x3d"',t,'" coordsize\x3d"10 10" style\x3d"',d.style.cssText,'" /\x3e'],p=H(x.prepVML(k),null,{left:c(F.left)+m(a.offsetX,1),top:c(F.top)+m(a.offsetY,1)}),n&&(p.cutOff=l+1),k=['\x3cstroke color\x3d"',a.color||"#000000",'" opacity\x3d"',f*h,'"/\x3e'],H(x.prepVML(k),null,null,p),b?b.element.appendChild(p):d.parentNode.insertBefore(p,d),e.push(p);this.shadows=e}return this},updateShadows:A,
	setAttr:function(a,b){this.docMode8?this.element[a]=b:this.element.setAttribute(a,b)},classSetter:function(a){(this.added?this.element:this).className=a},dashstyleSetter:function(a,b,c){(c.getElementsByTagName("stroke")[0]||H(this.renderer.prepVML(["\x3cstroke/\x3e"]),null,null,c))[b]=a||"solid";this[b]=a},dSetter:function(a,b,c){var e=this.shadows;a=a||[];this.d=a.join&&a.join(" ");c.path=a=this.pathToVML(a);if(e)for(c=e.length;c--;)e[c].path=e[c].cutOff?this.cutOffPath(a,e[c].cutOff):a;this.setAttr(b,
	a)},fillSetter:function(a,b,c){var e=c.nodeName;"SPAN"===e?c.style.color=a:"IMG"!==e&&(c.filled="none"!==a,this.setAttr("fillcolor",this.renderer.color(a,c,b,this)))},"fill-opacitySetter":function(a,b,c){H(this.renderer.prepVML(["\x3c",b.split("-")[0],' opacity\x3d"',a,'"/\x3e']),null,null,c)},opacitySetter:A,rotationSetter:function(a,b,c){c=c.style;this[b]=c[b]=a;c.left=-Math.round(Math.sin(a*g)+1)+"px";c.top=Math.round(Math.cos(a*g))+"px"},strokeSetter:function(a,b,c){this.setAttr("strokecolor",
	this.renderer.color(a,c,b,this))},"stroke-widthSetter":function(a,b,c){c.stroked=!!a;this[b]=a;p(a)&&(a+="px");this.setAttr("strokeweight",a)},titleSetter:function(a,b){this.setAttr(b,a)},visibilitySetter:function(a,b,c){"inherit"===a&&(a="visible");this.shadows&&l(this.shadows,function(c){c.style[b]=a});"DIV"===c.nodeName&&(a="hidden"===a?"-999em":0,this.docMode8||(c.style[b]=a?"visible":"hidden"),b="top");c.style[b]=a},xSetter:function(a,b,c){this[b]=a;"x"===b?b="left":"y"===b&&(b="top");this.updateClipping?
	(this[b]=a,this.updateClipping()):c.style[b]=a},zIndexSetter:function(a,b,c){c.style[b]=a}},A["stroke-opacitySetter"]=A["fill-opacitySetter"],a.VMLElement=A=B(n,A),A.prototype.ySetter=A.prototype.widthSetter=A.prototype.heightSetter=A.prototype.xSetter,A={Element:A,isIE8:-1<z.navigator.userAgent.indexOf("MSIE 8.0"),init:function(a,b,c){var e,h;this.alignedObjects=[];e=this.createElement("div").css({position:"relative"});h=e.element;a.appendChild(e.element);this.isVML=!0;this.box=h;this.boxWrapper=
	e;this.gradients={};this.cache={};this.cacheKeys=[];this.imgCount=0;this.setSize(b,c,!1);if(!u.namespaces.hcv){u.namespaces.add("hcv","urn:schemas-microsoft-com:vml");try{u.createStyleSheet().cssText="hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke{ behavior:url(#default#VML); display: inline-block; } "}catch(y){u.styleSheets[0].cssText+="hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke{ behavior:url(#default#VML); display: inline-block; } "}}},isHidden:function(){return!this.box.offsetWidth},
	clipRect:function(a,b,c,n){var e=this.createElement(),m=C(a);return d(e,{members:[],count:0,left:(m?a.x:a)+1,top:(m?a.y:b)+1,width:(m?a.width:c)-1,height:(m?a.height:n)-1,getCSS:function(a){var b=a.element,c=b.nodeName,k=a.inverted,e=this.top-("shape"===c?b.offsetTop:0),h=this.left,b=h+this.width,n=e+this.height,e={clip:"rect("+Math.round(k?h:e)+"px,"+Math.round(k?n:b)+"px,"+Math.round(k?b:n)+"px,"+Math.round(k?e:h)+"px)"};!k&&a.docMode8&&"DIV"===c&&d(e,{width:b+"px",height:n+"px"});return e},updateClipping:function(){l(e.members,
	function(a){a.element&&a.css(e.getCSS(a))})}})},color:function(b,c,n,m){var e=this,d,x=/^rgba/,p,t,k="none";b&&b.linearGradient?t="gradient":b&&b.radialGradient&&(t="pattern");if(t){var D,w,z=b.linearGradient||b.radialGradient,f,E,v,q,g,F="";b=b.stops;var C,u=[],r=function(){p=['\x3cfill colors\x3d"'+u.join(",")+'" opacity\x3d"',v,'" o:opacity2\x3d"',E,'" type\x3d"',t,'" ',F,'focus\x3d"100%" method\x3d"any" /\x3e'];H(e.prepVML(p),null,null,c)};f=b[0];C=b[b.length-1];0<f[0]&&b.unshift([0,f[1]]);1>
	C[0]&&b.push([1,C[1]]);l(b,function(k,b){x.test(k[1])?(d=a.color(k[1]),D=d.get("rgb"),w=d.get("a")):(D=k[1],w=1);u.push(100*k[0]+"% "+D);b?(v=w,q=D):(E=w,g=D)});if("fill"===n)if("gradient"===t)n=z.x1||z[0]||0,b=z.y1||z[1]||0,f=z.x2||z[2]||0,z=z.y2||z[3]||0,F='angle\x3d"'+(90-180*Math.atan((z-b)/(f-n))/Math.PI)+'"',r();else{var k=z.r,A=2*k,B=2*k,G=z.cx,U=z.cy,L=c.radialReference,T,k=function(){L&&(T=m.getBBox(),G+=(L[0]-T.x)/T.width-.5,U+=(L[1]-T.y)/T.height-.5,A*=L[2]/T.width,B*=L[2]/T.height);F=
	'src\x3d"'+a.getOptions().global.VMLRadialGradientURL+'" size\x3d"'+A+","+B+'" origin\x3d"0.5,0.5" position\x3d"'+G+","+U+'" color2\x3d"'+g+'" ';r()};m.added?k():m.onAdd=k;k=q}else k=D}else x.test(b)&&"IMG"!==c.tagName?(d=a.color(b),m[n+"-opacitySetter"](d.get("a"),n,c),k=d.get("rgb")):(k=c.getElementsByTagName(n),k.length&&(k[0].opacity=1,k[0].type="solid"),k=b);return k},prepVML:function(a){var b=this.isIE8;a=a.join("");b?(a=a.replace("/\x3e",' xmlns\x3d"urn:schemas-microsoft-com:vml" /\x3e'),a=
	-1===a.indexOf('style\x3d"')?a.replace("/\x3e",' style\x3d"display:inline-block;behavior:url(#default#VML);" /\x3e'):a.replace('style\x3d"','style\x3d"display:inline-block;behavior:url(#default#VML);')):a=a.replace("\x3c","\x3chcv:");return a},text:E.prototype.html,path:function(a){var c={coordsize:"10 10"};b(a)?c.d=a:C(a)&&d(c,a);return this.createElement("shape").attr(c)},circle:function(a,b,c){var e=this.symbol("circle");C(a)&&(c=a.r,b=a.y,a=a.x);e.isCircle=!0;e.r=c;return e.attr({x:a,y:b})},g:function(a){var b;
	a&&(b={className:"highcharts-"+a,"class":"highcharts-"+a});return this.createElement("div").attr(b)},image:function(a,b,c,n,h){var e=this.createElement("img").attr({src:a});1<arguments.length&&e.attr({x:b,y:c,width:n,height:h});return e},createElement:function(a){return"rect"===a?this.symbol(a):E.prototype.createElement.call(this,a)},invertChild:function(a,b){var e=this;b=b.style;var n="IMG"===a.tagName&&a.style;G(a,{flip:"x",left:c(b.width)-(n?c(n.top):1),top:c(b.height)-(n?c(n.left):1),rotation:-90});
	l(a.childNodes,function(b){e.invertChild(b,a)})},symbols:{arc:function(a,b,c,n,h){var e=h.start,m=h.end,d=h.r||c||n;c=h.innerR;n=Math.cos(e);var p=Math.sin(e),k=Math.cos(m),D=Math.sin(m);if(0===m-e)return["x"];e=["wa",a-d,b-d,a+d,b+d,a+d*n,b+d*p,a+d*k,b+d*D];h.open&&!c&&e.push("e","M",a,b);e.push("at",a-c,b-c,a+c,b+c,a+c*k,b+c*D,a+c*n,b+c*p,"x","e");e.isArc=!0;return e},circle:function(a,b,c,n,h){h&&r(h.r)&&(c=n=2*h.r);h&&h.isCircle&&(a-=c/2,b-=n/2);return["wa",a,b,a+c,b+n,a+c,b+n/2,a+c,b+n/2,"e"]},
	rect:function(a,b,c,n,h){return E.prototype.symbols[r(h)&&h.r?"callout":"square"].call(0,a,b,c,n,h)}}},a.VMLRenderer=B=function(){this.init.apply(this,arguments)},B.prototype=t(E.prototype,A),a.Renderer=B);E.prototype.measureSpanWidth=function(a,b){var c=u.createElement("span");a=u.createTextNode(a);c.appendChild(a);G(c,b);this.box.appendChild(c);b=c.offsetWidth;f(c);return b}})(L);(function(a){function B(){var l=a.defaultOptions.global,f=u.moment;if(l.timezone){if(f)return function(a){return-f.tz(a,
	l.timezone).utcOffset()};a.error(25)}return l.useUTC&&l.getTimezoneOffset}function A(){var l=a.defaultOptions.global,q,d=l.useUTC,b=d?"getUTC":"get",p=d?"setUTC":"set";a.Date=q=l.Date||u.Date;q.hcTimezoneOffset=d&&l.timezoneOffset;q.hcGetTimezoneOffset=B();q.hcMakeTime=function(a,b,m,c,n,p){var l;d?(l=q.UTC.apply(0,arguments),l+=r(l)):l=(new q(a,b,f(m,1),f(c,0),f(n,0),f(p,0))).getTime();return l};G("Minutes Hours Day Date Month FullYear".split(" "),function(a){q["hcGet"+a]=b+a});G("Milliseconds Seconds Minutes Hours Date Month FullYear".split(" "),
	function(a){q["hcSet"+a]=p+a})}var H=a.color,G=a.each,r=a.getTZOffset,g=a.merge,f=a.pick,u=a.win;a.defaultOptions={colors:"#7cb5ec #434348 #90ed7d #f7a35c #8085e9 #f15c80 #e4d354 #2b908f #f45b5b #91e8e1".split(" "),symbols:["circle","diamond","square","triangle","triangle-down"],lang:{loading:"Loading...",months:"January February March April May June July August September October November December".split(" "),shortMonths:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),weekdays:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
	decimalPoint:".",numericSymbols:"kMGTPE".split(""),resetZoom:"Reset zoom",resetZoomTitle:"Reset zoom level 1:1",thousandsSep:" "},global:{useUTC:!0,VMLRadialGradientURL:"http://code.highcharts.com/5.0.7/gfx/vml-radial-gradient.png"},chart:{borderRadius:0,defaultSeriesType:"line",ignoreHiddenSeries:!0,spacing:[10,10,15,10],resetZoomButton:{theme:{zIndex:20},position:{align:"right",x:-10,y:10}},width:null,height:null,borderColor:"#335cad",backgroundColor:"#ffffff",plotBorderColor:"#cccccc"},title:{text:"Chart title",
	align:"center",margin:15,widthAdjust:-44},subtitle:{text:"",align:"center",widthAdjust:-44},plotOptions:{},labels:{style:{position:"absolute",color:"#333333"}},legend:{enabled:!0,align:"center",layout:"horizontal",labelFormatter:function(){return this.name},borderColor:"#999999",borderRadius:0,navigation:{activeColor:"#003399",inactiveColor:"#cccccc"},itemStyle:{color:"#333333",fontSize:"12px",fontWeight:"bold"},itemHoverStyle:{color:"#000000"},itemHiddenStyle:{color:"#cccccc"},shadow:!1,itemCheckboxStyle:{position:"absolute",
	width:"13px",height:"13px"},squareSymbol:!0,symbolPadding:5,verticalAlign:"bottom",x:0,y:0,title:{style:{fontWeight:"bold"}}},loading:{labelStyle:{fontWeight:"bold",position:"relative",top:"45%"},style:{position:"absolute",backgroundColor:"#ffffff",opacity:.5,textAlign:"center"}},tooltip:{enabled:!0,animation:a.svg,borderRadius:3,dateTimeLabelFormats:{millisecond:"%A, %b %e, %H:%M:%S.%L",second:"%A, %b %e, %H:%M:%S",minute:"%A, %b %e, %H:%M",hour:"%A, %b %e, %H:%M",day:"%A, %b %e, %Y",week:"Week from %A, %b %e, %Y",
	month:"%B %Y",year:"%Y"},footerFormat:"",padding:8,snap:a.isTouchDevice?25:10,backgroundColor:H("#f7f7f7").setOpacity(.85).get(),borderWidth:1,headerFormat:'\x3cspan style\x3d"font-size: 10px"\x3e{point.key}\x3c/span\x3e\x3cbr/\x3e',pointFormat:'\x3cspan style\x3d"color:{point.color}"\x3e\u25cf\x3c/span\x3e {series.name}: \x3cb\x3e{point.y}\x3c/b\x3e\x3cbr/\x3e',shadow:!0,style:{color:"#333333",cursor:"default",fontSize:"12px",pointerEvents:"none",whiteSpace:"nowrap"}},credits:{enabled:!0,href:"http://www.highcharts.com",
	position:{align:"right",x:-10,verticalAlign:"bottom",y:-5},style:{cursor:"pointer",color:"#999999",fontSize:"9px"},text:"Highcharts.com"}};a.setOptions=function(l){a.defaultOptions=g(!0,a.defaultOptions,l);A();return a.defaultOptions};a.getOptions=function(){return a.defaultOptions};a.defaultPlotOptions=a.defaultOptions.plotOptions;A()})(L);(function(a){var B=a.arrayMax,A=a.arrayMin,H=a.defined,G=a.destroyObjectProperties,r=a.each,g=a.erase,f=a.merge,u=a.pick;a.PlotLineOrBand=function(a,f){this.axis=
	a;f&&(this.options=f,this.id=f.id)};a.PlotLineOrBand.prototype={render:function(){var a=this,q=a.axis,d=q.horiz,b=a.options,p=b.label,g=a.label,t=b.to,m=b.from,c=b.value,n=H(m)&&H(t),E=H(c),z=a.svgElem,e=!z,x=[],F,w=b.color,h=u(b.zIndex,0),y=b.events,x={"class":"highcharts-plot-"+(n?"band ":"line ")+(b.className||"")},J={},K=q.chart.renderer,I=n?"bands":"lines",k=q.log2lin;q.isLog&&(m=k(m),t=k(t),c=k(c));E?(x={stroke:w,"stroke-width":b.width},b.dashStyle&&(x.dashstyle=b.dashStyle)):n&&(w&&(x.fill=
	w),b.borderWidth&&(x.stroke=b.borderColor,x["stroke-width"]=b.borderWidth));J.zIndex=h;I+="-"+h;(w=q[I])||(q[I]=w=K.g("plot-"+I).attr(J).add());e&&(a.svgElem=z=K.path().attr(x).add(w));if(E)x=q.getPlotLinePath(c,z.strokeWidth());else if(n)x=q.getPlotBandPath(m,t,b);else return;if(e&&x&&x.length){if(z.attr({d:x}),y)for(F in b=function(b){z.on(b,function(k){y[b].apply(a,[k])})},y)b(F)}else z&&(x?(z.show(),z.animate({d:x})):(z.hide(),g&&(a.label=g=g.destroy())));p&&H(p.text)&&x&&x.length&&0<q.width&&
	0<q.height&&!x.flat?(p=f({align:d&&n&&"center",x:d?!n&&4:10,verticalAlign:!d&&n&&"middle",y:d?n?16:10:n?6:-4,rotation:d&&!n&&90},p),this.renderLabel(p,x,n,h)):g&&g.hide();return a},renderLabel:function(a,f,d,b){var p=this.label,l=this.axis.chart.renderer;p||(p={align:a.textAlign||a.align,rotation:a.rotation,"class":"highcharts-plot-"+(d?"band":"line")+"-label "+(a.className||"")},p.zIndex=b,this.label=p=l.text(a.text,0,0,a.useHTML).attr(p).add(),p.css(a.style));b=[f[1],f[4],d?f[6]:f[1]];f=[f[2],f[5],
	d?f[7]:f[2]];d=A(b);l=A(f);p.align(a,!1,{x:d,y:l,width:B(b)-d,height:B(f)-l});p.show()},destroy:function(){g(this.axis.plotLinesAndBands,this);delete this.axis;G(this)}};a.AxisPlotLineOrBandExtension={getPlotBandPath:function(a,f){f=this.getPlotLinePath(f,null,null,!0);(a=this.getPlotLinePath(a,null,null,!0))&&f?(a.flat=a.toString()===f.toString(),a.push(f[4],f[5],f[1],f[2],"z")):a=null;return a},addPlotBand:function(a){return this.addPlotBandOrLine(a,"plotBands")},addPlotLine:function(a){return this.addPlotBandOrLine(a,
	"plotLines")},addPlotBandOrLine:function(f,g){var d=(new a.PlotLineOrBand(this,f)).render(),b=this.userOptions;d&&(g&&(b[g]=b[g]||[],b[g].push(f)),this.plotLinesAndBands.push(d));return d},removePlotBandOrLine:function(a){for(var f=this.plotLinesAndBands,d=this.options,b=this.userOptions,p=f.length;p--;)f[p].id===a&&f[p].destroy();r([d.plotLines||[],b.plotLines||[],d.plotBands||[],b.plotBands||[]],function(b){for(p=b.length;p--;)b[p].id===a&&g(b,b[p])})}}})(L);(function(a){var B=a.correctFloat,A=
	a.defined,H=a.destroyObjectProperties,G=a.isNumber,r=a.merge,g=a.pick,f=a.deg2rad;a.Tick=function(a,f,g,d){this.axis=a;this.pos=f;this.type=g||"";this.isNew=!0;g||d||this.addLabel()};a.Tick.prototype={addLabel:function(){var a=this.axis,f=a.options,q=a.chart,d=a.categories,b=a.names,p=this.pos,C=f.labels,t=a.tickPositions,m=p===t[0],c=p===t[t.length-1],b=d?g(d[p],b[p],p):p,d=this.label,t=t.info,n;a.isDatetimeAxis&&t&&(n=f.dateTimeLabelFormats[t.higherRanks[p]||t.unitName]);this.isFirst=m;this.isLast=
	c;f=a.labelFormatter.call({axis:a,chart:q,isFirst:m,isLast:c,dateTimeLabelFormat:n,value:a.isLog?B(a.lin2log(b)):b});A(d)?d&&d.attr({text:f}):(this.labelLength=(this.label=d=A(f)&&C.enabled?q.renderer.text(f,0,0,C.useHTML).css(r(C.style)).add(a.labelGroup):null)&&d.getBBox().width,this.rotation=0)},getLabelSize:function(){return this.label?this.label.getBBox()[this.axis.horiz?"height":"width"]:0},handleOverflow:function(a){var l=this.axis,q=a.x,d=l.chart.chartWidth,b=l.chart.spacing,p=g(l.labelLeft,
	Math.min(l.pos,b[3])),b=g(l.labelRight,Math.max(l.pos+l.len,d-b[1])),C=this.label,t=this.rotation,m={left:0,center:.5,right:1}[l.labelAlign],c=C.getBBox().width,n=l.getSlotWidth(),E=n,z=1,e,x={};if(t)0>t&&q-m*c<p?e=Math.round(q/Math.cos(t*f)-p):0<t&&q+m*c>b&&(e=Math.round((d-q)/Math.cos(t*f)));else if(d=q+(1-m)*c,q-m*c<p?E=a.x+E*(1-m)-p:d>b&&(E=b-a.x+E*m,z=-1),E=Math.min(n,E),E<n&&"center"===l.labelAlign&&(a.x+=z*(n-E-m*(n-Math.min(c,E)))),c>E||l.autoRotation&&(C.styles||{}).width)e=E;e&&(x.width=
	e,(l.options.labels.style||{}).textOverflow||(x.textOverflow="ellipsis"),C.css(x))},getPosition:function(a,f,g,d){var b=this.axis,p=b.chart,l=d&&p.oldChartHeight||p.chartHeight;return{x:a?b.translate(f+g,null,null,d)+b.transB:b.left+b.offset+(b.opposite?(d&&p.oldChartWidth||p.chartWidth)-b.right-b.left:0),y:a?l-b.bottom+b.offset-(b.opposite?b.height:0):l-b.translate(f+g,null,null,d)-b.transB}},getLabelPosition:function(a,g,q,d,b,p,C,t){var m=this.axis,c=m.transA,n=m.reversed,E=m.staggerLines,z=m.tickRotCorr||
	{x:0,y:0},e=b.y;A(e)||(e=0===m.side?q.rotation?-8:-q.getBBox().height:2===m.side?z.y+8:Math.cos(q.rotation*f)*(z.y-q.getBBox(!1,0).height/2));a=a+b.x+z.x-(p&&d?p*c*(n?-1:1):0);g=g+e-(p&&!d?p*c*(n?1:-1):0);E&&(q=C/(t||1)%E,m.opposite&&(q=E-q-1),g+=m.labelOffset/E*q);return{x:a,y:Math.round(g)}},getMarkPath:function(a,f,g,d,b,p){return p.crispLine(["M",a,f,"L",a+(b?0:-g),f+(b?g:0)],d)},render:function(a,f,q){var d=this.axis,b=d.options,p=d.chart.renderer,l=d.horiz,t=this.type,m=this.label,c=this.pos,
	n=b.labels,E=this.gridLine,z=t?t+"Tick":"tick",e=d.tickSize(z),x=this.mark,F=!x,w=n.step,h={},y=!0,J=d.tickmarkOffset,K=this.getPosition(l,c,J,f),I=K.x,K=K.y,k=l&&I===d.pos+d.len||!l&&K===d.pos?-1:1,D=t?t+"Grid":"grid",P=b[D+"LineWidth"],N=b[D+"LineColor"],r=b[D+"LineDashStyle"],D=g(b[z+"Width"],!t&&d.isXAxis?1:0),z=b[z+"Color"];q=g(q,1);this.isActive=!0;E||(h.stroke=N,h["stroke-width"]=P,r&&(h.dashstyle=r),t||(h.zIndex=1),f&&(h.opacity=0),this.gridLine=E=p.path().attr(h).addClass("highcharts-"+(t?
	t+"-":"")+"grid-line").add(d.gridGroup));if(!f&&E&&(c=d.getPlotLinePath(c+J,E.strokeWidth()*k,f,!0)))E[this.isNew?"attr":"animate"]({d:c,opacity:q});e&&(d.opposite&&(e[0]=-e[0]),F&&(this.mark=x=p.path().addClass("highcharts-"+(t?t+"-":"")+"tick").add(d.axisGroup),x.attr({stroke:z,"stroke-width":D})),x[F?"attr":"animate"]({d:this.getMarkPath(I,K,e[0],x.strokeWidth()*k,l,p),opacity:q}));m&&G(I)&&(m.xy=K=this.getLabelPosition(I,K,m,l,n,J,a,w),this.isFirst&&!this.isLast&&!g(b.showFirstLabel,1)||this.isLast&&
	!this.isFirst&&!g(b.showLastLabel,1)?y=!1:!l||d.isRadial||n.step||n.rotation||f||0===q||this.handleOverflow(K),w&&a%w&&(y=!1),y&&G(K.y)?(K.opacity=q,m[this.isNew?"attr":"animate"](K)):m.attr("y",-9999),this.isNew=!1)},destroy:function(){H(this,this.axis)}}})(L);(function(a){var B=a.addEvent,A=a.animObject,H=a.arrayMax,G=a.arrayMin,r=a.AxisPlotLineOrBandExtension,g=a.color,f=a.correctFloat,u=a.defaultOptions,l=a.defined,q=a.deg2rad,d=a.destroyObjectProperties,b=a.each,p=a.extend,C=a.fireEvent,t=a.format,
	m=a.getMagnitude,c=a.grep,n=a.inArray,E=a.isArray,z=a.isNumber,e=a.isString,x=a.merge,F=a.normalizeTickInterval,w=a.pick,h=a.PlotLineOrBand,y=a.removeEvent,J=a.splat,K=a.syncTimeout,I=a.Tick;a.Axis=function(){this.init.apply(this,arguments)};a.Axis.prototype={defaultOptions:{dateTimeLabelFormats:{millisecond:"%H:%M:%S.%L",second:"%H:%M:%S",minute:"%H:%M",hour:"%H:%M",day:"%e. %b",week:"%e. %b",month:"%b '%y",year:"%Y"},endOnTick:!1,labels:{enabled:!0,style:{color:"#666666",cursor:"default",fontSize:"11px"},
	x:0},minPadding:.01,maxPadding:.01,minorTickLength:2,minorTickPosition:"outside",startOfWeek:1,startOnTick:!1,tickLength:10,tickmarkPlacement:"between",tickPixelInterval:100,tickPosition:"outside",title:{align:"middle",style:{color:"#666666"}},type:"linear",minorGridLineColor:"#f2f2f2",minorGridLineWidth:1,minorTickColor:"#999999",lineColor:"#ccd6eb",lineWidth:1,gridLineColor:"#e6e6e6",tickColor:"#ccd6eb"},defaultYAxisOptions:{endOnTick:!0,tickPixelInterval:72,showLastLabel:!0,labels:{x:-8},maxPadding:.05,
	minPadding:.05,startOnTick:!0,title:{rotation:270,text:"Values"},stackLabels:{enabled:!1,formatter:function(){return a.numberFormat(this.total,-1)},style:{fontSize:"11px",fontWeight:"bold",color:"#000000",textOutline:"1px contrast"}},gridLineWidth:1,lineWidth:0},defaultLeftAxisOptions:{labels:{x:-15},title:{rotation:270}},defaultRightAxisOptions:{labels:{x:15},title:{rotation:90}},defaultBottomAxisOptions:{labels:{autoRotation:[-45],x:0},title:{rotation:0}},defaultTopAxisOptions:{labels:{autoRotation:[-45],
	x:0},title:{rotation:0}},init:function(a,b){var k=b.isX;this.chart=a;this.horiz=a.inverted?!k:k;this.isXAxis=k;this.coll=this.coll||(k?"xAxis":"yAxis");this.opposite=b.opposite;this.side=b.side||(this.horiz?this.opposite?0:2:this.opposite?1:3);this.setOptions(b);var c=this.options,e=c.type;this.labelFormatter=c.labels.formatter||this.defaultLabelFormatter;this.userOptions=b;this.minPixelPadding=0;this.reversed=c.reversed;this.visible=!1!==c.visible;this.zoomEnabled=!1!==c.zoomEnabled;this.hasNames=
	"category"===e||!0===c.categories;this.categories=c.categories||this.hasNames;this.names=this.names||[];this.isLog="logarithmic"===e;this.isDatetimeAxis="datetime"===e;this.isLinked=l(c.linkedTo);this.ticks={};this.labelEdge=[];this.minorTicks={};this.plotLinesAndBands=[];this.alternateBands={};this.len=0;this.minRange=this.userMinRange=c.minRange||c.maxZoom;this.range=c.range;this.offset=c.offset||0;this.stacks={};this.oldStacks={};this.stacksTouched=0;this.min=this.max=null;this.crosshair=w(c.crosshair,
	J(a.options.tooltip.crosshairs)[k?0:1],!1);var h;b=this.options.events;-1===n(this,a.axes)&&(k?a.axes.splice(a.xAxis.length,0,this):a.axes.push(this),a[this.coll].push(this));this.series=this.series||[];a.inverted&&k&&void 0===this.reversed&&(this.reversed=!0);this.removePlotLine=this.removePlotBand=this.removePlotBandOrLine;for(h in b)B(this,h,b[h]);this.isLog&&(this.val2lin=this.log2lin,this.lin2val=this.lin2log)},setOptions:function(a){this.options=x(this.defaultOptions,"yAxis"===this.coll&&this.defaultYAxisOptions,
	[this.defaultTopAxisOptions,this.defaultRightAxisOptions,this.defaultBottomAxisOptions,this.defaultLeftAxisOptions][this.side],x(u[this.coll],a))},defaultLabelFormatter:function(){var b=this.axis,c=this.value,e=b.categories,h=this.dateTimeLabelFormat,n=u.lang,d=n.numericSymbols,n=n.numericSymbolMagnitude||1E3,v=d&&d.length,m,f=b.options.labels.format,b=b.isLog?c:b.tickInterval;if(f)m=t(f,this);else if(e)m=c;else if(h)m=a.dateFormat(h,c);else if(v&&1E3<=b)for(;v--&&void 0===m;)e=Math.pow(n,v+1),b>=
	e&&0===10*c%e&&null!==d[v]&&0!==c&&(m=a.numberFormat(c/e,-1)+d[v]);void 0===m&&(m=1E4<=Math.abs(c)?a.numberFormat(c,-1):a.numberFormat(c,-1,void 0,""));return m},getSeriesExtremes:function(){var a=this,e=a.chart;a.hasVisibleSeries=!1;a.dataMin=a.dataMax=a.threshold=null;a.softThreshold=!a.isXAxis;a.buildStacks&&a.buildStacks();b(a.series,function(b){if(b.visible||!e.options.chart.ignoreHiddenSeries){var k=b.options,h=k.threshold,D;a.hasVisibleSeries=!0;a.isLog&&0>=h&&(h=null);if(a.isXAxis)k=b.xData,
	k.length&&(b=G(k),z(b)||b instanceof Date||(k=c(k,function(a){return z(a)}),b=G(k)),a.dataMin=Math.min(w(a.dataMin,k[0]),b),a.dataMax=Math.max(w(a.dataMax,k[0]),H(k)));else if(b.getExtremes(),D=b.dataMax,b=b.dataMin,l(b)&&l(D)&&(a.dataMin=Math.min(w(a.dataMin,b),b),a.dataMax=Math.max(w(a.dataMax,D),D)),l(h)&&(a.threshold=h),!k.softThreshold||a.isLog)a.softThreshold=!1}})},translate:function(a,b,c,e,h,n){var k=this.linkedParent||this,D=1,m=0,d=e?k.oldTransA:k.transA;e=e?k.oldMin:k.min;var f=k.minPixelPadding;
	h=(k.isOrdinal||k.isBroken||k.isLog&&h)&&k.lin2val;d||(d=k.transA);c&&(D*=-1,m=k.len);k.reversed&&(D*=-1,m-=D*(k.sector||k.len));b?(a=(a*D+m-f)/d+e,h&&(a=k.lin2val(a))):(h&&(a=k.val2lin(a)),a=D*(a-e)*d+m+D*f+(z(n)?d*n:0));return a},toPixels:function(a,b){return this.translate(a,!1,!this.horiz,null,!0)+(b?0:this.pos)},toValue:function(a,b){return this.translate(a-(b?0:this.pos),!0,!this.horiz,null,!0)},getPlotLinePath:function(a,b,c,e,h){var k=this.chart,D=this.left,n=this.top,m,d,f=c&&k.oldChartHeight||
	k.chartHeight,p=c&&k.oldChartWidth||k.chartWidth,y;m=this.transB;var t=function(a,b,k){if(a<b||a>k)e?a=Math.min(Math.max(b,a),k):y=!0;return a};h=w(h,this.translate(a,null,null,c));a=c=Math.round(h+m);m=d=Math.round(f-h-m);z(h)?this.horiz?(m=n,d=f-this.bottom,a=c=t(a,D,D+this.width)):(a=D,c=p-this.right,m=d=t(m,n,n+this.height)):y=!0;return y&&!e?null:k.renderer.crispLine(["M",a,m,"L",c,d],b||1)},getLinearTickPositions:function(a,b,c){var k,e=f(Math.floor(b/a)*a),h=f(Math.ceil(c/a)*a),D=[];if(b===
	c&&z(b))return[b];for(b=e;b<=h;){D.push(b);b=f(b+a);if(b===k)break;k=b}return D},getMinorTickPositions:function(){var a=this.options,b=this.tickPositions,c=this.minorTickInterval,e=[],h,n=this.pointRangePadding||0;h=this.min-n;var n=this.max+n,m=n-h;if(m&&m/c<this.len/3)if(this.isLog)for(n=b.length,h=1;h<n;h++)e=e.concat(this.getLogTickPositions(c,b[h-1],b[h],!0));else if(this.isDatetimeAxis&&"auto"===a.minorTickInterval)e=e.concat(this.getTimeTicks(this.normalizeTimeTickInterval(c),h,n,a.startOfWeek));
	else for(b=h+(b[0]-h)%c;b<=n&&b!==e[0];b+=c)e.push(b);0!==e.length&&this.trimTicks(e,a.startOnTick,a.endOnTick);return e},adjustForMinRange:function(){var a=this.options,c=this.min,e=this.max,h,n=this.dataMax-this.dataMin>=this.minRange,m,v,d,f,p,y;this.isXAxis&&void 0===this.minRange&&!this.isLog&&(l(a.min)||l(a.max)?this.minRange=null:(b(this.series,function(a){f=a.xData;for(v=p=a.xIncrement?1:f.length-1;0<v;v--)if(d=f[v]-f[v-1],void 0===m||d<m)m=d}),this.minRange=Math.min(5*m,this.dataMax-this.dataMin)));
	e-c<this.minRange&&(y=this.minRange,h=(y-e+c)/2,h=[c-h,w(a.min,c-h)],n&&(h[2]=this.isLog?this.log2lin(this.dataMin):this.dataMin),c=H(h),e=[c+y,w(a.max,c+y)],n&&(e[2]=this.isLog?this.log2lin(this.dataMax):this.dataMax),e=G(e),e-c<y&&(h[0]=e-y,h[1]=w(a.min,e-y),c=H(h)));this.min=c;this.max=e},getClosest:function(){var a;this.categories?a=1:b(this.series,function(b){var k=b.closestPointRange,c=b.visible||!b.chart.options.chart.ignoreHiddenSeries;!b.noSharedTooltip&&l(k)&&c&&(a=l(a)?Math.min(a,k):k)});
	return a},nameToX:function(a){var b=E(this.categories),k=b?this.categories:this.names,c=a.options.x,e;a.series.requireSorting=!1;l(c)||(c=!1===this.options.uniqueNames?a.series.autoIncrement():n(a.name,k));-1===c?b||(e=k.length):e=c;this.names[e]=a.name;return e},updateNames:function(){var a=this;0<this.names.length&&(this.names.length=0,this.minRange=void 0,b(this.series||[],function(k){k.xIncrement=null;if(!k.points||k.isDirtyData)k.processData(),k.generatePoints();b(k.points,function(b,c){var e;
	b.options&&(e=a.nameToX(b),e!==b.x&&(b.x=e,k.xData[c]=e))})}))},setAxisTranslation:function(a){var k=this,c=k.max-k.min,h=k.axisPointRange||0,n,m=0,d=0,f=k.linkedParent,y=!!k.categories,p=k.transA,t=k.isXAxis;if(t||y||h)n=k.getClosest(),f?(m=f.minPointOffset,d=f.pointRangePadding):b(k.series,function(a){var b=y?1:t?w(a.options.pointRange,n,0):k.axisPointRange||0;a=a.options.pointPlacement;h=Math.max(h,b);k.single||(m=Math.max(m,e(a)?0:b/2),d=Math.max(d,"on"===a?0:b))}),f=k.ordinalSlope&&n?k.ordinalSlope/
	n:1,k.minPointOffset=m*=f,k.pointRangePadding=d*=f,k.pointRange=Math.min(h,c),t&&(k.closestPointRange=n);a&&(k.oldTransA=p);k.translationSlope=k.transA=p=k.len/(c+d||1);k.transB=k.horiz?k.left:k.bottom;k.minPixelPadding=p*m},minFromRange:function(){return this.max-this.range},setTickInterval:function(k){var c=this,e=c.chart,h=c.options,n=c.isLog,d=c.log2lin,v=c.isDatetimeAxis,y=c.isXAxis,p=c.isLinked,t=h.maxPadding,x=h.minPadding,g=h.tickInterval,E=h.tickPixelInterval,q=c.categories,J=c.threshold,
	K=c.softThreshold,I,r,u,A;v||q||p||this.getTickAmount();u=w(c.userMin,h.min);A=w(c.userMax,h.max);p?(c.linkedParent=e[c.coll][h.linkedTo],e=c.linkedParent.getExtremes(),c.min=w(e.min,e.dataMin),c.max=w(e.max,e.dataMax),h.type!==c.linkedParent.options.type&&a.error(11,1)):(!K&&l(J)&&(c.dataMin>=J?(I=J,x=0):c.dataMax<=J&&(r=J,t=0)),c.min=w(u,I,c.dataMin),c.max=w(A,r,c.dataMax));n&&(!k&&0>=Math.min(c.min,w(c.dataMin,c.min))&&a.error(10,1),c.min=f(d(c.min),15),c.max=f(d(c.max),15));c.range&&l(c.max)&&
	(c.userMin=c.min=u=Math.max(c.min,c.minFromRange()),c.userMax=A=c.max,c.range=null);C(c,"foundExtremes");c.beforePadding&&c.beforePadding();c.adjustForMinRange();!(q||c.axisPointRange||c.usePercentage||p)&&l(c.min)&&l(c.max)&&(d=c.max-c.min)&&(!l(u)&&x&&(c.min-=d*x),!l(A)&&t&&(c.max+=d*t));z(h.floor)?c.min=Math.max(c.min,h.floor):z(h.softMin)&&(c.min=Math.min(c.min,h.softMin));z(h.ceiling)?c.max=Math.min(c.max,h.ceiling):z(h.softMax)&&(c.max=Math.max(c.max,h.softMax));K&&l(c.dataMin)&&(J=J||0,!l(u)&&
	c.min<J&&c.dataMin>=J?c.min=J:!l(A)&&c.max>J&&c.dataMax<=J&&(c.max=J));c.tickInterval=c.min===c.max||void 0===c.min||void 0===c.max?1:p&&!g&&E===c.linkedParent.options.tickPixelInterval?g=c.linkedParent.tickInterval:w(g,this.tickAmount?(c.max-c.min)/Math.max(this.tickAmount-1,1):void 0,q?1:(c.max-c.min)*E/Math.max(c.len,E));y&&!k&&b(c.series,function(a){a.processData(c.min!==c.oldMin||c.max!==c.oldMax)});c.setAxisTranslation(!0);c.beforeSetTickPositions&&c.beforeSetTickPositions();c.postProcessTickInterval&&
	(c.tickInterval=c.postProcessTickInterval(c.tickInterval));c.pointRange&&!g&&(c.tickInterval=Math.max(c.pointRange,c.tickInterval));k=w(h.minTickInterval,c.isDatetimeAxis&&c.closestPointRange);!g&&c.tickInterval<k&&(c.tickInterval=k);v||n||g||(c.tickInterval=F(c.tickInterval,null,m(c.tickInterval),w(h.allowDecimals,!(.5<c.tickInterval&&5>c.tickInterval&&1E3<c.max&&9999>c.max)),!!this.tickAmount));this.tickAmount||(c.tickInterval=c.unsquish());this.setTickPositions()},setTickPositions:function(){var a=
	this.options,b,c=a.tickPositions,e=a.tickPositioner,h=a.startOnTick,n=a.endOnTick,m;this.tickmarkOffset=this.categories&&"between"===a.tickmarkPlacement&&1===this.tickInterval?.5:0;this.minorTickInterval="auto"===a.minorTickInterval&&this.tickInterval?this.tickInterval/5:a.minorTickInterval;this.tickPositions=b=c&&c.slice();!b&&(b=this.isDatetimeAxis?this.getTimeTicks(this.normalizeTimeTickInterval(this.tickInterval,a.units),this.min,this.max,a.startOfWeek,this.ordinalPositions,this.closestPointRange,
	!0):this.isLog?this.getLogTickPositions(this.tickInterval,this.min,this.max):this.getLinearTickPositions(this.tickInterval,this.min,this.max),b.length>this.len&&(b=[b[0],b.pop()]),this.tickPositions=b,e&&(e=e.apply(this,[this.min,this.max])))&&(this.tickPositions=b=e);this.trimTicks(b,h,n);this.isLinked||(this.min===this.max&&l(this.min)&&!this.tickAmount&&(m=!0,this.min-=.5,this.max+=.5),this.single=m,c||e||this.adjustTickAmount())},trimTicks:function(a,b,c){var k=a[0],e=a[a.length-1],h=this.minPointOffset||
	0;if(!this.isLinked){if(b)this.min=k;else for(;this.min-h>a[0];)a.shift();if(c)this.max=e;else for(;this.max+h<a[a.length-1];)a.pop();0===a.length&&l(k)&&a.push((e+k)/2)}},alignToOthers:function(){var a={},c,e=this.options;!1===this.chart.options.chart.alignTicks||!1===e.alignTicks||this.isLog||b(this.chart[this.coll],function(b){var k=b.options,k=[b.horiz?k.left:k.top,k.width,k.height,k.pane].join();b.series.length&&(a[k]?c=!0:a[k]=1)});return c},getTickAmount:function(){var a=this.options,b=a.tickAmount,
	c=a.tickPixelInterval;!l(a.tickInterval)&&this.len<c&&!this.isRadial&&!this.isLog&&a.startOnTick&&a.endOnTick&&(b=2);!b&&this.alignToOthers()&&(b=Math.ceil(this.len/c)+1);4>b&&(this.finalTickAmt=b,b=5);this.tickAmount=b},adjustTickAmount:function(){var a=this.tickInterval,b=this.tickPositions,c=this.tickAmount,e=this.finalTickAmt,h=b&&b.length;if(h<c){for(;b.length<c;)b.push(f(b[b.length-1]+a));this.transA*=(h-1)/(c-1);this.max=b[b.length-1]}else h>c&&(this.tickInterval*=2,this.setTickPositions());
	if(l(e)){for(a=c=b.length;a--;)(3===e&&1===a%2||2>=e&&0<a&&a<c-1)&&b.splice(a,1);this.finalTickAmt=void 0}},setScale:function(){var a,c;this.oldMin=this.min;this.oldMax=this.max;this.oldAxisLength=this.len;this.setAxisSize();c=this.len!==this.oldAxisLength;b(this.series,function(b){if(b.isDirtyData||b.isDirty||b.xAxis.isDirty)a=!0});c||a||this.isLinked||this.forceRedraw||this.userMin!==this.oldUserMin||this.userMax!==this.oldUserMax||this.alignToOthers()?(this.resetStacks&&this.resetStacks(),this.forceRedraw=
	!1,this.getSeriesExtremes(),this.setTickInterval(),this.oldUserMin=this.userMin,this.oldUserMax=this.userMax,this.isDirty||(this.isDirty=c||this.min!==this.oldMin||this.max!==this.oldMax)):this.cleanStacks&&this.cleanStacks()},setExtremes:function(a,c,e,h,n){var k=this,m=k.chart;e=w(e,!0);b(k.series,function(a){delete a.kdTree});n=p(n,{min:a,max:c});C(k,"setExtremes",n,function(){k.userMin=a;k.userMax=c;k.eventArgs=n;e&&m.redraw(h)})},zoom:function(a,b){var c=this.dataMin,k=this.dataMax,e=this.options,
	h=Math.min(c,w(e.min,c)),e=Math.max(k,w(e.max,k));if(a!==this.min||b!==this.max)this.allowZoomOutside||(l(c)&&(a<h&&(a=h),a>e&&(a=e)),l(k)&&(b<h&&(b=h),b>e&&(b=e))),this.displayBtn=void 0!==a||void 0!==b,this.setExtremes(a,b,!1,void 0,{trigger:"zoom"});return!0},setAxisSize:function(){var a=this.chart,b=this.options,c=b.offsets||[0,0,0,0],e=this.horiz,h=w(b.width,a.plotWidth-c[3]+c[1]),n=w(b.height,a.plotHeight-c[0]+c[2]),m=w(b.top,a.plotTop+c[0]),b=w(b.left,a.plotLeft+c[3]),c=/%$/;c.test(n)&&(n=
	Math.round(parseFloat(n)/100*a.plotHeight));c.test(m)&&(m=Math.round(parseFloat(m)/100*a.plotHeight+a.plotTop));this.left=b;this.top=m;this.width=h;this.height=n;this.bottom=a.chartHeight-n-m;this.right=a.chartWidth-h-b;this.len=Math.max(e?h:n,0);this.pos=e?b:m},getExtremes:function(){var a=this.isLog,b=this.lin2log;return{min:a?f(b(this.min)):this.min,max:a?f(b(this.max)):this.max,dataMin:this.dataMin,dataMax:this.dataMax,userMin:this.userMin,userMax:this.userMax}},getThreshold:function(a){var b=
	this.isLog,c=this.lin2log,k=b?c(this.min):this.min,b=b?c(this.max):this.max;null===a?a=k:k>a?a=k:b<a&&(a=b);return this.translate(a,0,1,0,1)},autoLabelAlign:function(a){a=(w(a,0)-90*this.side+720)%360;return 15<a&&165>a?"right":195<a&&345>a?"left":"center"},tickSize:function(a){var b=this.options,c=b[a+"Length"],k=w(b[a+"Width"],"tick"===a&&this.isXAxis?1:0);if(k&&c)return"inside"===b[a+"Position"]&&(c=-c),[c,k]},labelMetrics:function(){return this.chart.renderer.fontMetrics(this.options.labels.style&&
	this.options.labels.style.fontSize,this.ticks[0]&&this.ticks[0].label)},unsquish:function(){var a=this.options.labels,c=this.horiz,e=this.tickInterval,h=e,n=this.len/(((this.categories?1:0)+this.max-this.min)/e),m,d=a.rotation,f=this.labelMetrics(),p,y=Number.MAX_VALUE,t,x=function(a){a/=n||1;a=1<a?Math.ceil(a):1;return a*e};c?(t=!a.staggerLines&&!a.step&&(l(d)?[d]:n<w(a.autoRotationLimit,80)&&a.autoRotation))&&b(t,function(a){var b;if(a===d||a&&-90<=a&&90>=a)p=x(Math.abs(f.h/Math.sin(q*a))),b=p+
	Math.abs(a/360),b<y&&(y=b,m=a,h=p)}):a.step||(h=x(f.h));this.autoRotation=t;this.labelRotation=w(m,d);return h},getSlotWidth:function(){var a=this.chart,b=this.horiz,c=this.options.labels,e=Math.max(this.tickPositions.length-(this.categories?0:1),1),h=a.margin[3];return b&&2>(c.step||0)&&!c.rotation&&(this.staggerLines||1)*this.len/e||!b&&(h&&h-a.spacing[3]||.33*a.chartWidth)},renderUnsquish:function(){var a=this.chart,c=a.renderer,h=this.tickPositions,n=this.ticks,m=this.options.labels,d=this.horiz,
	v=this.getSlotWidth(),f=Math.max(1,Math.round(v-2*(m.padding||5))),p={},y=this.labelMetrics(),t=m.style&&m.style.textOverflow,g,z=0,E,w;e(m.rotation)||(p.rotation=m.rotation||0);b(h,function(a){(a=n[a])&&a.labelLength>z&&(z=a.labelLength)});this.maxLabelLength=z;if(this.autoRotation)z>f&&z>y.h?p.rotation=this.labelRotation:this.labelRotation=0;else if(v&&(g={width:f+"px"},!t))for(g.textOverflow="clip",E=h.length;!d&&E--;)if(w=h[E],f=n[w].label)f.styles&&"ellipsis"===f.styles.textOverflow?f.css({textOverflow:"clip"}):
	n[w].labelLength>v&&f.css({width:v+"px"}),f.getBBox().height>this.len/h.length-(y.h-y.f)&&(f.specCss={textOverflow:"ellipsis"});p.rotation&&(g={width:(z>.5*a.chartHeight?.33*a.chartHeight:a.chartHeight)+"px"},t||(g.textOverflow="ellipsis"));if(this.labelAlign=m.align||this.autoLabelAlign(this.labelRotation))p.align=this.labelAlign;b(h,function(a){var b=(a=n[a])&&a.label;b&&(b.attr(p),g&&b.css(x(g,b.specCss)),delete b.specCss,a.rotation=p.rotation)});this.tickRotCorr=c.rotCorr(y.b,this.labelRotation||
	0,0!==this.side)},hasData:function(){return this.hasVisibleSeries||l(this.min)&&l(this.max)&&!!this.tickPositions},addTitle:function(a){var b=this.chart.renderer,c=this.horiz,k=this.opposite,e=this.options.title,h;this.axisTitle||((h=e.textAlign)||(h=(c?{low:"left",middle:"center",high:"right"}:{low:k?"right":"left",middle:"center",high:k?"left":"right"})[e.align]),this.axisTitle=b.text(e.text,0,0,e.useHTML).attr({zIndex:7,rotation:e.rotation||0,align:h}).addClass("highcharts-axis-title").css(e.style).add(this.axisGroup),
	this.axisTitle.isNew=!0);this.axisTitle[a?"show":"hide"](!0)},generateTick:function(a){var b=this.ticks;b[a]?b[a].addLabel():b[a]=new I(this,a)},getOffset:function(){var a=this,c=a.chart,e=c.renderer,h=a.options,n=a.tickPositions,m=a.ticks,d=a.horiz,f=a.side,p=c.inverted?[1,0,3,2][f]:f,y,t,x=0,g,z=0,E=h.title,q=h.labels,F=0,J=c.axisOffset,c=c.clipOffset,K=[-1,1,1,-1][f],C,I=h.className,r=a.axisParent,u=this.tickSize("tick");y=a.hasData();a.showAxis=t=y||w(h.showEmpty,!0);a.staggerLines=a.horiz&&q.staggerLines;
	a.axisGroup||(a.gridGroup=e.g("grid").attr({zIndex:h.gridZIndex||1}).addClass("highcharts-"+this.coll.toLowerCase()+"-grid "+(I||"")).add(r),a.axisGroup=e.g("axis").attr({zIndex:h.zIndex||2}).addClass("highcharts-"+this.coll.toLowerCase()+" "+(I||"")).add(r),a.labelGroup=e.g("axis-labels").attr({zIndex:q.zIndex||7}).addClass("highcharts-"+a.coll.toLowerCase()+"-labels "+(I||"")).add(r));if(y||a.isLinked)b(n,function(b,c){a.generateTick(b,c)}),a.renderUnsquish(),!1===q.reserveSpace||0!==f&&2!==f&&
	{1:"left",3:"right"}[f]!==a.labelAlign&&"center"!==a.labelAlign||b(n,function(a){F=Math.max(m[a].getLabelSize(),F)}),a.staggerLines&&(F*=a.staggerLines,a.labelOffset=F*(a.opposite?-1:1));else for(C in m)m[C].destroy(),delete m[C];E&&E.text&&!1!==E.enabled&&(a.addTitle(t),t&&(x=a.axisTitle.getBBox()[d?"height":"width"],g=E.offset,z=l(g)?0:w(E.margin,d?5:10)));a.renderLine();a.offset=K*w(h.offset,J[f]);a.tickRotCorr=a.tickRotCorr||{x:0,y:0};e=0===f?-a.labelMetrics().h:2===f?a.tickRotCorr.y:0;z=Math.abs(F)+
	z;F&&(z=z-e+K*(d?w(q.y,a.tickRotCorr.y+8*K):q.x));a.axisTitleMargin=w(g,z);J[f]=Math.max(J[f],a.axisTitleMargin+x+K*a.offset,z,y&&n.length&&u?u[0]:0);h=h.offset?0:2*Math.floor(a.axisLine.strokeWidth()/2);c[p]=Math.max(c[p],h)},getLinePath:function(a){var b=this.chart,c=this.opposite,k=this.offset,e=this.horiz,h=this.left+(c?this.width:0)+k,k=b.chartHeight-this.bottom-(c?this.height:0)+k;c&&(a*=-1);return b.renderer.crispLine(["M",e?this.left:h,e?k:this.top,"L",e?b.chartWidth-this.right:h,e?k:b.chartHeight-
	this.bottom],a)},renderLine:function(){this.axisLine||(this.axisLine=this.chart.renderer.path().addClass("highcharts-axis-line").add(this.axisGroup),this.axisLine.attr({stroke:this.options.lineColor,"stroke-width":this.options.lineWidth,zIndex:7}))},getTitlePosition:function(){var a=this.horiz,b=this.left,c=this.top,e=this.len,h=this.options.title,n=a?b:c,m=this.opposite,d=this.offset,f=h.x||0,p=h.y||0,y=this.chart.renderer.fontMetrics(h.style&&h.style.fontSize,this.axisTitle).f,e={low:n+(a?0:e),
	middle:n+e/2,high:n+(a?e:0)}[h.align],b=(a?c+this.height:b)+(a?1:-1)*(m?-1:1)*this.axisTitleMargin+(2===this.side?y:0);return{x:a?e+f:b+(m?this.width:0)+d+f,y:a?b+p-(m?this.height:0)+d:e+p}},renderMinorTick:function(a){var b=this.chart.hasRendered&&z(this.oldMin),c=this.minorTicks;c[a]||(c[a]=new I(this,a,"minor"));b&&c[a].isNew&&c[a].render(null,!0);c[a].render(null,!1,1)},renderTick:function(a,b){var c=this.isLinked,e=this.ticks,k=this.chart.hasRendered&&z(this.oldMin);if(!c||a>=this.min&&a<=this.max)e[a]||
	(e[a]=new I(this,a)),k&&e[a].isNew&&e[a].render(b,!0,.1),e[a].render(b)},render:function(){var a=this,c=a.chart,e=a.options,n=a.isLog,m=a.lin2log,d=a.isLinked,v=a.tickPositions,f=a.axisTitle,p=a.ticks,y=a.minorTicks,t=a.alternateBands,x=e.stackLabels,z=e.alternateGridColor,g=a.tickmarkOffset,E=a.axisLine,w=a.showAxis,l=A(c.renderer.globalAnimation),q,F;a.labelEdge.length=0;a.overlap=!1;b([p,y,t],function(a){for(var b in a)a[b].isActive=!1});if(a.hasData()||d)a.minorTickInterval&&!a.categories&&b(a.getMinorTickPositions(),
	function(b){a.renderMinorTick(b)}),v.length&&(b(v,function(b,c){a.renderTick(b,c)}),g&&(0===a.min||a.single)&&(p[-1]||(p[-1]=new I(a,-1,null,!0)),p[-1].render(-1))),z&&b(v,function(b,e){F=void 0!==v[e+1]?v[e+1]+g:a.max-g;0===e%2&&b<a.max&&F<=a.max+(c.polar?-g:g)&&(t[b]||(t[b]=new h(a)),q=b+g,t[b].options={from:n?m(q):q,to:n?m(F):F,color:z},t[b].render(),t[b].isActive=!0)}),a._addedPlotLB||(b((e.plotLines||[]).concat(e.plotBands||[]),function(b){a.addPlotBandOrLine(b)}),a._addedPlotLB=!0);b([p,y,t],
	function(a){var b,e,h=[],k=l.duration;for(b in a)a[b].isActive||(a[b].render(b,!1,0),a[b].isActive=!1,h.push(b));K(function(){for(e=h.length;e--;)a[h[e]]&&!a[h[e]].isActive&&(a[h[e]].destroy(),delete a[h[e]])},a!==t&&c.hasRendered&&k?k:0)});E&&(E[E.isPlaced?"animate":"attr"]({d:this.getLinePath(E.strokeWidth())}),E.isPlaced=!0,E[w?"show":"hide"](!0));f&&w&&(f[f.isNew?"attr":"animate"](a.getTitlePosition()),f.isNew=!1);x&&x.enabled&&a.renderStackTotals();a.isDirty=!1},redraw:function(){this.visible&&
	(this.render(),b(this.plotLinesAndBands,function(a){a.render()}));b(this.series,function(a){a.isDirty=!0})},keepProps:"extKey hcEvents names series userMax userMin".split(" "),destroy:function(a){var c=this,e=c.stacks,h,k=c.plotLinesAndBands,m;a||y(c);for(h in e)d(e[h]),e[h]=null;b([c.ticks,c.minorTicks,c.alternateBands],function(a){d(a)});if(k)for(a=k.length;a--;)k[a].destroy();b("stackTotalGroup axisLine axisTitle axisGroup gridGroup labelGroup cross".split(" "),function(a){c[a]&&(c[a]=c[a].destroy())});
	for(m in c)c.hasOwnProperty(m)&&-1===n(m,c.keepProps)&&delete c[m]},drawCrosshair:function(a,b){var c,e=this.crosshair,h=w(e.snap,!0),k,n=this.cross;a||(a=this.cross&&this.cross.e);this.crosshair&&!1!==(l(b)||!h)?(h?l(b)&&(k=this.isXAxis?b.plotX:this.len-b.plotY):k=a&&(this.horiz?a.chartX-this.pos:this.len-a.chartY+this.pos),l(k)&&(c=this.getPlotLinePath(b&&(this.isXAxis?b.x:w(b.stackY,b.y)),null,null,null,k)||null),l(c)?(b=this.categories&&!this.isRadial,n||(this.cross=n=this.chart.renderer.path().addClass("highcharts-crosshair highcharts-crosshair-"+
	(b?"category ":"thin ")+e.className).attr({zIndex:w(e.zIndex,2)}).add(),n.attr({stroke:e.color||(b?g("#ccd6eb").setOpacity(.25).get():"#cccccc"),"stroke-width":w(e.width,1)}),e.dashStyle&&n.attr({dashstyle:e.dashStyle})),n.show().attr({d:c}),b&&!e.width&&n.attr({"stroke-width":this.transA}),this.cross.e=a):this.hideCrosshair()):this.hideCrosshair()},hideCrosshair:function(){this.cross&&this.cross.hide()}};p(a.Axis.prototype,r)})(L);(function(a){var B=a.Axis,A=a.Date,H=a.dateFormat,G=a.defaultOptions,
	r=a.defined,g=a.each,f=a.extend,u=a.getMagnitude,l=a.getTZOffset,q=a.normalizeTickInterval,d=a.pick,b=a.timeUnits;B.prototype.getTimeTicks=function(a,q,t,m){var c=[],n={},p=G.global.useUTC,z,e=new A(q-l(q)),x=A.hcMakeTime,F=a.unitRange,w=a.count,h;if(r(q)){e[A.hcSetMilliseconds](F>=b.second?0:w*Math.floor(e.getMilliseconds()/w));if(F>=b.second)e[A.hcSetSeconds](F>=b.minute?0:w*Math.floor(e.getSeconds()/w));if(F>=b.minute)e[A.hcSetMinutes](F>=b.hour?0:w*Math.floor(e[A.hcGetMinutes]()/w));if(F>=b.hour)e[A.hcSetHours](F>=
	b.day?0:w*Math.floor(e[A.hcGetHours]()/w));if(F>=b.day)e[A.hcSetDate](F>=b.month?1:w*Math.floor(e[A.hcGetDate]()/w));F>=b.month&&(e[A.hcSetMonth](F>=b.year?0:w*Math.floor(e[A.hcGetMonth]()/w)),z=e[A.hcGetFullYear]());if(F>=b.year)e[A.hcSetFullYear](z-z%w);if(F===b.week)e[A.hcSetDate](e[A.hcGetDate]()-e[A.hcGetDay]()+d(m,1));z=e[A.hcGetFullYear]();m=e[A.hcGetMonth]();var y=e[A.hcGetDate](),J=e[A.hcGetHours]();if(A.hcTimezoneOffset||A.hcGetTimezoneOffset)h=(!p||!!A.hcGetTimezoneOffset)&&(t-q>4*b.month||
	l(q)!==l(t)),e=e.getTime(),e=new A(e+l(e));p=e.getTime();for(q=1;p<t;)c.push(p),p=F===b.year?x(z+q*w,0):F===b.month?x(z,m+q*w):!h||F!==b.day&&F!==b.week?h&&F===b.hour?x(z,m,y,J+q*w):p+F*w:x(z,m,y+q*w*(F===b.day?1:7)),q++;c.push(p);F<=b.hour&&1E4>c.length&&g(c,function(a){0===a%18E5&&"000000000"===H("%H%M%S%L",a)&&(n[a]="day")})}c.info=f(a,{higherRanks:n,totalRange:F*w});return c};B.prototype.normalizeTimeTickInterval=function(a,d){var f=d||[["millisecond",[1,2,5,10,20,25,50,100,200,500]],["second",
	[1,2,5,10,15,30]],["minute",[1,2,5,10,15,30]],["hour",[1,2,3,4,6,8,12]],["day",[1,2]],["week",[1,2]],["month",[1,2,3,4,6]],["year",null]];d=f[f.length-1];var m=b[d[0]],c=d[1],n;for(n=0;n<f.length&&!(d=f[n],m=b[d[0]],c=d[1],f[n+1]&&a<=(m*c[c.length-1]+b[f[n+1][0]])/2);n++);m===b.year&&a<5*m&&(c=[1,2,5]);a=q(a/m,c,"year"===d[0]?Math.max(u(a/m),1):1);return{unitRange:m,count:a,unitName:d[0]}}})(L);(function(a){var B=a.Axis,A=a.getMagnitude,H=a.map,G=a.normalizeTickInterval,r=a.pick;B.prototype.getLogTickPositions=
	function(a,f,u,l){var g=this.options,d=this.len,b=this.lin2log,p=this.log2lin,C=[];l||(this._minorAutoInterval=null);if(.5<=a)a=Math.round(a),C=this.getLinearTickPositions(a,f,u);else if(.08<=a)for(var d=Math.floor(f),t,m,c,n,E,g=.3<a?[1,2,4]:.15<a?[1,2,4,6,8]:[1,2,3,4,5,6,7,8,9];d<u+1&&!E;d++)for(m=g.length,t=0;t<m&&!E;t++)c=p(b(d)*g[t]),c>f&&(!l||n<=u)&&void 0!==n&&C.push(n),n>u&&(E=!0),n=c;else f=b(f),u=b(u),a=g[l?"minorTickInterval":"tickInterval"],a=r("auto"===a?null:a,this._minorAutoInterval,
	g.tickPixelInterval/(l?5:1)*(u-f)/((l?d/this.tickPositions.length:d)||1)),a=G(a,null,A(a)),C=H(this.getLinearTickPositions(a,f,u),p),l||(this._minorAutoInterval=a/5);l||(this.tickInterval=a);return C};B.prototype.log2lin=function(a){return Math.log(a)/Math.LN10};B.prototype.lin2log=function(a){return Math.pow(10,a)}})(L);(function(a){var B=a.dateFormat,A=a.each,H=a.extend,G=a.format,r=a.isNumber,g=a.map,f=a.merge,u=a.pick,l=a.splat,q=a.syncTimeout,d=a.timeUnits;a.Tooltip=function(){this.init.apply(this,
	arguments)};a.Tooltip.prototype={init:function(a,d){this.chart=a;this.options=d;this.crosshairs=[];this.now={x:0,y:0};this.isHidden=!0;this.split=d.split&&!a.inverted;this.shared=d.shared||this.split},cleanSplit:function(a){A(this.chart.series,function(b){var d=b&&b.tt;d&&(!d.isActive||a?b.tt=d.destroy():d.isActive=!1)})},getLabel:function(){var a=this.chart.renderer,d=this.options;this.label||(this.split?this.label=a.g("tooltip"):(this.label=a.label("",0,0,d.shape||"callout",null,null,d.useHTML,
	null,"tooltip").attr({padding:d.padding,r:d.borderRadius}),this.label.attr({fill:d.backgroundColor,"stroke-width":d.borderWidth}).css(d.style).shadow(d.shadow)),this.label.attr({zIndex:8}).add());return this.label},update:function(a){this.destroy();this.init(this.chart,f(!0,this.options,a))},destroy:function(){this.label&&(this.label=this.label.destroy());this.split&&this.tt&&(this.cleanSplit(this.chart,!0),this.tt=this.tt.destroy());clearTimeout(this.hideTimer);clearTimeout(this.tooltipTimeout)},
	move:function(a,d,f,t){var b=this,c=b.now,n=!1!==b.options.animation&&!b.isHidden&&(1<Math.abs(a-c.x)||1<Math.abs(d-c.y)),p=b.followPointer||1<b.len;H(c,{x:n?(2*c.x+a)/3:a,y:n?(c.y+d)/2:d,anchorX:p?void 0:n?(2*c.anchorX+f)/3:f,anchorY:p?void 0:n?(c.anchorY+t)/2:t});b.getLabel().attr(c);n&&(clearTimeout(this.tooltipTimeout),this.tooltipTimeout=setTimeout(function(){b&&b.move(a,d,f,t)},32))},hide:function(a){var b=this;clearTimeout(this.hideTimer);a=u(a,this.options.hideDelay,500);this.isHidden||(this.hideTimer=
	q(function(){b.getLabel()[a?"fadeOut":"hide"]();b.isHidden=!0},a))},getAnchor:function(a,d){var b,f=this.chart,m=f.inverted,c=f.plotTop,n=f.plotLeft,p=0,z=0,e,x;a=l(a);b=a[0].tooltipPos;this.followPointer&&d&&(void 0===d.chartX&&(d=f.pointer.normalize(d)),b=[d.chartX-f.plotLeft,d.chartY-c]);b||(A(a,function(a){e=a.series.yAxis;x=a.series.xAxis;p+=a.plotX+(!m&&x?x.left-n:0);z+=(a.plotLow?(a.plotLow+a.plotHigh)/2:a.plotY)+(!m&&e?e.top-c:0)}),p/=a.length,z/=a.length,b=[m?f.plotWidth-z:p,this.shared&&
	!m&&1<a.length&&d?d.chartY-c:m?f.plotHeight-p:z]);return g(b,Math.round)},getPosition:function(a,d,f){var b=this.chart,m=this.distance,c={},n=f.h||0,p,z=["y",b.chartHeight,d,f.plotY+b.plotTop,b.plotTop,b.plotTop+b.plotHeight],e=["x",b.chartWidth,a,f.plotX+b.plotLeft,b.plotLeft,b.plotLeft+b.plotWidth],x=!this.followPointer&&u(f.ttBelow,!b.inverted===!!f.negative),g=function(a,b,e,h,d,f){var k=e<h-m,y=h+m+e<b,p=h-m-e;h+=m;if(x&&y)c[a]=h;else if(!x&&k)c[a]=p;else if(k)c[a]=Math.min(f-e,0>p-n?p:p-n);
	else if(y)c[a]=Math.max(d,h+n+e>b?h:h+n);else return!1},w=function(a,b,e,h){var k;h<m||h>b-m?k=!1:c[a]=h<e/2?1:h>b-e/2?b-e-2:h-e/2;return k},h=function(a){var b=z;z=e;e=b;p=a},y=function(){!1!==g.apply(0,z)?!1!==w.apply(0,e)||p||(h(!0),y()):p?c.x=c.y=0:(h(!0),y())};(b.inverted||1<this.len)&&h();y();return c},defaultFormatter:function(a){var b=this.points||l(this),d;d=[a.tooltipFooterHeaderFormatter(b[0])];d=d.concat(a.bodyFormatter(b));d.push(a.tooltipFooterHeaderFormatter(b[0],!0));return d},refresh:function(a,
	d){var b=this.chart,f,m=this.options,c,n,p={},z=[];f=m.formatter||this.defaultFormatter;var p=b.hoverPoints,e=this.shared;clearTimeout(this.hideTimer);this.followPointer=l(a)[0].series.tooltipOptions.followPointer;n=this.getAnchor(a,d);d=n[0];c=n[1];!e||a.series&&a.series.noSharedTooltip?p=a.getLabelConfig():(b.hoverPoints=a,p&&A(p,function(a){a.setState()}),A(a,function(a){a.setState("hover");z.push(a.getLabelConfig())}),p={x:a[0].category,y:a[0].y},p.points=z,a=a[0]);this.len=z.length;p=f.call(p,
	this);e=a.series;this.distance=u(e.tooltipOptions.distance,16);!1===p?this.hide():(f=this.getLabel(),this.isHidden&&f.attr({opacity:1}).show(),this.split?this.renderSplit(p,b.hoverPoints):(f.attr({text:p&&p.join?p.join(""):p}),f.removeClass(/highcharts-color-[\d]+/g).addClass("highcharts-color-"+u(a.colorIndex,e.colorIndex)),f.attr({stroke:m.borderColor||a.color||e.color||"#666666"}),this.updatePosition({plotX:d,plotY:c,negative:a.negative,ttBelow:a.ttBelow,h:n[2]||0})),this.isHidden=!1)},renderSplit:function(b,
	d){var f=this,p=[],m=this.chart,c=m.renderer,n=!0,g=this.options,z,e=this.getLabel();A(b.slice(0,d.length+1),function(a,b){b=d[b-1]||{isHeader:!0,plotX:d[0].plotX};var x=b.series||f,h=x.tt,y=b.series||{},t="highcharts-color-"+u(b.colorIndex,y.colorIndex,"none");h||(x.tt=h=c.label(null,null,null,"callout").addClass("highcharts-tooltip-box "+t).attr({padding:g.padding,r:g.borderRadius,fill:g.backgroundColor,stroke:b.color||y.color||"#333333","stroke-width":g.borderWidth}).add(e));h.isActive=!0;h.attr({text:a});
	h.css(g.style);a=h.getBBox();y=a.width+h.strokeWidth();b.isHeader?(z=a.height,y=Math.max(0,Math.min(b.plotX+m.plotLeft-y/2,m.chartWidth-y))):y=b.plotX+m.plotLeft-u(g.distance,16)-y;0>y&&(n=!1);a=(b.series&&b.series.yAxis&&b.series.yAxis.pos)+(b.plotY||0);a-=m.plotTop;p.push({target:b.isHeader?m.plotHeight+z:a,rank:b.isHeader?1:0,size:x.tt.getBBox().height+1,point:b,x:y,tt:h})});this.cleanSplit();a.distribute(p,m.plotHeight+z);A(p,function(a){var b=a.point,c=b.series;a.tt.attr({visibility:void 0===
	a.pos?"hidden":"inherit",x:n||b.isHeader?a.x:b.plotX+m.plotLeft+u(g.distance,16),y:a.pos+m.plotTop,anchorX:b.isHeader?b.plotX+m.plotLeft:b.plotX+c.xAxis.pos,anchorY:b.isHeader?a.pos+m.plotTop-15:b.plotY+c.yAxis.pos})})},updatePosition:function(a){var b=this.chart,d=this.getLabel(),d=(this.options.positioner||this.getPosition).call(this,d.width,d.height,a);this.move(Math.round(d.x),Math.round(d.y||0),a.plotX+b.plotLeft,a.plotY+b.plotTop)},getDateFormat:function(a,f,g,t){var b=B("%m-%d %H:%M:%S.%L",
	f),c,n,p={millisecond:15,second:12,minute:9,hour:6,day:3},z="millisecond";for(n in d){if(a===d.week&&+B("%w",f)===g&&"00:00:00.000"===b.substr(6)){n="week";break}if(d[n]>a){n=z;break}if(p[n]&&b.substr(p[n])!=="01-01 00:00:00.000".substr(p[n]))break;"week"!==n&&(z=n)}n&&(c=t[n]);return c},getXDateFormat:function(a,d,f){d=d.dateTimeLabelFormats;var b=f&&f.closestPointRange;return(b?this.getDateFormat(b,a.x,f.options.startOfWeek,d):d.day)||d.year},tooltipFooterHeaderFormatter:function(a,d){var b=d?"footer":
	"header";d=a.series;var f=d.tooltipOptions,m=f.xDateFormat,c=d.xAxis,n=c&&"datetime"===c.options.type&&r(a.key),b=f[b+"Format"];n&&!m&&(m=this.getXDateFormat(a,f,c));n&&m&&(b=b.replace("{point.key}","{point.key:"+m+"}"));return G(b,{point:a,series:d})},bodyFormatter:function(a){return g(a,function(a){var b=a.series.tooltipOptions;return(b.pointFormatter||a.point.tooltipFormatter).call(a.point,b.pointFormat)})}}})(L);(function(a){var B=a.addEvent,A=a.attr,H=a.charts,G=a.color,r=a.css,g=a.defined,f=
	a.doc,u=a.each,l=a.extend,q=a.fireEvent,d=a.offset,b=a.pick,p=a.removeEvent,C=a.splat,t=a.Tooltip,m=a.win;a.Pointer=function(a,b){this.init(a,b)};a.Pointer.prototype={init:function(a,d){this.options=d;this.chart=a;this.runChartClick=d.chart.events&&!!d.chart.events.click;this.pinchDown=[];this.lastValidTouch={};t&&d.tooltip.enabled&&(a.tooltip=new t(a,d.tooltip),this.followTouchMove=b(d.tooltip.followTouchMove,!0));this.setDOMEvents()},zoomOption:function(a){var c=this.chart,d=c.options.chart,m=d.zoomType||
	"",c=c.inverted;/touch/.test(a.type)&&(m=b(d.pinchType,m));this.zoomX=a=/x/.test(m);this.zoomY=m=/y/.test(m);this.zoomHor=a&&!c||m&&c;this.zoomVert=m&&!c||a&&c;this.hasZoom=a||m},normalize:function(a,b){var c,n;a=a||m.event;a.target||(a.target=a.srcElement);n=a.touches?a.touches.length?a.touches.item(0):a.changedTouches[0]:a;b||(this.chartPosition=b=d(this.chart.container));void 0===n.pageX?(c=Math.max(a.x,a.clientX-b.left),b=a.y):(c=n.pageX-b.left,b=n.pageY-b.top);return l(a,{chartX:Math.round(c),
	chartY:Math.round(b)})},getCoordinates:function(a){var b={xAxis:[],yAxis:[]};u(this.chart.axes,function(c){b[c.isXAxis?"xAxis":"yAxis"].push({axis:c,value:c.toValue(a[c.horiz?"chartX":"chartY"])})});return b},runPointActions:function(c){var d=this.chart,m=d.series,p=d.tooltip,e=p?p.shared:!1,g=!0,t=d.hoverPoint,w=d.hoverSeries,h,y,l,q=[],r;if(!e&&!w)for(h=0;h<m.length;h++)if(m[h].directTouch||!m[h].options.stickyTracking)m=[];w&&(e?w.noSharedTooltip:w.directTouch)&&t?q=[t]:(e||!w||w.options.stickyTracking||
	(m=[w]),u(m,function(a){y=a.noSharedTooltip&&e;l=!e&&a.directTouch;a.visible&&!y&&!l&&b(a.options.enableMouseTracking,!0)&&(r=a.searchPoint(c,!y&&1===a.kdDimensions))&&r.series&&q.push(r)}),q.sort(function(a,b){var c=a.distX-b.distX,h=a.dist-b.dist,k=(b.series.group&&b.series.group.zIndex)-(a.series.group&&a.series.group.zIndex);return 0!==c&&e?c:0!==h?h:0!==k?k:a.series.index>b.series.index?-1:1}));if(e)for(h=q.length;h--;)(q[h].x!==q[0].x||q[h].series.noSharedTooltip)&&q.splice(h,1);if(q[0]&&(q[0]!==
	this.prevKDPoint||p&&p.isHidden)){if(e&&!q[0].series.noSharedTooltip){for(h=0;h<q.length;h++)q[h].onMouseOver(c,q[h]!==(w&&w.directTouch&&t||q[0]));q.length&&p&&p.refresh(q.sort(function(a,b){return a.series.index-b.series.index}),c)}else if(p&&p.refresh(q[0],c),!w||!w.directTouch)q[0].onMouseOver(c);this.prevKDPoint=q[0];g=!1}g&&(m=w&&w.tooltipOptions.followPointer,p&&m&&!p.isHidden&&(m=p.getAnchor([{}],c),p.updatePosition({plotX:m[0],plotY:m[1]})));this.unDocMouseMove||(this.unDocMouseMove=B(f,
	"mousemove",function(b){if(H[a.hoverChartIndex])H[a.hoverChartIndex].pointer.onDocumentMouseMove(b)}));u(e?q:[b(t,q[0])],function(a){u(d.axes,function(b){(!a||a.series&&a.series[b.coll]===b)&&b.drawCrosshair(c,a)})})},reset:function(a,b){var c=this.chart,d=c.hoverSeries,e=c.hoverPoint,n=c.hoverPoints,m=c.tooltip,f=m&&m.shared?n:e;a&&f&&u(C(f),function(b){b.series.isCartesian&&void 0===b.plotX&&(a=!1)});if(a)m&&f&&(m.refresh(f),e&&(e.setState(e.state,!0),u(c.axes,function(a){a.crosshair&&a.drawCrosshair(null,
	e)})));else{if(e)e.onMouseOut();n&&u(n,function(a){a.setState()});if(d)d.onMouseOut();m&&m.hide(b);this.unDocMouseMove&&(this.unDocMouseMove=this.unDocMouseMove());u(c.axes,function(a){a.hideCrosshair()});this.hoverX=this.prevKDPoint=c.hoverPoints=c.hoverPoint=null}},scaleGroups:function(a,b){var c=this.chart,d;u(c.series,function(e){d=a||e.getPlotBox();e.xAxis&&e.xAxis.zoomEnabled&&e.group&&(e.group.attr(d),e.markerGroup&&(e.markerGroup.attr(d),e.markerGroup.clip(b?c.clipRect:null)),e.dataLabelsGroup&&
	e.dataLabelsGroup.attr(d))});c.clipRect.attr(b||c.clipBox)},dragStart:function(a){var b=this.chart;b.mouseIsDown=a.type;b.cancelClick=!1;b.mouseDownX=this.mouseDownX=a.chartX;b.mouseDownY=this.mouseDownY=a.chartY},drag:function(a){var b=this.chart,c=b.options.chart,d=a.chartX,e=a.chartY,m=this.zoomHor,f=this.zoomVert,p=b.plotLeft,h=b.plotTop,y=b.plotWidth,g=b.plotHeight,t,q=this.selectionMarker,k=this.mouseDownX,l=this.mouseDownY,r=c.panKey&&a[c.panKey+"Key"];q&&q.touch||(d<p?d=p:d>p+y&&(d=p+y),e<
	h?e=h:e>h+g&&(e=h+g),this.hasDragged=Math.sqrt(Math.pow(k-d,2)+Math.pow(l-e,2)),10<this.hasDragged&&(t=b.isInsidePlot(k-p,l-h),b.hasCartesianSeries&&(this.zoomX||this.zoomY)&&t&&!r&&!q&&(this.selectionMarker=q=b.renderer.rect(p,h,m?1:y,f?1:g,0).attr({fill:c.selectionMarkerFill||G("#335cad").setOpacity(.25).get(),"class":"highcharts-selection-marker",zIndex:7}).add()),q&&m&&(d-=k,q.attr({width:Math.abs(d),x:(0<d?0:d)+k})),q&&f&&(d=e-l,q.attr({height:Math.abs(d),y:(0<d?0:d)+l})),t&&!q&&c.panning&&b.pan(a,
	c.panning)))},drop:function(a){var b=this,c=this.chart,d=this.hasPinched;if(this.selectionMarker){var e={originalEvent:a,xAxis:[],yAxis:[]},m=this.selectionMarker,f=m.attr?m.attr("x"):m.x,p=m.attr?m.attr("y"):m.y,h=m.attr?m.attr("width"):m.width,y=m.attr?m.attr("height"):m.height,t;if(this.hasDragged||d)u(c.axes,function(c){if(c.zoomEnabled&&g(c.min)&&(d||b[{xAxis:"zoomX",yAxis:"zoomY"}[c.coll]])){var m=c.horiz,k="touchend"===a.type?c.minPixelPadding:0,n=c.toValue((m?f:p)+k),m=c.toValue((m?f+h:p+
	y)-k);e[c.coll].push({axis:c,min:Math.min(n,m),max:Math.max(n,m)});t=!0}}),t&&q(c,"selection",e,function(a){c.zoom(l(a,d?{animation:!1}:null))});this.selectionMarker=this.selectionMarker.destroy();d&&this.scaleGroups()}c&&(r(c.container,{cursor:c._cursor}),c.cancelClick=10<this.hasDragged,c.mouseIsDown=this.hasDragged=this.hasPinched=!1,this.pinchDown=[])},onContainerMouseDown:function(a){a=this.normalize(a);this.zoomOption(a);a.preventDefault&&a.preventDefault();this.dragStart(a)},onDocumentMouseUp:function(b){H[a.hoverChartIndex]&&
	H[a.hoverChartIndex].pointer.drop(b)},onDocumentMouseMove:function(a){var b=this.chart,c=this.chartPosition;a=this.normalize(a,c);!c||this.inClass(a.target,"highcharts-tracker")||b.isInsidePlot(a.chartX-b.plotLeft,a.chartY-b.plotTop)||this.reset()},onContainerMouseLeave:function(b){var c=H[a.hoverChartIndex];c&&(b.relatedTarget||b.toElement)&&(c.pointer.reset(),c.pointer.chartPosition=null)},onContainerMouseMove:function(b){var c=this.chart;g(a.hoverChartIndex)&&H[a.hoverChartIndex]&&H[a.hoverChartIndex].mouseIsDown||
	(a.hoverChartIndex=c.index);b=this.normalize(b);b.returnValue=!1;"mousedown"===c.mouseIsDown&&this.drag(b);!this.inClass(b.target,"highcharts-tracker")&&!c.isInsidePlot(b.chartX-c.plotLeft,b.chartY-c.plotTop)||c.openMenu||this.runPointActions(b)},inClass:function(a,b){for(var c;a;){if(c=A(a,"class")){if(-1!==c.indexOf(b))return!0;if(-1!==c.indexOf("highcharts-container"))return!1}a=a.parentNode}},onTrackerMouseOut:function(a){var b=this.chart.hoverSeries;a=a.relatedTarget||a.toElement;if(!(!b||!a||
	b.options.stickyTracking||this.inClass(a,"highcharts-tooltip")||this.inClass(a,"highcharts-series-"+b.index)&&this.inClass(a,"highcharts-tracker")))b.onMouseOut()},onContainerClick:function(a){var b=this.chart,c=b.hoverPoint,d=b.plotLeft,e=b.plotTop;a=this.normalize(a);b.cancelClick||(c&&this.inClass(a.target,"highcharts-tracker")?(q(c.series,"click",l(a,{point:c})),b.hoverPoint&&c.firePointEvent("click",a)):(l(a,this.getCoordinates(a)),b.isInsidePlot(a.chartX-d,a.chartY-e)&&q(b,"click",a)))},setDOMEvents:function(){var b=
	this,d=b.chart.container;d.onmousedown=function(a){b.onContainerMouseDown(a)};d.onmousemove=function(a){b.onContainerMouseMove(a)};d.onclick=function(a){b.onContainerClick(a)};B(d,"mouseleave",b.onContainerMouseLeave);1===a.chartCount&&B(f,"mouseup",b.onDocumentMouseUp);a.hasTouch&&(d.ontouchstart=function(a){b.onContainerTouchStart(a)},d.ontouchmove=function(a){b.onContainerTouchMove(a)},1===a.chartCount&&B(f,"touchend",b.onDocumentTouchEnd))},destroy:function(){var b;p(this.chart.container,"mouseleave",
	this.onContainerMouseLeave);a.chartCount||(p(f,"mouseup",this.onDocumentMouseUp),p(f,"touchend",this.onDocumentTouchEnd));clearInterval(this.tooltipTimeout);for(b in this)this[b]=null}}})(L);(function(a){var B=a.charts,A=a.each,H=a.extend,G=a.map,r=a.noop,g=a.pick;H(a.Pointer.prototype,{pinchTranslate:function(a,g,l,q,d,b){this.zoomHor&&this.pinchTranslateDirection(!0,a,g,l,q,d,b);this.zoomVert&&this.pinchTranslateDirection(!1,a,g,l,q,d,b)},pinchTranslateDirection:function(a,g,l,q,d,b,p,r){var f=
	this.chart,m=a?"x":"y",c=a?"X":"Y",n="chart"+c,E=a?"width":"height",z=f["plot"+(a?"Left":"Top")],e,x,F=r||1,w=f.inverted,h=f.bounds[a?"h":"v"],y=1===g.length,J=g[0][n],u=l[0][n],I=!y&&g[1][n],k=!y&&l[1][n],D;l=function(){!y&&20<Math.abs(J-I)&&(F=r||Math.abs(u-k)/Math.abs(J-I));x=(z-u)/F+J;e=f["plot"+(a?"Width":"Height")]/F};l();g=x;g<h.min?(g=h.min,D=!0):g+e>h.max&&(g=h.max-e,D=!0);D?(u-=.8*(u-p[m][0]),y||(k-=.8*(k-p[m][1])),l()):p[m]=[u,k];w||(b[m]=x-z,b[E]=e);b=w?1/F:F;d[E]=e;d[m]=g;q[w?a?"scaleY":
	"scaleX":"scale"+c]=F;q["translate"+c]=b*z+(u-b*J)},pinch:function(a){var f=this,l=f.chart,q=f.pinchDown,d=a.touches,b=d.length,p=f.lastValidTouch,C=f.hasZoom,t=f.selectionMarker,m={},c=1===b&&(f.inClass(a.target,"highcharts-tracker")&&l.runTrackerClick||f.runChartClick),n={};1<b&&(f.initiated=!0);C&&f.initiated&&!c&&a.preventDefault();G(d,function(a){return f.normalize(a)});"touchstart"===a.type?(A(d,function(a,b){q[b]={chartX:a.chartX,chartY:a.chartY}}),p.x=[q[0].chartX,q[1]&&q[1].chartX],p.y=[q[0].chartY,
	q[1]&&q[1].chartY],A(l.axes,function(a){if(a.zoomEnabled){var b=l.bounds[a.horiz?"h":"v"],c=a.minPixelPadding,d=a.toPixels(g(a.options.min,a.dataMin)),m=a.toPixels(g(a.options.max,a.dataMax)),f=Math.max(d,m);b.min=Math.min(a.pos,Math.min(d,m)-c);b.max=Math.max(a.pos+a.len,f+c)}}),f.res=!0):f.followTouchMove&&1===b?this.runPointActions(f.normalize(a)):q.length&&(t||(f.selectionMarker=t=H({destroy:r,touch:!0},l.plotBox)),f.pinchTranslate(q,d,m,t,n,p),f.hasPinched=C,f.scaleGroups(m,n),f.res&&(f.res=
	!1,this.reset(!1,0)))},touch:function(f,r){var l=this.chart,q,d;if(l.index!==a.hoverChartIndex)this.onContainerMouseLeave({relatedTarget:!0});a.hoverChartIndex=l.index;1===f.touches.length?(f=this.normalize(f),(d=l.isInsidePlot(f.chartX-l.plotLeft,f.chartY-l.plotTop))&&!l.openMenu?(r&&this.runPointActions(f),"touchmove"===f.type&&(r=this.pinchDown,q=r[0]?4<=Math.sqrt(Math.pow(r[0].chartX-f.chartX,2)+Math.pow(r[0].chartY-f.chartY,2)):!1),g(q,!0)&&this.pinch(f)):r&&this.reset()):2===f.touches.length&&
	this.pinch(f)},onContainerTouchStart:function(a){this.zoomOption(a);this.touch(a,!0)},onContainerTouchMove:function(a){this.touch(a)},onDocumentTouchEnd:function(f){B[a.hoverChartIndex]&&B[a.hoverChartIndex].pointer.drop(f)}})})(L);(function(a){var B=a.addEvent,A=a.charts,H=a.css,G=a.doc,r=a.extend,g=a.noop,f=a.Pointer,u=a.removeEvent,l=a.win,q=a.wrap;if(l.PointerEvent||l.MSPointerEvent){var d={},b=!!l.PointerEvent,p=function(){var a,b=[];b.item=function(a){return this[a]};for(a in d)d.hasOwnProperty(a)&&
	b.push({pageX:d[a].pageX,pageY:d[a].pageY,target:d[a].target});return b},C=function(b,d,c,f){"touch"!==b.pointerType&&b.pointerType!==b.MSPOINTER_TYPE_TOUCH||!A[a.hoverChartIndex]||(f(b),f=A[a.hoverChartIndex].pointer,f[d]({type:c,target:b.currentTarget,preventDefault:g,touches:p()}))};r(f.prototype,{onContainerPointerDown:function(a){C(a,"onContainerTouchStart","touchstart",function(a){d[a.pointerId]={pageX:a.pageX,pageY:a.pageY,target:a.currentTarget}})},onContainerPointerMove:function(a){C(a,"onContainerTouchMove",
	"touchmove",function(a){d[a.pointerId]={pageX:a.pageX,pageY:a.pageY};d[a.pointerId].target||(d[a.pointerId].target=a.currentTarget)})},onDocumentPointerUp:function(a){C(a,"onDocumentTouchEnd","touchend",function(a){delete d[a.pointerId]})},batchMSEvents:function(a){a(this.chart.container,b?"pointerdown":"MSPointerDown",this.onContainerPointerDown);a(this.chart.container,b?"pointermove":"MSPointerMove",this.onContainerPointerMove);a(G,b?"pointerup":"MSPointerUp",this.onDocumentPointerUp)}});q(f.prototype,
	"init",function(a,b,c){a.call(this,b,c);this.hasZoom&&H(b.container,{"-ms-touch-action":"none","touch-action":"none"})});q(f.prototype,"setDOMEvents",function(a){a.apply(this);(this.hasZoom||this.followTouchMove)&&this.batchMSEvents(B)});q(f.prototype,"destroy",function(a){this.batchMSEvents(u);a.call(this)})}})(L);(function(a){var B,A=a.addEvent,H=a.css,G=a.discardElement,r=a.defined,g=a.each,f=a.extend,u=a.isFirefox,l=a.marginNames,q=a.merge,d=a.pick,b=a.setAnimation,p=a.stableSort,C=a.win,t=a.wrap;
	B=a.Legend=function(a,b){this.init(a,b)};B.prototype={init:function(a,b){this.chart=a;this.setOptions(b);b.enabled&&(this.render(),A(this.chart,"endResize",function(){this.legend.positionCheckboxes()}))},setOptions:function(a){var b=d(a.padding,8);this.options=a;this.itemStyle=a.itemStyle;this.itemHiddenStyle=q(this.itemStyle,a.itemHiddenStyle);this.itemMarginTop=a.itemMarginTop||0;this.initialItemX=this.padding=b;this.initialItemY=b-5;this.itemHeight=this.maxItemWidth=0;this.symbolWidth=d(a.symbolWidth,
	16);this.pages=[]},update:function(a,b){var c=this.chart;this.setOptions(q(!0,this.options,a));this.destroy();c.isDirtyLegend=c.isDirtyBox=!0;d(b,!0)&&c.redraw()},colorizeItem:function(a,b){a.legendGroup[b?"removeClass":"addClass"]("highcharts-legend-item-hidden");var c=this.options,d=a.legendItem,m=a.legendLine,e=a.legendSymbol,f=this.itemHiddenStyle.color,c=b?c.itemStyle.color:f,p=b?a.color||f:f,g=a.options&&a.options.marker,h={fill:p},y;d&&d.css({fill:c,color:c});m&&m.attr({stroke:p});if(e){if(g&&
	e.isMarker&&(h=a.pointAttribs(),!b))for(y in h)h[y]=f;e.attr(h)}},positionItem:function(a){var b=this.options,d=b.symbolPadding,b=!b.rtl,m=a._legendItemPos,f=m[0],m=m[1],e=a.checkbox;(a=a.legendGroup)&&a.element&&a.translate(b?f:this.legendWidth-f-2*d-4,m);e&&(e.x=f,e.y=m)},destroyItem:function(a){var b=a.checkbox;g(["legendItem","legendLine","legendSymbol","legendGroup"],function(b){a[b]&&(a[b]=a[b].destroy())});b&&G(a.checkbox)},destroy:function(){function a(a){this[a]&&(this[a]=this[a].destroy())}
	g(this.getAllItems(),function(b){g(["legendItem","legendGroup"],a,b)});g(["box","title","group"],a,this);this.display=null},positionCheckboxes:function(a){var b=this.group&&this.group.alignAttr,d,m=this.clipHeight||this.legendHeight,f=this.titleHeight;b&&(d=b.translateY,g(this.allItems,function(c){var e=c.checkbox,n;e&&(n=d+f+e.y+(a||0)+3,H(e,{left:b.translateX+c.checkboxOffset+e.x-20+"px",top:n+"px",display:n>d-6&&n<d+m-6?"":"none"}))}))},renderTitle:function(){var a=this.padding,b=this.options.title,
	d=0;b.text&&(this.title||(this.title=this.chart.renderer.label(b.text,a-3,a-4,null,null,null,null,null,"legend-title").attr({zIndex:1}).css(b.style).add(this.group)),a=this.title.getBBox(),d=a.height,this.offsetWidth=a.width,this.contentGroup.attr({translateY:d}));this.titleHeight=d},setText:function(b){var c=this.options;b.legendItem.attr({text:c.labelFormat?a.format(c.labelFormat,b):c.labelFormatter.call(b)})},renderItem:function(a){var b=this.chart,f=b.renderer,m=this.options,p="horizontal"===
	m.layout,e=this.symbolWidth,g=m.symbolPadding,l=this.itemStyle,t=this.itemHiddenStyle,h=this.padding,y=p?d(m.itemDistance,20):0,J=!m.rtl,r=m.width,I=m.itemMarginBottom||0,k=this.itemMarginTop,u=this.initialItemX,C=a.legendItem,N=!a.series,A=!N&&a.series.drawLegendSymbol?a.series:a,B=A.options,B=this.createCheckboxForItem&&B&&B.showCheckbox,v=m.useHTML;C||(a.legendGroup=f.g("legend-item").addClass("highcharts-"+A.type+"-series highcharts-color-"+a.colorIndex+(a.options.className?" "+a.options.className:
	"")+(N?" highcharts-series-"+a.index:"")).attr({zIndex:1}).add(this.scrollGroup),a.legendItem=C=f.text("",J?e+g:-g,this.baseline||0,v).css(q(a.visible?l:t)).attr({align:J?"left":"right",zIndex:2}).add(a.legendGroup),this.baseline||(l=l.fontSize,this.fontMetrics=f.fontMetrics(l,C),this.baseline=this.fontMetrics.f+3+k,C.attr("y",this.baseline)),this.symbolHeight=m.symbolHeight||this.fontMetrics.f,A.drawLegendSymbol(this,a),this.setItemEvents&&this.setItemEvents(a,C,v),B&&this.createCheckboxForItem(a));
	this.colorizeItem(a,a.visible);this.setText(a);f=C.getBBox();e=a.checkboxOffset=m.itemWidth||a.legendItemWidth||e+g+f.width+y+(B?20:0);this.itemHeight=g=Math.round(a.legendItemHeight||f.height);p&&this.itemX-u+e>(r||b.chartWidth-2*h-u-m.x)&&(this.itemX=u,this.itemY+=k+this.lastLineHeight+I,this.lastLineHeight=0);this.maxItemWidth=Math.max(this.maxItemWidth,e);this.lastItemY=k+this.itemY+I;this.lastLineHeight=Math.max(g,this.lastLineHeight);a._legendItemPos=[this.itemX,this.itemY];p?this.itemX+=e:
	(this.itemY+=k+g+I,this.lastLineHeight=g);this.offsetWidth=r||Math.max((p?this.itemX-u-y:e)+h,this.offsetWidth)},getAllItems:function(){var a=[];g(this.chart.series,function(b){var c=b&&b.options;b&&d(c.showInLegend,r(c.linkedTo)?!1:void 0,!0)&&(a=a.concat(b.legendItems||("point"===c.legendType?b.data:b)))});return a},adjustMargins:function(a,b){var c=this.chart,f=this.options,m=f.align.charAt(0)+f.verticalAlign.charAt(0)+f.layout.charAt(0);f.floating||g([/(lth|ct|rth)/,/(rtv|rm|rbv)/,/(rbh|cb|lbh)/,
	/(lbv|lm|ltv)/],function(e,n){e.test(m)&&!r(a[n])&&(c[l[n]]=Math.max(c[l[n]],c.legend[(n+1)%2?"legendHeight":"legendWidth"]+[1,-1,-1,1][n]*f[n%2?"x":"y"]+d(f.margin,12)+b[n]))})},render:function(){var a=this,b=a.chart,d=b.renderer,q=a.group,l,e,t,r,w=a.box,h=a.options,y=a.padding;a.itemX=a.initialItemX;a.itemY=a.initialItemY;a.offsetWidth=0;a.lastItemY=0;q||(a.group=q=d.g("legend").attr({zIndex:7}).add(),a.contentGroup=d.g().attr({zIndex:1}).add(q),a.scrollGroup=d.g().add(a.contentGroup));a.renderTitle();
	l=a.getAllItems();p(l,function(a,b){return(a.options&&a.options.legendIndex||0)-(b.options&&b.options.legendIndex||0)});h.reversed&&l.reverse();a.allItems=l;a.display=e=!!l.length;a.lastLineHeight=0;g(l,function(b){a.renderItem(b)});t=(h.width||a.offsetWidth)+y;r=a.lastItemY+a.lastLineHeight+a.titleHeight;r=a.handleOverflow(r);r+=y;w||(a.box=w=d.rect().addClass("highcharts-legend-box").attr({r:h.borderRadius}).add(q),w.isNew=!0);w.attr({stroke:h.borderColor,"stroke-width":h.borderWidth||0,fill:h.backgroundColor||
	"none"}).shadow(h.shadow);0<t&&0<r&&(w[w.isNew?"attr":"animate"](w.crisp({x:0,y:0,width:t,height:r},w.strokeWidth())),w.isNew=!1);w[e?"show":"hide"]();a.legendWidth=t;a.legendHeight=r;g(l,function(b){a.positionItem(b)});e&&q.align(f({width:t,height:r},h),!0,"spacingBox");b.isResizing||this.positionCheckboxes()},handleOverflow:function(a){var b=this,f=this.chart,m=f.renderer,p=this.options,e=p.y,f=f.spacingBox.height+("top"===p.verticalAlign?-e:e)-this.padding,e=p.maxHeight,q,l=this.clipRect,t=p.navigation,
	h=d(t.animation,!0),y=t.arrowSize||12,r=this.nav,u=this.pages,I=this.padding,k,D=this.allItems,C=function(a){a?l.attr({height:a}):l&&(b.clipRect=l.destroy(),b.contentGroup.clip());b.contentGroup.div&&(b.contentGroup.div.style.clip=a?"rect("+I+"px,9999px,"+(I+a)+"px,0)":"auto")};"horizontal"!==p.layout||"middle"===p.verticalAlign||p.floating||(f/=2);e&&(f=Math.min(f,e));u.length=0;a>f&&!1!==t.enabled?(this.clipHeight=q=Math.max(f-20-this.titleHeight-I,0),this.currentPage=d(this.currentPage,1),this.fullHeight=
	a,g(D,function(a,b){var c=a._legendItemPos[1];a=Math.round(a.legendItem.getBBox().height);var e=u.length;if(!e||c-u[e-1]>q&&(k||c)!==u[e-1])u.push(k||c),e++;b===D.length-1&&c+a-u[e-1]>q&&u.push(c);c!==k&&(k=c)}),l||(l=b.clipRect=m.clipRect(0,I,9999,0),b.contentGroup.clip(l)),C(q),r||(this.nav=r=m.g().attr({zIndex:1}).add(this.group),this.up=m.symbol("triangle",0,0,y,y).on("click",function(){b.scroll(-1,h)}).add(r),this.pager=m.text("",15,10).addClass("highcharts-legend-navigation").css(t.style).add(r),
	this.down=m.symbol("triangle-down",0,0,y,y).on("click",function(){b.scroll(1,h)}).add(r)),b.scroll(0),a=f):r&&(C(),r.hide(),this.scrollGroup.attr({translateY:1}),this.clipHeight=0);return a},scroll:function(a,c){var d=this.pages,f=d.length;a=this.currentPage+a;var m=this.clipHeight,e=this.options.navigation,p=this.pager,g=this.padding;a>f&&(a=f);0<a&&(void 0!==c&&b(c,this.chart),this.nav.attr({translateX:g,translateY:m+this.padding+7+this.titleHeight,visibility:"visible"}),this.up.attr({"class":1===
	a?"highcharts-legend-nav-inactive":"highcharts-legend-nav-active"}),p.attr({text:a+"/"+f}),this.down.attr({x:18+this.pager.getBBox().width,"class":a===f?"highcharts-legend-nav-inactive":"highcharts-legend-nav-active"}),this.up.attr({fill:1===a?e.inactiveColor:e.activeColor}).css({cursor:1===a?"default":"pointer"}),this.down.attr({fill:a===f?e.inactiveColor:e.activeColor}).css({cursor:a===f?"default":"pointer"}),c=-d[a-1]+this.initialItemY,this.scrollGroup.animate({translateY:c}),this.currentPage=
	a,this.positionCheckboxes(c))}};a.LegendSymbolMixin={drawRectangle:function(a,b){var c=a.symbolHeight,f=a.options.squareSymbol;b.legendSymbol=this.chart.renderer.rect(f?(a.symbolWidth-c)/2:0,a.baseline-c+1,f?c:a.symbolWidth,c,d(a.options.symbolRadius,c/2)).addClass("highcharts-point").attr({zIndex:3}).add(b.legendGroup)},drawLineMarker:function(a){var b=this.options,f=b.marker,m=a.symbolWidth,p=a.symbolHeight,e=p/2,g=this.chart.renderer,l=this.legendGroup;a=a.baseline-Math.round(.3*a.fontMetrics.b);
	var t;t={"stroke-width":b.lineWidth||0};b.dashStyle&&(t.dashstyle=b.dashStyle);this.legendLine=g.path(["M",0,a,"L",m,a]).addClass("highcharts-graph").attr(t).add(l);f&&!1!==f.enabled&&(b=Math.min(d(f.radius,e),e),0===this.symbol.indexOf("url")&&(f=q(f,{width:p,height:p}),b=0),this.legendSymbol=f=g.symbol(this.symbol,m/2-b,a-b,2*b,2*b,f).addClass("highcharts-point").add(l),f.isMarker=!0)}};(/Trident\/7\.0/.test(C.navigator.userAgent)||u)&&t(B.prototype,"positionItem",function(a,b){var c=this,d=function(){b._legendItemPos&&
	a.call(c,b)};d();setTimeout(d)})})(L);(function(a){var B=a.addEvent,A=a.animate,H=a.animObject,G=a.attr,r=a.doc,g=a.Axis,f=a.createElement,u=a.defaultOptions,l=a.discardElement,q=a.charts,d=a.css,b=a.defined,p=a.each,C=a.extend,t=a.find,m=a.fireEvent,c=a.getStyle,n=a.grep,E=a.isNumber,z=a.isObject,e=a.isString,x=a.Legend,F=a.marginNames,w=a.merge,h=a.Pointer,y=a.pick,J=a.pInt,K=a.removeEvent,I=a.seriesTypes,k=a.splat,D=a.svg,P=a.syncTimeout,N=a.win,S=a.Renderer,O=a.Chart=function(){this.getArgs.apply(this,
	arguments)};a.chart=function(a,b,c){return new O(a,b,c)};O.prototype={callbacks:[],getArgs:function(){var a=[].slice.call(arguments);if(e(a[0])||a[0].nodeName)this.renderTo=a.shift();this.init(a[0],a[1])},init:function(b,c){var e,h=b.series;b.series=null;e=w(u,b);e.series=b.series=h;this.userOptions=b;this.respRules=[];b=e.chart;h=b.events;this.margin=[];this.spacing=[];this.bounds={h:{},v:{}};this.callback=c;this.isResizing=0;this.options=e;this.axes=[];this.series=[];this.hasCartesianSeries=b.showAxes;
	var d;this.index=q.length;q.push(this);a.chartCount++;if(h)for(d in h)B(this,d,h[d]);this.xAxis=[];this.yAxis=[];this.pointCount=this.colorCounter=this.symbolCounter=0;this.firstRender()},initSeries:function(b){var c=this.options.chart;(c=I[b.type||c.type||c.defaultSeriesType])||a.error(17,!0);c=new c;c.init(this,b);return c},orderSeries:function(a){var b=this.series;for(a=a||0;a<b.length;a++)b[a]&&(b[a].index=a,b[a].name=b[a].name||"Series "+(b[a].index+1))},isInsidePlot:function(a,b,c){var e=c?
	b:a;a=c?a:b;return 0<=e&&e<=this.plotWidth&&0<=a&&a<=this.plotHeight},redraw:function(b){var c=this.axes,e=this.series,h=this.pointer,d=this.legend,k=this.isDirtyLegend,f,n,y=this.hasCartesianSeries,g=this.isDirtyBox,v=e.length,l=v,q=this.renderer,t=q.isHidden(),w=[];this.setResponsive&&this.setResponsive(!1);a.setAnimation(b,this);t&&this.cloneRenderTo();for(this.layOutTitles();l--;)if(b=e[l],b.options.stacking&&(f=!0,b.isDirty)){n=!0;break}if(n)for(l=v;l--;)b=e[l],b.options.stacking&&(b.isDirty=
	!0);p(e,function(a){a.isDirty&&"point"===a.options.legendType&&(a.updateTotals&&a.updateTotals(),k=!0);a.isDirtyData&&m(a,"updatedData")});k&&d.options.enabled&&(d.render(),this.isDirtyLegend=!1);f&&this.getStacks();y&&p(c,function(a){a.updateNames();a.setScale()});this.getMargins();y&&(p(c,function(a){a.isDirty&&(g=!0)}),p(c,function(a){var b=a.min+","+a.max;a.extKey!==b&&(a.extKey=b,w.push(function(){m(a,"afterSetExtremes",C(a.eventArgs,a.getExtremes()));delete a.eventArgs}));(g||f)&&a.redraw()}));
	g&&this.drawChartBox();m(this,"predraw");p(e,function(a){(g||a.isDirty)&&a.visible&&a.redraw();a.isDirtyData=!1});h&&h.reset(!0);q.draw();m(this,"redraw");m(this,"render");t&&this.cloneRenderTo(!0);p(w,function(a){a.call()})},get:function(a){function b(b){return b.id===a||b.options&&b.options.id===a}var c,e=this.series,h;c=t(this.axes,b)||t(this.series,b);for(h=0;!c&&h<e.length;h++)c=t(e[h].points||[],b);return c},getAxes:function(){var a=this,b=this.options,c=b.xAxis=k(b.xAxis||{}),b=b.yAxis=k(b.yAxis||
	{});p(c,function(a,b){a.index=b;a.isX=!0});p(b,function(a,b){a.index=b});c=c.concat(b);p(c,function(b){new g(a,b)})},getSelectedPoints:function(){var a=[];p(this.series,function(b){a=a.concat(n(b.points||[],function(a){return a.selected}))});return a},getSelectedSeries:function(){return n(this.series,function(a){return a.selected})},setTitle:function(a,b,c){var e=this,h=e.options,d;d=h.title=w({style:{color:"#333333",fontSize:h.isStock?"16px":"18px"}},h.title,a);h=h.subtitle=w({style:{color:"#666666"}},
	h.subtitle,b);p([["title",a,d],["subtitle",b,h]],function(a,b){var c=a[0],h=e[c],d=a[1];a=a[2];h&&d&&(e[c]=h=h.destroy());a&&a.text&&!h&&(e[c]=e.renderer.text(a.text,0,0,a.useHTML).attr({align:a.align,"class":"highcharts-"+c,zIndex:a.zIndex||4}).add(),e[c].update=function(a){e.setTitle(!b&&a,b&&a)},e[c].css(a.style))});e.layOutTitles(c)},layOutTitles:function(a){var b=0,c,e=this.renderer,h=this.spacingBox;p(["title","subtitle"],function(a){var c=this[a],d=this.options[a],k;c&&(k=d.style.fontSize,
	k=e.fontMetrics(k,c).b,c.css({width:(d.width||h.width+d.widthAdjust)+"px"}).align(C({y:b+k+("title"===a?-3:2)},d),!1,"spacingBox"),d.floating||d.verticalAlign||(b=Math.ceil(b+c.getBBox().height)))},this);c=this.titleOffset!==b;this.titleOffset=b;!this.isDirtyBox&&c&&(this.isDirtyBox=c,this.hasRendered&&y(a,!0)&&this.isDirtyBox&&this.redraw())},getChartSize:function(){var a=this.options.chart,e=a.width,a=a.height,h=this.renderToClone||this.renderTo;b(e)||(this.containerWidth=c(h,"width"));b(a)||(this.containerHeight=
	c(h,"height"));this.chartWidth=Math.max(0,e||this.containerWidth||600);this.chartHeight=Math.max(0,a||this.containerHeight||400)},cloneRenderTo:function(a){var b=this.renderToClone,c=this.container;if(a){if(b){for(;b.childNodes.length;)this.renderTo.appendChild(b.firstChild);l(b);delete this.renderToClone}}else c&&c.parentNode===this.renderTo&&this.renderTo.removeChild(c),this.renderToClone=b=this.renderTo.cloneNode(0),d(b,{position:"absolute",top:"-9999px",display:"block"}),b.style.setProperty&&
	b.style.setProperty("display","block","important"),r.body.appendChild(b),c&&b.appendChild(c)},setClassName:function(a){this.container.className="highcharts-container "+(a||"")},getContainer:function(){var b,c=this.options,h=c.chart,d,k;b=this.renderTo;var m=a.uniqueKey(),n;b||(this.renderTo=b=h.renderTo);e(b)&&(this.renderTo=b=r.getElementById(b));b||a.error(13,!0);d=J(G(b,"data-highcharts-chart"));E(d)&&q[d]&&q[d].hasRendered&&q[d].destroy();G(b,"data-highcharts-chart",this.index);b.innerHTML="";
	h.skipClone||b.offsetWidth||this.cloneRenderTo();this.getChartSize();d=this.chartWidth;k=this.chartHeight;n=C({position:"relative",overflow:"hidden",width:d+"px",height:k+"px",textAlign:"left",lineHeight:"normal",zIndex:0,"-webkit-tap-highlight-color":"rgba(0,0,0,0)"},h.style);this.container=b=f("div",{id:m},n,this.renderToClone||b);this._cursor=b.style.cursor;this.renderer=new (a[h.renderer]||S)(b,d,k,null,h.forExport,c.exporting&&c.exporting.allowHTML);this.setClassName(h.className);this.renderer.setStyle(h.style);
	this.renderer.chartIndex=this.index},getMargins:function(a){var c=this.spacing,e=this.margin,h=this.titleOffset;this.resetMargins();h&&!b(e[0])&&(this.plotTop=Math.max(this.plotTop,h+this.options.title.margin+c[0]));this.legend.display&&this.legend.adjustMargins(e,c);this.extraMargin&&(this[this.extraMargin.type]=(this[this.extraMargin.type]||0)+this.extraMargin.value);this.extraTopMargin&&(this.plotTop+=this.extraTopMargin);a||this.getAxisMargins()},getAxisMargins:function(){var a=this,c=a.axisOffset=
	[0,0,0,0],e=a.margin;a.hasCartesianSeries&&p(a.axes,function(a){a.visible&&a.getOffset()});p(F,function(h,d){b(e[d])||(a[h]+=c[d])});a.setChartSize()},reflow:function(a){var e=this,h=e.options.chart,d=e.renderTo,k=b(h.width),f=h.width||c(d,"width"),h=h.height||c(d,"height"),d=a?a.target:N;if(!k&&!e.isPrinting&&f&&h&&(d===N||d===r)){if(f!==e.containerWidth||h!==e.containerHeight)clearTimeout(e.reflowTimeout),e.reflowTimeout=P(function(){e.container&&e.setSize(void 0,void 0,!1)},a?100:0);e.containerWidth=
	f;e.containerHeight=h}},initReflow:function(){var a=this,b;b=B(N,"resize",function(b){a.reflow(b)});B(a,"destroy",b)},setSize:function(b,c,e){var h=this,k=h.renderer;h.isResizing+=1;a.setAnimation(e,h);h.oldChartHeight=h.chartHeight;h.oldChartWidth=h.chartWidth;void 0!==b&&(h.options.chart.width=b);void 0!==c&&(h.options.chart.height=c);h.getChartSize();b=k.globalAnimation;(b?A:d)(h.container,{width:h.chartWidth+"px",height:h.chartHeight+"px"},b);h.setChartSize(!0);k.setSize(h.chartWidth,h.chartHeight,
	e);p(h.axes,function(a){a.isDirty=!0;a.setScale()});h.isDirtyLegend=!0;h.isDirtyBox=!0;h.layOutTitles();h.getMargins();h.redraw(e);h.oldChartHeight=null;m(h,"resize");P(function(){h&&m(h,"endResize",null,function(){--h.isResizing})},H(b).duration)},setChartSize:function(a){var b=this.inverted,c=this.renderer,e=this.chartWidth,h=this.chartHeight,d=this.options.chart,k=this.spacing,f=this.clipOffset,m,n,y,g;this.plotLeft=m=Math.round(this.plotLeft);this.plotTop=n=Math.round(this.plotTop);this.plotWidth=
	y=Math.max(0,Math.round(e-m-this.marginRight));this.plotHeight=g=Math.max(0,Math.round(h-n-this.marginBottom));this.plotSizeX=b?g:y;this.plotSizeY=b?y:g;this.plotBorderWidth=d.plotBorderWidth||0;this.spacingBox=c.spacingBox={x:k[3],y:k[0],width:e-k[3]-k[1],height:h-k[0]-k[2]};this.plotBox=c.plotBox={x:m,y:n,width:y,height:g};e=2*Math.floor(this.plotBorderWidth/2);b=Math.ceil(Math.max(e,f[3])/2);c=Math.ceil(Math.max(e,f[0])/2);this.clipBox={x:b,y:c,width:Math.floor(this.plotSizeX-Math.max(e,f[1])/
	2-b),height:Math.max(0,Math.floor(this.plotSizeY-Math.max(e,f[2])/2-c))};a||p(this.axes,function(a){a.setAxisSize();a.setAxisTranslation()})},resetMargins:function(){var a=this,b=a.options.chart;p(["margin","spacing"],function(c){var e=b[c],h=z(e)?e:[e,e,e,e];p(["Top","Right","Bottom","Left"],function(e,d){a[c][d]=y(b[c+e],h[d])})});p(F,function(b,c){a[b]=y(a.margin[c],a.spacing[c])});a.axisOffset=[0,0,0,0];a.clipOffset=[0,0,0,0]},drawChartBox:function(){var a=this.options.chart,b=this.renderer,c=
	this.chartWidth,e=this.chartHeight,h=this.chartBackground,d=this.plotBackground,k=this.plotBorder,f,m=this.plotBGImage,n=a.backgroundColor,p=a.plotBackgroundColor,y=a.plotBackgroundImage,g,l=this.plotLeft,q=this.plotTop,t=this.plotWidth,w=this.plotHeight,x=this.plotBox,r=this.clipRect,z=this.clipBox,J="animate";h||(this.chartBackground=h=b.rect().addClass("highcharts-background").add(),J="attr");f=a.borderWidth||0;g=f+(a.shadow?8:0);n={fill:n||"none"};if(f||h["stroke-width"])n.stroke=a.borderColor,
	n["stroke-width"]=f;h.attr(n).shadow(a.shadow);h[J]({x:g/2,y:g/2,width:c-g-f%2,height:e-g-f%2,r:a.borderRadius});J="animate";d||(J="attr",this.plotBackground=d=b.rect().addClass("highcharts-plot-background").add());d[J](x);d.attr({fill:p||"none"}).shadow(a.plotShadow);y&&(m?m.animate(x):this.plotBGImage=b.image(y,l,q,t,w).add());r?r.animate({width:z.width,height:z.height}):this.clipRect=b.clipRect(z);J="animate";k||(J="attr",this.plotBorder=k=b.rect().addClass("highcharts-plot-border").attr({zIndex:1}).add());
	k.attr({stroke:a.plotBorderColor,"stroke-width":a.plotBorderWidth||0,fill:"none"});k[J](k.crisp({x:l,y:q,width:t,height:w},-k.strokeWidth()));this.isDirtyBox=!1},propFromSeries:function(){var a=this,b=a.options.chart,c,e=a.options.series,h,d;p(["inverted","angular","polar"],function(k){c=I[b.type||b.defaultSeriesType];d=b[k]||c&&c.prototype[k];for(h=e&&e.length;!d&&h--;)(c=I[e[h].type])&&c.prototype[k]&&(d=!0);a[k]=d})},linkSeries:function(){var a=this,b=a.series;p(b,function(a){a.linkedSeries.length=
	0});p(b,function(b){var c=b.options.linkedTo;e(c)&&(c=":previous"===c?a.series[b.index-1]:a.get(c))&&c.linkedParent!==b&&(c.linkedSeries.push(b),b.linkedParent=c,b.visible=y(b.options.visible,c.options.visible,b.visible))})},renderSeries:function(){p(this.series,function(a){a.translate();a.render()})},renderLabels:function(){var a=this,b=a.options.labels;b.items&&p(b.items,function(c){var e=C(b.style,c.style),h=J(e.left)+a.plotLeft,d=J(e.top)+a.plotTop+12;delete e.left;delete e.top;a.renderer.text(c.html,
	h,d).attr({zIndex:2}).css(e).add()})},render:function(){var a=this.axes,b=this.renderer,c=this.options,e,h,d;this.setTitle();this.legend=new x(this,c.legend);this.getStacks&&this.getStacks();this.getMargins(!0);this.setChartSize();c=this.plotWidth;e=this.plotHeight-=21;p(a,function(a){a.setScale()});this.getAxisMargins();h=1.1<c/this.plotWidth;d=1.05<e/this.plotHeight;if(h||d)p(a,function(a){(a.horiz&&h||!a.horiz&&d)&&a.setTickInterval(!0)}),this.getMargins();this.drawChartBox();this.hasCartesianSeries&&
	p(a,function(a){a.visible&&a.render()});this.seriesGroup||(this.seriesGroup=b.g("series-group").attr({zIndex:3}).add());this.renderSeries();this.renderLabels();this.addCredits();this.setResponsive&&this.setResponsive();this.hasRendered=!0},addCredits:function(a){var b=this;a=w(!0,this.options.credits,a);a.enabled&&!this.credits&&(this.credits=this.renderer.text(a.text+(this.mapCredits||""),0,0).addClass("highcharts-credits").on("click",function(){a.href&&(N.location.href=a.href)}).attr({align:a.position.align,
	zIndex:8}).css(a.style).add().align(a.position),this.credits.update=function(a){b.credits=b.credits.destroy();b.addCredits(a)})},destroy:function(){var b=this,c=b.axes,e=b.series,h=b.container,d,k=h&&h.parentNode;m(b,"destroy");q[b.index]=void 0;a.chartCount--;b.renderTo.removeAttribute("data-highcharts-chart");K(b);for(d=c.length;d--;)c[d]=c[d].destroy();this.scroller&&this.scroller.destroy&&this.scroller.destroy();for(d=e.length;d--;)e[d]=e[d].destroy();p("title subtitle chartBackground plotBackground plotBGImage plotBorder seriesGroup clipRect credits pointer rangeSelector legend resetZoomButton tooltip renderer".split(" "),
	function(a){var c=b[a];c&&c.destroy&&(b[a]=c.destroy())});h&&(h.innerHTML="",K(h),k&&l(h));for(d in b)delete b[d]},isReadyToRender:function(){var a=this;return D||N!=N.top||"complete"===r.readyState?!0:(r.attachEvent("onreadystatechange",function(){r.detachEvent("onreadystatechange",a.firstRender);"complete"===r.readyState&&a.firstRender()}),!1)},firstRender:function(){var a=this,b=a.options;if(a.isReadyToRender()){a.getContainer();m(a,"init");a.resetMargins();a.setChartSize();a.propFromSeries();
	a.getAxes();p(b.series||[],function(b){a.initSeries(b)});a.linkSeries();m(a,"beforeRender");h&&(a.pointer=new h(a,b));a.render();if(!a.renderer.imgCount&&a.onload)a.onload();a.cloneRenderTo(!0)}},onload:function(){p([this.callback].concat(this.callbacks),function(a){a&&void 0!==this.index&&a.apply(this,[this])},this);m(this,"load");m(this,"render");b(this.index)&&!1!==this.options.chart.reflow&&this.initReflow();this.onload=null}}})(L);(function(a){var B,A=a.each,H=a.extend,G=a.erase,r=a.fireEvent,
	g=a.format,f=a.isArray,u=a.isNumber,l=a.pick,q=a.removeEvent;B=a.Point=function(){};B.prototype={init:function(a,b,f){this.series=a;this.color=a.color;this.applyOptions(b,f);a.options.colorByPoint?(b=a.options.colors||a.chart.options.colors,this.color=this.color||b[a.colorCounter],b=b.length,f=a.colorCounter,a.colorCounter++,a.colorCounter===b&&(a.colorCounter=0)):f=a.colorIndex;this.colorIndex=l(this.colorIndex,f);a.chart.pointCount++;return this},applyOptions:function(a,b){var d=this.series,f=d.options.pointValKey||
	d.pointValKey;a=B.prototype.optionsToObject.call(this,a);H(this,a);this.options=this.options?H(this.options,a):a;a.group&&delete this.group;f&&(this.y=this[f]);this.isNull=l(this.isValid&&!this.isValid(),null===this.x||!u(this.y,!0));this.selected&&(this.state="select");"name"in this&&void 0===b&&d.xAxis&&d.xAxis.hasNames&&(this.x=d.xAxis.nameToX(this));void 0===this.x&&d&&(this.x=void 0===b?d.autoIncrement(this):b);return this},optionsToObject:function(a){var b={},d=this.series,g=d.options.keys,
	l=g||d.pointArrayMap||["y"],m=l.length,c=0,n=0;if(u(a)||null===a)b[l[0]]=a;else if(f(a))for(!g&&a.length>m&&(d=typeof a[0],"string"===d?b.name=a[0]:"number"===d&&(b.x=a[0]),c++);n<m;)g&&void 0===a[c]||(b[l[n]]=a[c]),c++,n++;else"object"===typeof a&&(b=a,a.dataLabels&&(d._hasPointLabels=!0),a.marker&&(d._hasPointMarkers=!0));return b},getClassName:function(){return"highcharts-point"+(this.selected?" highcharts-point-select":"")+(this.negative?" highcharts-negative":"")+(this.isNull?" highcharts-null-point":
	"")+(void 0!==this.colorIndex?" highcharts-color-"+this.colorIndex:"")+(this.options.className?" "+this.options.className:"")+(this.zone&&this.zone.className?" "+this.zone.className.replace("highcharts-negative",""):"")},getZone:function(){var a=this.series,b=a.zones,a=a.zoneAxis||"y",f=0,g;for(g=b[f];this[a]>=g.value;)g=b[++f];g&&g.color&&!this.options.color&&(this.color=g.color);return g},destroy:function(){var a=this.series.chart,b=a.hoverPoints,f;a.pointCount--;b&&(this.setState(),G(b,this),b.length||
	(a.hoverPoints=null));if(this===a.hoverPoint)this.onMouseOut();if(this.graphic||this.dataLabel)q(this),this.destroyElements();this.legendItem&&a.legend.destroyItem(this);for(f in this)this[f]=null},destroyElements:function(){for(var a=["graphic","dataLabel","dataLabelUpper","connector","shadowGroup"],b,f=6;f--;)b=a[f],this[b]&&(this[b]=this[b].destroy())},getLabelConfig:function(){return{x:this.category,y:this.y,color:this.color,colorIndex:this.colorIndex,key:this.name||this.category,series:this.series,
	point:this,percentage:this.percentage,total:this.total||this.stackTotal}},tooltipFormatter:function(a){var b=this.series,d=b.tooltipOptions,f=l(d.valueDecimals,""),q=d.valuePrefix||"",m=d.valueSuffix||"";A(b.pointArrayMap||["y"],function(b){b="{point."+b;if(q||m)a=a.replace(b+"}",q+b+"}"+m);a=a.replace(b+"}",b+":,."+f+"f}")});return g(a,{point:this,series:this.series})},firePointEvent:function(a,b,f){var d=this,g=this.series.options;(g.point.events[a]||d.options&&d.options.events&&d.options.events[a])&&
	this.importEvents();"click"===a&&g.allowPointSelect&&(f=function(a){d.select&&d.select(null,a.ctrlKey||a.metaKey||a.shiftKey)});r(this,a,b,f)},visible:!0}})(L);(function(a){var B=a.addEvent,A=a.animObject,H=a.arrayMax,G=a.arrayMin,r=a.correctFloat,g=a.Date,f=a.defaultOptions,u=a.defaultPlotOptions,l=a.defined,q=a.each,d=a.erase,b=a.extend,p=a.fireEvent,C=a.grep,t=a.isArray,m=a.isNumber,c=a.isString,n=a.merge,E=a.pick,z=a.removeEvent,e=a.splat,x=a.SVGElement,F=a.syncTimeout,w=a.win;a.Series=a.seriesType("line",
	null,{lineWidth:2,allowPointSelect:!1,showCheckbox:!1,animation:{duration:1E3},events:{},marker:{lineWidth:0,lineColor:"#ffffff",radius:4,states:{hover:{animation:{duration:50},enabled:!0,radiusPlus:2,lineWidthPlus:1},select:{fillColor:"#cccccc",lineColor:"#000000",lineWidth:2}}},point:{events:{}},dataLabels:{align:"center",formatter:function(){return null===this.y?"":a.numberFormat(this.y,-1)},style:{fontSize:"11px",fontWeight:"bold",color:"contrast",textOutline:"1px contrast"},verticalAlign:"bottom",
	x:0,y:0,padding:5},cropThreshold:300,pointRange:0,softThreshold:!0,states:{hover:{lineWidthPlus:1,marker:{},halo:{size:10,opacity:.25}},select:{marker:{}}},stickyTracking:!0,turboThreshold:1E3},{isCartesian:!0,pointClass:a.Point,sorted:!0,requireSorting:!0,directTouch:!1,axisTypes:["xAxis","yAxis"],colorCounter:0,parallelArrays:["x","y"],coll:"series",init:function(a,c){var e=this,h,d,k=a.series,f;e.chart=a;e.options=c=e.setOptions(c);e.linkedSeries=[];e.bindAxes();b(e,{name:c.name,state:"",visible:!1!==
	c.visible,selected:!0===c.selected});d=c.events;for(h in d)B(e,h,d[h]);if(d&&d.click||c.point&&c.point.events&&c.point.events.click||c.allowPointSelect)a.runTrackerClick=!0;e.getColor();e.getSymbol();q(e.parallelArrays,function(a){e[a+"Data"]=[]});e.setData(c.data,!1);e.isCartesian&&(a.hasCartesianSeries=!0);k.length&&(f=k[k.length-1]);e._i=E(f&&f._i,-1)+1;a.orderSeries(this.insert(k))},insert:function(a){var b=this.options.index,c;if(m(b)){for(c=a.length;c--;)if(b>=E(a[c].options.index,a[c]._i)){a.splice(c+
	1,0,this);break}-1===c&&a.unshift(this);c+=1}else a.push(this);return E(c,a.length-1)},bindAxes:function(){var b=this,c=b.options,e=b.chart,d;q(b.axisTypes||[],function(h){q(e[h],function(a){d=a.options;if(c[h]===d.index||void 0!==c[h]&&c[h]===d.id||void 0===c[h]&&0===d.index)b.insert(a.series),b[h]=a,a.isDirty=!0});b[h]||b.optionalAxis===h||a.error(18,!0)})},updateParallelArrays:function(a,b){var c=a.series,e=arguments,h=m(b)?function(e){var h="y"===e&&c.toYData?c.toYData(a):a[e];c[e+"Data"][b]=
	h}:function(a){Array.prototype[b].apply(c[a+"Data"],Array.prototype.slice.call(e,2))};q(c.parallelArrays,h)},autoIncrement:function(){var a=this.options,b=this.xIncrement,c,e=a.pointIntervalUnit,b=E(b,a.pointStart,0);this.pointInterval=c=E(this.pointInterval,a.pointInterval,1);e&&(a=new g(b),"day"===e?a=+a[g.hcSetDate](a[g.hcGetDate]()+c):"month"===e?a=+a[g.hcSetMonth](a[g.hcGetMonth]()+c):"year"===e&&(a=+a[g.hcSetFullYear](a[g.hcGetFullYear]()+c)),c=a-b);this.xIncrement=b+c;return b},setOptions:function(a){var b=
	this.chart,c=b.options.plotOptions,b=b.userOptions||{},e=b.plotOptions||{},h=c[this.type];this.userOptions=a;c=n(h,c.series,a);this.tooltipOptions=n(f.tooltip,f.plotOptions[this.type].tooltip,b.tooltip,e.series&&e.series.tooltip,e[this.type]&&e[this.type].tooltip,a.tooltip);null===h.marker&&delete c.marker;this.zoneAxis=c.zoneAxis;a=this.zones=(c.zones||[]).slice();!c.negativeColor&&!c.negativeFillColor||c.zones||a.push({value:c[this.zoneAxis+"Threshold"]||c.threshold||0,className:"highcharts-negative",
	color:c.negativeColor,fillColor:c.negativeFillColor});a.length&&l(a[a.length-1].value)&&a.push({color:this.color,fillColor:this.fillColor});return c},getCyclic:function(a,b,c){var e,h=this.chart,d=this.userOptions,f=a+"Index",n=a+"Counter",m=c?c.length:E(h.options.chart[a+"Count"],h[a+"Count"]);b||(e=E(d[f],d["_"+f]),l(e)||(h.series.length||(h[n]=0),d["_"+f]=e=h[n]%m,h[n]+=1),c&&(b=c[e]));void 0!==e&&(this[f]=e);this[a]=b},getColor:function(){this.options.colorByPoint?this.options.color=null:this.getCyclic("color",
	this.options.color||u[this.type].color,this.chart.options.colors)},getSymbol:function(){this.getCyclic("symbol",this.options.marker.symbol,this.chart.options.symbols)},drawLegendSymbol:a.LegendSymbolMixin.drawLineMarker,setData:function(b,e,d,f){var h=this,k=h.points,n=k&&k.length||0,g,p=h.options,y=h.chart,l=null,w=h.xAxis,x=p.turboThreshold,r=this.xData,z=this.yData,F=(g=h.pointArrayMap)&&g.length;b=b||[];g=b.length;e=E(e,!0);if(!1!==f&&g&&n===g&&!h.cropped&&!h.hasGroupedData&&h.visible)q(b,function(a,
	b){k[b].update&&a!==p.data[b]&&k[b].update(a,!1,null,!1)});else{h.xIncrement=null;h.colorCounter=0;q(this.parallelArrays,function(a){h[a+"Data"].length=0});if(x&&g>x){for(d=0;null===l&&d<g;)l=b[d],d++;if(m(l))for(d=0;d<g;d++)r[d]=this.autoIncrement(),z[d]=b[d];else if(t(l))if(F)for(d=0;d<g;d++)l=b[d],r[d]=l[0],z[d]=l.slice(1,F+1);else for(d=0;d<g;d++)l=b[d],r[d]=l[0],z[d]=l[1];else a.error(12)}else for(d=0;d<g;d++)void 0!==b[d]&&(l={series:h},h.pointClass.prototype.applyOptions.apply(l,[b[d]]),h.updateParallelArrays(l,
	d));c(z[0])&&a.error(14,!0);h.data=[];h.options.data=h.userOptions.data=b;for(d=n;d--;)k[d]&&k[d].destroy&&k[d].destroy();w&&(w.minRange=w.userMinRange);h.isDirty=y.isDirtyBox=!0;h.isDirtyData=!!k;d=!1}"point"===p.legendType&&(this.processData(),this.generatePoints());e&&y.redraw(d)},processData:function(b){var c=this.xData,e=this.yData,h=c.length,d;d=0;var k,f,n=this.xAxis,m,g=this.options;m=g.cropThreshold;var p=this.getExtremesFromAll||g.getExtremesFromAll,l=this.isCartesian,g=n&&n.val2lin,q=n&&
	n.isLog,t,w;if(l&&!this.isDirty&&!n.isDirty&&!this.yAxis.isDirty&&!b)return!1;n&&(b=n.getExtremes(),t=b.min,w=b.max);if(l&&this.sorted&&!p&&(!m||h>m||this.forceCrop))if(c[h-1]<t||c[0]>w)c=[],e=[];else if(c[0]<t||c[h-1]>w)d=this.cropData(this.xData,this.yData,t,w),c=d.xData,e=d.yData,d=d.start,k=!0;for(m=c.length||1;--m;)h=q?g(c[m])-g(c[m-1]):c[m]-c[m-1],0<h&&(void 0===f||h<f)?f=h:0>h&&this.requireSorting&&a.error(15);this.cropped=k;this.cropStart=d;this.processedXData=c;this.processedYData=e;this.closestPointRange=
	f},cropData:function(a,b,c,e){var h=a.length,d=0,f=h,n=E(this.cropShoulder,1),m;for(m=0;m<h;m++)if(a[m]>=c){d=Math.max(0,m-n);break}for(c=m;c<h;c++)if(a[c]>e){f=c+n;break}return{xData:a.slice(d,f),yData:b.slice(d,f),start:d,end:f}},generatePoints:function(){var a=this.options.data,b=this.data,c,d=this.processedXData,f=this.processedYData,k=this.pointClass,n=d.length,m=this.cropStart||0,g,p=this.hasGroupedData,l,q=[],t;b||p||(b=[],b.length=a.length,b=this.data=b);for(t=0;t<n;t++)g=m+t,p?(l=(new k).init(this,
	[d[t]].concat(e(f[t]))),l.dataGroup=this.groupMap[t]):(l=b[g])||void 0===a[g]||(b[g]=l=(new k).init(this,a[g],d[t])),l.index=g,q[t]=l;if(b&&(n!==(c=b.length)||p))for(t=0;t<c;t++)t!==m||p||(t+=n),b[t]&&(b[t].destroyElements(),b[t].plotX=void 0);this.data=b;this.points=q},getExtremes:function(a){var b=this.yAxis,c=this.processedXData,e,h=[],d=0;e=this.xAxis.getExtremes();var f=e.min,n=e.max,g,p,l,q;a=a||this.stackedYData||this.processedYData||[];e=a.length;for(q=0;q<e;q++)if(p=c[q],l=a[q],g=(m(l,!0)||
	t(l))&&(!b.isLog||l.length||0<l),p=this.getExtremesFromAll||this.options.getExtremesFromAll||this.cropped||(c[q+1]||p)>=f&&(c[q-1]||p)<=n,g&&p)if(g=l.length)for(;g--;)null!==l[g]&&(h[d++]=l[g]);else h[d++]=l;this.dataMin=G(h);this.dataMax=H(h)},translate:function(){this.processedXData||this.processData();this.generatePoints();var a=this.options,b=a.stacking,c=this.xAxis,e=c.categories,d=this.yAxis,k=this.points,f=k.length,n=!!this.modifyValue,g=a.pointPlacement,p="between"===g||m(g),q=a.threshold,
	t=a.startFromThreshold?q:0,w,x,z,F,u=Number.MAX_VALUE;"between"===g&&(g=.5);m(g)&&(g*=E(a.pointRange||c.pointRange));for(a=0;a<f;a++){var C=k[a],A=C.x,B=C.y;x=C.low;var H=b&&d.stacks[(this.negStacks&&B<(t?0:q)?"-":"")+this.stackKey],G;d.isLog&&null!==B&&0>=B&&(C.isNull=!0);C.plotX=w=r(Math.min(Math.max(-1E5,c.translate(A,0,0,0,1,g,"flags"===this.type)),1E5));b&&this.visible&&!C.isNull&&H&&H[A]&&(F=this.getStackIndicator(F,A,this.index),G=H[A],B=G.points[F.key],x=B[0],B=B[1],x===t&&F.key===H[A].base&&
	(x=E(q,d.min)),d.isLog&&0>=x&&(x=null),C.total=C.stackTotal=G.total,C.percentage=G.total&&C.y/G.total*100,C.stackY=B,G.setOffset(this.pointXOffset||0,this.barW||0));C.yBottom=l(x)?d.translate(x,0,1,0,1):null;n&&(B=this.modifyValue(B,C));C.plotY=x="number"===typeof B&&Infinity!==B?Math.min(Math.max(-1E5,d.translate(B,0,1,0,1)),1E5):void 0;C.isInside=void 0!==x&&0<=x&&x<=d.len&&0<=w&&w<=c.len;C.clientX=p?r(c.translate(A,0,0,0,1,g)):w;C.negative=C.y<(q||0);C.category=e&&void 0!==e[C.x]?e[C.x]:C.x;C.isNull||
	(void 0!==z&&(u=Math.min(u,Math.abs(w-z))),z=w);C.zone=this.zones.length&&C.getZone()}this.closestPointRangePx=u},getValidPoints:function(a,b){var c=this.chart;return C(a||this.points||[],function(a){return b&&!c.isInsidePlot(a.plotX,a.plotY,c.inverted)?!1:!a.isNull})},setClip:function(a){var b=this.chart,c=this.options,e=b.renderer,d=b.inverted,h=this.clipBox,f=h||b.clipBox,n=this.sharedClipKey||["_sharedClip",a&&a.duration,a&&a.easing,f.height,c.xAxis,c.yAxis].join(),m=b[n],g=b[n+"m"];m||(a&&(f.width=
	0,b[n+"m"]=g=e.clipRect(-99,d?-b.plotLeft:-b.plotTop,99,d?b.chartWidth:b.chartHeight)),b[n]=m=e.clipRect(f),m.count={length:0});a&&!m.count[this.index]&&(m.count[this.index]=!0,m.count.length+=1);!1!==c.clip&&(this.group.clip(a||h?m:b.clipRect),this.markerGroup.clip(g),this.sharedClipKey=n);a||(m.count[this.index]&&(delete m.count[this.index],--m.count.length),0===m.count.length&&n&&b[n]&&(h||(b[n]=b[n].destroy()),b[n+"m"]&&(this.markerGroup.clip(),b[n+"m"]=b[n+"m"].destroy())))},animate:function(a){var b=
	this.chart,c=A(this.options.animation),e;a?this.setClip(c):(e=this.sharedClipKey,(a=b[e])&&a.animate({width:b.plotSizeX},c),b[e+"m"]&&b[e+"m"].animate({width:b.plotSizeX+99},c),this.animate=null)},afterAnimate:function(){this.setClip();p(this,"afterAnimate")},drawPoints:function(){var a=this.points,b=this.chart,c,e,d,k,f=this.options.marker,n,g,p,l,q=this.markerGroup,t=E(f.enabled,this.xAxis.isRadial?!0:null,this.closestPointRangePx>2*f.radius);if(!1!==f.enabled||this._hasPointMarkers)for(e=0;e<a.length;e++)d=
	a[e],c=d.plotY,k=d.graphic,n=d.marker||{},g=!!d.marker,p=t&&void 0===n.enabled||n.enabled,l=d.isInside,p&&m(c)&&null!==d.y?(c=E(n.symbol,this.symbol),d.hasImage=0===c.indexOf("url"),p=this.markerAttribs(d,d.selected&&"select"),k?k[l?"show":"hide"](!0).animate(p):l&&(0<p.width||d.hasImage)&&(d.graphic=k=b.renderer.symbol(c,p.x,p.y,p.width,p.height,g?n:f).add(q)),k&&k.attr(this.pointAttribs(d,d.selected&&"select")),k&&k.addClass(d.getClassName(),!0)):k&&(d.graphic=k.destroy())},markerAttribs:function(a,
	b){var c=this.options.marker,e=a.marker||{},d=E(e.radius,c.radius);b&&(c=c.states[b],b=e.states&&e.states[b],d=E(b&&b.radius,c&&c.radius,d+(c&&c.radiusPlus||0)));a.hasImage&&(d=0);a={x:Math.floor(a.plotX)-d,y:a.plotY-d};d&&(a.width=a.height=2*d);return a},pointAttribs:function(a,b){var c=this.options.marker,e=a&&a.options,d=e&&e.marker||{},h=this.color,f=e&&e.color,n=a&&a.color,e=E(d.lineWidth,c.lineWidth);a=a&&a.zone&&a.zone.color;h=f||a||n||h;a=d.fillColor||c.fillColor||h;h=d.lineColor||c.lineColor||
	h;b&&(c=c.states[b],b=d.states&&d.states[b]||{},e=E(b.lineWidth,c.lineWidth,e+E(b.lineWidthPlus,c.lineWidthPlus,0)),a=b.fillColor||c.fillColor||a,h=b.lineColor||c.lineColor||h);return{stroke:h,"stroke-width":e,fill:a}},destroy:function(){var a=this,b=a.chart,c=/AppleWebKit\/533/.test(w.navigator.userAgent),e,f=a.data||[],k,n,m;p(a,"destroy");z(a);q(a.axisTypes||[],function(b){(m=a[b])&&m.series&&(d(m.series,a),m.isDirty=m.forceRedraw=!0)});a.legendItem&&a.chart.legend.destroyItem(a);for(e=f.length;e--;)(k=
	f[e])&&k.destroy&&k.destroy();a.points=null;clearTimeout(a.animationTimeout);for(n in a)a[n]instanceof x&&!a[n].survive&&(e=c&&"group"===n?"hide":"destroy",a[n][e]());b.hoverSeries===a&&(b.hoverSeries=null);d(b.series,a);b.orderSeries();for(n in a)delete a[n]},getGraphPath:function(a,b,c){var e=this,d=e.options,h=d.step,f,n=[],m=[],g;a=a||e.points;(f=a.reversed)&&a.reverse();(h={right:1,center:2}[h]||h&&3)&&f&&(h=4-h);!d.connectNulls||b||c||(a=this.getValidPoints(a));q(a,function(f,k){var p=f.plotX,
	q=f.plotY,t=a[k-1];(f.leftCliff||t&&t.rightCliff)&&!c&&(g=!0);f.isNull&&!l(b)&&0<k?g=!d.connectNulls:f.isNull&&!b?g=!0:(0===k||g?k=["M",f.plotX,f.plotY]:e.getPointSpline?k=e.getPointSpline(a,f,k):h?(k=1===h?["L",t.plotX,q]:2===h?["L",(t.plotX+p)/2,t.plotY,"L",(t.plotX+p)/2,q]:["L",p,t.plotY],k.push("L",p,q)):k=["L",p,q],m.push(f.x),h&&m.push(f.x),n.push.apply(n,k),g=!1)});n.xMap=m;return e.graphPath=n},drawGraph:function(){var a=this,b=this.options,c=(this.gappedPath||this.getGraphPath).call(this),
	e=[["graph","highcharts-graph",b.lineColor||this.color,b.dashStyle]];q(this.zones,function(c,d){e.push(["zone-graph-"+d,"highcharts-graph highcharts-zone-graph-"+d+" "+(c.className||""),c.color||a.color,c.dashStyle||b.dashStyle])});q(e,function(e,d){var h=e[0],f=a[h];f?(f.endX=c.xMap,f.animate({d:c})):c.length&&(a[h]=a.chart.renderer.path(c).addClass(e[1]).attr({zIndex:1}).add(a.group),f={stroke:e[2],"stroke-width":b.lineWidth,fill:a.fillGraph&&a.color||"none"},e[3]?f.dashstyle=e[3]:"square"!==b.linecap&&
	(f["stroke-linecap"]=f["stroke-linejoin"]="round"),f=a[h].attr(f).shadow(2>d&&b.shadow));f&&(f.startX=c.xMap,f.isArea=c.isArea)})},applyZones:function(){var a=this,b=this.chart,c=b.renderer,e=this.zones,d,f,n=this.clips||[],m,g=this.graph,p=this.area,l=Math.max(b.chartWidth,b.chartHeight),t=this[(this.zoneAxis||"y")+"Axis"],w,x,r=b.inverted,z,F,u,C,A=!1;e.length&&(g||p)&&t&&void 0!==t.min&&(x=t.reversed,z=t.horiz,g&&g.hide(),p&&p.hide(),w=t.getExtremes(),q(e,function(e,h){d=x?z?b.plotWidth:0:z?0:
	t.toPixels(w.min);d=Math.min(Math.max(E(f,d),0),l);f=Math.min(Math.max(Math.round(t.toPixels(E(e.value,w.max),!0)),0),l);A&&(d=f=t.toPixels(w.max));F=Math.abs(d-f);u=Math.min(d,f);C=Math.max(d,f);t.isXAxis?(m={x:r?C:u,y:0,width:F,height:l},z||(m.x=b.plotHeight-m.x)):(m={x:0,y:r?C:u,width:l,height:F},z&&(m.y=b.plotWidth-m.y));r&&c.isVML&&(m=t.isXAxis?{x:0,y:x?u:C,height:m.width,width:b.chartWidth}:{x:m.y-b.plotLeft-b.spacingBox.x,y:0,width:m.height,height:b.chartHeight});n[h]?n[h].animate(m):(n[h]=
	c.clipRect(m),g&&a["zone-graph-"+h].clip(n[h]),p&&a["zone-area-"+h].clip(n[h]));A=e.value>w.max}),this.clips=n)},invertGroups:function(a){function b(){q(["group","markerGroup"],function(b){c[b]&&(c[b].width=c.yAxis.len,c[b].height=c.xAxis.len,c[b].invert(a))})}var c=this,e;c.xAxis&&(e=B(c.chart,"resize",b),B(c,"destroy",e),b(a),c.invertGroups=b)},plotGroup:function(a,b,c,e,d){var h=this[a],f=!h;f&&(this[a]=h=this.chart.renderer.g(b).attr({zIndex:e||.1}).add(d),h.addClass("highcharts-series-"+this.index+
	" highcharts-"+this.type+"-series highcharts-color-"+this.colorIndex+" "+(this.options.className||"")));h.attr({visibility:c})[f?"attr":"animate"](this.getPlotBox());return h},getPlotBox:function(){var a=this.chart,b=this.xAxis,c=this.yAxis;a.inverted&&(b=c,c=this.xAxis);return{translateX:b?b.left:a.plotLeft,translateY:c?c.top:a.plotTop,scaleX:1,scaleY:1}},render:function(){var a=this,b=a.chart,c,e=a.options,d=!!a.animate&&b.renderer.isSVG&&A(e.animation).duration,f=a.visible?"inherit":"hidden",n=
	e.zIndex,m=a.hasRendered,g=b.seriesGroup,p=b.inverted;c=a.plotGroup("group","series",f,n,g);a.markerGroup=a.plotGroup("markerGroup","markers",f,n,g);d&&a.animate(!0);c.inverted=a.isCartesian?p:!1;a.drawGraph&&(a.drawGraph(),a.applyZones());a.drawDataLabels&&a.drawDataLabels();a.visible&&a.drawPoints();a.drawTracker&&!1!==a.options.enableMouseTracking&&a.drawTracker();a.invertGroups(p);!1===e.clip||a.sharedClipKey||m||c.clip(b.clipRect);d&&a.animate();m||(a.animationTimeout=F(function(){a.afterAnimate()},
	d));a.isDirty=!1;a.hasRendered=!0},redraw:function(){var a=this.chart,b=this.isDirty||this.isDirtyData,c=this.group,e=this.xAxis,d=this.yAxis;c&&(a.inverted&&c.attr({width:a.plotWidth,height:a.plotHeight}),c.animate({translateX:E(e&&e.left,a.plotLeft),translateY:E(d&&d.top,a.plotTop)}));this.translate();this.render();b&&delete this.kdTree},kdDimensions:1,kdAxisArray:["clientX","plotY"],searchPoint:function(a,b){var c=this.xAxis,e=this.yAxis,d=this.chart.inverted;return this.searchKDTree({clientX:d?
	c.len-a.chartY+c.pos:a.chartX-c.pos,plotY:d?e.len-a.chartX+e.pos:a.chartY-e.pos},b)},buildKDTree:function(){function a(c,e,d){var h,f;if(f=c&&c.length)return h=b.kdAxisArray[e%d],c.sort(function(a,b){return a[h]-b[h]}),f=Math.floor(f/2),{point:c[f],left:a(c.slice(0,f),e+1,d),right:a(c.slice(f+1),e+1,d)}}this.buildingKdTree=!0;var b=this,c=b.kdDimensions;delete b.kdTree;F(function(){b.kdTree=a(b.getValidPoints(null,!b.directTouch),c,c);b.buildingKdTree=!1},b.options.kdNow?0:1)},searchKDTree:function(a,
	b){function c(a,b,k,n){var m=b.point,g=e.kdAxisArray[k%n],p,t,q=m;t=l(a[d])&&l(m[d])?Math.pow(a[d]-m[d],2):null;p=l(a[h])&&l(m[h])?Math.pow(a[h]-m[h],2):null;p=(t||0)+(p||0);m.dist=l(p)?Math.sqrt(p):Number.MAX_VALUE;m.distX=l(t)?Math.sqrt(t):Number.MAX_VALUE;g=a[g]-m[g];p=0>g?"left":"right";t=0>g?"right":"left";b[p]&&(p=c(a,b[p],k+1,n),q=p[f]<q[f]?p:m);b[t]&&Math.sqrt(g*g)<q[f]&&(a=c(a,b[t],k+1,n),q=a[f]<q[f]?a:q);return q}var e=this,d=this.kdAxisArray[0],h=this.kdAxisArray[1],f=b?"distX":"dist";
	this.kdTree||this.buildingKdTree||this.buildKDTree();if(this.kdTree)return c(a,this.kdTree,this.kdDimensions,this.kdDimensions)}})})(L);(function(a){function B(a,d,b,f,g){var p=a.chart.inverted;this.axis=a;this.isNegative=b;this.options=d;this.x=f;this.total=null;this.points={};this.stack=g;this.rightCliff=this.leftCliff=0;this.alignOptions={align:d.align||(p?b?"left":"right":"center"),verticalAlign:d.verticalAlign||(p?"middle":b?"bottom":"top"),y:l(d.y,p?4:b?14:-6),x:l(d.x,p?b?-6:6:0)};this.textAlign=
	d.textAlign||(p?b?"right":"left":"center")}var A=a.Axis,H=a.Chart,G=a.correctFloat,r=a.defined,g=a.destroyObjectProperties,f=a.each,u=a.format,l=a.pick;a=a.Series;B.prototype={destroy:function(){g(this,this.axis)},render:function(a){var d=this.options,b=d.format,b=b?u(b,this):d.formatter.call(this);this.label?this.label.attr({text:b,visibility:"hidden"}):this.label=this.axis.chart.renderer.text(b,null,null,d.useHTML).css(d.style).attr({align:this.textAlign,rotation:d.rotation,visibility:"hidden"}).add(a)},
	setOffset:function(a,d){var b=this.axis,f=b.chart,g=f.inverted,l=b.reversed,l=this.isNegative&&!l||!this.isNegative&&l,m=b.translate(b.usePercentage?100:this.total,0,0,0,1),b=b.translate(0),b=Math.abs(m-b);a=f.xAxis[0].translate(this.x)+a;var c=f.plotHeight,g={x:g?l?m:m-b:a,y:g?c-a-d:l?c-m-b:c-m,width:g?b:d,height:g?d:b};if(d=this.label)d.align(this.alignOptions,null,g),g=d.alignAttr,d[!1===this.options.crop||f.isInsidePlot(g.x,g.y)?"show":"hide"](!0)}};H.prototype.getStacks=function(){var a=this;
	f(a.yAxis,function(a){a.stacks&&a.hasVisibleSeries&&(a.oldStacks=a.stacks)});f(a.series,function(d){!d.options.stacking||!0!==d.visible&&!1!==a.options.chart.ignoreHiddenSeries||(d.stackKey=d.type+l(d.options.stack,""))})};A.prototype.buildStacks=function(){var a=this.series,d,b=l(this.options.reversedStacks,!0),f=a.length,g;if(!this.isXAxis){this.usePercentage=!1;for(g=f;g--;)a[b?g:f-g-1].setStackedPoints();for(g=f;g--;)d=a[b?g:f-g-1],d.setStackCliffs&&d.setStackCliffs();if(this.usePercentage)for(g=
	0;g<f;g++)a[g].setPercentStacks()}};A.prototype.renderStackTotals=function(){var a=this.chart,d=a.renderer,b=this.stacks,f,g,l=this.stackTotalGroup;l||(this.stackTotalGroup=l=d.g("stack-labels").attr({visibility:"visible",zIndex:6}).add());l.translate(a.plotLeft,a.plotTop);for(f in b)for(g in a=b[f],a)a[g].render(l)};A.prototype.resetStacks=function(){var a=this.stacks,d,b;if(!this.isXAxis)for(d in a)for(b in a[d])a[d][b].touched<this.stacksTouched?(a[d][b].destroy(),delete a[d][b]):(a[d][b].total=
	null,a[d][b].cum=null)};A.prototype.cleanStacks=function(){var a,d,b;if(!this.isXAxis)for(d in this.oldStacks&&(a=this.stacks=this.oldStacks),a)for(b in a[d])a[d][b].cum=a[d][b].total};a.prototype.setStackedPoints=function(){if(this.options.stacking&&(!0===this.visible||!1===this.chart.options.chart.ignoreHiddenSeries)){var a=this.processedXData,d=this.processedYData,b=[],f=d.length,g=this.options,t=g.threshold,m=g.startFromThreshold?t:0,c=g.stack,g=g.stacking,n=this.stackKey,u="-"+n,z=this.negStacks,
	e=this.yAxis,x=e.stacks,F=e.oldStacks,w,h,y,A,K,I,k;e.stacksTouched+=1;for(K=0;K<f;K++)I=a[K],k=d[K],w=this.getStackIndicator(w,I,this.index),A=w.key,y=(h=z&&k<(m?0:t))?u:n,x[y]||(x[y]={}),x[y][I]||(F[y]&&F[y][I]?(x[y][I]=F[y][I],x[y][I].total=null):x[y][I]=new B(e,e.options.stackLabels,h,I,c)),y=x[y][I],null!==k&&(y.points[A]=y.points[this.index]=[l(y.cum,m)],r(y.cum)||(y.base=A),y.touched=e.stacksTouched,0<w.index&&!1===this.singleStacks&&(y.points[A][0]=y.points[this.index+","+I+",0"][0])),"percent"===
	g?(h=h?n:u,z&&x[h]&&x[h][I]?(h=x[h][I],y.total=h.total=Math.max(h.total,y.total)+Math.abs(k)||0):y.total=G(y.total+(Math.abs(k)||0))):y.total=G(y.total+(k||0)),y.cum=l(y.cum,m)+(k||0),null!==k&&(y.points[A].push(y.cum),b[K]=y.cum);"percent"===g&&(e.usePercentage=!0);this.stackedYData=b;e.oldStacks={}}};a.prototype.setPercentStacks=function(){var a=this,d=a.stackKey,b=a.yAxis.stacks,g=a.processedXData,l;f([d,"-"+d],function(d){for(var f=g.length,c,n;f--;)if(c=g[f],l=a.getStackIndicator(l,c,a.index,
	d),c=(n=b[d]&&b[d][c])&&n.points[l.key])n=n.total?100/n.total:0,c[0]=G(c[0]*n),c[1]=G(c[1]*n),a.stackedYData[f]=c[1]})};a.prototype.getStackIndicator=function(a,d,b,f){!r(a)||a.x!==d||f&&a.key!==f?a={x:d,index:0,key:f}:a.index++;a.key=[b,d,a.index].join();return a}})(L);(function(a){var B=a.addEvent,A=a.animate,H=a.Axis,G=a.createElement,r=a.css,g=a.defined,f=a.each,u=a.erase,l=a.extend,q=a.fireEvent,d=a.inArray,b=a.isNumber,p=a.isObject,C=a.merge,t=a.pick,m=a.Point,c=a.Series,n=a.seriesTypes,E=a.setAnimation,
	z=a.splat;l(a.Chart.prototype,{addSeries:function(a,b,c){var e,d=this;a&&(b=t(b,!0),q(d,"addSeries",{options:a},function(){e=d.initSeries(a);d.isDirtyLegend=!0;d.linkSeries();b&&d.redraw(c)}));return e},addAxis:function(a,b,c,d){var e=b?"xAxis":"yAxis",f=this.options;a=C(a,{index:this[e].length,isX:b});new H(this,a);f[e]=z(f[e]||{});f[e].push(a);t(c,!0)&&this.redraw(d)},showLoading:function(a){var b=this,c=b.options,e=b.loadingDiv,d=c.loading,f=function(){e&&r(e,{left:b.plotLeft+"px",top:b.plotTop+
	"px",width:b.plotWidth+"px",height:b.plotHeight+"px"})};e||(b.loadingDiv=e=G("div",{className:"highcharts-loading highcharts-loading-hidden"},null,b.container),b.loadingSpan=G("span",{className:"highcharts-loading-inner"},null,e),B(b,"redraw",f));e.className="highcharts-loading";b.loadingSpan.innerHTML=a||c.lang.loading;r(e,l(d.style,{zIndex:10}));r(b.loadingSpan,d.labelStyle);b.loadingShown||(r(e,{opacity:0,display:""}),A(e,{opacity:d.style.opacity||.5},{duration:d.showDuration||0}));b.loadingShown=
	!0;f()},hideLoading:function(){var a=this.options,b=this.loadingDiv;b&&(b.className="highcharts-loading highcharts-loading-hidden",A(b,{opacity:0},{duration:a.loading.hideDuration||100,complete:function(){r(b,{display:"none"})}}));this.loadingShown=!1},propsRequireDirtyBox:"backgroundColor borderColor borderWidth margin marginTop marginRight marginBottom marginLeft spacing spacingTop spacingRight spacingBottom spacingLeft borderRadius plotBackgroundColor plotBackgroundImage plotBorderColor plotBorderWidth plotShadow shadow".split(" "),
	propsRequireUpdateSeries:"chart.inverted chart.polar chart.ignoreHiddenSeries chart.type colors plotOptions".split(" "),update:function(a,c){var e,n={credits:"addCredits",title:"setTitle",subtitle:"setSubtitle"},h=a.chart,m,p;if(h){C(!0,this.options.chart,h);"className"in h&&this.setClassName(h.className);if("inverted"in h||"polar"in h)this.propFromSeries(),m=!0;for(e in h)h.hasOwnProperty(e)&&(-1!==d("chart."+e,this.propsRequireUpdateSeries)&&(p=!0),-1!==d(e,this.propsRequireDirtyBox)&&(this.isDirtyBox=
	!0));"style"in h&&this.renderer.setStyle(h.style)}for(e in a){if(this[e]&&"function"===typeof this[e].update)this[e].update(a[e],!1);else if("function"===typeof this[n[e]])this[n[e]](a[e]);"chart"!==e&&-1!==d(e,this.propsRequireUpdateSeries)&&(p=!0)}a.colors&&(this.options.colors=a.colors);a.plotOptions&&C(!0,this.options.plotOptions,a.plotOptions);f(["xAxis","yAxis","series"],function(b){a[b]&&f(z(a[b]),function(a,c){(c=g(a.id)&&this.get(a.id)||this[b][c])&&c.coll===b&&c.update(a,!1)},this)},this);
	m&&f(this.axes,function(a){a.update({},!1)});p&&f(this.series,function(a){a.update({},!1)});a.loading&&C(!0,this.options.loading,a.loading);e=h&&h.width;h=h&&h.height;b(e)&&e!==this.chartWidth||b(h)&&h!==this.chartHeight?this.setSize(e,h):t(c,!0)&&this.redraw()},setSubtitle:function(a){this.setTitle(void 0,a)}});l(m.prototype,{update:function(a,b,c,d){function e(){f.applyOptions(a);null===f.y&&n&&(f.graphic=n.destroy());p(a,!0)&&(n&&n.element&&a&&a.marker&&a.marker.symbol&&(f.graphic=n.destroy()),
	a&&a.dataLabels&&f.dataLabel&&(f.dataLabel=f.dataLabel.destroy()));m=f.index;g.updateParallelArrays(f,m);l.data[m]=p(l.data[m],!0)?f.options:a;g.isDirty=g.isDirtyData=!0;!g.fixedBox&&g.hasCartesianSeries&&(k.isDirtyBox=!0);"point"===l.legendType&&(k.isDirtyLegend=!0);b&&k.redraw(c)}var f=this,g=f.series,n=f.graphic,m,k=g.chart,l=g.options;b=t(b,!0);!1===d?e():f.firePointEvent("update",{options:a},e)},remove:function(a,b){this.series.removePoint(d(this,this.series.data),a,b)}});l(c.prototype,{addPoint:function(a,
	b,c,d){var e=this.options,f=this.data,g=this.chart,n=this.xAxis,n=n&&n.hasNames&&n.names,m=e.data,k,p,l=this.xData,q,w;b=t(b,!0);k={series:this};this.pointClass.prototype.applyOptions.apply(k,[a]);w=k.x;q=l.length;if(this.requireSorting&&w<l[q-1])for(p=!0;q&&l[q-1]>w;)q--;this.updateParallelArrays(k,"splice",q,0,0);this.updateParallelArrays(k,q);n&&k.name&&(n[w]=k.name);m.splice(q,0,a);p&&(this.data.splice(q,0,null),this.processData());"point"===e.legendType&&this.generatePoints();c&&(f[0]&&f[0].remove?
	f[0].remove(!1):(f.shift(),this.updateParallelArrays(k,"shift"),m.shift()));this.isDirtyData=this.isDirty=!0;b&&g.redraw(d)},removePoint:function(a,b,c){var e=this,d=e.data,f=d[a],g=e.points,n=e.chart,m=function(){g&&g.length===d.length&&g.splice(a,1);d.splice(a,1);e.options.data.splice(a,1);e.updateParallelArrays(f||{series:e},"splice",a,1);f&&f.destroy();e.isDirty=!0;e.isDirtyData=!0;b&&n.redraw()};E(c,n);b=t(b,!0);f?f.firePointEvent("remove",null,m):m()},remove:function(a,b,c){function e(){d.destroy();
	f.isDirtyLegend=f.isDirtyBox=!0;f.linkSeries();t(a,!0)&&f.redraw(b)}var d=this,f=d.chart;!1!==c?q(d,"remove",null,e):e()},update:function(a,b){var c=this,e=this.chart,d=this.userOptions,g=this.type,m=a.type||d.type||e.options.chart.type,p=n[g].prototype,q=["group","markerGroup","dataLabelsGroup"],k;if(m&&m!==g||void 0!==a.zIndex)q.length=0;f(q,function(a){q[a]=c[a];delete c[a]});a=C(d,{animation:!1,index:this.index,pointStart:this.xData[0]},{data:this.options.data},a);this.remove(!1,null,!1);for(k in p)this[k]=
	void 0;l(this,n[m||g].prototype);f(q,function(a){c[a]=q[a]});this.init(e,a);e.linkSeries();t(b,!0)&&e.redraw(!1)}});l(H.prototype,{update:function(a,b){var c=this.chart;a=c.options[this.coll][this.options.index]=C(this.userOptions,a);this.destroy(!0);this.init(c,l(a,{events:void 0}));c.isDirtyBox=!0;t(b,!0)&&c.redraw()},remove:function(a){for(var b=this.chart,c=this.coll,e=this.series,d=e.length;d--;)e[d]&&e[d].remove(!1);u(b.axes,this);u(b[c],this);b.options[c].splice(this.options.index,1);f(b[c],
	function(a,b){a.options.index=b});this.destroy();b.isDirtyBox=!0;t(a,!0)&&b.redraw()},setTitle:function(a,b){this.update({title:a},b)},setCategories:function(a,b){this.update({categories:a},b)}})})(L);(function(a){var B=a.color,A=a.each,H=a.map,G=a.pick,r=a.Series,g=a.seriesType;g("area","line",{softThreshold:!1,threshold:0},{singleStacks:!1,getStackPoints:function(){var a=[],g=[],l=this.xAxis,q=this.yAxis,d=q.stacks[this.stackKey],b={},p=this.points,r=this.index,t=q.series,m=t.length,c,n=G(q.options.reversedStacks,
	!0)?1:-1,E,z;if(this.options.stacking){for(E=0;E<p.length;E++)b[p[E].x]=p[E];for(z in d)null!==d[z].total&&g.push(z);g.sort(function(a,b){return a-b});c=H(t,function(){return this.visible});A(g,function(e,f){var p=0,t,h;if(b[e]&&!b[e].isNull)a.push(b[e]),A([-1,1],function(a){var p=1===a?"rightNull":"leftNull",l=0,q=d[g[f+a]];if(q)for(E=r;0<=E&&E<m;)t=q.points[E],t||(E===r?b[e][p]=!0:c[E]&&(h=d[e].points[E])&&(l-=h[1]-h[0])),E+=n;b[e][1===a?"rightCliff":"leftCliff"]=l});else{for(E=r;0<=E&&E<m;){if(t=
	d[e].points[E]){p=t[1];break}E+=n}p=q.toPixels(p,!0);a.push({isNull:!0,plotX:l.toPixels(e,!0),plotY:p,yBottom:p})}})}return a},getGraphPath:function(a){var f=r.prototype.getGraphPath,g=this.options,q=g.stacking,d=this.yAxis,b,p,C=[],t=[],m=this.index,c,n=d.stacks[this.stackKey],E=g.threshold,z=d.getThreshold(g.threshold),e,g=g.connectNulls||"percent"===q,x=function(b,e,f){var h=a[b];b=q&&n[h.x].points[m];var g=h[f+"Null"]||0;f=h[f+"Cliff"]||0;var p,l,h=!0;f||g?(p=(g?b[0]:b[1])+f,l=b[0]+f,h=!!g):!q&&
	a[e]&&a[e].isNull&&(p=l=E);void 0!==p&&(t.push({plotX:c,plotY:null===p?z:d.getThreshold(p),isNull:h}),C.push({plotX:c,plotY:null===l?z:d.getThreshold(l),doCurve:!1}))};a=a||this.points;q&&(a=this.getStackPoints());for(b=0;b<a.length;b++)if(p=a[b].isNull,c=G(a[b].rectPlotX,a[b].plotX),e=G(a[b].yBottom,z),!p||g)g||x(b,b-1,"left"),p&&!q&&g||(t.push(a[b]),C.push({x:b,plotX:c,plotY:e})),g||x(b,b+1,"right");b=f.call(this,t,!0,!0);C.reversed=!0;p=f.call(this,C,!0,!0);p.length&&(p[0]="L");p=b.concat(p);f=
	f.call(this,t,!1,g);p.xMap=b.xMap;this.areaPath=p;return f},drawGraph:function(){this.areaPath=[];r.prototype.drawGraph.apply(this);var a=this,g=this.areaPath,l=this.options,q=[["area","highcharts-area",this.color,l.fillColor]];A(this.zones,function(d,b){q.push(["zone-area-"+b,"highcharts-area highcharts-zone-area-"+b+" "+d.className,d.color||a.color,d.fillColor||l.fillColor])});A(q,function(d){var b=d[0],f=a[b];f?(f.endX=g.xMap,f.animate({d:g})):(f=a[b]=a.chart.renderer.path(g).addClass(d[1]).attr({fill:G(d[3],
	B(d[2]).setOpacity(G(l.fillOpacity,.75)).get()),zIndex:0}).add(a.group),f.isArea=!0);f.startX=g.xMap;f.shiftUnit=l.step?2:1})},drawLegendSymbol:a.LegendSymbolMixin.drawRectangle})})(L);(function(a){var B=a.pick;a=a.seriesType;a("spline","line",{},{getPointSpline:function(a,H,G){var r=H.plotX,g=H.plotY,f=a[G-1];G=a[G+1];var u,l,q,d;if(f&&!f.isNull&&!1!==f.doCurve&&G&&!G.isNull&&!1!==G.doCurve){a=f.plotY;q=G.plotX;G=G.plotY;var b=0;u=(1.5*r+f.plotX)/2.5;l=(1.5*g+a)/2.5;q=(1.5*r+q)/2.5;d=(1.5*g+G)/2.5;
	q!==u&&(b=(d-l)*(q-r)/(q-u)+g-d);l+=b;d+=b;l>a&&l>g?(l=Math.max(a,g),d=2*g-l):l<a&&l<g&&(l=Math.min(a,g),d=2*g-l);d>G&&d>g?(d=Math.max(G,g),l=2*g-d):d<G&&d<g&&(d=Math.min(G,g),l=2*g-d);H.rightContX=q;H.rightContY=d}H=["C",B(f.rightContX,f.plotX),B(f.rightContY,f.plotY),B(u,r),B(l,g),r,g];f.rightContX=f.rightContY=null;return H}})})(L);(function(a){var B=a.seriesTypes.area.prototype,A=a.seriesType;A("areaspline","spline",a.defaultPlotOptions.area,{getStackPoints:B.getStackPoints,getGraphPath:B.getGraphPath,
	setStackCliffs:B.setStackCliffs,drawGraph:B.drawGraph,drawLegendSymbol:a.LegendSymbolMixin.drawRectangle})})(L);(function(a){var B=a.animObject,A=a.color,H=a.each,G=a.extend,r=a.isNumber,g=a.merge,f=a.pick,u=a.Series,l=a.seriesType,q=a.svg;l("column","line",{borderRadius:0,groupPadding:.2,marker:null,pointPadding:.1,minPointLength:0,cropThreshold:50,pointRange:null,states:{hover:{halo:!1,brightness:.1,shadow:!1},select:{color:"#cccccc",borderColor:"#000000",shadow:!1}},dataLabels:{align:null,verticalAlign:null,
	y:null},softThreshold:!1,startFromThreshold:!0,stickyTracking:!1,tooltip:{distance:6},threshold:0,borderColor:"#ffffff"},{cropShoulder:0,directTouch:!0,trackerGroups:["group","dataLabelsGroup"],negStacks:!0,init:function(){u.prototype.init.apply(this,arguments);var a=this,b=a.chart;b.hasRendered&&H(b.series,function(b){b.type===a.type&&(b.isDirty=!0)})},getColumnMetrics:function(){var a=this,b=a.options,g=a.xAxis,l=a.yAxis,t=g.reversed,m,c={},n=0;!1===b.grouping?n=1:H(a.chart.series,function(b){var e=
	b.options,d=b.yAxis,f;b.type===a.type&&b.visible&&l.len===d.len&&l.pos===d.pos&&(e.stacking?(m=b.stackKey,void 0===c[m]&&(c[m]=n++),f=c[m]):!1!==e.grouping&&(f=n++),b.columnIndex=f)});var q=Math.min(Math.abs(g.transA)*(g.ordinalSlope||b.pointRange||g.closestPointRange||g.tickInterval||1),g.len),r=q*b.groupPadding,e=(q-2*r)/(n||1),b=Math.min(b.maxPointWidth||g.len,f(b.pointWidth,e*(1-2*b.pointPadding)));a.columnMetrics={width:b,offset:(e-b)/2+(r+((a.columnIndex||0)+(t?1:0))*e-q/2)*(t?-1:1)};return a.columnMetrics},
	crispCol:function(a,b,f,g){var d=this.chart,m=this.borderWidth,c=-(m%2?.5:0),m=m%2?.5:1;d.inverted&&d.renderer.isVML&&(m+=1);f=Math.round(a+f)+c;a=Math.round(a)+c;g=Math.round(b+g)+m;c=.5>=Math.abs(b)&&.5<g;b=Math.round(b)+m;g-=b;c&&g&&(--b,g+=1);return{x:a,y:b,width:f-a,height:g}},translate:function(){var a=this,b=a.chart,g=a.options,l=a.dense=2>a.closestPointRange*a.xAxis.transA,l=a.borderWidth=f(g.borderWidth,l?0:1),t=a.yAxis,m=a.translatedThreshold=t.getThreshold(g.threshold),c=f(g.minPointLength,
	5),n=a.getColumnMetrics(),q=n.width,r=a.barW=Math.max(q,1+2*l),e=a.pointXOffset=n.offset;b.inverted&&(m-=.5);g.pointPadding&&(r=Math.ceil(r));u.prototype.translate.apply(a);H(a.points,function(d){var g=f(d.yBottom,m),n=999+Math.abs(g),n=Math.min(Math.max(-n,d.plotY),t.len+n),h=d.plotX+e,l=r,p=Math.min(n,g),z,x=Math.max(n,g)-p;Math.abs(x)<c&&c&&(x=c,z=!t.reversed&&!d.negative||t.reversed&&d.negative,p=Math.abs(p-m)>c?g-c:m-(z?c:0));d.barX=h;d.pointWidth=q;d.tooltipPos=b.inverted?[t.len+t.pos-b.plotLeft-
	n,a.xAxis.len-h-l/2,x]:[h+l/2,n+t.pos-b.plotTop,x];d.shapeType="rect";d.shapeArgs=a.crispCol.apply(a,d.isNull?[d.plotX,t.len/2,0,0]:[h,p,l,x])})},getSymbol:a.noop,drawLegendSymbol:a.LegendSymbolMixin.drawRectangle,drawGraph:function(){this.group[this.dense?"addClass":"removeClass"]("highcharts-dense-data")},pointAttribs:function(a,b){var d=this.options,f,g=this.pointAttrToOptions||{};f=g.stroke||"borderColor";var m=g["stroke-width"]||"borderWidth",c=a&&a.color||this.color,n=a[f]||d[f]||this.color||
	c,l=a[m]||d[m]||this[m]||0,g=d.dashStyle;a&&this.zones.length&&(c=(c=a.getZone())&&c.color||a.options.color||this.color);b&&(a=d.states[b],b=a.brightness,c=a.color||void 0!==b&&A(c).brighten(a.brightness).get()||c,n=a[f]||n,l=a[m]||l,g=a.dashStyle||g);f={fill:c,stroke:n,"stroke-width":l};d.borderRadius&&(f.r=d.borderRadius);g&&(f.dashstyle=g);return f},drawPoints:function(){var a=this,b=this.chart,f=a.options,l=b.renderer,t=f.animationLimit||250,m;H(a.points,function(c){var d=c.graphic;if(r(c.plotY)&&
	null!==c.y){m=c.shapeArgs;if(d)d[b.pointCount<t?"animate":"attr"](g(m));else c.graphic=d=l[c.shapeType](m).attr({"class":c.getClassName()}).add(c.group||a.group);d.attr(a.pointAttribs(c,c.selected&&"select")).shadow(f.shadow,null,f.stacking&&!f.borderRadius)}else d&&(c.graphic=d.destroy())})},animate:function(a){var b=this,d=this.yAxis,f=b.options,g=this.chart.inverted,m={};q&&(a?(m.scaleY=.001,a=Math.min(d.pos+d.len,Math.max(d.pos,d.toPixels(f.threshold))),g?m.translateX=a-d.len:m.translateY=a,b.group.attr(m)):
	(m[g?"translateX":"translateY"]=d.pos,b.group.animate(m,G(B(b.options.animation),{step:function(a,d){b.group.attr({scaleY:Math.max(.001,d.pos)})}})),b.animate=null))},remove:function(){var a=this,b=a.chart;b.hasRendered&&H(b.series,function(b){b.type===a.type&&(b.isDirty=!0)});u.prototype.remove.apply(a,arguments)}})})(L);(function(a){a=a.seriesType;a("bar","column",null,{inverted:!0})})(L);(function(a){var B=a.Series;a=a.seriesType;a("scatter","line",{lineWidth:0,marker:{enabled:!0},tooltip:{headerFormat:'\x3cspan style\x3d"color:{point.color}"\x3e\u25cf\x3c/span\x3e \x3cspan style\x3d"font-size: 0.85em"\x3e {series.name}\x3c/span\x3e\x3cbr/\x3e',
	pointFormat:"x: \x3cb\x3e{point.x}\x3c/b\x3e\x3cbr/\x3ey: \x3cb\x3e{point.y}\x3c/b\x3e\x3cbr/\x3e"}},{sorted:!1,requireSorting:!1,noSharedTooltip:!0,trackerGroups:["group","markerGroup","dataLabelsGroup"],takeOrdinalPosition:!1,kdDimensions:2,drawGraph:function(){this.options.lineWidth&&B.prototype.drawGraph.call(this)}})})(L);(function(a){var B=a.pick,A=a.relativeLength;a.CenteredSeriesMixin={getCenter:function(){var a=this.options,G=this.chart,r=2*(a.slicedOffset||0),g=G.plotWidth-2*r,G=G.plotHeight-
	2*r,f=a.center,f=[B(f[0],"50%"),B(f[1],"50%"),a.size||"100%",a.innerSize||0],u=Math.min(g,G),l,q;for(l=0;4>l;++l)q=f[l],a=2>l||2===l&&/%$/.test(q),f[l]=A(q,[g,G,u,f[2]][l])+(a?r:0);f[3]>f[2]&&(f[3]=f[2]);return f}}})(L);(function(a){var B=a.addEvent,A=a.defined,H=a.each,G=a.extend,r=a.inArray,g=a.noop,f=a.pick,u=a.Point,l=a.Series,q=a.seriesType,d=a.setAnimation;q("pie","line",{center:[null,null],clip:!1,colorByPoint:!0,dataLabels:{distance:30,enabled:!0,formatter:function(){return null===this.y?
	void 0:this.point.name},x:0},ignoreHiddenPoint:!0,legendType:"point",marker:null,size:null,showInLegend:!1,slicedOffset:10,stickyTracking:!1,tooltip:{followPointer:!0},borderColor:"#ffffff",borderWidth:1,states:{hover:{brightness:.1,shadow:!1}}},{isCartesian:!1,requireSorting:!1,directTouch:!0,noSharedTooltip:!0,trackerGroups:["group","dataLabelsGroup"],axisTypes:[],pointAttribs:a.seriesTypes.column.prototype.pointAttribs,animate:function(a){var b=this,d=b.points,f=b.startAngleRad;a||(H(d,function(a){var c=
	a.graphic,d=a.shapeArgs;c&&(c.attr({r:a.startR||b.center[3]/2,start:f,end:f}),c.animate({r:d.r,start:d.start,end:d.end},b.options.animation))}),b.animate=null)},updateTotals:function(){var a,d=0,f=this.points,g=f.length,m,c=this.options.ignoreHiddenPoint;for(a=0;a<g;a++)m=f[a],0>m.y&&(m.y=null),d+=c&&!m.visible?0:m.y;this.total=d;for(a=0;a<g;a++)m=f[a],m.percentage=0<d&&(m.visible||!c)?m.y/d*100:0,m.total=d},generatePoints:function(){l.prototype.generatePoints.call(this);this.updateTotals()},translate:function(a){this.generatePoints();
	var b=0,d=this.options,g=d.slicedOffset,m=g+(d.borderWidth||0),c,n,l,q=d.startAngle||0,e=this.startAngleRad=Math.PI/180*(q-90),q=(this.endAngleRad=Math.PI/180*(f(d.endAngle,q+360)-90))-e,r=this.points,u=d.dataLabels.distance,d=d.ignoreHiddenPoint,w,h=r.length,y;a||(this.center=a=this.getCenter());this.getX=function(b,c){l=Math.asin(Math.min((b-a[1])/(a[2]/2+u),1));return a[0]+(c?-1:1)*Math.cos(l)*(a[2]/2+u)};for(w=0;w<h;w++){y=r[w];c=e+b*q;if(!d||y.visible)b+=y.percentage/100;n=e+b*q;y.shapeType=
	"arc";y.shapeArgs={x:a[0],y:a[1],r:a[2]/2,innerR:a[3]/2,start:Math.round(1E3*c)/1E3,end:Math.round(1E3*n)/1E3};l=(n+c)/2;l>1.5*Math.PI?l-=2*Math.PI:l<-Math.PI/2&&(l+=2*Math.PI);y.slicedTranslation={translateX:Math.round(Math.cos(l)*g),translateY:Math.round(Math.sin(l)*g)};c=Math.cos(l)*a[2]/2;n=Math.sin(l)*a[2]/2;y.tooltipPos=[a[0]+.7*c,a[1]+.7*n];y.half=l<-Math.PI/2||l>Math.PI/2?1:0;y.angle=l;m=Math.min(m,u/5);y.labelPos=[a[0]+c+Math.cos(l)*u,a[1]+n+Math.sin(l)*u,a[0]+c+Math.cos(l)*m,a[1]+n+Math.sin(l)*
	m,a[0]+c,a[1]+n,0>u?"center":y.half?"right":"left",l]}},drawGraph:null,drawPoints:function(){var a=this,d=a.chart.renderer,f,g,m,c,n=a.options.shadow;n&&!a.shadowGroup&&(a.shadowGroup=d.g("shadow").add(a.group));H(a.points,function(b){if(null!==b.y){g=b.graphic;c=b.shapeArgs;f=b.sliced?b.slicedTranslation:{};var l=b.shadowGroup;n&&!l&&(l=b.shadowGroup=d.g("shadow").add(a.shadowGroup));l&&l.attr(f);m=a.pointAttribs(b,b.selected&&"select");g?g.setRadialReference(a.center).attr(m).animate(G(c,f)):(b.graphic=
	g=d[b.shapeType](c).addClass(b.getClassName()).setRadialReference(a.center).attr(f).add(a.group),b.visible||g.attr({visibility:"hidden"}),g.attr(m).attr({"stroke-linejoin":"round"}).shadow(n,l))}})},searchPoint:g,sortByAngle:function(a,d){a.sort(function(a,b){return void 0!==a.angle&&(b.angle-a.angle)*d})},drawLegendSymbol:a.LegendSymbolMixin.drawRectangle,getCenter:a.CenteredSeriesMixin.getCenter,getSymbol:g},{init:function(){u.prototype.init.apply(this,arguments);var a=this,d;a.name=f(a.name,"Slice");
	d=function(b){a.slice("select"===b.type)};B(a,"select",d);B(a,"unselect",d);return a},setVisible:function(a,d){var b=this,g=b.series,m=g.chart,c=g.options.ignoreHiddenPoint;d=f(d,c);a!==b.visible&&(b.visible=b.options.visible=a=void 0===a?!b.visible:a,g.options.data[r(b,g.data)]=b.options,H(["graphic","dataLabel","connector","shadowGroup"],function(c){if(b[c])b[c][a?"show":"hide"](!0)}),b.legendItem&&m.legend.colorizeItem(b,a),a||"hover"!==b.state||b.setState(""),c&&(g.isDirty=!0),d&&m.redraw())},
	slice:function(a,g,l){var b=this.series;d(l,b.chart);f(g,!0);this.sliced=this.options.sliced=a=A(a)?a:!this.sliced;b.options.data[r(this,b.data)]=this.options;a=a?this.slicedTranslation:{translateX:0,translateY:0};this.graphic.animate(a);this.shadowGroup&&this.shadowGroup.animate(a)},haloPath:function(a){var b=this.shapeArgs;return this.sliced||!this.visible?[]:this.series.chart.renderer.symbols.arc(b.x,b.y,b.r+a,b.r+a,{innerR:this.shapeArgs.r,start:b.start,end:b.end})}})})(L);(function(a){var B=
	a.addEvent,A=a.arrayMax,H=a.defined,G=a.each,r=a.extend,g=a.format,f=a.map,u=a.merge,l=a.noop,q=a.pick,d=a.relativeLength,b=a.Series,p=a.seriesTypes,C=a.stableSort;a.distribute=function(a,b){function c(a,b){return a.target-b.target}var d,g=!0,m=a,e=[],l;l=0;for(d=a.length;d--;)l+=a[d].size;if(l>b){C(a,function(a,b){return(b.rank||0)-(a.rank||0)});for(l=d=0;l<=b;)l+=a[d].size,d++;e=a.splice(d-1,a.length)}C(a,c);for(a=f(a,function(a){return{size:a.size,targets:[a.target]}});g;){for(d=a.length;d--;)g=
	a[d],l=(Math.min.apply(0,g.targets)+Math.max.apply(0,g.targets))/2,g.pos=Math.min(Math.max(0,l-g.size/2),b-g.size);d=a.length;for(g=!1;d--;)0<d&&a[d-1].pos+a[d-1].size>a[d].pos&&(a[d-1].size+=a[d].size,a[d-1].targets=a[d-1].targets.concat(a[d].targets),a[d-1].pos+a[d-1].size>b&&(a[d-1].pos=b-a[d-1].size),a.splice(d,1),g=!0)}d=0;G(a,function(a){var b=0;G(a.targets,function(){m[d].pos=a.pos+b;b+=m[d].size;d++})});m.push.apply(m,e);C(m,c)};b.prototype.drawDataLabels=function(){var a=this,b=a.options,
	c=b.dataLabels,d=a.points,f,l,e=a.hasRendered||0,p,r,w=q(c.defer,!0),h=a.chart.renderer;if(c.enabled||a._hasPointLabels)a.dlProcessOptions&&a.dlProcessOptions(c),r=a.plotGroup("dataLabelsGroup","data-labels",w&&!e?"hidden":"visible",c.zIndex||6),w&&(r.attr({opacity:+e}),e||B(a,"afterAnimate",function(){a.visible&&r.show(!0);r[b.animation?"animate":"attr"]({opacity:1},{duration:200})})),l=c,G(d,function(e){var d,m=e.dataLabel,n,k,t,z=e.connector,w=!m,x;f=e.dlOptions||e.options&&e.options.dataLabels;
	if(d=q(f&&f.enabled,l.enabled)&&null!==e.y)for(k in c=u(l,f),n=e.getLabelConfig(),p=c.format?g(c.format,n):c.formatter.call(n,c),x=c.style,t=c.rotation,x.color=q(c.color,x.color,a.color,"#000000"),"contrast"===x.color&&(x.color=c.inside||0>c.distance||b.stacking?h.getContrast(e.color||a.color):"#000000"),b.cursor&&(x.cursor=b.cursor),n={fill:c.backgroundColor,stroke:c.borderColor,"stroke-width":c.borderWidth,r:c.borderRadius||0,rotation:t,padding:c.padding,zIndex:1},n)void 0===n[k]&&delete n[k];!m||
	d&&H(p)?d&&H(p)&&(m?n.text=p:(m=e.dataLabel=h[t?"text":"label"](p,0,-9999,c.shape,null,null,c.useHTML,null,"data-label"),m.addClass("highcharts-data-label-color-"+e.colorIndex+" "+(c.className||"")+(c.useHTML?"highcharts-tracker":""))),m.attr(n),m.css(x).shadow(c.shadow),m.added||m.add(r),a.alignDataLabel(e,m,c,null,w)):(e.dataLabel=m.destroy(),z&&(e.connector=z.destroy()))})};b.prototype.alignDataLabel=function(a,b,c,d,f){var g=this.chart,e=g.inverted,m=q(a.plotX,-9999),n=q(a.plotY,-9999),l=b.getBBox(),
	h,p=c.rotation,t=c.align,u=this.visible&&(a.series.forceDL||g.isInsidePlot(m,Math.round(n),e)||d&&g.isInsidePlot(m,e?d.x+1:d.y+d.height-1,e)),E="justify"===q(c.overflow,"justify");u&&(h=c.style.fontSize,h=g.renderer.fontMetrics(h,b).b,d=r({x:e?g.plotWidth-n:m,y:Math.round(e?g.plotHeight-m:n),width:0,height:0},d),r(c,{width:l.width,height:l.height}),p?(E=!1,e=g.renderer.rotCorr(h,p),e={x:d.x+c.x+d.width/2+e.x,y:d.y+c.y+{top:0,middle:.5,bottom:1}[c.verticalAlign]*d.height},b[f?"attr":"animate"](e).attr({align:t}),
	m=(p+720)%360,m=180<m&&360>m,"left"===t?e.y-=m?l.height:0:"center"===t?(e.x-=l.width/2,e.y-=l.height/2):"right"===t&&(e.x-=l.width,e.y-=m?0:l.height)):(b.align(c,null,d),e=b.alignAttr),E?this.justifyDataLabel(b,c,e,l,d,f):q(c.crop,!0)&&(u=g.isInsidePlot(e.x,e.y)&&g.isInsidePlot(e.x+l.width,e.y+l.height)),c.shape&&!p&&b.attr({anchorX:a.plotX,anchorY:a.plotY}));u||(b.attr({y:-9999}),b.placed=!1)};b.prototype.justifyDataLabel=function(a,b,c,d,f,g){var e=this.chart,m=b.align,n=b.verticalAlign,l,h,p=a.box?
	0:a.padding||0;l=c.x+p;0>l&&("right"===m?b.align="left":b.x=-l,h=!0);l=c.x+d.width-p;l>e.plotWidth&&("left"===m?b.align="right":b.x=e.plotWidth-l,h=!0);l=c.y+p;0>l&&("bottom"===n?b.verticalAlign="top":b.y=-l,h=!0);l=c.y+d.height-p;l>e.plotHeight&&("top"===n?b.verticalAlign="bottom":b.y=e.plotHeight-l,h=!0);h&&(a.placed=!g,a.align(b,null,f))};p.pie&&(p.pie.prototype.drawDataLabels=function(){var d=this,g=d.data,c,l=d.chart,p=d.options.dataLabels,r=q(p.connectorPadding,10),e=q(p.connectorWidth,1),u=
	l.plotWidth,F=l.plotHeight,w,h=p.distance,y=d.center,C=y[2]/2,B=y[1],H=0<h,k,D,L,N,S=[[],[]],O,v,M,Q,R=[0,0,0,0];d.visible&&(p.enabled||d._hasPointLabels)&&(b.prototype.drawDataLabels.apply(d),G(g,function(a){a.dataLabel&&a.visible&&(S[a.half].push(a),a.dataLabel._pos=null)}),G(S,function(b,e){var g,m,n=b.length,q,t,z;if(n)for(d.sortByAngle(b,e-.5),0<h&&(g=Math.max(0,B-C-h),m=Math.min(B+C+h,l.plotHeight),q=f(b,function(a){if(a.dataLabel)return z=a.dataLabel.getBBox().height||21,{target:a.labelPos[1]-
	g+z/2,size:z,rank:a.y}}),a.distribute(q,m+z-g)),Q=0;Q<n;Q++)c=b[Q],L=c.labelPos,k=c.dataLabel,M=!1===c.visible?"hidden":"inherit",t=L[1],q?void 0===q[Q].pos?M="hidden":(N=q[Q].size,v=g+q[Q].pos):v=t,O=p.justify?y[0]+(e?-1:1)*(C+h):d.getX(v<g+2||v>m-2?t:v,e),k._attr={visibility:M,align:L[6]},k._pos={x:O+p.x+({left:r,right:-r}[L[6]]||0),y:v+p.y-10},L.x=O,L.y=v,null===d.options.size&&(D=k.width,O-D<r?R[3]=Math.max(Math.round(D-O+r),R[3]):O+D>u-r&&(R[1]=Math.max(Math.round(O+D-u+r),R[1])),0>v-N/2?R[0]=
	Math.max(Math.round(-v+N/2),R[0]):v+N/2>F&&(R[2]=Math.max(Math.round(v+N/2-F),R[2])))}),0===A(R)||this.verifyDataLabelOverflow(R))&&(this.placeDataLabels(),H&&e&&G(this.points,function(a){var b;w=a.connector;if((k=a.dataLabel)&&k._pos&&a.visible){M=k._attr.visibility;if(b=!w)a.connector=w=l.renderer.path().addClass("highcharts-data-label-connector highcharts-color-"+a.colorIndex).add(d.dataLabelsGroup),w.attr({"stroke-width":e,stroke:p.connectorColor||a.color||"#666666"});w[b?"attr":"animate"]({d:d.connectorPath(a.labelPos)});
	w.attr("visibility",M)}else w&&(a.connector=w.destroy())}))},p.pie.prototype.connectorPath=function(a){var b=a.x,c=a.y;return q(this.options.dataLabels.softConnector,!0)?["M",b+("left"===a[6]?5:-5),c,"C",b,c,2*a[2]-a[4],2*a[3]-a[5],a[2],a[3],"L",a[4],a[5]]:["M",b+("left"===a[6]?5:-5),c,"L",a[2],a[3],"L",a[4],a[5]]},p.pie.prototype.placeDataLabels=function(){G(this.points,function(a){var b=a.dataLabel;b&&a.visible&&((a=b._pos)?(b.attr(b._attr),b[b.moved?"animate":"attr"](a),b.moved=!0):b&&b.attr({y:-9999}))})},
	p.pie.prototype.alignDataLabel=l,p.pie.prototype.verifyDataLabelOverflow=function(a){var b=this.center,c=this.options,f=c.center,g=c.minSize||80,l,e;null!==f[0]?l=Math.max(b[2]-Math.max(a[1],a[3]),g):(l=Math.max(b[2]-a[1]-a[3],g),b[0]+=(a[3]-a[1])/2);null!==f[1]?l=Math.max(Math.min(l,b[2]-Math.max(a[0],a[2])),g):(l=Math.max(Math.min(l,b[2]-a[0]-a[2]),g),b[1]+=(a[0]-a[2])/2);l<b[2]?(b[2]=l,b[3]=Math.min(d(c.innerSize||0,l),l),this.translate(b),this.drawDataLabels&&this.drawDataLabels()):e=!0;return e});
	p.column&&(p.column.prototype.alignDataLabel=function(a,d,c,f,g){var l=this.chart.inverted,e=a.series,m=a.dlBox||a.shapeArgs,n=q(a.below,a.plotY>q(this.translatedThreshold,e.yAxis.len)),p=q(c.inside,!!this.options.stacking);m&&(f=u(m),0>f.y&&(f.height+=f.y,f.y=0),m=f.y+f.height-e.yAxis.len,0<m&&(f.height-=m),l&&(f={x:e.yAxis.len-f.y-f.height,y:e.xAxis.len-f.x-f.width,width:f.height,height:f.width}),p||(l?(f.x+=n?0:f.width,f.width=0):(f.y+=n?f.height:0,f.height=0)));c.align=q(c.align,!l||p?"center":
	n?"right":"left");c.verticalAlign=q(c.verticalAlign,l||p?"middle":n?"top":"bottom");b.prototype.alignDataLabel.call(this,a,d,c,f,g)})})(L);(function(a){var B=a.Chart,A=a.each,H=a.pick,G=a.addEvent;B.prototype.callbacks.push(function(a){function g(){var f=[];A(a.series,function(a){var g=a.options.dataLabels,q=a.dataLabelCollections||["dataLabel"];(g.enabled||a._hasPointLabels)&&!g.allowOverlap&&a.visible&&A(q,function(d){A(a.points,function(a){a[d]&&(a[d].labelrank=H(a.labelrank,a.shapeArgs&&a.shapeArgs.height),
	f.push(a[d]))})})});a.hideOverlappingLabels(f)}g();G(a,"redraw",g)});B.prototype.hideOverlappingLabels=function(a){var g=a.length,f,r,l,q,d,b,p,C,t,m=function(a,b,d,f,e,g,l,m){return!(e>a+d||e+l<a||g>b+f||g+m<b)};for(r=0;r<g;r++)if(f=a[r])f.oldOpacity=f.opacity,f.newOpacity=1;a.sort(function(a,b){return(b.labelrank||0)-(a.labelrank||0)});for(r=0;r<g;r++)for(l=a[r],f=r+1;f<g;++f)if(q=a[f],l&&q&&l.placed&&q.placed&&0!==l.newOpacity&&0!==q.newOpacity&&(d=l.alignAttr,b=q.alignAttr,p=l.parentGroup,C=q.parentGroup,
	t=2*(l.box?0:l.padding),d=m(d.x+p.translateX,d.y+p.translateY,l.width-t,l.height-t,b.x+C.translateX,b.y+C.translateY,q.width-t,q.height-t)))(l.labelrank<q.labelrank?l:q).newOpacity=0;A(a,function(a){var b,c;a&&(c=a.newOpacity,a.oldOpacity!==c&&a.placed&&(c?a.show(!0):b=function(){a.hide()},a.alignAttr.opacity=c,a[a.isOld?"animate":"attr"](a.alignAttr,null,b)),a.isOld=!0)})}})(L);(function(a){var B=a.addEvent,A=a.Chart,H=a.createElement,G=a.css,r=a.defaultOptions,g=a.defaultPlotOptions,f=a.each,u=
	a.extend,l=a.fireEvent,q=a.hasTouch,d=a.inArray,b=a.isObject,p=a.Legend,C=a.merge,t=a.pick,m=a.Point,c=a.Series,n=a.seriesTypes,E=a.svg;a=a.TrackerMixin={drawTrackerPoint:function(){var a=this,b=a.chart,c=b.pointer,d=function(a){for(var c=a.target,e;c&&!e;)e=c.point,c=c.parentNode;if(void 0!==e&&e!==b.hoverPoint)e.onMouseOver(a)};f(a.points,function(a){a.graphic&&(a.graphic.element.point=a);a.dataLabel&&(a.dataLabel.div?a.dataLabel.div.point=a:a.dataLabel.element.point=a)});a._hasTracking||(f(a.trackerGroups,
	function(b){if(a[b]){a[b].addClass("highcharts-tracker").on("mouseover",d).on("mouseout",function(a){c.onTrackerMouseOut(a)});if(q)a[b].on("touchstart",d);a.options.cursor&&a[b].css(G).css({cursor:a.options.cursor})}}),a._hasTracking=!0)},drawTrackerGraph:function(){var a=this,b=a.options,c=b.trackByArea,d=[].concat(c?a.areaPath:a.graphPath),g=d.length,h=a.chart,l=h.pointer,m=h.renderer,n=h.options.tooltip.snap,p=a.tracker,k,r=function(){if(h.hoverSeries!==a)a.onMouseOver()},t="rgba(192,192,192,"+
	(E?.0001:.002)+")";if(g&&!c)for(k=g+1;k--;)"M"===d[k]&&d.splice(k+1,0,d[k+1]-n,d[k+2],"L"),(k&&"M"===d[k]||k===g)&&d.splice(k,0,"L",d[k-2]+n,d[k-1]);p?p.attr({d:d}):a.graph&&(a.tracker=m.path(d).attr({"stroke-linejoin":"round",visibility:a.visible?"visible":"hidden",stroke:t,fill:c?t:"none","stroke-width":a.graph.strokeWidth()+(c?0:2*n),zIndex:2}).add(a.group),f([a.tracker,a.markerGroup],function(a){a.addClass("highcharts-tracker").on("mouseover",r).on("mouseout",function(a){l.onTrackerMouseOut(a)});
	b.cursor&&a.css({cursor:b.cursor});if(q)a.on("touchstart",r)}))}};n.column&&(n.column.prototype.drawTracker=a.drawTrackerPoint);n.pie&&(n.pie.prototype.drawTracker=a.drawTrackerPoint);n.scatter&&(n.scatter.prototype.drawTracker=a.drawTrackerPoint);u(p.prototype,{setItemEvents:function(a,b,c){var e=this,d=e.chart,f="highcharts-legend-"+(a.series?"point":"series")+"-active";(c?b:a.legendGroup).on("mouseover",function(){a.setState("hover");d.seriesGroup.addClass(f);b.css(e.options.itemHoverStyle)}).on("mouseout",
	function(){b.css(a.visible?e.itemStyle:e.itemHiddenStyle);d.seriesGroup.removeClass(f);a.setState()}).on("click",function(b){var c=function(){a.setVisible&&a.setVisible()};b={browserEvent:b};a.firePointEvent?a.firePointEvent("legendItemClick",b,c):l(a,"legendItemClick",b,c)})},createCheckboxForItem:function(a){a.checkbox=H("input",{type:"checkbox",checked:a.selected,defaultChecked:a.selected},this.options.itemCheckboxStyle,this.chart.container);B(a.checkbox,"click",function(b){l(a.series||a,"checkboxClick",
	{checked:b.target.checked,item:a},function(){a.select()})})}});r.legend.itemStyle.cursor="pointer";u(A.prototype,{showResetZoom:function(){var a=this,b=r.lang,c=a.options.chart.resetZoomButton,d=c.theme,f=d.states,g="chart"===c.relativeTo?null:"plotBox";this.resetZoomButton=a.renderer.button(b.resetZoom,null,null,function(){a.zoomOut()},d,f&&f.hover).attr({align:c.position.align,title:b.resetZoomTitle}).addClass("highcharts-reset-zoom").add().align(c.position,!1,g)},zoomOut:function(){var a=this;
	l(a,"selection",{resetSelection:!0},function(){a.zoom()})},zoom:function(a){var c,d=this.pointer,g=!1,l;!a||a.resetSelection?f(this.axes,function(a){c=a.zoom()}):f(a.xAxis.concat(a.yAxis),function(a){var b=a.axis;d[b.isXAxis?"zoomX":"zoomY"]&&(c=b.zoom(a.min,a.max),b.displayBtn&&(g=!0))});l=this.resetZoomButton;g&&!l?this.showResetZoom():!g&&b(l)&&(this.resetZoomButton=l.destroy());c&&this.redraw(t(this.options.chart.animation,a&&a.animation,100>this.pointCount))},pan:function(a,b){var c=this,d=c.hoverPoints,
	e;d&&f(d,function(a){a.setState()});f("xy"===b?[1,0]:[1],function(b){b=c[b?"xAxis":"yAxis"][0];var d=b.horiz,f=a[d?"chartX":"chartY"],d=d?"mouseDownX":"mouseDownY",g=c[d],h=(b.pointRange||0)/2,k=b.getExtremes(),l=b.toValue(g-f,!0)+h,h=b.toValue(g+b.len-f,!0)-h,m=h<l,g=m?h:l,l=m?l:h,h=Math.min(k.dataMin,k.min)-g,k=l-Math.max(k.dataMax,k.max);b.series.length&&0>h&&0>k&&(b.setExtremes(g,l,!1,!1,{trigger:"pan"}),e=!0);c[d]=f});e&&c.redraw(!1);G(c.container,{cursor:"move"})}});u(m.prototype,{select:function(a,
	b){var c=this,e=c.series,g=e.chart;a=t(a,!c.selected);c.firePointEvent(a?"select":"unselect",{accumulate:b},function(){c.selected=c.options.selected=a;e.options.data[d(c,e.data)]=c.options;c.setState(a&&"select");b||f(g.getSelectedPoints(),function(a){a.selected&&a!==c&&(a.selected=a.options.selected=!1,e.options.data[d(a,e.data)]=a.options,a.setState(""),a.firePointEvent("unselect"))})})},onMouseOver:function(a,b){var c=this.series,d=c.chart,e=d.tooltip,f=d.hoverPoint;if(this.series){if(!b){if(f&&
	f!==this)f.onMouseOut();if(d.hoverSeries!==c)c.onMouseOver();d.hoverPoint=this}!e||e.shared&&!c.noSharedTooltip?e||this.setState("hover"):(this.setState("hover"),e.refresh(this,a));this.firePointEvent("mouseOver")}},onMouseOut:function(){var a=this.series.chart,b=a.hoverPoints;this.firePointEvent("mouseOut");b&&-1!==d(this,b)||(this.setState(),a.hoverPoint=null)},importEvents:function(){if(!this.hasImportedEvents){var a=C(this.series.options.point,this.options).events,b;this.events=a;for(b in a)B(this,
	b,a[b]);this.hasImportedEvents=!0}},setState:function(a,b){var c=Math.floor(this.plotX),d=this.plotY,e=this.series,f=e.options.states[a]||{},l=g[e.type].marker&&e.options.marker,m=l&&!1===l.enabled,n=l&&l.states&&l.states[a]||{},p=!1===n.enabled,k=e.stateMarkerGraphic,q=this.marker||{},r=e.chart,z=e.halo,C,A=l&&e.markerAttribs;a=a||"";if(!(a===this.state&&!b||this.selected&&"select"!==a||!1===f.enabled||a&&(p||m&&!1===n.enabled)||a&&q.states&&q.states[a]&&!1===q.states[a].enabled)){A&&(C=e.markerAttribs(this,
	a));if(this.graphic)this.state&&this.graphic.removeClass("highcharts-point-"+this.state),a&&this.graphic.addClass("highcharts-point-"+a),this.graphic.attr(e.pointAttribs(this,a)),C&&this.graphic.animate(C,t(r.options.chart.animation,n.animation,l.animation)),k&&k.hide();else{if(a&&n){l=q.symbol||e.symbol;k&&k.currentSymbol!==l&&(k=k.destroy());if(k)k[b?"animate":"attr"]({x:C.x,y:C.y});else l&&(e.stateMarkerGraphic=k=r.renderer.symbol(l,C.x,C.y,C.width,C.height).add(e.markerGroup),k.currentSymbol=
	l);k&&k.attr(e.pointAttribs(this,a))}k&&(k[a&&r.isInsidePlot(c,d,r.inverted)?"show":"hide"](),k.element.point=this)}(c=f.halo)&&c.size?(z||(e.halo=z=r.renderer.path().add(A?e.markerGroup:e.group)),z[b?"animate":"attr"]({d:this.haloPath(c.size)}),z.attr({"class":"highcharts-halo highcharts-color-"+t(this.colorIndex,e.colorIndex)}),z.point=this,z.attr(u({fill:this.color||e.color,"fill-opacity":c.opacity,zIndex:-1},c.attributes))):z&&z.point&&z.point.haloPath&&z.animate({d:z.point.haloPath(0)});this.state=
	a}},haloPath:function(a){return this.series.chart.renderer.symbols.circle(Math.floor(this.plotX)-a,this.plotY-a,2*a,2*a)}});u(c.prototype,{onMouseOver:function(){var a=this.chart,b=a.hoverSeries;if(b&&b!==this)b.onMouseOut();this.options.events.mouseOver&&l(this,"mouseOver");this.setState("hover");a.hoverSeries=this},onMouseOut:function(){var a=this.options,b=this.chart,c=b.tooltip,d=b.hoverPoint;b.hoverSeries=null;if(d)d.onMouseOut();this&&a.events.mouseOut&&l(this,"mouseOut");!c||a.stickyTracking||
	c.shared&&!this.noSharedTooltip||c.hide();this.setState()},setState:function(a){var b=this,c=b.options,d=b.graph,g=c.states,h=c.lineWidth,c=0;a=a||"";if(b.state!==a&&(f([b.group,b.markerGroup],function(c){c&&(b.state&&c.removeClass("highcharts-series-"+b.state),a&&c.addClass("highcharts-series-"+a))}),b.state=a,!g[a]||!1!==g[a].enabled)&&(a&&(h=g[a].lineWidth||h+(g[a].lineWidthPlus||0)),d&&!d.dashstyle))for(g={"stroke-width":h},d.attr(g);b["zone-graph-"+c];)b["zone-graph-"+c].attr(g),c+=1},setVisible:function(a,
	b){var c=this,d=c.chart,e=c.legendItem,g,m=d.options.chart.ignoreHiddenSeries,n=c.visible;g=(c.visible=a=c.options.visible=c.userOptions.visible=void 0===a?!n:a)?"show":"hide";f(["group","dataLabelsGroup","markerGroup","tracker","tt"],function(a){if(c[a])c[a][g]()});if(d.hoverSeries===c||(d.hoverPoint&&d.hoverPoint.series)===c)c.onMouseOut();e&&d.legend.colorizeItem(c,a);c.isDirty=!0;c.options.stacking&&f(d.series,function(a){a.options.stacking&&a.visible&&(a.isDirty=!0)});f(c.linkedSeries,function(b){b.setVisible(a,
	!1)});m&&(d.isDirtyBox=!0);!1!==b&&d.redraw();l(c,g)},show:function(){this.setVisible(!0)},hide:function(){this.setVisible(!1)},select:function(a){this.selected=a=void 0===a?!this.selected:a;this.checkbox&&(this.checkbox.checked=a);l(this,a?"select":"unselect")},drawTracker:a.drawTrackerGraph})})(L);(function(a){var B=a.Chart,A=a.each,H=a.inArray,G=a.isObject,r=a.pick,g=a.splat;B.prototype.setResponsive=function(a){var f=this.options.responsive;f&&f.rules&&A(f.rules,function(f){this.matchResponsiveRule(f,
	a)},this)};B.prototype.matchResponsiveRule=function(f,g){var l=this.respRules,q=f.condition,d;d=q.callback||function(){return this.chartWidth<=r(q.maxWidth,Number.MAX_VALUE)&&this.chartHeight<=r(q.maxHeight,Number.MAX_VALUE)&&this.chartWidth>=r(q.minWidth,0)&&this.chartHeight>=r(q.minHeight,0)};void 0===f._id&&(f._id=a.uniqueKey());d=d.call(this);!l[f._id]&&d?f.chartOptions&&(l[f._id]=this.currentOptions(f.chartOptions),this.update(f.chartOptions,g)):l[f._id]&&!d&&(this.update(l[f._id],g),delete l[f._id])};
	B.prototype.currentOptions=function(a){function f(a,d,b,l){var p,q;for(p in a)if(!l&&-1<H(p,["series","xAxis","yAxis"]))for(a[p]=g(a[p]),b[p]=[],q=0;q<a[p].length;q++)b[p][q]={},f(a[p][q],d[p][q],b[p][q],l+1);else G(a[p])?(b[p]={},f(a[p],d[p]||{},b[p],l+1)):b[p]=d[p]||null}var l={};f(a,this.options,l,0);return l}})(L);return L});


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(4);
	var HighchartsModuleExample = (function () {
	    function HighchartsModuleExample() {
	        this.options = {
	            chart: {
	                type: 'column',
	                margin: 75,
	                options3d: {
	                    enabled: true,
	                    alpha: 15,
	                    beta: 15,
	                    depth: 50
	                }
	            },
	            plotOptions: {
	                column: {
	                    depth: 25
	                }
	            },
	            series: [{
	                    data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]
	                }]
	        };
	    }
	    HighchartsModuleExample = __decorate([
	        core_1.Component({
	            selector: 'highcharts-module-example',
	            template: "<chart [options]=\"options\"></chart>"
	        }), 
	        __metadata('design:paramtypes', [])
	    ], HighchartsModuleExample);
	    return HighchartsModuleExample;
	}());
	exports.HighchartsModuleExample = HighchartsModuleExample;


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(36));

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var core_1 = __webpack_require__(4);
	var ChartComponent_1 = __webpack_require__(37);
	exports.ChartComponent = ChartComponent_1.ChartComponent;
	var ChartSeriesComponent_1 = __webpack_require__(38);
	exports.ChartSeriesComponent = ChartSeriesComponent_1.ChartSeriesComponent;
	var ChartPointComponent_1 = __webpack_require__(39);
	exports.ChartPointComponent = ChartPointComponent_1.ChartPointComponent;
	var ChartXAxisComponent_1 = __webpack_require__(40);
	exports.ChartXAxisComponent = ChartXAxisComponent_1.ChartXAxisComponent;
	var ChartYAxisComponent_1 = __webpack_require__(41);
	exports.ChartYAxisComponent = ChartYAxisComponent_1.ChartYAxisComponent;
	var _highchartsStatic;
	var CHART_DIRECTIVES = [
	    ChartComponent_1.ChartComponent,
	    ChartSeriesComponent_1.ChartSeriesComponent,
	    ChartPointComponent_1.ChartPointComponent,
	    ChartXAxisComponent_1.ChartXAxisComponent,
	    ChartYAxisComponent_1.ChartYAxisComponent
	];
	function getHighchartsStatic() {
	    return _highchartsStatic;
	}
	exports.getHighchartsStatic = getHighchartsStatic;
	var ChartModule = ChartModule_1 = (function () {
	    function ChartModule() {
	    }
	    ChartModule.forRoot = function (highchartsStatic) {
	        var highchartsModules = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            highchartsModules[_i - 1] = arguments[_i];
	        }
	        if (!highchartsStatic) {
	            throw new Error('Highcharts module cannot be empty.');
	        }
	        _highchartsStatic = highchartsStatic;
	        highchartsModules.forEach(function (module) {
	            module(_highchartsStatic);
	        });
	        return { ngModule: ChartModule_1 };
	    };
	    return ChartModule;
	}());
	ChartModule = ChartModule_1 = __decorate([
	    core_1.NgModule({ declarations: [CHART_DIRECTIVES], exports: [CHART_DIRECTIVES] })
	], ChartModule);
	exports.ChartModule = ChartModule;
	var ChartModule_1;
	//# sourceMappingURL=index.js.map

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var highcharts = __webpack_require__(33);
	var core_1 = __webpack_require__(4);
	var ChartSeriesComponent_1 = __webpack_require__(38);
	var ChartXAxisComponent_1 = __webpack_require__(40);
	var ChartYAxisComponent_1 = __webpack_require__(41);
	var HighchartsService_1 = __webpack_require__(42);
	var initChart_1 = __webpack_require__(43);
	var createBaseOpts_1 = __webpack_require__(45);
	var ChartComponent = (function () {
	    function ChartComponent(element, highchartsService) {
	        this.create = new core_1.EventEmitter();
	        this.click = new core_1.EventEmitter();
	        this.addSeries = new core_1.EventEmitter();
	        this.afterPrint = new core_1.EventEmitter();
	        this.beforePrint = new core_1.EventEmitter();
	        this.drilldown = new core_1.EventEmitter();
	        this.drillup = new core_1.EventEmitter();
	        this.load = new core_1.EventEmitter();
	        this.redraw = new core_1.EventEmitter();
	        this.selection = new core_1.EventEmitter();
	        this.type = 'Chart';
	        this.element = element;
	        this.highchartsService = highchartsService;
	    }
	    Object.defineProperty(ChartComponent.prototype, "options", {
	        set: function (opts) {
	            this.userOpts = opts;
	            this.init();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    ChartComponent.prototype.init = function () {
	        if (this.userOpts && this.baseOpts) {
	            this.chart = initChart_1.initChart(this.highchartsService, this.userOpts, this.baseOpts, this.type);
	            this.create.emit(this.chart);
	        }
	    };
	    ChartComponent.prototype.ngAfterViewInit = function () {
	        this.baseOpts = createBaseOpts_1.createBaseOpts(this, this.series, this.series ? this.series.point : null, this.xAxis, this.yAxis, this.element.nativeElement);
	        this.init();
	    };
	    return ChartComponent;
	}());
	__decorate([
	    core_1.ContentChild(ChartSeriesComponent_1.ChartSeriesComponent),
	    __metadata("design:type", ChartSeriesComponent_1.ChartSeriesComponent)
	], ChartComponent.prototype, "series", void 0);
	__decorate([
	    core_1.ContentChild(ChartXAxisComponent_1.ChartXAxisComponent),
	    __metadata("design:type", ChartXAxisComponent_1.ChartXAxisComponent)
	], ChartComponent.prototype, "xAxis", void 0);
	__decorate([
	    core_1.ContentChild(ChartYAxisComponent_1.ChartYAxisComponent),
	    __metadata("design:type", ChartYAxisComponent_1.ChartYAxisComponent)
	], ChartComponent.prototype, "yAxis", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartComponent.prototype, "create", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartComponent.prototype, "click", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartComponent.prototype, "addSeries", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartComponent.prototype, "afterPrint", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartComponent.prototype, "beforePrint", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartComponent.prototype, "drilldown", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartComponent.prototype, "drillup", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartComponent.prototype, "load", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartComponent.prototype, "redraw", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartComponent.prototype, "selection", void 0);
	__decorate([
	    core_1.Input(),
	    __metadata("design:type", String)
	], ChartComponent.prototype, "type", void 0);
	__decorate([
	    core_1.Input(),
	    __metadata("design:type", Object),
	    __metadata("design:paramtypes", [Object])
	], ChartComponent.prototype, "options", null);
	ChartComponent = __decorate([
	    core_1.Component({
	        selector: 'chart',
	        template: '&nbsp;',
	        providers: [HighchartsService_1.HighchartsService],
	    }),
	    __metadata("design:paramtypes", [core_1.ElementRef, HighchartsService_1.HighchartsService])
	], ChartComponent);
	exports.ChartComponent = ChartComponent;
	//# sourceMappingURL=ChartComponent.js.map

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(4);
	var ChartPointComponent_1 = __webpack_require__(39);
	var ChartSeriesComponent = (function () {
	    function ChartSeriesComponent() {
	        this.click = new core_1.EventEmitter();
	        this.afterAnimate = new core_1.EventEmitter();
	        this.checkboxClick = new core_1.EventEmitter();
	        this.hide = new core_1.EventEmitter();
	        this.legendItemClick = new core_1.EventEmitter();
	        this.mouseOver = new core_1.EventEmitter();
	        this.mouseOut = new core_1.EventEmitter();
	        this.show = new core_1.EventEmitter();
	    }
	    return ChartSeriesComponent;
	}());
	__decorate([
	    core_1.ContentChild(ChartPointComponent_1.ChartPointComponent),
	    __metadata("design:type", ChartPointComponent_1.ChartPointComponent)
	], ChartSeriesComponent.prototype, "point", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartSeriesComponent.prototype, "click", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartSeriesComponent.prototype, "afterAnimate", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartSeriesComponent.prototype, "checkboxClick", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartSeriesComponent.prototype, "hide", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartSeriesComponent.prototype, "legendItemClick", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartSeriesComponent.prototype, "mouseOver", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartSeriesComponent.prototype, "mouseOut", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartSeriesComponent.prototype, "show", void 0);
	ChartSeriesComponent = __decorate([
	    core_1.Directive({
	        selector: 'series'
	    })
	], ChartSeriesComponent);
	exports.ChartSeriesComponent = ChartSeriesComponent;
	//# sourceMappingURL=ChartSeriesComponent.js.map

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(4);
	var ChartPointComponent = (function () {
	    function ChartPointComponent() {
	        this.click = new core_1.EventEmitter();
	        this.remove = new core_1.EventEmitter();
	        this.select = new core_1.EventEmitter();
	        this.unselect = new core_1.EventEmitter();
	        this.mouseOver = new core_1.EventEmitter();
	        this.mouseOut = new core_1.EventEmitter();
	        this.update = new core_1.EventEmitter();
	    }
	    return ChartPointComponent;
	}());
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartPointComponent.prototype, "click", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartPointComponent.prototype, "remove", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartPointComponent.prototype, "select", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartPointComponent.prototype, "unselect", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartPointComponent.prototype, "mouseOver", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartPointComponent.prototype, "mouseOut", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartPointComponent.prototype, "update", void 0);
	ChartPointComponent = __decorate([
	    core_1.Directive({
	        selector: 'point'
	    })
	], ChartPointComponent);
	exports.ChartPointComponent = ChartPointComponent;
	//# sourceMappingURL=ChartPointComponent.js.map

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(4);
	var ChartXAxisComponent = (function () {
	    function ChartXAxisComponent() {
	        this.afterBreaks = new core_1.EventEmitter();
	        this.afterSetExtremes = new core_1.EventEmitter();
	        this.pointBreak = new core_1.EventEmitter();
	        this.pointInBreak = new core_1.EventEmitter();
	        this.setExtremes = new core_1.EventEmitter();
	    }
	    return ChartXAxisComponent;
	}());
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartXAxisComponent.prototype, "afterBreaks", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartXAxisComponent.prototype, "afterSetExtremes", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartXAxisComponent.prototype, "pointBreak", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartXAxisComponent.prototype, "pointInBreak", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartXAxisComponent.prototype, "setExtremes", void 0);
	ChartXAxisComponent = __decorate([
	    core_1.Directive({
	        selector: 'xAxis'
	    })
	], ChartXAxisComponent);
	exports.ChartXAxisComponent = ChartXAxisComponent;
	//# sourceMappingURL=ChartXAxisComponent.js.map

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(4);
	var ChartYAxisComponent = (function () {
	    function ChartYAxisComponent() {
	        this.afterBreaks = new core_1.EventEmitter();
	        this.afterSetExtremes = new core_1.EventEmitter();
	        this.pointBreak = new core_1.EventEmitter();
	        this.pointInBreak = new core_1.EventEmitter();
	        this.setExtremes = new core_1.EventEmitter();
	    }
	    return ChartYAxisComponent;
	}());
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartYAxisComponent.prototype, "afterBreaks", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartYAxisComponent.prototype, "afterSetExtremes", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartYAxisComponent.prototype, "pointBreak", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartYAxisComponent.prototype, "pointInBreak", void 0);
	__decorate([
	    core_1.Output(),
	    __metadata("design:type", Object)
	], ChartYAxisComponent.prototype, "setExtremes", void 0);
	ChartYAxisComponent = __decorate([
	    core_1.Directive({
	        selector: 'yAxis'
	    })
	], ChartYAxisComponent);
	exports.ChartYAxisComponent = ChartYAxisComponent;
	//# sourceMappingURL=ChartYAxisComponent.js.map

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var index_1 = __webpack_require__(36);
	var core_1 = __webpack_require__(4);
	var HighchartsService = (function () {
	    function HighchartsService() {
	    }
	    HighchartsService.prototype.getHighchartsStatic = function () {
	        return index_1.getHighchartsStatic();
	    };
	    return HighchartsService;
	}());
	HighchartsService = __decorate([
	    core_1.Injectable()
	], HighchartsService);
	exports.HighchartsService = HighchartsService;
	//# sourceMappingURL=HighchartsService.js.map

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var deepAssign_1 = __webpack_require__(44);
	function initChart(highchartsService, userOpts, baseOpts, type) {
	    var Highcharts = highchartsService.getHighchartsStatic();
	    if (!Highcharts) {
	        throw new Error('Base Highcharts module should be set via ChartModule.init');
	    }
	    if (!Highcharts[type]) {
	        throw new Error(type + " is unknown chart type.");
	    }
	    if (Array.isArray(userOpts.xAxis)) {
	        baseOpts.xAxis = [baseOpts.xAxis];
	    }
	    if (Array.isArray(userOpts.yAxis)) {
	        baseOpts.yAxis = [baseOpts.yAxis];
	    }
	    var opts = deepAssign_1.deepAssign({}, baseOpts, userOpts);
	    return new Highcharts[type](opts);
	}
	exports.initChart = initChart;
	//# sourceMappingURL=initChart.js.map

/***/ },
/* 44 */
/***/ function(module, exports) {

	"use strict";
	var isObj = function (x) {
	    var type = typeof x;
	    return x !== null && (type === 'object' || type === 'function');
	};
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	function toObject(val) {
	    if (val === null || val === undefined) {
	        throw new TypeError('Sources cannot be null or undefined');
	    }
	    return Object(val);
	}
	function assignKey(to, from, key) {
	    var val = from[key];
	    if (val === undefined || val === null) {
	        return;
	    }
	    if (hasOwnProperty.call(to, key)) {
	        if (to[key] === undefined || to[key] === null) {
	            throw new TypeError('Cannot convert undefined or null to object (' + key + ')');
	        }
	    }
	    if (!hasOwnProperty.call(to, key) || !isObj(val)) {
	        to[key] = val;
	    }
	    else {
	        to[key] = assign(Object(to[key]), from[key]);
	    }
	}
	function assign(to, from) {
	    if (to === from) {
	        return to;
	    }
	    from = Object(from);
	    for (var key in from) {
	        if (hasOwnProperty.call(from, key)) {
	            assignKey(to, from, key);
	        }
	    }
	    return to;
	}
	function deepAssign(target) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    target = toObject(target);
	    for (var s = 0; s < args.length; s++) {
	        assign(target, args[s]);
	    }
	    return target;
	}
	exports.deepAssign = deepAssign;
	//# sourceMappingURL=deepAssign.js.map

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ChartEvent_1 = __webpack_require__(46);
	var chartEvents = [
	    'addSeries',
	    'afterPrint',
	    'beforePrint',
	    'drilldown',
	    'drillup',
	    'load',
	    'redraw',
	    'selection'
	];
	var seriesEvents = [
	    'click',
	    'afterAnimate',
	    'checkboxClick',
	    'hide',
	    'legendItemClick',
	    'mouseOut',
	    'mouseOver',
	    'show'
	];
	var pointEvents = [
	    'click',
	    'remove',
	    'select',
	    'unselect',
	    'mouseOut',
	    'mouseOver',
	    'update'
	];
	var xAxisEvents = [
	    'afterBreaks',
	    'afterSetExtremes',
	    'pointBreak',
	    'pointInBreak',
	    'setExtremes'
	];
	var yAxisEvents = [
	    'afterBreaks',
	    'afterSetExtremes',
	    'pointBreak',
	    'pointInBreak',
	    'setExtremes'
	];
	function createBaseOpts(chartCmp, seriesCmp, pointCmp, xAxisCmp, yAxisCmp, element) {
	    var opts = {
	        chart: {
	            renderTo: element,
	            events: {}
	        },
	        plotOptions: {
	            series: {
	                events: {},
	                point: {
	                    events: {}
	                }
	            }
	        },
	        xAxis: {
	            events: {}
	        },
	        yAxis: {
	            events: {}
	        }
	    };
	    chartEvents.forEach(function (eventName) {
	        opts.chart.events[eventName] = opts.chart.events[eventName] || function (event) {
	            chartCmp[eventName].emit(new ChartEvent_1.ChartEvent(event, this));
	        };
	    });
	    if (seriesCmp) {
	        seriesEvents.forEach(function (eventName) {
	            opts.plotOptions.series.events[eventName] = opts.plotOptions.series.events[eventName] || function (event) {
	                seriesCmp[eventName].emit(new ChartEvent_1.ChartEvent(event, this));
	            };
	        });
	    }
	    if (pointCmp) {
	        pointEvents.forEach(function (eventName) {
	            opts.plotOptions.series.point.events[eventName] = opts.plotOptions.series.point.events[eventName] || function (event) {
	                pointCmp[eventName].emit(new ChartEvent_1.ChartEvent(event, this));
	            };
	        });
	    }
	    if (xAxisCmp) {
	        xAxisEvents.forEach(function (eventName) {
	            opts.xAxis.events[eventName] = opts.xAxis.events[eventName] || function (event) {
	                xAxisCmp[eventName].emit(new ChartEvent_1.ChartEvent(event, this));
	            };
	        });
	    }
	    if (yAxisCmp) {
	        yAxisEvents.forEach(function (eventName) {
	            opts.yAxis.events[eventName] = opts.yAxis.events[eventName] || function (event) {
	                yAxisCmp[eventName].emit(new ChartEvent_1.ChartEvent(event, this));
	            };
	        });
	    }
	    return opts;
	}
	exports.createBaseOpts = createBaseOpts;
	//# sourceMappingURL=createBaseOpts.js.map

/***/ },
/* 46 */
/***/ function(module, exports) {

	"use strict";
	var ChartEvent = (function () {
	    function ChartEvent(event, context) {
	        this.originalEvent = event;
	        this.context = context;
	    }
	    return ChartEvent;
	}());
	exports.ChartEvent = ChartEvent;
	//# sourceMappingURL=ChartEvent.js.map

/***/ },
/* 47 */
/***/ function(module, exports) {

	/*
	 Highcharts JS v5.0.7 (2017-01-17)

	 3D features for Highcharts JS

	 @license: www.highcharts.com/license
	*/
	(function(F){"object"===typeof module&&module.exports?module.exports=F:F(Highcharts)})(function(F){(function(a){var r=a.deg2rad,k=a.pick;a.perspective=function(n,m,u){var p=m.options.chart.options3d,f=u?m.inverted:!1,g=m.plotWidth/2,q=m.plotHeight/2,d=p.depth/2,e=k(p.depth,1)*k(p.viewDistance,0),c=m.scale3d||1,b=r*p.beta*(f?-1:1),p=r*p.alpha*(f?-1:1),h=Math.cos(p),w=Math.cos(-b),y=Math.sin(p),z=Math.sin(-b);u||(g+=m.plotLeft,q+=m.plotTop);return a.map(n,function(b){var a,p;p=(f?b.y:b.x)-g;var m=(f?
	b.x:b.y)-q,k=(b.z||0)-d;a=w*p-z*k;b=-y*z*p+h*m-w*y*k;p=h*z*p+y*m+h*w*k;m=0<e&&e<Number.POSITIVE_INFINITY?e/(p+d+e):1;a=a*m*c+g;b=b*m*c+q;return{x:f?b:a,y:f?a:b,z:p*c+d}})};a.pointCameraDistance=function(a,m){var n=m.options.chart.options3d,p=m.plotWidth/2;m=m.plotHeight/2;n=k(n.depth,1)*k(n.viewDistance,0)+n.depth;return Math.sqrt(Math.pow(p-a.plotX,2)+Math.pow(m-a.plotY,2)+Math.pow(n-a.plotZ,2))}})(F);(function(a){function r(b){var c=0,l,x;for(l=0;l<b.length;l++)x=(l+1)%b.length,c+=b[l].x*b[x].y-
	b[x].x*b[l].y;return c/2}function k(b){var c=0,l;for(l=0;l<b.length;l++)c+=b[l].z;return b.length?c/b.length:0}function n(b,c,l,x,a,h,d,e){var D=[],f=h-a;return h>a&&h-a>Math.PI/2+.0001?(D=D.concat(n(b,c,l,x,a,a+Math.PI/2,d,e)),D=D.concat(n(b,c,l,x,a+Math.PI/2,h,d,e))):h<a&&a-h>Math.PI/2+.0001?(D=D.concat(n(b,c,l,x,a,a-Math.PI/2,d,e)),D=D.concat(n(b,c,l,x,a-Math.PI/2,h,d,e))):["C",b+l*Math.cos(a)-l*t*f*Math.sin(a)+d,c+x*Math.sin(a)+x*t*f*Math.cos(a)+e,b+l*Math.cos(h)+l*t*f*Math.sin(h)+d,c+x*Math.sin(h)-
	x*t*f*Math.cos(h)+e,b+l*Math.cos(h)+d,c+x*Math.sin(h)+e]}var m=Math.cos,u=Math.PI,p=Math.sin,f=a.animObject,g=a.charts,q=a.color,d=a.defined,e=a.deg2rad,c=a.each,b=a.extend,h=a.inArray,w=a.map,y=a.merge,z=a.perspective,G=a.pick,B=a.SVGElement,H=a.SVGRenderer,C=a.wrap,t=4*(Math.sqrt(2)-1)/3/(u/2);H.prototype.toLinePath=function(b,a){var h=[];c(b,function(b){h.push("L",b.x,b.y)});b.length&&(h[0]="M",a&&h.push("Z"));return h};H.prototype.cuboid=function(b){var c=this.g(),h=c.destroy;b=this.cuboidPath(b);
	c.attr({"stroke-linejoin":"round"});c.front=this.path(b[0]).attr({"class":"highcharts-3d-front",zIndex:b[3]}).add(c);c.top=this.path(b[1]).attr({"class":"highcharts-3d-top",zIndex:b[4]}).add(c);c.side=this.path(b[2]).attr({"class":"highcharts-3d-side",zIndex:b[5]}).add(c);c.fillSetter=function(b){this.front.attr({fill:b});this.top.attr({fill:q(b).brighten(.1).get()});this.side.attr({fill:q(b).brighten(-.1).get()});this.color=b;return this};c.opacitySetter=function(b){this.front.attr({opacity:b});
	this.top.attr({opacity:b});this.side.attr({opacity:b});return this};c.attr=function(b){if(b.shapeArgs||d(b.x))b=this.renderer.cuboidPath(b.shapeArgs||b),this.front.attr({d:b[0],zIndex:b[3]}),this.top.attr({d:b[1],zIndex:b[4]}),this.side.attr({d:b[2],zIndex:b[5]});else return a.SVGElement.prototype.attr.call(this,b);return this};c.animate=function(b,c,a){d(b.x)&&d(b.y)?(b=this.renderer.cuboidPath(b),this.front.attr({zIndex:b[3]}).animate({d:b[0]},c,a),this.top.attr({zIndex:b[4]}).animate({d:b[1]},
	c,a),this.side.attr({zIndex:b[5]}).animate({d:b[2]},c,a),this.attr({zIndex:-b[6]})):b.opacity?(this.front.animate(b,c,a),this.top.animate(b,c,a),this.side.animate(b,c,a)):B.prototype.animate.call(this,b,c,a);return this};c.destroy=function(){this.front.destroy();this.top.destroy();this.side.destroy();return h.call(this)};c.attr({zIndex:-b[6]});return c};H.prototype.cuboidPath=function(b){function c(b){return q[b]}var a=b.x,h=b.y,d=b.z,e=b.height,D=b.width,f=b.depth,q=[{x:a,y:h,z:d},{x:a+D,y:h,z:d},
	{x:a+D,y:h+e,z:d},{x:a,y:h+e,z:d},{x:a,y:h+e,z:d+f},{x:a+D,y:h+e,z:d+f},{x:a+D,y:h,z:d+f},{x:a,y:h,z:d+f}],q=z(q,g[this.chartIndex],b.insidePlotArea),d=function(b,a){var h=[];b=w(b,c);a=w(a,c);0>r(b)?h=b:0>r(a)&&(h=a);return h};b=d([3,2,1,0],[7,6,5,4]);a=[4,5,2,3];h=d([1,6,7,0],a);d=d([1,2,5,6],[0,7,4,3]);return[this.toLinePath(b,!0),this.toLinePath(h,!0),this.toLinePath(d,!0),k(b),k(h),k(d),9E9*k(w(a,c))]};a.SVGRenderer.prototype.arc3d=function(a){function d(b){var a=!1,c={},d;for(d in b)-1!==h(d,
	p)&&(c[d]=b[d],delete b[d],a=!0);return a?c:!1}var l=this.g(),x=l.renderer,p="x y r innerR start end".split(" ");a=y(a);a.alpha*=e;a.beta*=e;l.top=x.path();l.side1=x.path();l.side2=x.path();l.inn=x.path();l.out=x.path();l.onAdd=function(){var b=l.parentGroup,a=l.attr("class");l.top.add(l);c(["out","inn","side1","side2"],function(c){l[c].addClass(a+" highcharts-3d-side").add(b)})};l.setPaths=function(b){var a=l.renderer.arc3dPath(b),c=100*a.zTop;l.attribs=b;l.top.attr({d:a.top,zIndex:a.zTop});l.inn.attr({d:a.inn,
	zIndex:a.zInn});l.out.attr({d:a.out,zIndex:a.zOut});l.side1.attr({d:a.side1,zIndex:a.zSide1});l.side2.attr({d:a.side2,zIndex:a.zSide2});l.zIndex=c;l.attr({zIndex:c});b.center&&(l.top.setRadialReference(b.center),delete b.center)};l.setPaths(a);l.fillSetter=function(b){var a=q(b).brighten(-.1).get();this.fill=b;this.side1.attr({fill:a});this.side2.attr({fill:a});this.inn.attr({fill:a});this.out.attr({fill:a});this.top.attr({fill:b});return this};c(["opacity","translateX","translateY","visibility"],
	function(b){l[b+"Setter"]=function(b,a){l[a]=b;c(["out","inn","side1","side2","top"],function(c){l[c].attr(a,b)})}});C(l,"attr",function(a,c){var h;"object"===typeof c&&(h=d(c))&&(b(l.attribs,h),l.setPaths(l.attribs));return a.apply(this,[].slice.call(arguments,1))});C(l,"animate",function(b,a,c,h){var l,e=this.attribs,q;delete a.center;delete a.z;delete a.depth;delete a.alpha;delete a.beta;q=f(G(c,this.renderer.globalAnimation));q.duration&&(a=y(a),l=d(a),a.dummy=1,l&&(q.step=function(b,a){function c(b){return e[b]+
	(G(l[b],e[b])-e[b])*a.pos}"dummy"===a.prop&&a.elem.setPaths(y(e,{x:c("x"),y:c("y"),r:c("r"),innerR:c("innerR"),start:c("start"),end:c("end")}))}),c=q);return b.call(this,a,c,h)});l.destroy=function(){this.top.destroy();this.out.destroy();this.inn.destroy();this.side1.destroy();this.side2.destroy();B.prototype.destroy.call(this)};l.hide=function(){this.top.hide();this.out.hide();this.inn.hide();this.side1.hide();this.side2.hide()};l.show=function(){this.top.show();this.out.show();this.inn.show();this.side1.show();
	this.side2.show()};return l};H.prototype.arc3dPath=function(b){function a(b){b%=2*Math.PI;b>Math.PI&&(b=2*Math.PI-b);return b}var c=b.x,h=b.y,d=b.start,e=b.end-.00001,f=b.r,q=b.innerR,w=b.depth,g=b.alpha,k=b.beta,y=Math.cos(d),r=Math.sin(d);b=Math.cos(e);var z=Math.sin(e),v=f*Math.cos(k),f=f*Math.cos(g),t=q*Math.cos(k),C=q*Math.cos(g),q=w*Math.sin(k),A=w*Math.sin(g),w=["M",c+v*y,h+f*r],w=w.concat(n(c,h,v,f,d,e,0,0)),w=w.concat(["L",c+t*b,h+C*z]),w=w.concat(n(c,h,t,C,e,d,0,0)),w=w.concat(["Z"]),G=
	0<k?Math.PI/2:0,k=0<g?0:Math.PI/2,G=d>-G?d:e>-G?-G:d,E=e<u-k?e:d<u-k?u-k:e,B=2*u-k,g=["M",c+v*m(G),h+f*p(G)],g=g.concat(n(c,h,v,f,G,E,0,0));e>B&&d<B?(g=g.concat(["L",c+v*m(E)+q,h+f*p(E)+A]),g=g.concat(n(c,h,v,f,E,B,q,A)),g=g.concat(["L",c+v*m(B),h+f*p(B)]),g=g.concat(n(c,h,v,f,B,e,0,0)),g=g.concat(["L",c+v*m(e)+q,h+f*p(e)+A]),g=g.concat(n(c,h,v,f,e,B,q,A)),g=g.concat(["L",c+v*m(B),h+f*p(B)]),g=g.concat(n(c,h,v,f,B,E,0,0))):e>u-k&&d<u-k&&(g=g.concat(["L",c+v*Math.cos(E)+q,h+f*Math.sin(E)+A]),g=g.concat(n(c,
	h,v,f,E,e,q,A)),g=g.concat(["L",c+v*Math.cos(e),h+f*Math.sin(e)]),g=g.concat(n(c,h,v,f,e,E,0,0)));g=g.concat(["L",c+v*Math.cos(E)+q,h+f*Math.sin(E)+A]);g=g.concat(n(c,h,v,f,E,G,q,A));g=g.concat(["Z"]);k=["M",c+t*y,h+C*r];k=k.concat(n(c,h,t,C,d,e,0,0));k=k.concat(["L",c+t*Math.cos(e)+q,h+C*Math.sin(e)+A]);k=k.concat(n(c,h,t,C,e,d,q,A));k=k.concat(["Z"]);y=["M",c+v*y,h+f*r,"L",c+v*y+q,h+f*r+A,"L",c+t*y+q,h+C*r+A,"L",c+t*y,h+C*r,"Z"];c=["M",c+v*b,h+f*z,"L",c+v*b+q,h+f*z+A,"L",c+t*b+q,h+C*z+A,"L",c+t*
	b,h+C*z,"Z"];z=Math.atan2(A,-q);h=Math.abs(e+z);b=Math.abs(d+z);d=Math.abs((d+e)/2+z);h=a(h);b=a(b);d=a(d);d*=1E5;e=1E5*b;h*=1E5;return{top:w,zTop:1E5*Math.PI+1,out:g,zOut:Math.max(d,e,h),inn:k,zInn:Math.max(d,e,h),side1:y,zSide1:.99*h,side2:c,zSide2:.99*e}}})(F);(function(a){function r(a,d){var e=a.plotLeft,c=a.plotWidth+e,b=a.plotTop,h=a.plotHeight+b,f=e+a.plotWidth/2,g=b+a.plotHeight/2,q=Number.MAX_VALUE,k=-Number.MAX_VALUE,p=Number.MAX_VALUE,m=-Number.MAX_VALUE,r,t=1;r=[{x:e,y:b,z:0},{x:e,y:b,
	z:d}];n([0,1],function(b){r.push({x:c,y:r[b].y,z:r[b].z})});n([0,1,2,3],function(b){r.push({x:r[b].x,y:h,z:r[b].z})});r=u(r,a,!1);n(r,function(b){q=Math.min(q,b.x);k=Math.max(k,b.x);p=Math.min(p,b.y);m=Math.max(m,b.y)});e>q&&(t=Math.min(t,1-Math.abs((e+f)/(q+f))%1));c<k&&(t=Math.min(t,(c-f)/(k-f)));b>p&&(t=0>p?Math.min(t,(b+g)/(-p+b+g)):Math.min(t,1-(b+g)/(p+g)%1));h<m&&(t=Math.min(t,Math.abs((h-g)/(m-g))));return t}var k=a.Chart,n=a.each,m=a.merge,u=a.perspective,p=a.pick,f=a.wrap;k.prototype.is3d=
	function(){return this.options.chart.options3d&&this.options.chart.options3d.enabled};k.prototype.propsRequireDirtyBox.push("chart.options3d");k.prototype.propsRequireUpdateSeries.push("chart.options3d");a.wrap(a.Chart.prototype,"isInsidePlot",function(a){return this.is3d()||a.apply(this,[].slice.call(arguments,1))});var g=a.getOptions();m(!0,g,{chart:{options3d:{enabled:!1,alpha:0,beta:0,depth:100,fitToPlot:!0,viewDistance:25,frame:{bottom:{size:1},side:{size:1},back:{size:1}}}}});f(k.prototype,
	"setClassName",function(a){a.apply(this,[].slice.call(arguments,1));this.is3d()&&(this.container.className+=" highcharts-3d-chart")});a.wrap(a.Chart.prototype,"setChartSize",function(a){var d=this.options.chart.options3d;a.apply(this,[].slice.call(arguments,1));if(this.is3d()){var e=this.inverted,c=this.clipBox,b=this.margin;c[e?"y":"x"]=-(b[3]||0);c[e?"x":"y"]=-(b[0]||0);c[e?"height":"width"]=this.chartWidth+(b[3]||0)+(b[1]||0);c[e?"width":"height"]=this.chartHeight+(b[0]||0)+(b[2]||0);this.scale3d=
	1;!0===d.fitToPlot&&(this.scale3d=r(this,d.depth))}});f(k.prototype,"redraw",function(a){this.is3d()&&(this.isDirtyBox=!0);a.apply(this,[].slice.call(arguments,1))});f(k.prototype,"renderSeries",function(a){var d=this.series.length;if(this.is3d())for(;d--;)a=this.series[d],a.translate(),a.render();else a.call(this)});k.prototype.retrieveStacks=function(a){var d=this.series,e={},c,b=1;n(this.series,function(h){c=p(h.options.stack,a?0:d.length-1-h.index);e[c]?e[c].series.push(h):(e[c]={series:[h],position:b},
	b++)});e.totalStacks=b+1;return e}})(F);(function(a){var r,k=a.Axis,n=a.Chart,m=a.each,u=a.extend,p=a.merge,f=a.perspective,g=a.pick,q=a.splat,d=a.Tick,e=a.wrap;e(k.prototype,"setOptions",function(a,b){a.call(this,b);this.chart.is3d()&&(a=this.options,a.tickWidth=g(a.tickWidth,0),a.gridLineWidth=g(a.gridLineWidth,1))});e(k.prototype,"render",function(a){a.apply(this,[].slice.call(arguments,1));if(this.chart.is3d()){var b=this.chart,c=b.renderer,d=b.options.chart.options3d,e=d.frame,f=e.bottom,g=e.back,
	e=e.side,k=d.depth,q=this.height,p=this.width,m=this.left,n=this.top;this.isZAxis||(this.horiz?(g={x:m,y:n+(b.xAxis[0].opposite?-f.size:q),z:0,width:p,height:f.size,depth:k,insidePlotArea:!1},this.bottomFrame?this.bottomFrame.animate(g):(this.bottomFrame=c.cuboid(g).attr({"class":"highcharts-3d-frame highcharts-3d-frame-bottom",zIndex:b.yAxis[0].reversed&&0<d.alpha?4:-1}).add(),this.bottomFrame.attr({fill:f.color||"none",stroke:f.color||"none"}))):(d={x:m+(b.yAxis[0].opposite?0:-e.size),y:n+(b.xAxis[0].opposite?
	-f.size:0),z:k,width:p+e.size,height:q+f.size,depth:g.size,insidePlotArea:!1},this.backFrame?this.backFrame.animate(d):(this.backFrame=c.cuboid(d).attr({"class":"highcharts-3d-frame highcharts-3d-frame-back",zIndex:-3}).add(),this.backFrame.attr({fill:g.color||"none",stroke:g.color||"none"})),b={x:m+(b.yAxis[0].opposite?p:-e.size),y:n+(b.xAxis[0].opposite?-f.size:0),z:0,width:e.size,height:q+f.size,depth:k,insidePlotArea:!1},this.sideFrame?this.sideFrame.animate(b):(this.sideFrame=c.cuboid(b).attr({"class":"highcharts-3d-frame highcharts-3d-frame-side",
	zIndex:-2}).add(),this.sideFrame.attr({fill:e.color||"none",stroke:e.color||"none"}))))}});e(k.prototype,"getPlotLinePath",function(a){var b=a.apply(this,[].slice.call(arguments,1));if(!this.chart.is3d()||null===b)return b;var c=this.chart,d=c.options.chart.options3d,c=this.isZAxis?c.plotWidth:d.depth,d=this.opposite;this.horiz&&(d=!d);b=[this.swapZ({x:b[1],y:b[2],z:d?c:0}),this.swapZ({x:b[1],y:b[2],z:c}),this.swapZ({x:b[4],y:b[5],z:c}),this.swapZ({x:b[4],y:b[5],z:d?0:c})];b=f(b,this.chart,!1);return b=
	this.chart.renderer.toLinePath(b,!1)});e(k.prototype,"getLinePath",function(a){return this.chart.is3d()?[]:a.apply(this,[].slice.call(arguments,1))});e(k.prototype,"getPlotBandPath",function(a){if(!this.chart.is3d())return a.apply(this,[].slice.call(arguments,1));var b=arguments,c=b[1],b=this.getPlotLinePath(b[2]);(c=this.getPlotLinePath(c))&&b?c.push("L",b[10],b[11],"L",b[7],b[8],"L",b[4],b[5],"L",b[1],b[2]):c=null;return c});e(d.prototype,"getMarkPath",function(a){var b=a.apply(this,[].slice.call(arguments,
	1));if(!this.axis.chart.is3d())return b;b=[this.axis.swapZ({x:b[1],y:b[2],z:0}),this.axis.swapZ({x:b[4],y:b[5],z:0})];b=f(b,this.axis.chart,!1);return b=["M",b[0].x,b[0].y,"L",b[1].x,b[1].y]});e(d.prototype,"getLabelPosition",function(a){var b=a.apply(this,[].slice.call(arguments,1));this.axis.chart.is3d()&&(b=f([this.axis.swapZ({x:b.x,y:b.y,z:0})],this.axis.chart,!1)[0]);return b});a.wrap(k.prototype,"getTitlePosition",function(a){var b=this.chart.is3d(),c,d;b&&(d=this.axisTitleMargin,this.axisTitleMargin=
	0);c=a.apply(this,[].slice.call(arguments,1));b&&(c=f([this.swapZ({x:c.x,y:c.y,z:0})],this.chart,!1)[0],c[this.horiz?"y":"x"]+=(this.horiz?1:-1)*(this.opposite?-1:1)*d,this.axisTitleMargin=d);return c});e(k.prototype,"drawCrosshair",function(a){var b=arguments;this.chart.is3d()&&b[2]&&(b[2]={plotX:b[2].plotXold||b[2].plotX,plotY:b[2].plotYold||b[2].plotY});a.apply(this,[].slice.call(b,1))});e(k.prototype,"destroy",function(a){m(["backFrame","bottomFrame","sideFrame"],function(b){this[b]&&(this[b]=
	this[b].destroy())},this);a.apply(this,[].slice.call(arguments,1))});k.prototype.swapZ=function(a,b){if(this.isZAxis){b=b?0:this.chart.plotLeft;var c=this.chart;return{x:b+(c.yAxis[0].opposite?a.z:c.xAxis[0].width-a.z),y:a.y,z:a.x-b}}return a};r=a.ZAxis=function(){this.isZAxis=!0;this.init.apply(this,arguments)};u(r.prototype,k.prototype);u(r.prototype,{setOptions:function(a){a=p({offset:0,lineWidth:0},a);k.prototype.setOptions.call(this,a);this.coll="zAxis"},setAxisSize:function(){k.prototype.setAxisSize.call(this);
	this.width=this.len=this.chart.options.chart.options3d.depth;this.right=this.chart.chartWidth-this.width-this.left},getSeriesExtremes:function(){var a=this,b=a.chart;a.hasVisibleSeries=!1;a.dataMin=a.dataMax=a.ignoreMinPadding=a.ignoreMaxPadding=null;a.buildStacks&&a.buildStacks();m(a.series,function(c){if(c.visible||!b.options.chart.ignoreHiddenSeries)a.hasVisibleSeries=!0,c=c.zData,c.length&&(a.dataMin=Math.min(g(a.dataMin,c[0]),Math.min.apply(null,c)),a.dataMax=Math.max(g(a.dataMax,c[0]),Math.max.apply(null,
	c)))})}});e(n.prototype,"getAxes",function(a){var b=this,c=this.options,c=c.zAxis=q(c.zAxis||{});a.call(this);b.is3d()&&(this.zAxis=[],m(c,function(a,c){a.index=c;a.isX=!0;(new r(b,a)).setScale()}))})})(F);(function(a){function r(a){var d=a.apply(this,[].slice.call(arguments,1));this.chart.is3d()&&(d.stroke=this.options.edgeColor||d.fill,d["stroke-width"]=u(this.options.edgeWidth,1));return d}function k(a){if(this.chart.is3d()){var d=this.chart.options.plotOptions.column.grouping;void 0===d||d||void 0===
	this.group.zIndex||this.zIndexSet||(this.group.attr({zIndex:10*this.group.zIndex}),this.zIndexSet=!0)}a.apply(this,[].slice.call(arguments,1))}var n=a.each,m=a.perspective,u=a.pick,p=a.Series,f=a.seriesTypes,g=a.svg;a=a.wrap;a(f.column.prototype,"translate",function(a){a.apply(this,[].slice.call(arguments,1));if(this.chart.is3d()){var d=this.chart,e=this.options,c=e.depth||25,b=(e.stacking?e.stack||0:this._i)*(c+(e.groupZPadding||1));!1!==e.grouping&&(b=0);b+=e.groupZPadding||1;n(this.data,function(a){if(null!==
	a.y){var e=a.shapeArgs,h=a.tooltipPos;a.shapeType="cuboid";e.z=b;e.depth=c;e.insidePlotArea=!0;h=m([{x:h[0],y:h[1],z:b}],d,!0)[0];a.tooltipPos=[h.x,h.y]}});this.z=b}});a(f.column.prototype,"animate",function(a){if(this.chart.is3d()){var d=arguments[1],e=this.yAxis,c=this,b=this.yAxis.reversed;g&&(d?n(c.data,function(a){null!==a.y&&(a.height=a.shapeArgs.height,a.shapey=a.shapeArgs.y,a.shapeArgs.height=1,b||(a.shapeArgs.y=a.stackY?a.plotY+e.translate(a.stackY):a.plotY+(a.negative?-a.height:a.height)))}):
	(n(c.data,function(a){null!==a.y&&(a.shapeArgs.height=a.height,a.shapeArgs.y=a.shapey,a.graphic&&a.graphic.animate(a.shapeArgs,c.options.animation))}),this.drawDataLabels(),c.animate=null))}else a.apply(this,[].slice.call(arguments,1))});a(f.column.prototype,"init",function(a){a.apply(this,[].slice.call(arguments,1));if(this.chart.is3d()){var d=this.options,e=d.grouping,c=d.stacking,b=u(this.yAxis.options.reversedStacks,!0),f=0;if(void 0===e||e){e=this.chart.retrieveStacks(c);f=d.stack||0;for(c=0;c<
	e[f].series.length&&e[f].series[c]!==this;c++);f=10*(e.totalStacks-e[f].position)+(b?c:-c);this.xAxis.reversed||(f=10*e.totalStacks-f)}d.zIndex=f}});a(f.column.prototype,"pointAttribs",r);f.columnrange&&a(f.columnrange.prototype,"pointAttribs",r);a(p.prototype,"alignDataLabel",function(a){if(this.chart.is3d()&&("column"===this.type||"columnrange"===this.type)){var d=arguments[4],e={x:d.x,y:d.y,z:this.z},e=m([e],this.chart,!0)[0];d.x=e.x;d.y=e.y}a.apply(this,[].slice.call(arguments,1))});f.columnrange&&
	a(f.columnrange.prototype,"drawPoints",k);a(f.column.prototype,"drawPoints",k)})(F);(function(a){var r=a.deg2rad,k=a.each,n=a.pick,m=a.seriesTypes,u=a.svg;a=a.wrap;a(m.pie.prototype,"translate",function(a){a.apply(this,[].slice.call(arguments,1));if(this.chart.is3d()){var f=this,g=f.options,p=g.depth||0,d=f.chart.options.chart.options3d,e=d.alpha,c=d.beta,b=g.stacking?(g.stack||0)*p:f._i*p,b=b+p/2;!1!==g.grouping&&(b=0);k(f.data,function(a){var d=a.shapeArgs;a.shapeType="arc3d";d.z=b;d.depth=.75*
	p;d.alpha=e;d.beta=c;d.center=f.center;d=(d.end+d.start)/2;a.slicedTranslation={translateX:Math.round(Math.cos(d)*g.slicedOffset*Math.cos(e*r)),translateY:Math.round(Math.sin(d)*g.slicedOffset*Math.cos(e*r))}})}});a(m.pie.prototype.pointClass.prototype,"haloPath",function(a){var f=arguments;return this.series.chart.is3d()?[]:a.call(this,f[1])});a(m.pie.prototype,"pointAttribs",function(a,f,g){a=a.call(this,f,g);g=this.options;this.chart.is3d()&&(a.stroke=g.edgeColor||f.color||this.color,a["stroke-width"]=
	n(g.edgeWidth,1));return a});a(m.pie.prototype,"drawPoints",function(a){a.apply(this,[].slice.call(arguments,1));this.chart.is3d()&&k(this.points,function(a){var f=a.graphic;if(f)f[a.y&&a.visible?"show":"hide"]()})});a(m.pie.prototype,"drawDataLabels",function(a){if(this.chart.is3d()){var f=this.chart.options.chart.options3d;k(this.data,function(a){var g=a.shapeArgs,d=g.r,e=(g.start+g.end)/2,c=a.labelPos,b=-d*(1-Math.cos((g.alpha||f.alpha)*r))*Math.sin(e),h=d*(Math.cos((g.beta||f.beta)*r)-1)*Math.cos(e);
	k([0,2,4],function(a){c[a]+=h;c[a+1]+=b})})}a.apply(this,[].slice.call(arguments,1))});a(m.pie.prototype,"addPoint",function(a){a.apply(this,[].slice.call(arguments,1));this.chart.is3d()&&this.update(this.userOptions,!0)});a(m.pie.prototype,"animate",function(a){if(this.chart.is3d()){var f=arguments[1],g=this.options.animation,k=this.center,d=this.group,e=this.markerGroup;u&&(!0===g&&(g={}),f?(d.oldtranslateX=d.translateX,d.oldtranslateY=d.translateY,f={translateX:k[0],translateY:k[1],scaleX:.001,
	scaleY:.001},d.attr(f),e&&(e.attrSetters=d.attrSetters,e.attr(f))):(f={translateX:d.oldtranslateX,translateY:d.oldtranslateY,scaleX:1,scaleY:1},d.animate(f,g),e&&e.animate(f,g),this.animate=null))}else a.apply(this,[].slice.call(arguments,1))})})(F);(function(a){var r=a.perspective,k=a.pick,n=a.Point,m=a.seriesTypes,u=a.wrap;u(m.scatter.prototype,"translate",function(a){a.apply(this,[].slice.call(arguments,1));if(this.chart.is3d()){var f=this.chart,g=k(this.zAxis,f.options.zAxis[0]),m=[],d,e,c;for(c=
	0;c<this.data.length;c++)d=this.data[c],e=g.isLog&&g.val2lin?g.val2lin(d.z):d.z,d.plotZ=g.translate(e),d.isInside=d.isInside?e>=g.min&&e<=g.max:!1,m.push({x:d.plotX,y:d.plotY,z:d.plotZ});f=r(m,f,!0);for(c=0;c<this.data.length;c++)d=this.data[c],g=f[c],d.plotXold=d.plotX,d.plotYold=d.plotY,d.plotZold=d.plotZ,d.plotX=g.x,d.plotY=g.y,d.plotZ=g.z}});u(m.scatter.prototype,"init",function(a,f,g){f.is3d()&&(this.axisTypes=["xAxis","yAxis","zAxis"],this.pointArrayMap=["x","y","z"],this.parallelArrays=["x",
	"y","z"],this.directTouch=!0);a=a.apply(this,[f,g]);this.chart.is3d()&&(this.tooltipOptions.pointFormat=this.userOptions.tooltip?this.userOptions.tooltip.pointFormat||"x: \x3cb\x3e{point.x}\x3c/b\x3e\x3cbr/\x3ey: \x3cb\x3e{point.y}\x3c/b\x3e\x3cbr/\x3ez: \x3cb\x3e{point.z}\x3c/b\x3e\x3cbr/\x3e":"x: \x3cb\x3e{point.x}\x3c/b\x3e\x3cbr/\x3ey: \x3cb\x3e{point.y}\x3c/b\x3e\x3cbr/\x3ez: \x3cb\x3e{point.z}\x3c/b\x3e\x3cbr/\x3e");return a});u(m.scatter.prototype,"pointAttribs",function(k,f){var g=k.apply(this,
	[].slice.call(arguments,1));this.chart.is3d()&&f&&(g.zIndex=a.pointCameraDistance(f,this.chart));return g});u(n.prototype,"applyOptions",function(a){var f=a.apply(this,[].slice.call(arguments,1));this.series.chart.is3d()&&void 0===f.z&&(f.z=0);return f})})(F);(function(a){var r=a.Axis,k=a.SVGRenderer,n=a.VMLRenderer;n&&(a.setOptions({animate:!1}),n.prototype.cuboid=k.prototype.cuboid,n.prototype.cuboidPath=k.prototype.cuboidPath,n.prototype.toLinePath=k.prototype.toLinePath,n.prototype.createElement3D=
	k.prototype.createElement3D,n.prototype.arc3d=function(a){a=k.prototype.arc3d.call(this,a);a.css({zIndex:a.zIndex});return a},a.VMLRenderer.prototype.arc3dPath=a.SVGRenderer.prototype.arc3dPath,a.wrap(r.prototype,"render",function(a){a.apply(this,[].slice.call(arguments,1));this.sideFrame&&(this.sideFrame.css({zIndex:0}),this.sideFrame.front.attr({fill:this.sideFrame.color}));this.bottomFrame&&(this.bottomFrame.css({zIndex:1}),this.bottomFrame.front.attr({fill:this.bottomFrame.color}));this.backFrame&&
	(this.backFrame.css({zIndex:0}),this.backFrame.front.attr({fill:this.backFrame.color}))}))})(F)});


/***/ }
/******/ ]);